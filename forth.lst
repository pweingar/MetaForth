
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Tue Jan 24 17:51:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$a000					USERAREA = $a000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa	cc 0a				vnmi:       .word <>h_nmi
>fffc	00 b0				vreset:     .word <>boot
>fffe	cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
>0020					shell_start .word ?                 ; Address for the recognized shell program
>0022					cur_line    .word ?                 ; Address of the current line on the text screen
>0024					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200					curs_color  .byte ?                 ; Current color for printing
>0201					curs_x      .byte ?                 ; Current column for the text cursor
>0202					curs_y      .byte ?                 ; Current row for the text cursor
>0203					old_y       .byte ?                 ; Previous cursor row
>0204					curs_width  .byte ?                 ; Width of the screen in text columns
>0205					curs_height .byte ?                 ; Height of the screen in text columns
.b000	4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003	4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006	4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009	4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c	4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f	4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012	4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015	4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018	4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800	a9 ef		lda #$ef	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802	a0 15		ldy #$15	            ldy #>start
.0804	20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807	4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a					isetshell:
.080a	84 21		sty $21		            sty shell_start+1
.080c	85 20		sta $20		            sta shell_start
.080e	60		rts		            rts
.080f					iwarm:
.080f	78		sei		            sei                     ; Disable IRQs
.0810	d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811	a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813	9a		txs		            txs
.0814	a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816	85 01		sta $01		            sta MMU_IO_CTRL
.0818	20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b	20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e	20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821	6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824					inittext:
.0824	a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826	8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829	9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c	a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e	8d 04 02	sta $0204	            sta curs_width
.0831	a9 3c		lda #$3c	            lda #60
.0833	8d 05 02	sta $0205	            sta curs_height
.0836	a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838	8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b	a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d	8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840	a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842	8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845	a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847	8d 00 02	sta $0200	            sta curs_color
.084a	a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c	8d 03 02	sta $0203	            sta old_y
.084f	20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852	20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855	20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858	60		rts		            rts
.0859					initint:
.0859	a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b	8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e	a9 ff		lda #$ff	            lda #$ff
.0860	8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863	8d 60 d6	sta $d660	            sta INT_PEND_0
.0866	8d 61 d6	sta $d661	            sta INT_PEND_1
.0869	58		cli		            cli
.086a	60		rts		            rts
=$7f					CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b					initfont:
.086b	48		pha		            pha
.086c	da		phx		            phx
.086d	5a		phy		            phy
.086e	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870	48		pha		            pha
.0871	a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873	85 01		sta $01		            sta MMU_IO_CTRL
.0875	a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877	85 24		sta $24		            sta src_ptr
.0879	a9 0a		lda #$0a	            lda #>bios_font
.087b	85 25		sta $25		            sta src_ptr+1
.087d	a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f	85 26		sta $26		            sta dst_ptr
.0881	a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883	85 27		sta $27		            sta dst_ptr+1
.0885	a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887	a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889	b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b	91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d	c8		iny		            iny                     ; Move to the next byte
.088e	d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890	e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892	e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894	ca		dex		            dex                     ; Count down the pages moved
.0895	d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897	68		pla		            pla
.0898	85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a	7a		ply		            ply
.089b	fa		plx		            plx
.089c	68		pla		            pla
.089d	60		rts		            rts
=$f4					DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e					initlut:
.089e	48		pha		            pha
.089f	5a		phy		            phy
.08a0	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2	48		pha		            pha
.08a3	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5	85 01		sta $01		            sta MMU_IO_CTRL
.08a7	a0 00		ldy #$00	            ldy #0
.08a9	b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2	c8		iny		            iny
.08b3	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5	d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7	68		pla		            pla
.08b8	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba	7a		ply		            ply
.08bb	68		pla		            pla
.08bc	60		rts		            rts
>08bd	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd					consclr:
.08fd	48		pha		            pha
.08fe	da		phx		            phx
.08ff	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901	85 22		sta $22		            sta cur_line
.0903	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905	85 23		sta $23		            sta cur_line+1
.0907	a0 00		ldy #$00	            ldy #0
.0909	20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c	c8		iny		            iny                     ; Move to the next line
.090d	cc 05 02	cpy $0205	            cpy curs_height
.0910	f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913	a5 22		lda $22		            lda cur_line
.0915	6d 04 02	adc $0204	            adc curs_width
.0918	85 22		sta $22		            sta cur_line
.091a	a5 23		lda $23		            lda cur_line+1
.091c	69 00		adc #$00	            adc #0
.091e	85 23		sta $23		            sta cur_line+1
.0920	80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922	9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925	9c 02 02	stz $0202	            stz curs_y
.0928	20 2e 09	jsr $092e	            jsr cursset
.092b	fa		plx		            plx
.092c	68		pla		            pla
.092d	60		rts		            rts
.092e					cursset:
.092e	48		pha		            pha
.092f	5a		phy		            phy
.0930	ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933	cd 04 02	cmp $0204	            cmp curs_width
.0936	90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938	9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b	ee 02 02	inc $0202	            inc curs_y
.093e					chk_row:
.093e	ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941	cd 05 02	cmp $0205	            cmp curs_height
.0944	90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946	ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949	3a		dec a		            dec a
.094a	8d 02 02	sta $0202	            sta curs_y
.094d	20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950	ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953	8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959	ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962	ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965	cd 02 02	cmp $0202	            cmp curs_y
.0968	f0 21		beq $098b	            beq done                ; Yes: we are done
.096a	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c	85 22		sta $22		            sta cur_line
.096e	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970	85 23		sta $23		            sta cur_line+1
.0972	ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975	8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978	f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a	18		clc		loop:       clc                     ; Move cur_line to the next line
.097b	a5 22		lda $22		            lda cur_line
.097d	6d 04 02	adc $0204	            adc curs_width
.0980	85 22		sta $22		            sta cur_line
.0982	a5 23		lda $23		            lda cur_line+1
.0984	69 00		adc #$00	            adc #0
.0986	85 23		sta $23		            sta cur_line+1
.0988	88		dey		            dey                     ; Decrement line counter
.0989	d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b	7a		ply		done:       ply
.098c	68		pla		            pla
.098d	60		rts		            rts
.098e					consscroll:
.098e	48		pha		            pha
.098f	da		phx		            phx
.0990	a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992	48		pha		            pha
.0993	a5 22		lda $22		            lda cur_line
.0995	48		pha		            pha
.0996	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998	48		pha		            pha
.0999	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b	85 26		sta $26		            sta dst_ptr
.099d	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f	85 27		sta $27		            sta dst_ptr+1
.09a1	18		clc		            clc                     ; src_ptr is the second line
.09a2	a5 26		lda $26		            lda dst_ptr
.09a4	6d 04 02	adc $0204	            adc curs_width
.09a7	85 24		sta $24		            sta src_ptr
.09a9	a5 27		lda $27		            lda dst_ptr+1
.09ab	69 00		adc #$00	            adc #0
.09ad	85 25		sta $25		            sta src_ptr+1
.09af	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3	85 01		sta $01		            sta MMU_IO_CTRL
.09b5	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7	b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9	91 26		sta ($26),y	            sta (dst_ptr),y
.09bb	c8		iny		            iny
.09bc	cc 04 02	cpy $0204	            cpy curs_width
.09bf	d0 f6		bne $09b7	            bne loop1
.09c1	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3	85 01		sta $01		            sta MMU_IO_CTRL
.09c5	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7	b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9	91 26		sta ($26),y	            sta (dst_ptr),y
.09cb	c8		iny		            iny
.09cc	cc 04 02	cpy $0204	            cpy curs_width
.09cf	d0 f6		bne $09c7	            bne loop2
.09d1	a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3	85 26		sta $26		            sta dst_ptr
.09d5	a5 25		lda $25		            lda src_ptr+1
.09d7	85 27		sta $27		            sta dst_ptr+1
.09d9	18		clc		            clc                     ; Move src_ptr to the next line
.09da	a5 24		lda $24		            lda src_ptr
.09dc	6d 04 02	adc $0204	            adc curs_width
.09df	85 24		sta $24		            sta src_ptr
.09e1	a5 25		lda $25		            lda src_ptr+1
.09e3	69 00		adc #$00	            adc #0
.09e5	85 25		sta $25		            sta src_ptr+1
.09e7	e8		inx		            inx                     ; Move src line number to the next row
.09e8	ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb	d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed	a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef	85 22		sta $22		            sta cur_line
.09f1	a5 27		lda $27		            lda dst_ptr+1
.09f3	85 22		sta $22		            sta cur_line
.09f5	20 04 0a	jsr $0a04	            jsr clrline
.09f8	68		pla		            pla                     ; Restore the original I/O page
.09f9	85 01		sta $01		            sta MMU_IO_CTRL
.09fb	68		pla		            pla                     ; Restore the current line
.09fc	85 22		sta $22		            sta cur_line
.09fe	68		pla		            pla
.09ff	85 23		sta $23		            sta cur_line+1
.0a01	fa		plx		            plx
.0a02	68		pla		            pla
.0a03	60		rts		            rts
.0a04					clrline:
.0a04	48		pha		            pha
.0a05	5a		phy		            phy
.0a06	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08	48		pha		            pha
.0a09	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b	85 01		sta $01		            sta MMU_IO_CTRL
.0a0d	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f	a9 20		lda #$20	            lda #' '
.0a11	91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13	c8		iny		            iny
.0a14	cc 04 02	cpy $0204	            cpy curs_width
.0a17	d0 f8		bne $0a11	            bne loop1
.0a19	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b	85 01		sta $01		            sta MMU_IO_CTRL
.0a1d	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f	ad 00 02	lda $0200	            lda curs_color
.0a22	91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24	c8		iny		            iny
.0a25	cc 04 02	cpy $0204	            cpy curs_width
.0a28	d0 f8		bne $0a22	            bne loop2
.0a2a	68		pla		            pla                     ; Restore the original I/O page
.0a2b	85 01		sta $01		            sta MMU_IO_CTRL
.0a2d	7a		ply		            ply
.0a2e	68		pla		            pla
.0a2f	60		rts		            rts
.0a30					iconout:
.0a30	5a		phy		            phy
.0a31	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33	d0 0b		bne $0a40	            bne not_cr
.0a35	9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38	ee 02 02	inc $0202	            inc curs_y
.0a3b	20 2e 09	jsr $092e	            jsr cursset
.0a3e	80 44		bra $0a84	            bra done
.0a40	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42	d0 05		bne $0a49	            bne not_ff
.0a44	20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47	80 3b		bra $0a84	            bra done
.0a49	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b	d0 15		bne $0a62	            bne not_bs
.0a4d	ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50	f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52	3a		dec a		            dec a                   ; No: move it back one
.0a53	8d 01 02	sta $0201	            sta curs_x
.0a56	20 2e 09	jsr $092e	            jsr cursset
.0a59					bs_leftmost:
.0a59	a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60	80 22		bra $0a84	            bra done
.0a62	85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66	48		pha		            pha
.0a67	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69	85 01		sta $01		            sta MMU_IO_CTRL
.0a6b	a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74	85 01		sta $01		            sta MMU_IO_CTRL
.0a76	ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79	91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b	68		pla		            pla                     ; Restore the I/O page
.0a7c	85 01		sta $01		            sta MMU_IO_CTRL
.0a7e	ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81	20 2e 09	jsr $092e	            jsr cursset
.0a84	7a		ply		done:       ply
.0a85	60		rts		            rts
.0a86					iprintah:
.0a86	da		phx		            phx
.0a87	48		pha		            pha
.0a88	4a		lsr a		            lsr a
.0a89	4a		lsr a		            lsr a
.0a8a	4a		lsr a		            lsr a
.0a8b	4a		lsr a		            lsr a
.0a8c	29 0f		and #$0f	            and #$0f
.0a8e	aa		tax		            tax                     ; Convert it to an index
.0a8f	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95	68		pla		            pla
.0a96	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98	aa		tax		            tax                     ; Convert it to an index
.0a99	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f	fa		plx		            plx
.0aa0	60		rts		            rts
.0aa1					iprintyah:
.0aa1	48		pha		            pha
.0aa2	98		tya		            tya
.0aa3	20 12 b0	jsr $b012	            jsr printah
.0aa6	68		pla		            pla
.0aa7	20 12 b0	jsr $b012	            jsr printah
.0aaa	60		rts		            rts
>0aab	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3	38 39 41 42 43 44 45 46
.0abb					iprints:
.0abb	48		pha		            pha
.0abc	5a		phy		            phy
.0abd	a0 00		ldy #$00	            ldy #0
.0abf	b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1	f0 06		beq $0ac9	            beq done
.0ac3	20 09 b0	jsr $b009	            jsr conout
.0ac6	c8		iny		            iny
.0ac7	d0 f6		bne $0abf	            bne loop
.0ac9	7a		ply		done:       ply
.0aca	68		pla		            pla
.0acb	60		rts		            rts
.0acc					h_nmi:
.0acc	40		rti		            rti                     ; Just return
.0acd					h_irq:
.0acd	48		pha		            pha
.0ace	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0	48		pha		            pha
.0ad1	64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3	ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6	89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8	f0 03		beq $0add	            beq done                ; No: we're done
.0ada	20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add					done:
.0add	a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf	8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2	8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5	68		pla		            pla                     ; Restore the IO page settings
.0ae6	85 01		sta $01		            sta MMU_IO_CTRL
.0ae8	68		pla		            pla
.0ae9	40		rti		            rti                     ; Just return
>0aea	00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2	7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02	00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12	38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32	00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52	30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62	10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72	04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82	48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92	1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2	10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2	10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2	00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2	00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2	00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2	10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02	28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12	60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22	08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32	10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52	00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62	00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72	10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92	7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2	7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2	38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2	00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2	00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2	38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2	10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02	18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12	7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22	38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32	38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42	44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52	44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62	38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72	38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82	38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92	44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2	44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2	44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2	3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2	00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2	00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02	00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12	00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22	00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32	00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42	40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52	00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62	00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72	00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82	00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92	00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2	00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2	00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2	0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2	30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2	7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2	48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02	10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12	20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22	00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32	28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42	28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52	20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62	10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72	00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82	10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92	20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2	20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2	28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2	00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2	44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2	18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2	10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002	10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012	14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022	10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032	00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042	42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052	10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062	00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072	cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082	10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092	10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2	00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2	28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2	00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2	28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2	00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2	10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102	10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112	10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122	28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132	00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142	00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152	00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162	10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172	00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182	28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192	00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2	28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2	10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2	ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2	00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202	00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212	00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222	00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232	38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242	3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252	00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262	38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272	10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282	08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292	10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2	00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2	00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2	1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2	38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2	00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642					KBD_SCAN = $d642
=$d644					KBD_STAT = $d644
=$01					KBD_RDY = $01
=$01					KBD_ST_F0 = $01
=$02					KBD_ST_E0 = $02
=$80					KBD_SHIFT = $80
=$81					KBD_CTRL = $81
=$82					KBD_ALT = $82
=$83					KBD_OS = $83
=$84					KBD_CAP = $84
=$01					KBD_MOD_SHIFT = $01
=$02					KBD_MOD_CTRL = $02
=$04					KBD_MOD_ALT = $04
=$08					KBD_MOD_OS = $08
=$10					KBD_MOD_CAP = $10
=80					KBD_BUFFER_SIZE = 80
>0206					kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207					kbd_mods    .byte ?         ; The current state of the modifier keys
>0208					kbd_buffer  .fill 80        ; Keyboard buffer
>0258					kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea					initkbd:
.12ea	9c 06 02	stz $0206	            stz kbd_state
.12ed	9c 07 02	stz $0207	            stz kbd_mods
.12f0	9c 58 02	stz $0258	            stz kbd_head
.12f3	60		rts		            rts
.12f4					kbd_status:
.12f4	ad 58 02	lda $0258	            lda kbd_head
.12f7	f0 03		beq $12fc	            beq is_empty
.12f9	a9 01		lda #$01	            lda #1
.12fb	60		rts		            rts
.12fc					is_empty:
.12fc	60		rts		            rts
.12fd					kbd_enqueue:
.12fd	da		phx		            phx
.12fe	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301	e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303	b0 07		bcs $130c	            bge done
.1305	9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308	e8		inx		            inx
.1309	8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c					done:
.130c	fa		plx		            plx
.130d	60		rts		            rts
.130e					kbd_dequeue:
.130e	da		phx		            phx
.130f	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312	f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314	ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317	48		pha		            pha                     ; Save it temporarily to the stack
.1318	a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a					loop:
.131a	bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d	9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320	e8		inx		            inx                     ; Move to the next character
.1321	ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324	d0 f4		bne $131a	            bne loop
.1326	ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329	68		pla		            pla                     ; Get the character back and return
.132a	80 02		bra $132e	            bra done
.132c					is_empty:
.132c	a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e					done:
.132e	fa		plx		            plx
.132f	60		rts		            rts
.1330					handlekbd:
.1330	ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333	29 01		and #$01	            and #KBD_RDY
.1335	d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337	ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a	f0 08		beq $1344	            beq st_0        ; If base state...
.133c	c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e	f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340	9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343					done:
.1343	60		rts		            rts
.1344					st_0:
.1344	ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347	c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349	d0 07		bne $1352	            bne not_f0
.134b	a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d	8d 06 02	sta $0206	            sta kbd_state
.1350	80 f1		bra $1343	            bra done
.1352	c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354	d0 07		bne $135d	            bne not_f0e0
.1356	a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358	8d 06 02	sta $0206	            sta kbd_state
.135b	80 e6		bra $1343	            bra done
.135d					not_f0e0:
.135d	48		pha		            pha
.135e	ad 07 02	lda $0207	            lda kbd_mods
.1361	89 10		bit #$10	            bit #KBD_MOD_CAP
.1363	d0 0b		bne $1370	            bne read_caps
.1365	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367	d0 19		bne $1382	            bne read_shift
.1369	68		pla		            pla
.136a	aa		tax		            tax
.136b	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e	80 17		bra $1387	            bra proc_ascii
.1370					read_caps:
.1370	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372	d0 07		bne $137b	            bne read_caps_shift
.1374	68		pla		            pla
.1375	aa		tax		            tax
.1376	bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379	80 0c		bra $1387	            bra proc_ascii
.137b					read_caps_shift:
.137b	68		pla		            pla
.137c	aa		tax		            tax
.137d	bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380	80 05		bra $1387	            bra proc_ascii
.1382					read_shift:
.1382	68		pla		            pla
.1383	aa		tax		            tax
.1384	bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387					proc_ascii:
.1387	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389	f0 09		beq $1394	            beq raise_shift
.138b	c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d	f0 0f		beq $139e	            beq toggle_caps
.138f	20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392	80 af		bra $1343	            bra done
.1394					raise_shift:
.1394	ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397	09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399	8d 07 02	sta $0207	            sta kbd_mods
.139c	80 a5		bra $1343	            bra done
.139e					toggle_caps:
.139e	ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1	49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3	8d 07 02	sta $0207	            sta kbd_mods
.13a6	80 9b		bra $1343	            bra done
.13a8					st_f0:
.13a8	ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab	aa		tax		            tax
.13ac	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1	d0 08		bne $13bb	            bne exit_f0
.13b3	ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6	29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8	8d 07 02	sta $0207	            sta kbd_mods
.13bb					exit_f0:
.13bb	9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be	80 83		bra $1343	            bra done
>13c0	00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8	00 00 00 00 00 08 60 00
>13d0	00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8	00 00 7a 73 61 77 32 00
>13e0	00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8	00 20 76 66 74 72 35 00
>13f0	00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8	00 00 6d 6a 75 37 38 00
>1400	00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408	00 2e 2f 6c 3b 70 2d 00
>1410	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418	84 80 0d 5d 00 5c 00 00
>1420	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428	00 00 00 00 00 00 00 00
>1430	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438	00 00 00 00 00 00 00 00
>1440	00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448	00 00 00 00 00 08 7e 00
>1450	00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458	00 00 5a 53 41 57 40 00
>1460	00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468	00 20 56 46 54 52 25 00
>1470	00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478	00 00 4d 4a 55 26 2a 00
>1480	00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488	00 3e 3f 4c 3a 50 5f 00
>1490	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498	84 80 0d 7d 00 7c 00 00
>14a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8	00 00 00 00 00 00 00 00
>14b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8	00 00 00 00 00 00 00 00
>14c0	00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8	00 00 00 00 00 08 60 00
>14d0	00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8	00 00 5a 53 41 57 32 00
>14e0	00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8	00 20 56 46 54 52 35 00
>14f0	00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8	00 00 4d 4a 55 37 38 00
>1500	00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508	00 2e 2f 4c 3b 50 2d 00
>1510	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518	84 80 0d 5d 00 5c 00 00
>1520	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528	00 00 00 00 00 00 00 00
>1530	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538	00 00 00 00 00 00 00 00
>1540	00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548	00 00 00 00 00 08 7e 00
>1550	00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558	00 00 7a 73 61 77 40 00
>1560	00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568	00 20 76 66 74 72 25 00
>1570	00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578	00 00 6d 6a 75 26 2a 00
>1580	00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588	00 3e 3f 6c 3a 70 5f 00
>1590	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598	84 80 0d 7d 00 7c 00 00
>15a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8	00 00 00 00 00 00 00 00
>15b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8	00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028					ip      .word ?         ; Instruction pointer
>002a					wp      .word ?         ; Word pointer
>002c					up      .word ?         ; User pointer
>002e					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030					test    .word ?         ; Pointer to the current test name
>0032					tmp     .fill 4
>0036					savex   .byte ?
>0037					counter .byte ?         ; A counter used for some code
>0038					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0	4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8	68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5					init_user:
>15d5	6e 00				        .word $006e     ; Initial PSP (S0)
>15d7	ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9	0a 00				        .word 10        ; Initial BASE
>15db	00 00				        .word 0         ; Initial STATE
>15dd	00 00				        .word 0         ; Initial CONTEXT
>15df	00 00				        .word 0         ; Initial CURRENT
>15e1	30 44				        .word <>endcode ; Initial DP
>15e3	00 00				        .word 0         ; Initial >IN
>15e5	00 bf				        .word $bf00     ; Initial TIB
>15e7	00 00				        .word 0         ; Initial SOURCE-ID
>15e9	00 00				        .word 0         ; Initial BLK
>15eb	ff ff				        .word $ffff     ; Initial DPL
>15ed	00 00				        .word 0         ; Initial HLD
.15ef					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
=20					user_blk = 20
=22					user_dpl = 22
=24					user_hld = 24
.15ef	a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15f1	9a		txs		        txs
.15f2	a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15f4	a9 07		lda #$07	        lda #<vstart
.15f6	85 28		sta $28		        sta ip
.15f8	a9 16		lda #$16	        lda #>vstart
.15fa	85 29		sta $29		        sta ip+1
.15fc	a9 00		lda #$00	        lda #<USERAREA
.15fe	85 2c		sta $2c		        sta up
.1600	a9 a0		lda #$a0	        lda #>USERAREA
.1602	85 2d		sta $2d		        sta up+1
.1604	4c 29 16	jmp $1629	        jmp next
>1607	1f 43				vstart  .word xt_cold
>1609	f7 16				        .word xt_halt
.160b	6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.160e	68		pla		i_exit  pla             ; ip := pop()
.160f	85 28		sta $28		        sta ip
.1611	68		pla		        pla
.1612	85 29		sta $29		        sta ip+1
.1614	80 13		bra $1629	        bra next        ; jmp next
.1616	a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1618	48		pha		        pha
.1619	a5 28		lda $28		        lda ip
.161b	48		pha		        pha
.161c	18		clc		        clc             ; ip := wp + 3
.161d	a5 2a		lda $2a		        lda wp
.161f	69 03		adc #$03	        adc #3
.1621	85 28		sta $28		        sta ip
.1623	a5 2b		lda $2b		        lda wp+1
.1625	69 00		adc #$00	        adc #0
.1627	85 29		sta $29		        sta ip+1
.1629	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.162b	b2 28		lda ($28)	        lda (ip)
.162d	85 2a		sta $2a		        sta wp
.162f	b1 28		lda ($28),y	        lda (ip),y
.1631	85 2b		sta $2b		        sta wp+1
.1633	18		clc		        clc             ; ip := ip + 2
.1634	a5 28		lda $28		        lda ip
.1636	69 02		adc #$02	        adc #2
.1638	85 28		sta $28		        sta ip
.163a	a5 29		lda $29		        lda ip+1
.163c	69 00		adc #$00	        adc #0
.163e	85 29		sta $29		        sta ip+1
.1640	6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.1643					w_testname:
>1643	08					.byte $08
>1644	74 65 73 74 6e 61 6d 65			.text 'testname'
>164c						.fill 8
>1654	00 00					.word 0
.1656					xt_testname:
.1656	b5 02		lda $02,x		lda pstack+2,x
.1658	85 30		sta $30			sta test
.165a	b5 03		lda $03,x		lda pstack+3,x
.165c	85 31		sta $31			sta test+1
.165e	e8		inx			inx
.165f	e8		inx			inx
.1660	4c 29 16	jmp $1629		jmp next
.1663					w_assertx3d:
>1663	07					.byte $07
>1664	61 73 73 65 72 74 3d			.text 'assert='
>166b						.fill 9
>1674	43 16					.word w_testname
.1676					xt_assertx3d:
.1676	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1678	d5 04		cmp $04,x		cmp pstack+4,x
.167a	d0 0e		bne $168a		bne fail            ; If not, fail
.167c	b5 03		lda $03,x		lda pstack+3,x
.167e	d5 05		cmp $05,x		cmp pstack+5,x
.1680	d0 08		bne $168a		bne fail
.1682	8a		txa			txa                 ; If so, clean up the stack
.1683	18		clc			clc
.1684	69 04		adc #$04		adc #4
.1686	aa		tax			tax
.1687	4c 29 16	jmp $1629		jmp next            ; And continue
.168a						fail:
.168a	a9 c7		lda #$c7		lda #<leadin        ; Print the failure message
.168c	85 24		sta $24			sta src_ptr
.168e	a9 16		lda #$16		lda #>leadin
.1690	85 25		sta $25			sta src_ptr+1
.1692	20 18 b0	jsr $b018		jsr prints
.1695	a5 30		lda $30			lda test            ; Print the name of the test
.1697	85 24		sta $24			sta src_ptr
.1699	a5 31		lda $31			lda test+1
.169b	85 25		sta $25			sta src_ptr+1
.169d	20 18 b0	jsr $b018		jsr prints
.16a0	a9 da		lda #$da		lda #<actual        ; Print the "Actual" label
.16a2	85 24		sta $24			sta src_ptr
.16a4	a9 16		lda #$16		lda #>actual
.16a6	85 25		sta $25			sta src_ptr+1
.16a8	20 18 b0	jsr $b018		jsr prints
.16ab	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.16ad	b5 04		lda $04,x		lda pstack+4,x
.16af	20 15 b0	jsr $b015		jsr printyah
.16b2	a9 ce		lda #$ce		lda #<expected      ; Print the "Expected" label
.16b4	85 24		sta $24			sta src_ptr
.16b6	a9 16		lda #$16		lda #>expected
.16b8	85 25		sta $25			sta src_ptr+1
.16ba	20 18 b0	jsr $b018		jsr prints
.16bd	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16bf	b5 02		lda $02,x		lda pstack+2,x
.16c1	20 15 b0	jsr $b015		jsr printyah
.16c4						lock:
.16c4	ea		nop			nop                 ; Lock up
.16c5	80 fd		bra $16c4		bra lock
.16c7						leadin:
>16c7	46 41 49 4c 3a 20 00			.null "FAIL: "
.16ce						expected:
>16ce	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16d6	44 3a 20 00
.16da						actual:
>16da	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16e2	20 00
.16e4					w_halt:
>16e4	04					.byte $04
>16e5	68 61 6c 74				.text 'halt'
>16e9						.fill 12
>16f5	63 16					.word w_assertx3d
.16f7					xt_halt:
.16f7	a9 5b		lda #$5b		lda #<registers         ; Print register banner
.16f9	85 24		sta $24			sta src_ptr
.16fb	a9 17		lda #$17		lda #>registers
.16fd	85 25		sta $25			sta src_ptr+1
.16ff	20 18 b0	jsr $b018		jsr prints
.1702	a4 29		ldy $29			ldy ip+1                ; Print the IP
.1704	a5 28		lda $28			lda ip
.1706	20 15 b0	jsr $b015		jsr printyah
.1709	a9 20		lda #$20		lda #' '
.170b	20 09 b0	jsr $b009		jsr conout
.170e	a4 2b		ldy $2b			ldy wp+1                ; Print the WP
.1710	a5 2a		lda $2a			lda wp
.1712	20 15 b0	jsr $b015		jsr printyah
.1715	a9 20		lda #$20		lda #' '
.1717	20 09 b0	jsr $b009		jsr conout
.171a	86 36		stx $36			stx savex               ; Print the return stack pointer
.171c	a0 01		ldy #$01		ldy #$01
.171e	ba		tsx			tsx
.171f	8a		txa			txa
.1720	20 15 b0	jsr $b015		jsr printyah
.1723	a6 36		ldx $36			ldx savex
.1725	a9 20		lda #$20		lda #' '
.1727	20 09 b0	jsr $b009		jsr conout
.172a	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.172c	8a		txa			txa
.172d	20 15 b0	jsr $b015		jsr printyah
.1730	a9 0d		lda #$0d		lda #13
.1732	20 09 b0	jsr $b009		jsr conout
.1735	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.1737	b0 1f		bcs $1758		bge lock
.1739	a9 17		lda #$17		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.173b	85 25		sta $25			sta src_ptr+1
.173d	a9 76		lda #$76		lda #<stackmsg
.173f	85 24		sta $24			sta src_ptr
.1741	20 18 b0	jsr $b018		jsr prints
.1744						loop:
.1744	e0 6e		cpx #$6e		cpx #$6e
.1746	b0 10		bcs $1758		bge lock
.1748	b4 03		ldy $03,x		ldy pstack+3,x
.174a	b5 02		lda $02,x		lda pstack+2,x
.174c	e8		inx			inx
.174d	e8		inx			inx
.174e	20 15 b0	jsr $b015		jsr printyah
.1751	a9 20		lda #$20		lda #' '
.1753	20 09 b0	jsr $b009		jsr conout
.1756	80 ec		bra $1744		bra loop
.1758						lock:
.1758						wait:
.1758	ea		nop			nop
.1759	80 fd		bra $1758		bra wait
>175b	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>1763	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>1773	7c 20 00				.null "| "
>1776	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>177e	65 72 20 53 74 61 63 6b 3a 0d 00
.1789					w_emit:
>1789	04					.byte $04
>178a	65 6d 69 74				.text 'emit'
>178e						.fill 12
>179a	e4 16					.word w_halt
.179c					xt_emit:
.179c	b5 02		lda $02,x		lda pstack+2,x
.179e	da		phx			phx
.179f	20 09 b0	jsr $b009		jsr conout
.17a2	fa		plx			plx
.17a3	e8		inx			inx
.17a4	e8		inx			inx
.17a5	4c 29 16	jmp $1629		jmp next
.17a8					w_keyx3f:
>17a8	04					.byte $04
>17a9	6b 65 79 3f				.text 'key?'
>17ad						.fill 12
>17b9	89 17					.word w_emit
.17bb					xt_keyx3f:
.17bb	20 0c b0	jsr $b00c		jsr constat
.17be	29 01		and #$01		and #1
.17c0	f0 06		beq $17c8		beq waiting
.17c2	74 00		stz $00,x		stz pstack,x
.17c4	74 01		stz $01,x		stz pstack+1,x
.17c6	80 06		bra $17ce		bra done
.17c8						waiting:
.17c8	a9 ff		lda #$ff		lda #$ff
.17ca	95 00		sta $00,x		sta pstack,x
.17cc	95 01		sta $01,x		sta pstack+1,x
.17ce						done:
.17ce	ca		dex			dex
.17cf	ca		dex			dex
.17d0	4c 29 16	jmp $1629		jmp next
.17d3					w_key:
>17d3	03					.byte $03
>17d4	6b 65 79				.text 'key'
>17d7						.fill 13
>17e4	a8 17					.word w_keyx3f
.17e6					xt_key:
.17e6	da		phx			phx
.17e7						wait:
.17e7	20 0f b0	jsr $b00f		jsr conin
.17ea	c9 00		cmp #$00		cmp #0
.17ec	f0 f9		beq $17e7		beq wait
.17ee	fa		plx			plx
.17ef	95 00		sta $00,x		sta pstack,x
.17f1	74 01		stz $01,x		stz pstack+1,x
.17f3	ca		dex			dex
.17f4	ca		dex			dex
.17f5	4c 29 16	jmp $1629		jmp next
.17f8					w_cr:
>17f8	02					.byte $02
>17f9	63 72					.text 'cr'
>17fb						.fill 14
>1809	d3 17					.word w_key
.180b					xt_cr:
.180b	da		phx			phx
.180c	a9 0d		lda #$0d		lda #$0d
.180e	20 09 b0	jsr $b009		jsr conout
.1811	fa		plx			plx
.1812	4c 29 16	jmp $1629		jmp next
.1815					w_0:
>1815	01					.byte $01
>1816	30					.text '0'
>1817						.fill 15
>1826	f8 17					.word w_cr
.1828					xt_0:
.1828	74 01		stz $01,x		stz pstack+1,x
.182a	74 00		stz $00,x		stz pstack,x
.182c	ca		dex			dex
.182d	ca		dex			dex
.182e	4c 29 16	jmp $1629		jmp next
.1831					w_1:
>1831	01					.byte $01
>1832	31					.text '1'
>1833						.fill 15
>1842	15 18					.word w_0
.1844					xt_1:
.1844	74 01		stz $01,x		stz pstack+1,x
.1846	a9 01		lda #$01		lda #1
.1848	95 00		sta $00,x		sta pstack,x
.184a	ca		dex			dex
.184b	ca		dex			dex
.184c	4c 29 16	jmp $1629		jmp next
.184f					w_2:
>184f	01					.byte $01
>1850	32					.text '2'
>1851						.fill 15
>1860	31 18					.word w_1
.1862					xt_2:
.1862	74 01		stz $01,x		stz pstack+1,x
.1864	a9 02		lda #$02		lda #2
.1866	95 00		sta $00,x		sta pstack,x
.1868	ca		dex			dex
.1869	ca		dex			dex
.186a	4c 29 16	jmp $1629		jmp next
.186d					w_x2d1:
>186d	02					.byte $02
>186e	2d 31					.text '-1'
>1870						.fill 14
>187e	4f 18					.word w_2
.1880					xt_x2d1:
.1880	a9 ff		lda #$ff		lda #$ff
.1882	95 01		sta $01,x		sta pstack+1,x
.1884	95 00		sta $00,x		sta pstack,x
.1886	ca		dex			dex
.1887	ca		dex			dex
.1888	4c 29 16	jmp $1629		jmp next
.188b					w_x2d2:
>188b	02					.byte $02
>188c	2d 32					.text '-2'
>188e						.fill 14
>189c	6d 18					.word w_x2d1
.189e					xt_x2d2:
.189e	a9 fe		lda #$fe		lda #$fe
.18a0	95 01		sta $01,x		sta pstack+1,x
.18a2	95 00		sta $00,x		sta pstack,x
.18a4	ca		dex			dex
.18a5	ca		dex			dex
.18a6	4c 29 16	jmp $1629		jmp next
.18a9					w_x28literalx29:
>18a9	09					.byte $09
>18aa	28 6c 69 74 65 72 61 6c			.text '(literal)'
>18b2	29
>18b3						.fill 7
>18ba	8b 18					.word w_x2d2
.18bc					xt_x28literalx29:
.18bc	a0 01		ldy #$01		ldy #1
.18be	b2 28		lda ($28)		lda (ip)
.18c0	95 00		sta $00,x		sta pstack,x
.18c2	b1 28		lda ($28),y		lda (ip),y
.18c4	95 01		sta $01,x		sta pstack+1,x
.18c6	ca		dex			dex
.18c7	ca		dex			dex
.18c8	18		clc			clc
.18c9	a5 28		lda $28			lda ip
.18cb	69 02		adc #$02		adc #2
.18cd	85 28		sta $28			sta ip
.18cf	a5 29		lda $29			lda ip+1
.18d1	69 00		adc #$00		adc #0
.18d3	85 29		sta $29			sta ip+1
.18d5	4c 29 16	jmp $1629		jmp next
.18d8					w_depth:
>18d8	05					.byte $05
>18d9	64 65 70 74 68				.text 'depth'
>18de						.fill 11
>18e9	a9 18					.word w_x28literalx29
.18eb					xt_depth:
.18eb	86 32		stx $32			stx tmp
.18ed	38		sec			sec
.18ee	a9 6e		lda #$6e		lda #$6e
.18f0	e5 32		sbc $32			sbc tmp
.18f2	4a		lsr a			lsr a
.18f3	74 01		stz $01,x		stz pstack+1,x
.18f5	95 00		sta $00,x		sta pstack,x
.18f7	ca		dex			dex
.18f8	ca		dex			dex
.18f9	4c 29 16	jmp $1629		jmp next
.18fc					w_unittest:
>18fc	08					.byte $08
>18fd	75 6e 69 74 74 65 73 74			.text 'unittest'
>1905						.fill 8
>190d	d8 18					.word w_depth
.190f					xt_unittest:
.190f	4c 16 16	jmp $1616		jmp i_enter
>1912	bc 18					.word xt_x28literalx29
>1914	1a 19					.word l_2
>1916	6d 35					.word xt_x28branchx29
>1918	26 19					.word l_3
.191a					l_2:
>191a	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1922	3e 20 30 00
.1926					l_3:
>1926	56 16					.word xt_testname
>1928	eb 18					.word xt_depth
>192a	28 18					.word xt_0
>192c	76 16					.word xt_assertx3d
>192e	bc 18					.word xt_x28literalx29
>1930	36 19					.word l_4
>1932	6d 35					.word xt_x28branchx29
>1934	46 19					.word l_5
.1936					l_4:
>1936	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>193e	2d 2d 3e 20 30 20 31 00
.1946					l_5:
>1946	56 16					.word xt_testname
>1948	28 18					.word xt_0
>194a	eb 18					.word xt_depth
>194c	44 18					.word xt_1
>194e	76 16					.word xt_assertx3d
>1950	28 18					.word xt_0
>1952	76 16					.word xt_assertx3d
>1954	bc 18					.word xt_x28literalx29
>1956	5c 19					.word l_6
>1958	6d 35					.word xt_x28branchx29
>195a	74 19					.word l_7
.195c					l_6:
>195c	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>1964	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.1974					l_7:
>1974	56 16					.word xt_testname
>1976	44 18					.word xt_1
>1978	44 18					.word xt_1
>197a	44 18					.word xt_1
>197c	eb 18					.word xt_depth
>197e	bc 18					.word xt_x28literalx29
>1980	03 00					.word 3
>1982	76 16					.word xt_assertx3d
>1984	44 18					.word xt_1
>1986	76 16					.word xt_assertx3d
>1988	44 18					.word xt_1
>198a	76 16					.word xt_assertx3d
>198c	44 18					.word xt_1
>198e	76 16					.word xt_assertx3d
>1990	bc 18					.word xt_x28literalx29
>1992	98 19					.word l_8
>1994	6d 35					.word xt_x28branchx29
>1996	a7 19					.word l_9
.1998					l_8:
>1998	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>19a0	20 2d 2d 3e 20 31 00
.19a7					l_9:
>19a7	56 16					.word xt_testname
>19a9	44 18					.word xt_1
>19ab	62 18					.word xt_2
>19ad	9c 2d					.word xt_drop
>19af	44 18					.word xt_1
>19b1	76 16					.word xt_assertx3d
>19b3	bc 18					.word xt_x28literalx29
>19b5	bb 19					.word l_10
>19b7	6d 35					.word xt_x28branchx29
>19b9	ce 19					.word l_11
.19bb					l_10:
>19bb	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>19c3	6f 70 20 2d 2d 3e 20 31 20 32 00
.19ce					l_11:
>19ce	56 16					.word xt_testname
>19d0	44 18					.word xt_1
>19d2	62 18					.word xt_2
>19d4	bc 18					.word xt_x28literalx29
>19d6	03 00					.word 3
>19d8	9c 2d					.word xt_drop
>19da	62 18					.word xt_2
>19dc	76 16					.word xt_assertx3d
>19de	44 18					.word xt_1
>19e0	76 16					.word xt_assertx3d
>19e2	bc 18					.word xt_x28literalx29
>19e4	ea 19					.word l_12
>19e6	6d 35					.word xt_x28branchx29
>19e8	f8 19					.word l_13
.19ea					l_12:
>19ea	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>19f2	3e 20 31 20 31 00
.19f8					l_13:
>19f8	56 16					.word xt_testname
>19fa	44 18					.word xt_1
>19fc	b4 2d					.word xt_dup
>19fe	44 18					.word xt_1
>1a00	76 16					.word xt_assertx3d
>1a02	44 18					.word xt_1
>1a04	76 16					.word xt_assertx3d
>1a06	bc 18					.word xt_x28literalx29
>1a08	0e 1a					.word l_14
>1a0a	6d 35					.word xt_x28branchx29
>1a0c	20 1a					.word l_15
.1a0e					l_14:
>1a0e	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1a16	2d 2d 3e 20 31 20 32 20 32 00
.1a20					l_15:
>1a20	56 16					.word xt_testname
>1a22	44 18					.word xt_1
>1a24	62 18					.word xt_2
>1a26	b4 2d					.word xt_dup
>1a28	62 18					.word xt_2
>1a2a	76 16					.word xt_assertx3d
>1a2c	62 18					.word xt_2
>1a2e	76 16					.word xt_assertx3d
>1a30	44 18					.word xt_1
>1a32	76 16					.word xt_assertx3d
>1a34	bc 18					.word xt_x28literalx29
>1a36	3c 1a					.word l_16
>1a38	6d 35					.word xt_x28branchx29
>1a3a	51 1a					.word l_17
.1a3c					l_16:
>1a3c	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1a44	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1a51					l_17:
>1a51	56 16					.word xt_testname
>1a53	44 18					.word xt_1
>1a55	62 18					.word xt_2
>1a57	bc 18					.word xt_x28literalx29
>1a59	03 00					.word 3
>1a5b	d4 2d					.word xt_swap
>1a5d	62 18					.word xt_2
>1a5f	76 16					.word xt_assertx3d
>1a61	bc 18					.word xt_x28literalx29
>1a63	03 00					.word 3
>1a65	76 16					.word xt_assertx3d
>1a67	44 18					.word xt_1
>1a69	76 16					.word xt_assertx3d
>1a6b	bc 18					.word xt_x28literalx29
>1a6d	73 1a					.word l_18
>1a6f	6d 35					.word xt_x28branchx29
>1a71	8d 1a					.word l_19
.1a73					l_18:
>1a73	31 20 32 20 33 20 34 20			.null "1 2 3 4 2swap --> 3 4 1 2"
>1a7b	32 73 77 61 70 20 2d 2d 3e 20 33 20 34 20 31 20
>1a8b	32 00
.1a8d					l_19:
>1a8d	56 16					.word xt_testname
>1a8f	44 18					.word xt_1
>1a91	62 18					.word xt_2
>1a93	bc 18					.word xt_x28literalx29
>1a95	03 00					.word 3
>1a97	bc 18					.word xt_x28literalx29
>1a99	04 00					.word 4
>1a9b	fa 2d					.word xt_2swap
>1a9d	62 18					.word xt_2
>1a9f	76 16					.word xt_assertx3d
>1aa1	44 18					.word xt_1
>1aa3	76 16					.word xt_assertx3d
>1aa5	bc 18					.word xt_x28literalx29
>1aa7	04 00					.word 4
>1aa9	76 16					.word xt_assertx3d
>1aab	bc 18					.word xt_x28literalx29
>1aad	03 00					.word 3
>1aaf	76 16					.word xt_assertx3d
>1ab1	bc 18					.word xt_x28literalx29
>1ab3	b9 1a					.word l_20
>1ab5	6d 35					.word xt_x28branchx29
>1ab7	cc 1a					.word l_21
.1ab9					l_20:
>1ab9	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>1ac1	20 2d 2d 3e 20 31 20 32 20 31 00
.1acc					l_21:
>1acc	56 16					.word xt_testname
>1ace	44 18					.word xt_1
>1ad0	62 18					.word xt_2
>1ad2	38 2e					.word xt_over
>1ad4	44 18					.word xt_1
>1ad6	76 16					.word xt_assertx3d
>1ad8	62 18					.word xt_2
>1ada	76 16					.word xt_assertx3d
>1adc	44 18					.word xt_1
>1ade	76 16					.word xt_assertx3d
>1ae0	bc 18					.word xt_x28literalx29
>1ae2	e8 1a					.word l_22
>1ae4	6d 35					.word xt_x28branchx29
>1ae6	06 1b					.word l_23
.1ae8					l_22:
>1ae8	31 20 32 20 33 20 34 20			.null "1 2 3 4 2over --> 1 2 3 4 1 2"
>1af0	32 6f 76 65 72 20 2d 2d 3e 20 31 20 32 20 33 20
>1b00	34 20 31 20 32 00
.1b06					l_23:
>1b06	56 16					.word xt_testname
>1b08	44 18					.word xt_1
>1b0a	62 18					.word xt_2
>1b0c	bc 18					.word xt_x28literalx29
>1b0e	03 00					.word 3
>1b10	bc 18					.word xt_x28literalx29
>1b12	04 00					.word 4
>1b14	58 2e					.word xt_2over
>1b16	62 18					.word xt_2
>1b18	76 16					.word xt_assertx3d
>1b1a	44 18					.word xt_1
>1b1c	76 16					.word xt_assertx3d
>1b1e	bc 18					.word xt_x28literalx29
>1b20	04 00					.word 4
>1b22	76 16					.word xt_assertx3d
>1b24	bc 18					.word xt_x28literalx29
>1b26	03 00					.word 3
>1b28	76 16					.word xt_assertx3d
>1b2a	62 18					.word xt_2
>1b2c	76 16					.word xt_assertx3d
>1b2e	44 18					.word xt_1
>1b30	76 16					.word xt_assertx3d
>1b32	bc 18					.word xt_x28literalx29
>1b34	3a 1b					.word l_24
>1b36	6d 35					.word xt_x28branchx29
>1b38	5a 1b					.word l_25
.1b3a					l_24:
>1b3a	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1b42	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1b52	3e 20 35 35 35 35 68 00
.1b5a					l_25:
>1b5a	56 16					.word xt_testname
>1b5c	bc 18					.word xt_x28literalx29
>1b5e	55 55					.word 21845
>1b60	bc 18					.word xt_x28literalx29
>1b62	04 00					.word 4
>1b64	f5 2e					.word xt_x21
>1b66	bc 18					.word xt_x28literalx29
>1b68	04 00					.word 4
>1b6a	21 2f					.word xt_x40
>1b6c	bc 18					.word xt_x28literalx29
>1b6e	55 55					.word 21845
>1b70	76 16					.word xt_assertx3d
>1b72	bc 18					.word xt_x28literalx29
>1b74	7a 1b					.word l_26
>1b76	6d 35					.word xt_x28branchx29
>1b78	9a 1b					.word l_27
.1b7a					l_26:
>1b7a	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1b82	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1b92	3e 20 61 61 61 61 68 00
.1b9a					l_27:
>1b9a	56 16					.word xt_testname
>1b9c	bc 18					.word xt_x28literalx29
>1b9e	aa aa					.word 43690
>1ba0	bc 18					.word xt_x28literalx29
>1ba2	04 00					.word 4
>1ba4	f5 2e					.word xt_x21
>1ba6	bc 18					.word xt_x28literalx29
>1ba8	04 00					.word 4
>1baa	21 2f					.word xt_x40
>1bac	bc 18					.word xt_x28literalx29
>1bae	aa aa					.word 43690
>1bb0	76 16					.word xt_assertx3d
>1bb2	bc 18					.word xt_x28literalx29
>1bb4	ba 1b					.word l_28
>1bb6	6d 35					.word xt_x28branchx29
>1bb8	d8 1b					.word l_29
.1bba					l_28:
>1bba	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1bc2	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1bd2	3e 20 35 35 68 00
.1bd8					l_29:
>1bd8	56 16					.word xt_testname
>1bda	bc 18					.word xt_x28literalx29
>1bdc	55 00					.word 85
>1bde	bc 18					.word xt_x28literalx29
>1be0	03 00					.word 3
>1be2	49 2f					.word xt_cx21
>1be4	bc 18					.word xt_x28literalx29
>1be6	03 00					.word 3
>1be8	67 2f					.word xt_cx40
>1bea	bc 18					.word xt_x28literalx29
>1bec	55 00					.word 85
>1bee	76 16					.word xt_assertx3d
>1bf0	bc 18					.word xt_x28literalx29
>1bf2	f8 1b					.word l_30
>1bf4	6d 35					.word xt_x28branchx29
>1bf6	16 1c					.word l_31
.1bf8					l_30:
>1bf8	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1c00	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1c10	3e 20 61 61 68 00
.1c16					l_31:
>1c16	56 16					.word xt_testname
>1c18	bc 18					.word xt_x28literalx29
>1c1a	aa 00					.word 170
>1c1c	bc 18					.word xt_x28literalx29
>1c1e	03 00					.word 3
>1c20	49 2f					.word xt_cx21
>1c22	bc 18					.word xt_x28literalx29
>1c24	03 00					.word 3
>1c26	67 2f					.word xt_cx40
>1c28	bc 18					.word xt_x28literalx29
>1c2a	aa 00					.word 170
>1c2c	76 16					.word xt_assertx3d
>1c2e	bc 18					.word xt_x28literalx29
>1c30	36 1c					.word l_32
>1c32	6d 35					.word xt_x28branchx29
>1c34	42 1c					.word l_33
.1c36					l_32:
>1c36	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1c3e	3e 20 31 00
.1c42					l_33:
>1c42	56 16					.word xt_testname
>1c44	44 18					.word xt_1
>1c46	28 18					.word xt_0
>1c48	59 31					.word xt_x2b
>1c4a	44 18					.word xt_1
>1c4c	76 16					.word xt_assertx3d
>1c4e	bc 18					.word xt_x28literalx29
>1c50	56 1c					.word l_34
>1c52	6d 35					.word xt_x28branchx29
>1c54	62 1c					.word l_35
.1c56					l_34:
>1c56	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1c5e	3e 20 32 00
.1c62					l_35:
>1c62	56 16					.word xt_testname
>1c64	44 18					.word xt_1
>1c66	44 18					.word xt_1
>1c68	59 31					.word xt_x2b
>1c6a	62 18					.word xt_2
>1c6c	76 16					.word xt_assertx3d
>1c6e	bc 18					.word xt_x28literalx29
>1c70	76 1c					.word l_36
>1c72	6d 35					.word xt_x28branchx29
>1c74	84 1c					.word l_37
.1c76					l_36:
>1c76	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1c7e	2d 3e 20 31 33 00
.1c84					l_37:
>1c84	56 16					.word xt_testname
>1c86	bc 18					.word xt_x28literalx29
>1c88	03 00					.word 3
>1c8a	bc 18					.word xt_x28literalx29
>1c8c	0a 00					.word 10
>1c8e	59 31					.word xt_x2b
>1c90	bc 18					.word xt_x28literalx29
>1c92	0d 00					.word 13
>1c94	76 16					.word xt_assertx3d
>1c96	bc 18					.word xt_x28literalx29
>1c98	9e 1c					.word l_38
>1c9a	6d 35					.word xt_x28branchx29
>1c9c	ae 1c					.word l_39
.1c9e					l_38:
>1c9e	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1ca6	2b 20 2d 2d 3e 20 34 00
.1cae					l_39:
>1cae	56 16					.word xt_testname
>1cb0	bc 18					.word xt_x28literalx29
>1cb2	ff ff					.word 65535
>1cb4	bc 18					.word xt_x28literalx29
>1cb6	05 00					.word 5
>1cb8	59 31					.word xt_x2b
>1cba	bc 18					.word xt_x28literalx29
>1cbc	04 00					.word 4
>1cbe	76 16					.word xt_assertx3d
>1cc0	bc 18					.word xt_x28literalx29
>1cc2	c8 1c					.word l_40
>1cc4	6d 35					.word xt_x28branchx29
>1cc6	f3 1c					.word l_41
.1cc8					l_40:
>1cc8	31 32 33 34 68 20 35 36			.null "1234h 5678h 1111h 1111h d+ --> 2345h 6789h"
>1cd0	37 38 68 20 31 31 31 31 68 20 31 31 31 31 68 20
>1ce0	64 2b 20 2d 2d 3e 20 32 33 34 35 68 20 36 37 38
>1cf0	39 68 00
.1cf3					l_41:
>1cf3	56 16					.word xt_testname
>1cf5	bc 18					.word xt_x28literalx29
>1cf7	34 12					.word 4660
>1cf9	bc 18					.word xt_x28literalx29
>1cfb	78 56					.word 22136
>1cfd	bc 18					.word xt_x28literalx29
>1cff	11 11					.word 4369
>1d01	bc 18					.word xt_x28literalx29
>1d03	11 11					.word 4369
>1d05	7e 31					.word xt_dx2b
>1d07	bc 18					.word xt_x28literalx29
>1d09	89 67					.word 26505
>1d0b	76 16					.word xt_assertx3d
>1d0d	bc 18					.word xt_x28literalx29
>1d0f	45 23					.word 9029
>1d11	76 16					.word xt_assertx3d
>1d13	bc 18					.word xt_x28literalx29
>1d15	1b 1d					.word l_42
>1d17	6d 35					.word xt_x28branchx29
>1d19	46 1d					.word l_43
.1d1b					l_42:
>1d1b	30 30 30 30 68 20 31 31			.null "0000h 1111h 0000h eeefh d+ --> 0001h 0000h"
>1d23	31 31 68 20 30 30 30 30 68 20 65 65 65 66 68 20
>1d33	64 2b 20 2d 2d 3e 20 30 30 30 31 68 20 30 30 30
>1d43	30 68 00
.1d46					l_43:
>1d46	56 16					.word xt_testname
>1d48	bc 18					.word xt_x28literalx29
>1d4a	00 00					.word 0
>1d4c	bc 18					.word xt_x28literalx29
>1d4e	11 11					.word 4369
>1d50	bc 18					.word xt_x28literalx29
>1d52	00 00					.word 0
>1d54	bc 18					.word xt_x28literalx29
>1d56	ef ee					.word 61167
>1d58	7e 31					.word xt_dx2b
>1d5a	bc 18					.word xt_x28literalx29
>1d5c	00 00					.word 0
>1d5e	76 16					.word xt_assertx3d
>1d60	bc 18					.word xt_x28literalx29
>1d62	01 00					.word 1
>1d64	76 16					.word xt_assertx3d
>1d66	bc 18					.word xt_x28literalx29
>1d68	6e 1d					.word l_44
>1d6a	6d 35					.word xt_x28branchx29
>1d6c	7a 1d					.word l_45
.1d6e					l_44:
>1d6e	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1d76	3e 20 31 00
.1d7a					l_45:
>1d7a	56 16					.word xt_testname
>1d7c	bc 18					.word xt_x28literalx29
>1d7e	04 00					.word 4
>1d80	bc 18					.word xt_x28literalx29
>1d82	03 00					.word 3
>1d84	e4 31					.word xt_x2d
>1d86	44 18					.word xt_1
>1d88	76 16					.word xt_assertx3d
>1d8a	bc 18					.word xt_x28literalx29
>1d8c	92 1d					.word l_46
>1d8e	6d 35					.word xt_x28branchx29
>1d90	a2 1d					.word l_47
.1d92					l_46:
>1d92	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1d9a	3e 20 66 66 66 66 68 00
.1da2					l_47:
>1da2	56 16					.word xt_testname
>1da4	bc 18					.word xt_x28literalx29
>1da6	03 00					.word 3
>1da8	bc 18					.word xt_x28literalx29
>1daa	04 00					.word 4
>1dac	e4 31					.word xt_x2d
>1dae	bc 18					.word xt_x28literalx29
>1db0	ff ff					.word 65535
>1db2	76 16					.word xt_assertx3d
>1db4	bc 18					.word xt_x28literalx29
>1db6	bc 1d					.word l_48
>1db8	6d 35					.word xt_x28branchx29
>1dba	c9 1d					.word l_49
.1dbc					l_48:
>1dbc	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1dc4	2d 3e 20 35 00
.1dc9					l_49:
>1dc9	56 16					.word xt_testname
>1dcb	bc 18					.word xt_x28literalx29
>1dcd	0a 00					.word 10
>1dcf	bc 18					.word xt_x28literalx29
>1dd1	05 00					.word 5
>1dd3	e4 31					.word xt_x2d
>1dd5	bc 18					.word xt_x28literalx29
>1dd7	05 00					.word 5
>1dd9	76 16					.word xt_assertx3d
>1ddb	bc 18					.word xt_x28literalx29
>1ddd	e3 1d					.word l_50
>1ddf	6d 35					.word xt_x28branchx29
>1de1	f8 1d					.word l_51
.1de3					l_50:
>1de3	30 20 31 20 33 20 75 6d			.null "0 1 3 um/mod --> 1 0"
>1deb	2f 6d 6f 64 20 2d 2d 3e 20 31 20 30 00
.1df8					l_51:
>1df8	56 16					.word xt_testname
>1dfa	28 18					.word xt_0
>1dfc	44 18					.word xt_1
>1dfe	bc 18					.word xt_x28literalx29
>1e00	03 00					.word 3
>1e02	ce 32					.word xt_umx2fmod
>1e04	28 18					.word xt_0
>1e06	76 16					.word xt_assertx3d
>1e08	44 18					.word xt_1
>1e0a	76 16					.word xt_assertx3d
>1e0c	bc 18					.word xt_x28literalx29
>1e0e	14 1e					.word l_52
>1e10	6d 35					.word xt_x28branchx29
>1e12	29 1e					.word l_53
.1e14					l_52:
>1e14	30 20 32 20 33 20 75 6d			.null "0 2 3 um/mod --> 2 0"
>1e1c	2f 6d 6f 64 20 2d 2d 3e 20 32 20 30 00
.1e29					l_53:
>1e29	56 16					.word xt_testname
>1e2b	28 18					.word xt_0
>1e2d	62 18					.word xt_2
>1e2f	bc 18					.word xt_x28literalx29
>1e31	03 00					.word 3
>1e33	ce 32					.word xt_umx2fmod
>1e35	28 18					.word xt_0
>1e37	76 16					.word xt_assertx3d
>1e39	62 18					.word xt_2
>1e3b	76 16					.word xt_assertx3d
>1e3d	bc 18					.word xt_x28literalx29
>1e3f	45 1e					.word l_54
>1e41	6d 35					.word xt_x28branchx29
>1e43	5a 1e					.word l_55
.1e45					l_54:
>1e45	30 20 33 20 33 20 75 6d			.null "0 3 3 um/mod --> 0 1"
>1e4d	2f 6d 6f 64 20 2d 2d 3e 20 30 20 31 00
.1e5a					l_55:
>1e5a	56 16					.word xt_testname
>1e5c	28 18					.word xt_0
>1e5e	bc 18					.word xt_x28literalx29
>1e60	03 00					.word 3
>1e62	bc 18					.word xt_x28literalx29
>1e64	03 00					.word 3
>1e66	ce 32					.word xt_umx2fmod
>1e68	44 18					.word xt_1
>1e6a	76 16					.word xt_assertx3d
>1e6c	28 18					.word xt_0
>1e6e	76 16					.word xt_assertx3d
>1e70	bc 18					.word xt_x28literalx29
>1e72	78 1e					.word l_56
>1e74	6d 35					.word xt_x28branchx29
>1e76	8d 1e					.word l_57
.1e78					l_56:
>1e78	30 20 34 20 33 20 75 6d			.null "0 4 3 um/mod --> 1 1"
>1e80	2f 6d 6f 64 20 2d 2d 3e 20 31 20 31 00
.1e8d					l_57:
>1e8d	56 16					.word xt_testname
>1e8f	28 18					.word xt_0
>1e91	bc 18					.word xt_x28literalx29
>1e93	04 00					.word 4
>1e95	bc 18					.word xt_x28literalx29
>1e97	03 00					.word 3
>1e99	ce 32					.word xt_umx2fmod
>1e9b	44 18					.word xt_1
>1e9d	76 16					.word xt_assertx3d
>1e9f	44 18					.word xt_1
>1ea1	76 16					.word xt_assertx3d
>1ea3	bc 18					.word xt_x28literalx29
>1ea5	ab 1e					.word l_58
>1ea7	6d 35					.word xt_x28branchx29
>1ea9	c0 1e					.word l_59
.1eab					l_58:
>1eab	30 20 36 20 33 20 75 6d			.null "0 6 3 um/mod --> 0 2"
>1eb3	2f 6d 6f 64 20 2d 2d 3e 20 30 20 32 00
.1ec0					l_59:
>1ec0	56 16					.word xt_testname
>1ec2	28 18					.word xt_0
>1ec4	bc 18					.word xt_x28literalx29
>1ec6	06 00					.word 6
>1ec8	bc 18					.word xt_x28literalx29
>1eca	03 00					.word 3
>1ecc	ce 32					.word xt_umx2fmod
>1ece	62 18					.word xt_2
>1ed0	76 16					.word xt_assertx3d
>1ed2	28 18					.word xt_0
>1ed4	76 16					.word xt_assertx3d
>1ed6	bc 18					.word xt_x28literalx29
>1ed8	de 1e					.word l_60
>1eda	6d 35					.word xt_x28branchx29
>1edc	f8 1e					.word l_61
.1ede					l_60:
>1ede	31 32 33 34 68 20 73 3e			.null "1234h s>d --> 0000h 1234h"
>1ee6	64 20 2d 2d 3e 20 30 30 30 30 68 20 31 32 33 34
>1ef6	68 00
.1ef8					l_61:
>1ef8	56 16					.word xt_testname
>1efa	bc 18					.word xt_x28literalx29
>1efc	34 12					.word 4660
>1efe	29 33					.word xt_sx3ed
>1f00	bc 18					.word xt_x28literalx29
>1f02	34 12					.word 4660
>1f04	76 16					.word xt_assertx3d
>1f06	bc 18					.word xt_x28literalx29
>1f08	00 00					.word 0
>1f0a	76 16					.word xt_assertx3d
>1f0c	bc 18					.word xt_x28literalx29
>1f0e	14 1f					.word l_62
>1f10	6d 35					.word xt_x28branchx29
>1f12	2e 1f					.word l_63
.1f14					l_62:
>1f14	66 66 66 66 68 20 73 3e			.null "ffffh s>d --> ffffh ffffh"
>1f1c	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 66
>1f2c	68 00
.1f2e					l_63:
>1f2e	56 16					.word xt_testname
>1f30	bc 18					.word xt_x28literalx29
>1f32	ff ff					.word 65535
>1f34	29 33					.word xt_sx3ed
>1f36	bc 18					.word xt_x28literalx29
>1f38	ff ff					.word 65535
>1f3a	76 16					.word xt_assertx3d
>1f3c	bc 18					.word xt_x28literalx29
>1f3e	ff ff					.word 65535
>1f40	76 16					.word xt_assertx3d
>1f42	bc 18					.word xt_x28literalx29
>1f44	4a 1f					.word l_64
>1f46	6d 35					.word xt_x28branchx29
>1f48	64 1f					.word l_65
.1f4a					l_64:
>1f4a	66 66 66 65 68 20 73 3e			.null "fffeh s>d --> ffffh fffeh"
>1f52	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 65
>1f62	68 00
.1f64					l_65:
>1f64	56 16					.word xt_testname
>1f66	bc 18					.word xt_x28literalx29
>1f68	fe ff					.word 65534
>1f6a	29 33					.word xt_sx3ed
>1f6c	bc 18					.word xt_x28literalx29
>1f6e	fe ff					.word 65534
>1f70	76 16					.word xt_assertx3d
>1f72	bc 18					.word xt_x28literalx29
>1f74	ff ff					.word 65535
>1f76	76 16					.word xt_assertx3d
>1f78	bc 18					.word xt_x28literalx29
>1f7a	80 1f					.word l_66
>1f7c	6d 35					.word xt_x28branchx29
>1f7e	8b 1f					.word l_67
.1f80					l_66:
>1f80	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1f88	20 32 00
.1f8b					l_67:
>1f8b	56 16					.word xt_testname
>1f8d	44 18					.word xt_1
>1f8f	58 33					.word xt_1x2b
>1f91	62 18					.word xt_2
>1f93	76 16					.word xt_assertx3d
>1f95	bc 18					.word xt_x28literalx29
>1f97	9d 1f					.word l_68
>1f99	6d 35					.word xt_x28branchx29
>1f9b	a8 1f					.word l_69
.1f9d					l_68:
>1f9d	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1fa5	20 31 00
.1fa8					l_69:
>1fa8	56 16					.word xt_testname
>1faa	28 18					.word xt_0
>1fac	58 33					.word xt_1x2b
>1fae	44 18					.word xt_1
>1fb0	76 16					.word xt_assertx3d
>1fb2	bc 18					.word xt_x28literalx29
>1fb4	ba 1f					.word l_70
>1fb6	6d 35					.word xt_x28branchx29
>1fb8	c7 1f					.word l_71
.1fba					l_70:
>1fba	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1fc2	3e 20 32 31 00
.1fc7					l_71:
>1fc7	56 16					.word xt_testname
>1fc9	bc 18					.word xt_x28literalx29
>1fcb	14 00					.word 20
>1fcd	58 33					.word xt_1x2b
>1fcf	bc 18					.word xt_x28literalx29
>1fd1	15 00					.word 21
>1fd3	76 16					.word xt_assertx3d
>1fd5	bc 18					.word xt_x28literalx29
>1fd7	dd 1f					.word l_72
>1fd9	6d 35					.word xt_x28branchx29
>1fdb	ec 1f					.word l_73
.1fdd					l_72:
>1fdd	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1fe5	20 2d 2d 3e 20 30 00
.1fec					l_73:
>1fec	56 16					.word xt_testname
>1fee	bc 18					.word xt_x28literalx29
>1ff0	ff ff					.word 65535
>1ff2	58 33					.word xt_1x2b
>1ff4	28 18					.word xt_0
>1ff6	76 16					.word xt_assertx3d
>1ff8	bc 18					.word xt_x28literalx29
>1ffa	00 20					.word l_74
>1ffc	6d 35					.word xt_x28branchx29
>1ffe	0b 20					.word l_75
.2000					l_74:
>2000	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>2008	20 33 00
.200b					l_75:
>200b	56 16					.word xt_testname
>200d	44 18					.word xt_1
>200f	74 33					.word xt_2x2b
>2011	bc 18					.word xt_x28literalx29
>2013	03 00					.word 3
>2015	76 16					.word xt_assertx3d
>2017	bc 18					.word xt_x28literalx29
>2019	1f 20					.word l_76
>201b	6d 35					.word xt_x28branchx29
>201d	2a 20					.word l_77
.201f					l_76:
>201f	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>2027	20 32 00
.202a					l_77:
>202a	56 16					.word xt_testname
>202c	28 18					.word xt_0
>202e	74 33					.word xt_2x2b
>2030	62 18					.word xt_2
>2032	76 16					.word xt_assertx3d
>2034	bc 18					.word xt_x28literalx29
>2036	3c 20					.word l_78
>2038	6d 35					.word xt_x28branchx29
>203a	49 20					.word l_79
.203c					l_78:
>203c	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>2044	3e 20 32 32 00
.2049					l_79:
>2049	56 16					.word xt_testname
>204b	bc 18					.word xt_x28literalx29
>204d	14 00					.word 20
>204f	74 33					.word xt_2x2b
>2051	bc 18					.word xt_x28literalx29
>2053	16 00					.word 22
>2055	76 16					.word xt_assertx3d
>2057	bc 18					.word xt_x28literalx29
>2059	5f 20					.word l_80
>205b	6d 35					.word xt_x28branchx29
>205d	6e 20					.word l_81
.205f					l_80:
>205f	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>2067	20 2d 2d 3e 20 30 00
.206e					l_81:
>206e	56 16					.word xt_testname
>2070	bc 18					.word xt_x28literalx29
>2072	fe ff					.word 65534
>2074	74 33					.word xt_2x2b
>2076	28 18					.word xt_0
>2078	76 16					.word xt_assertx3d
>207a	bc 18					.word xt_x28literalx29
>207c	82 20					.word l_82
>207e	6d 35					.word xt_x28branchx29
>2080	8d 20					.word l_83
.2082					l_82:
>2082	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>208a	20 30 00
.208d					l_83:
>208d	56 16					.word xt_testname
>208f	44 18					.word xt_1
>2091	97 33					.word xt_1x2d
>2093	28 18					.word xt_0
>2095	76 16					.word xt_assertx3d
>2097	bc 18					.word xt_x28literalx29
>2099	9f 20					.word l_84
>209b	6d 35					.word xt_x28branchx29
>209d	ae 20					.word l_85
.209f					l_84:
>209f	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>20a7	20 66 66 66 66 68 00
.20ae					l_85:
>20ae	56 16					.word xt_testname
>20b0	28 18					.word xt_0
>20b2	97 33					.word xt_1x2d
>20b4	bc 18					.word xt_x28literalx29
>20b6	ff ff					.word 65535
>20b8	76 16					.word xt_assertx3d
>20ba	bc 18					.word xt_x28literalx29
>20bc	c2 20					.word l_86
>20be	6d 35					.word xt_x28branchx29
>20c0	cf 20					.word l_87
.20c2					l_86:
>20c2	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>20ca	3e 20 31 39 00
.20cf					l_87:
>20cf	56 16					.word xt_testname
>20d1	bc 18					.word xt_x28literalx29
>20d3	14 00					.word 20
>20d5	97 33					.word xt_1x2d
>20d7	bc 18					.word xt_x28literalx29
>20d9	13 00					.word 19
>20db	76 16					.word xt_assertx3d
>20dd	bc 18					.word xt_x28literalx29
>20df	e5 20					.word l_88
>20e1	6d 35					.word xt_x28branchx29
>20e3	f8 20					.word l_89
.20e5					l_88:
>20e5	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>20ed	20 2d 2d 3e 20 66 66 66 65 68 00
.20f8					l_89:
>20f8	56 16					.word xt_testname
>20fa	bc 18					.word xt_x28literalx29
>20fc	ff ff					.word 65535
>20fe	97 33					.word xt_1x2d
>2100	bc 18					.word xt_x28literalx29
>2102	fe ff					.word 65534
>2104	76 16					.word xt_assertx3d
>2106	bc 18					.word xt_x28literalx29
>2108	0e 21					.word l_90
>210a	6d 35					.word xt_x28branchx29
>210c	1d 21					.word l_91
.210e					l_90:
>210e	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>2116	20 66 66 66 66 68 00
.211d					l_91:
>211d	56 16					.word xt_testname
>211f	44 18					.word xt_1
>2121	b5 33					.word xt_2x2d
>2123	bc 18					.word xt_x28literalx29
>2125	ff ff					.word 65535
>2127	76 16					.word xt_assertx3d
>2129	bc 18					.word xt_x28literalx29
>212b	31 21					.word l_92
>212d	6d 35					.word xt_x28branchx29
>212f	40 21					.word l_93
.2131					l_92:
>2131	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>2139	20 66 66 66 65 68 00
.2140					l_93:
>2140	56 16					.word xt_testname
>2142	28 18					.word xt_0
>2144	b5 33					.word xt_2x2d
>2146	bc 18					.word xt_x28literalx29
>2148	fe ff					.word 65534
>214a	76 16					.word xt_assertx3d
>214c	bc 18					.word xt_x28literalx29
>214e	54 21					.word l_94
>2150	6d 35					.word xt_x28branchx29
>2152	61 21					.word l_95
.2154					l_94:
>2154	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>215c	3e 20 31 38 00
.2161					l_95:
>2161	56 16					.word xt_testname
>2163	bc 18					.word xt_x28literalx29
>2165	14 00					.word 20
>2167	b5 33					.word xt_2x2d
>2169	bc 18					.word xt_x28literalx29
>216b	12 00					.word 18
>216d	76 16					.word xt_assertx3d
>216f	bc 18					.word xt_x28literalx29
>2171	77 21					.word l_96
>2173	6d 35					.word xt_x28branchx29
>2175	8a 21					.word l_97
.2177					l_96:
>2177	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>217f	20 2d 2d 3e 20 66 66 66 64 68 00
.218a					l_97:
>218a	56 16					.word xt_testname
>218c	bc 18					.word xt_x28literalx29
>218e	ff ff					.word 65535
>2190	b5 33					.word xt_2x2d
>2192	bc 18					.word xt_x28literalx29
>2194	fd ff					.word 65533
>2196	76 16					.word xt_assertx3d
>2198	bc 18					.word xt_x28literalx29
>219a	a0 21					.word l_98
>219c	6d 35					.word xt_x28branchx29
>219e	ba 21					.word l_99
.21a0					l_98:
>21a0	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>21a8	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>21b8	68 00
.21ba					l_99:
>21ba	56 16					.word xt_testname
>21bc	bc 18					.word xt_x28literalx29
>21be	00 00					.word 0
>21c0	bc 18					.word xt_x28literalx29
>21c2	00 00					.word 0
>21c4	d8 33					.word xt_and
>21c6	bc 18					.word xt_x28literalx29
>21c8	00 00					.word 0
>21ca	76 16					.word xt_assertx3d
>21cc	bc 18					.word xt_x28literalx29
>21ce	d4 21					.word l_100
>21d0	6d 35					.word xt_x28branchx29
>21d2	ee 21					.word l_101
.21d4					l_100:
>21d4	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>21dc	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>21ec	68 00
.21ee					l_101:
>21ee	56 16					.word xt_testname
>21f0	bc 18					.word xt_x28literalx29
>21f2	00 00					.word 0
>21f4	bc 18					.word xt_x28literalx29
>21f6	ff ff					.word 65535
>21f8	d8 33					.word xt_and
>21fa	bc 18					.word xt_x28literalx29
>21fc	00 00					.word 0
>21fe	76 16					.word xt_assertx3d
>2200	bc 18					.word xt_x28literalx29
>2202	08 22					.word l_102
>2204	6d 35					.word xt_x28branchx29
>2206	22 22					.word l_103
.2208					l_102:
>2208	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>2210	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>2220	68 00
.2222					l_103:
>2222	56 16					.word xt_testname
>2224	bc 18					.word xt_x28literalx29
>2226	ff ff					.word 65535
>2228	bc 18					.word xt_x28literalx29
>222a	00 00					.word 0
>222c	d8 33					.word xt_and
>222e	bc 18					.word xt_x28literalx29
>2230	00 00					.word 0
>2232	76 16					.word xt_assertx3d
>2234	bc 18					.word xt_x28literalx29
>2236	3c 22					.word l_104
>2238	6d 35					.word xt_x28branchx29
>223a	56 22					.word l_105
.223c					l_104:
>223c	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>2244	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>2254	68 00
.2256					l_105:
>2256	56 16					.word xt_testname
>2258	bc 18					.word xt_x28literalx29
>225a	ff ff					.word 65535
>225c	bc 18					.word xt_x28literalx29
>225e	ff ff					.word 65535
>2260	d8 33					.word xt_and
>2262	bc 18					.word xt_x28literalx29
>2264	ff ff					.word 65535
>2266	76 16					.word xt_assertx3d
>2268	bc 18					.word xt_x28literalx29
>226a	70 22					.word l_106
>226c	6d 35					.word xt_x28branchx29
>226e	89 22					.word l_107
.2270					l_106:
>2270	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>2278	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>2288	00
.2289					l_107:
>2289	56 16					.word xt_testname
>228b	bc 18					.word xt_x28literalx29
>228d	00 00					.word 0
>228f	bc 18					.word xt_x28literalx29
>2291	00 00					.word 0
>2293	fc 33					.word xt_or
>2295	bc 18					.word xt_x28literalx29
>2297	00 00					.word 0
>2299	76 16					.word xt_assertx3d
>229b	bc 18					.word xt_x28literalx29
>229d	a3 22					.word l_108
>229f	6d 35					.word xt_x28branchx29
>22a1	bc 22					.word l_109
.22a3					l_108:
>22a3	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>22ab	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>22bb	00
.22bc					l_109:
>22bc	56 16					.word xt_testname
>22be	bc 18					.word xt_x28literalx29
>22c0	00 00					.word 0
>22c2	bc 18					.word xt_x28literalx29
>22c4	ff ff					.word 65535
>22c6	fc 33					.word xt_or
>22c8	bc 18					.word xt_x28literalx29
>22ca	ff ff					.word 65535
>22cc	76 16					.word xt_assertx3d
>22ce	bc 18					.word xt_x28literalx29
>22d0	d6 22					.word l_110
>22d2	6d 35					.word xt_x28branchx29
>22d4	ef 22					.word l_111
.22d6					l_110:
>22d6	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>22de	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>22ee	00
.22ef					l_111:
>22ef	56 16					.word xt_testname
>22f1	bc 18					.word xt_x28literalx29
>22f3	ff ff					.word 65535
>22f5	bc 18					.word xt_x28literalx29
>22f7	00 00					.word 0
>22f9	fc 33					.word xt_or
>22fb	bc 18					.word xt_x28literalx29
>22fd	ff ff					.word 65535
>22ff	76 16					.word xt_assertx3d
>2301	bc 18					.word xt_x28literalx29
>2303	09 23					.word l_112
>2305	6d 35					.word xt_x28branchx29
>2307	22 23					.word l_113
.2309					l_112:
>2309	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>2311	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2321	00
.2322					l_113:
>2322	56 16					.word xt_testname
>2324	bc 18					.word xt_x28literalx29
>2326	ff ff					.word 65535
>2328	bc 18					.word xt_x28literalx29
>232a	ff ff					.word 65535
>232c	fc 33					.word xt_or
>232e	bc 18					.word xt_x28literalx29
>2330	ff ff					.word 65535
>2332	76 16					.word xt_assertx3d
>2334	bc 18					.word xt_x28literalx29
>2336	3c 23					.word l_114
>2338	6d 35					.word xt_x28branchx29
>233a	56 23					.word l_115
.233c					l_114:
>233c	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>2344	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2354	68 00
.2356					l_115:
>2356	56 16					.word xt_testname
>2358	bc 18					.word xt_x28literalx29
>235a	00 00					.word 0
>235c	bc 18					.word xt_x28literalx29
>235e	00 00					.word 0
>2360	20 34					.word xt_xor
>2362	bc 18					.word xt_x28literalx29
>2364	00 00					.word 0
>2366	76 16					.word xt_assertx3d
>2368	bc 18					.word xt_x28literalx29
>236a	70 23					.word l_116
>236c	6d 35					.word xt_x28branchx29
>236e	8a 23					.word l_117
.2370					l_116:
>2370	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>2378	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>2388	68 00
.238a					l_117:
>238a	56 16					.word xt_testname
>238c	bc 18					.word xt_x28literalx29
>238e	00 00					.word 0
>2390	bc 18					.word xt_x28literalx29
>2392	ff ff					.word 65535
>2394	20 34					.word xt_xor
>2396	bc 18					.word xt_x28literalx29
>2398	ff ff					.word 65535
>239a	76 16					.word xt_assertx3d
>239c	bc 18					.word xt_x28literalx29
>239e	a4 23					.word l_118
>23a0	6d 35					.word xt_x28branchx29
>23a2	be 23					.word l_119
.23a4					l_118:
>23a4	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>23ac	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>23bc	68 00
.23be					l_119:
>23be	56 16					.word xt_testname
>23c0	bc 18					.word xt_x28literalx29
>23c2	ff ff					.word 65535
>23c4	bc 18					.word xt_x28literalx29
>23c6	00 00					.word 0
>23c8	20 34					.word xt_xor
>23ca	bc 18					.word xt_x28literalx29
>23cc	ff ff					.word 65535
>23ce	76 16					.word xt_assertx3d
>23d0	bc 18					.word xt_x28literalx29
>23d2	d8 23					.word l_120
>23d4	6d 35					.word xt_x28branchx29
>23d6	f2 23					.word l_121
.23d8					l_120:
>23d8	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>23e0	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>23f0	68 00
.23f2					l_121:
>23f2	56 16					.word xt_testname
>23f4	bc 18					.word xt_x28literalx29
>23f6	ff ff					.word 65535
>23f8	bc 18					.word xt_x28literalx29
>23fa	ff ff					.word 65535
>23fc	20 34					.word xt_xor
>23fe	bc 18					.word xt_x28literalx29
>2400	00 00					.word 0
>2402	76 16					.word xt_assertx3d
>2404	bc 18					.word xt_x28literalx29
>2406	0c 24					.word l_122
>2408	6d 35					.word xt_x28branchx29
>240a	20 24					.word l_123
.240c					l_122:
>240c	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>2414	74 20 2d 2d 3e 20 66 66 66 66 68 00
.2420					l_123:
>2420	56 16					.word xt_testname
>2422	bc 18					.word xt_x28literalx29
>2424	00 00					.word 0
>2426	44 34					.word xt_not
>2428	bc 18					.word xt_x28literalx29
>242a	ff ff					.word 65535
>242c	76 16					.word xt_assertx3d
>242e	bc 18					.word xt_x28literalx29
>2430	36 24					.word l_124
>2432	6d 35					.word xt_x28branchx29
>2434	4a 24					.word l_125
.2436					l_124:
>2436	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>243e	74 20 2d 2d 3e 20 30 30 30 30 68 00
.244a					l_125:
>244a	56 16					.word xt_testname
>244c	bc 18					.word xt_x28literalx29
>244e	ff ff					.word 65535
>2450	44 34					.word xt_not
>2452	bc 18					.word xt_x28literalx29
>2454	00 00					.word 0
>2456	76 16					.word xt_assertx3d
>2458	bc 18					.word xt_x28literalx29
>245a	60 24					.word l_126
>245c	6d 35					.word xt_x28branchx29
>245e	6f 24					.word l_127
.2460					l_126:
>2460	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>2468	20 30 30 30 30 68 00
.246f					l_127:
>246f	56 16					.word xt_testname
>2471	28 18					.word xt_0
>2473	66 34					.word xt_0x3c
>2475	bc 18					.word xt_x28literalx29
>2477	00 00					.word 0
>2479	76 16					.word xt_assertx3d
>247b	bc 18					.word xt_x28literalx29
>247d	83 24					.word l_128
>247f	6d 35					.word xt_x28branchx29
>2481	92 24					.word l_129
.2483					l_128:
>2483	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>248b	20 30 30 30 30 68 00
.2492					l_129:
>2492	56 16					.word xt_testname
>2494	bc 18					.word xt_x28literalx29
>2496	03 00					.word 3
>2498	66 34					.word xt_0x3c
>249a	bc 18					.word xt_x28literalx29
>249c	00 00					.word 0
>249e	76 16					.word xt_assertx3d
>24a0	bc 18					.word xt_x28literalx29
>24a2	a8 24					.word l_130
>24a4	6d 35					.word xt_x28branchx29
>24a6	bb 24					.word l_131
.24a8					l_130:
>24a8	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>24b0	20 2d 2d 3e 20 66 66 66 66 68 00
.24bb					l_131:
>24bb	56 16					.word xt_testname
>24bd	bc 18					.word xt_x28literalx29
>24bf	ff ff					.word 65535
>24c1	66 34					.word xt_0x3c
>24c3	bc 18					.word xt_x28literalx29
>24c5	ff ff					.word 65535
>24c7	76 16					.word xt_assertx3d
>24c9	bc 18					.word xt_x28literalx29
>24cb	d1 24					.word l_132
>24cd	6d 35					.word xt_x28branchx29
>24cf	e0 24					.word l_133
.24d1					l_132:
>24d1	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>24d9	20 66 66 66 66 68 00
.24e0					l_133:
>24e0	56 16					.word xt_testname
>24e2	28 18					.word xt_0
>24e4	8d 34					.word xt_0x3d
>24e6	bc 18					.word xt_x28literalx29
>24e8	ff ff					.word 65535
>24ea	76 16					.word xt_assertx3d
>24ec	bc 18					.word xt_x28literalx29
>24ee	f4 24					.word l_134
>24f0	6d 35					.word xt_x28branchx29
>24f2	03 25					.word l_135
.24f4					l_134:
>24f4	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>24fc	20 30 30 30 30 68 00
.2503					l_135:
>2503	56 16					.word xt_testname
>2505	bc 18					.word xt_x28literalx29
>2507	03 00					.word 3
>2509	8d 34					.word xt_0x3d
>250b	bc 18					.word xt_x28literalx29
>250d	00 00					.word 0
>250f	76 16					.word xt_assertx3d
>2511	bc 18					.word xt_x28literalx29
>2513	19 25					.word l_136
>2515	6d 35					.word xt_x28branchx29
>2517	2c 25					.word l_137
.2519					l_136:
>2519	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>2521	20 2d 2d 3e 20 30 30 30 30 68 00
.252c					l_137:
>252c	56 16					.word xt_testname
>252e	bc 18					.word xt_x28literalx29
>2530	ff ff					.word 65535
>2532	8d 34					.word xt_0x3d
>2534	bc 18					.word xt_x28literalx29
>2536	00 00					.word 0
>2538	76 16					.word xt_assertx3d
>253a	bc 18					.word xt_x28literalx29
>253c	42 25					.word l_138
>253e	6d 35					.word xt_x28branchx29
>2540	51 25					.word l_139
.2542					l_138:
>2542	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>254a	20 30 30 30 30 68 00
.2551					l_139:
>2551	56 16					.word xt_testname
>2553	28 18					.word xt_0
>2555	b8 34					.word xt_0x3e
>2557	bc 18					.word xt_x28literalx29
>2559	00 00					.word 0
>255b	76 16					.word xt_assertx3d
>255d	bc 18					.word xt_x28literalx29
>255f	65 25					.word l_140
>2561	6d 35					.word xt_x28branchx29
>2563	74 25					.word l_141
.2565					l_140:
>2565	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>256d	20 66 66 66 66 68 00
.2574					l_141:
>2574	56 16					.word xt_testname
>2576	bc 18					.word xt_x28literalx29
>2578	03 00					.word 3
>257a	b8 34					.word xt_0x3e
>257c	bc 18					.word xt_x28literalx29
>257e	ff ff					.word 65535
>2580	76 16					.word xt_assertx3d
>2582	bc 18					.word xt_x28literalx29
>2584	8a 25					.word l_142
>2586	6d 35					.word xt_x28branchx29
>2588	9d 25					.word l_143
.258a					l_142:
>258a	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>2592	20 2d 2d 3e 20 30 30 30 30 68 00
.259d					l_143:
>259d	56 16					.word xt_testname
>259f	bc 18					.word xt_x28literalx29
>25a1	ff ff					.word 65535
>25a3	b8 34					.word xt_0x3e
>25a5	bc 18					.word xt_x28literalx29
>25a7	00 00					.word 0
>25a9	76 16					.word xt_assertx3d
>25ab	bc 18					.word xt_x28literalx29
>25ad	b3 25					.word l_144
>25af	6d 35					.word xt_x28branchx29
>25b1	ca 25					.word l_145
.25b3					l_144:
>25b3	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>25bb	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.25ca					l_145:
>25ca	56 16					.word xt_testname
>25cc	2d 35					.word xt_cells
>25ce	62 18					.word xt_2
>25d0	e4 31					.word xt_x2d
>25d2	8d 34					.word xt_0x3d
>25d4	bc 18					.word xt_x28literalx29
>25d6	ff ff					.word 65535
>25d8	76 16					.word xt_assertx3d
>25da	bc 18					.word xt_x28literalx29
>25dc	e2 25					.word l_146
>25de	6d 35					.word xt_x28branchx29
>25e0	f4 25					.word l_147
.25e2					l_146:
>25e2	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>25ea	75 74 65 20 2d 2d 3e 20 31 00
.25f4					l_147:
>25f4	56 16					.word xt_testname
>25f6	bc 18					.word xt_x28literalx29
>25f8	44 18					.word xt_1
>25fa	8d 37					.word xt_execute
>25fc	44 18					.word xt_1
>25fe	76 16					.word xt_assertx3d
>2600	bc 18					.word xt_x28literalx29
>2602	08 26					.word l_148
>2604	6d 35					.word xt_x28branchx29
>2606	1e 26					.word l_149
.2608					l_148:
>2608	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>2610	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.261e					l_149:
>261e	56 16					.word xt_testname
>2620	44 18					.word xt_1
>2622	62 18					.word xt_2
>2624	bc 18					.word xt_x28literalx29
>2626	59 31					.word xt_x2b
>2628	8d 37					.word xt_execute
>262a	bc 18					.word xt_x28literalx29
>262c	03 00					.word 3
>262e	76 16					.word xt_assertx3d
>2630	bc 18					.word xt_x28literalx29
>2632	38 26					.word l_150
>2634	6d 35					.word xt_x28branchx29
>2636	51 26					.word l_151
.2638					l_150:
>2638	33 30 68 20 31 30 20 64			.null "30h 10 digit --> 0 ffffh"
>2640	69 67 69 74 20 2d 2d 3e 20 30 20 66 66 66 66 68
>2650	00
.2651					l_151:
>2651	56 16					.word xt_testname
>2653	bc 18					.word xt_x28literalx29
>2655	30 00					.word 48
>2657	bc 18					.word xt_x28literalx29
>2659	0a 00					.word 10
>265b	79 38					.word xt_digit
>265d	bc 18					.word xt_x28literalx29
>265f	ff ff					.word 65535
>2661	76 16					.word xt_assertx3d
>2663	28 18					.word xt_0
>2665	76 16					.word xt_assertx3d
>2667	bc 18					.word xt_x28literalx29
>2669	6f 26					.word l_152
>266b	6d 35					.word xt_x28branchx29
>266d	88 26					.word l_153
.266f					l_152:
>266f	33 31 68 20 31 30 20 64			.null "31h 10 digit --> 1 ffffh"
>2677	69 67 69 74 20 2d 2d 3e 20 31 20 66 66 66 66 68
>2687	00
.2688					l_153:
>2688	56 16					.word xt_testname
>268a	bc 18					.word xt_x28literalx29
>268c	31 00					.word 49
>268e	bc 18					.word xt_x28literalx29
>2690	0a 00					.word 10
>2692	79 38					.word xt_digit
>2694	bc 18					.word xt_x28literalx29
>2696	ff ff					.word 65535
>2698	76 16					.word xt_assertx3d
>269a	44 18					.word xt_1
>269c	76 16					.word xt_assertx3d
>269e	bc 18					.word xt_x28literalx29
>26a0	a6 26					.word l_154
>26a2	6d 35					.word xt_x28branchx29
>26a4	bf 26					.word l_155
.26a6					l_154:
>26a6	33 39 68 20 31 30 20 64			.null "39h 10 digit --> 9 ffffh"
>26ae	69 67 69 74 20 2d 2d 3e 20 39 20 66 66 66 66 68
>26be	00
.26bf					l_155:
>26bf	56 16					.word xt_testname
>26c1	bc 18					.word xt_x28literalx29
>26c3	39 00					.word 57
>26c5	bc 18					.word xt_x28literalx29
>26c7	0a 00					.word 10
>26c9	79 38					.word xt_digit
>26cb	bc 18					.word xt_x28literalx29
>26cd	ff ff					.word 65535
>26cf	76 16					.word xt_assertx3d
>26d1	bc 18					.word xt_x28literalx29
>26d3	09 00					.word 9
>26d5	76 16					.word xt_assertx3d
>26d7	bc 18					.word xt_x28literalx29
>26d9	df 26					.word l_156
>26db	6d 35					.word xt_x28branchx29
>26dd	f2 26					.word l_157
.26df					l_156:
>26df	34 31 68 20 31 30 20 64			.null "41h 10 digit --> 0"
>26e7	69 67 69 74 20 2d 2d 3e 20 30 00
.26f2					l_157:
>26f2	56 16					.word xt_testname
>26f4	bc 18					.word xt_x28literalx29
>26f6	41 00					.word 65
>26f8	bc 18					.word xt_x28literalx29
>26fa	0a 00					.word 10
>26fc	79 38					.word xt_digit
>26fe	28 18					.word xt_0
>2700	76 16					.word xt_assertx3d
>2702	bc 18					.word xt_x28literalx29
>2704	0a 27					.word l_158
>2706	6d 35					.word xt_x28branchx29
>2708	1d 27					.word l_159
.270a					l_158:
>270a	36 31 68 20 31 30 20 64			.null "61h 10 digit --> 0"
>2712	69 67 69 74 20 2d 2d 3e 20 30 00
.271d					l_159:
>271d	56 16					.word xt_testname
>271f	bc 18					.word xt_x28literalx29
>2721	61 00					.word 97
>2723	bc 18					.word xt_x28literalx29
>2725	0a 00					.word 10
>2727	79 38					.word xt_digit
>2729	28 18					.word xt_0
>272b	76 16					.word xt_assertx3d
>272d	bc 18					.word xt_x28literalx29
>272f	35 27					.word l_160
>2731	6d 35					.word xt_x28branchx29
>2733	4f 27					.word l_161
.2735					l_160:
>2735	34 31 68 20 31 36 20 64			.null "41h 16 digit --> 10 ffffh"
>273d	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>274d	68 00
.274f					l_161:
>274f	56 16					.word xt_testname
>2751	bc 18					.word xt_x28literalx29
>2753	41 00					.word 65
>2755	bc 18					.word xt_x28literalx29
>2757	10 00					.word 16
>2759	79 38					.word xt_digit
>275b	bc 18					.word xt_x28literalx29
>275d	ff ff					.word 65535
>275f	76 16					.word xt_assertx3d
>2761	bc 18					.word xt_x28literalx29
>2763	0a 00					.word 10
>2765	76 16					.word xt_assertx3d
>2767	bc 18					.word xt_x28literalx29
>2769	6f 27					.word l_162
>276b	6d 35					.word xt_x28branchx29
>276d	89 27					.word l_163
.276f					l_162:
>276f	36 31 68 20 31 36 20 64			.null "61h 16 digit --> 10 ffffh"
>2777	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>2787	68 00
.2789					l_163:
>2789	56 16					.word xt_testname
>278b	bc 18					.word xt_x28literalx29
>278d	61 00					.word 97
>278f	bc 18					.word xt_x28literalx29
>2791	10 00					.word 16
>2793	79 38					.word xt_digit
>2795	bc 18					.word xt_x28literalx29
>2797	ff ff					.word 65535
>2799	76 16					.word xt_assertx3d
>279b	bc 18					.word xt_x28literalx29
>279d	0a 00					.word 10
>279f	76 16					.word xt_assertx3d
>27a1	bc 18					.word xt_x28literalx29
>27a3	a9 27					.word l_164
>27a5	6d 35					.word xt_x28branchx29
>27a7	c3 27					.word l_165
.27a9					l_164:
>27a9	34 36 68 20 31 36 20 64			.null "46h 16 digit --> fh ffffh"
>27b1	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>27c1	68 00
.27c3					l_165:
>27c3	56 16					.word xt_testname
>27c5	bc 18					.word xt_x28literalx29
>27c7	46 00					.word 70
>27c9	bc 18					.word xt_x28literalx29
>27cb	10 00					.word 16
>27cd	79 38					.word xt_digit
>27cf	bc 18					.word xt_x28literalx29
>27d1	ff ff					.word 65535
>27d3	76 16					.word xt_assertx3d
>27d5	bc 18					.word xt_x28literalx29
>27d7	0f 00					.word 15
>27d9	76 16					.word xt_assertx3d
>27db	bc 18					.word xt_x28literalx29
>27dd	e3 27					.word l_166
>27df	6d 35					.word xt_x28branchx29
>27e1	fd 27					.word l_167
.27e3					l_166:
>27e3	36 36 68 20 31 36 20 64			.null "66h 16 digit --> fh ffffh"
>27eb	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>27fb	68 00
.27fd					l_167:
>27fd	56 16					.word xt_testname
>27ff	bc 18					.word xt_x28literalx29
>2801	66 00					.word 102
>2803	bc 18					.word xt_x28literalx29
>2805	10 00					.word 16
>2807	79 38					.word xt_digit
>2809	bc 18					.word xt_x28literalx29
>280b	ff ff					.word 65535
>280d	76 16					.word xt_assertx3d
>280f	bc 18					.word xt_x28literalx29
>2811	0f 00					.word 15
>2813	76 16					.word xt_assertx3d
>2815	bc 18					.word xt_x28literalx29
>2817	1d 28					.word l_169
>2819	6d 35					.word xt_x28branchx29
>281b	2a 28					.word l_170
.281d					l_169:
>281d	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>2825	2d 3e 20 30 00
.282a					l_170:
>282a	56 16					.word xt_testname
>282c	28 18					.word xt_0
>282e	69 3a					.word xt_x3fdup
>2830	28 18					.word xt_0
>2832	76 16					.word xt_assertx3d
>2834	bc 18					.word xt_x28literalx29
>2836	3c 28					.word l_171
>2838	6d 35					.word xt_x28branchx29
>283a	4b 28					.word l_172
.283c					l_171:
>283c	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>2844	2d 3e 20 31 20 31 00
.284b					l_172:
>284b	56 16					.word xt_testname
>284d	44 18					.word xt_1
>284f	69 3a					.word xt_x3fdup
>2851	44 18					.word xt_1
>2853	76 16					.word xt_assertx3d
>2855	44 18					.word xt_1
>2857	76 16					.word xt_assertx3d
>2859	bc 18					.word xt_x28literalx29
>285b	61 28					.word l_173
>285d	6d 35					.word xt_x28branchx29
>285f	75 28					.word l_174
.2861					l_173:
>2861	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>2869	74 20 2d 2d 3e 20 32 20 33 20 31 00
.2875					l_174:
>2875	56 16					.word xt_testname
>2877	44 18					.word xt_1
>2879	62 18					.word xt_2
>287b	bc 18					.word xt_x28literalx29
>287d	03 00					.word 3
>287f	89 3a					.word xt_rot
>2881	44 18					.word xt_1
>2883	76 16					.word xt_assertx3d
>2885	bc 18					.word xt_x28literalx29
>2887	03 00					.word 3
>2889	76 16					.word xt_assertx3d
>288b	62 18					.word xt_2
>288d	76 16					.word xt_assertx3d
>288f	bc 18					.word xt_x28literalx29
>2891	97 28					.word l_175
>2893	6d 35					.word xt_x28branchx29
>2895	ac 28					.word l_176
.2897					l_175:
>2897	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>289f	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.28ac					l_176:
>28ac	56 16					.word xt_testname
>28ae	44 18					.word xt_1
>28b0	62 18					.word xt_2
>28b2	a9 3a					.word xt_2dup
>28b4	62 18					.word xt_2
>28b6	76 16					.word xt_assertx3d
>28b8	44 18					.word xt_1
>28ba	76 16					.word xt_assertx3d
>28bc	62 18					.word xt_2
>28be	76 16					.word xt_assertx3d
>28c0	44 18					.word xt_1
>28c2	76 16					.word xt_assertx3d
>28c4	bc 18					.word xt_x28literalx29
>28c6	cc 28					.word l_177
>28c8	6d 35					.word xt_x28branchx29
>28ca	e2 28					.word l_178
.28cc					l_177:
>28cc	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>28d4	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.28e2					l_178:
>28e2	56 16					.word xt_testname
>28e4	44 18					.word xt_1
>28e6	62 18					.word xt_2
>28e8	bc 18					.word xt_x28literalx29
>28ea	03 00					.word 3
>28ec	bc 18					.word xt_x28literalx29
>28ee	04 00					.word 4
>28f0	c5 3a					.word xt_2drop
>28f2	62 18					.word xt_2
>28f4	76 16					.word xt_assertx3d
>28f6	44 18					.word xt_1
>28f8	76 16					.word xt_assertx3d
>28fa	bc 18					.word xt_x28literalx29
>28fc	02 29					.word l_179
>28fe	6d 35					.word xt_x28branchx29
>2900	12 29					.word l_180
.2902					l_179:
>2902	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>290a	3e 20 66 66 66 66 68 00
.2912					l_180:
>2912	56 16					.word xt_testname
>2914	44 18					.word xt_1
>2916	62 18					.word xt_2
>2918	e1 3a					.word xt_x3c
>291a	bc 18					.word xt_x28literalx29
>291c	ff ff					.word 65535
>291e	76 16					.word xt_assertx3d
>2920	bc 18					.word xt_x28literalx29
>2922	28 29					.word l_181
>2924	6d 35					.word xt_x28branchx29
>2926	38 29					.word l_182
.2928					l_181:
>2928	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>2930	3e 20 30 30 30 30 68 00
.2938					l_182:
>2938	56 16					.word xt_testname
>293a	62 18					.word xt_2
>293c	44 18					.word xt_1
>293e	e1 3a					.word xt_x3c
>2940	bc 18					.word xt_x28literalx29
>2942	00 00					.word 0
>2944	76 16					.word xt_assertx3d
>2946	bc 18					.word xt_x28literalx29
>2948	4e 29					.word l_183
>294a	6d 35					.word xt_x28branchx29
>294c	62 29					.word l_184
.294e					l_183:
>294e	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2956	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.2962					l_184:
>2962	56 16					.word xt_testname
>2964	28 18					.word xt_0
>2966	bc 18					.word xt_x28literalx29
>2968	ff ff					.word 65535
>296a	e1 3a					.word xt_x3c
>296c	bc 18					.word xt_x28literalx29
>296e	00 00					.word 0
>2970	76 16					.word xt_assertx3d
>2972	bc 18					.word xt_x28literalx29
>2974	7a 29					.word l_185
>2976	6d 35					.word xt_x28branchx29
>2978	8e 29					.word l_186
.297a					l_185:
>297a	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>2982	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.298e					l_186:
>298e	56 16					.word xt_testname
>2990	bc 18					.word xt_x28literalx29
>2992	ff ff					.word 65535
>2994	28 18					.word xt_0
>2996	e1 3a					.word xt_x3c
>2998	bc 18					.word xt_x28literalx29
>299a	ff ff					.word 65535
>299c	76 16					.word xt_assertx3d
>299e	bc 18					.word xt_x28literalx29
>29a0	a6 29					.word l_187
>29a2	6d 35					.word xt_x28branchx29
>29a4	b6 29					.word l_188
.29a6					l_187:
>29a6	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>29ae	3e 20 30 30 30 30 68 00
.29b6					l_188:
>29b6	56 16					.word xt_testname
>29b8	44 18					.word xt_1
>29ba	62 18					.word xt_2
>29bc	fd 3a					.word xt_x3e
>29be	bc 18					.word xt_x28literalx29
>29c0	00 00					.word 0
>29c2	76 16					.word xt_assertx3d
>29c4	bc 18					.word xt_x28literalx29
>29c6	cc 29					.word l_189
>29c8	6d 35					.word xt_x28branchx29
>29ca	dc 29					.word l_190
.29cc					l_189:
>29cc	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>29d4	3e 20 66 66 66 66 68 00
.29dc					l_190:
>29dc	56 16					.word xt_testname
>29de	62 18					.word xt_2
>29e0	44 18					.word xt_1
>29e2	fd 3a					.word xt_x3e
>29e4	bc 18					.word xt_x28literalx29
>29e6	ff ff					.word 65535
>29e8	76 16					.word xt_assertx3d
>29ea	bc 18					.word xt_x28literalx29
>29ec	f2 29					.word l_191
>29ee	6d 35					.word xt_x28branchx29
>29f0	06 2a					.word l_192
.29f2					l_191:
>29f2	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>29fa	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2a06					l_192:
>2a06	56 16					.word xt_testname
>2a08	28 18					.word xt_0
>2a0a	bc 18					.word xt_x28literalx29
>2a0c	ff ff					.word 65535
>2a0e	fd 3a					.word xt_x3e
>2a10	bc 18					.word xt_x28literalx29
>2a12	ff ff					.word 65535
>2a14	76 16					.word xt_assertx3d
>2a16	bc 18					.word xt_x28literalx29
>2a18	1e 2a					.word l_193
>2a1a	6d 35					.word xt_x28branchx29
>2a1c	32 2a					.word l_194
.2a1e					l_193:
>2a1e	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2a26	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.2a32					l_194:
>2a32	56 16					.word xt_testname
>2a34	bc 18					.word xt_x28literalx29
>2a36	ff ff					.word 65535
>2a38	28 18					.word xt_0
>2a3a	fd 3a					.word xt_x3e
>2a3c	bc 18					.word xt_x28literalx29
>2a3e	00 00					.word 0
>2a40	76 16					.word xt_assertx3d
>2a42	bc 18					.word xt_x28literalx29
>2a44	4a 2a					.word l_195
>2a46	6d 35					.word xt_x28branchx29
>2a48	5a 2a					.word l_196
.2a4a					l_195:
>2a4a	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>2a52	3e 20 30 30 30 30 68 00
.2a5a					l_196:
>2a5a	56 16					.word xt_testname
>2a5c	44 18					.word xt_1
>2a5e	28 18					.word xt_0
>2a60	19 3b					.word xt_x3d
>2a62	bc 18					.word xt_x28literalx29
>2a64	00 00					.word 0
>2a66	76 16					.word xt_assertx3d
>2a68	bc 18					.word xt_x28literalx29
>2a6a	70 2a					.word l_197
>2a6c	6d 35					.word xt_x28branchx29
>2a6e	80 2a					.word l_198
.2a70					l_197:
>2a70	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2a78	3e 20 66 66 66 66 68 00
.2a80					l_198:
>2a80	56 16					.word xt_testname
>2a82	44 18					.word xt_1
>2a84	44 18					.word xt_1
>2a86	19 3b					.word xt_x3d
>2a88	bc 18					.word xt_x28literalx29
>2a8a	ff ff					.word 65535
>2a8c	76 16					.word xt_assertx3d
>2a8e	bc 18					.word xt_x28literalx29
>2a90	96 2a					.word l_199
>2a92	6d 35					.word xt_x28branchx29
>2a94	aa 2a					.word l_200
.2a96					l_199:
>2a96	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2a9e	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2aaa					l_200:
>2aaa	56 16					.word xt_testname
>2aac	bc 18					.word xt_x28literalx29
>2aae	ff ff					.word 65535
>2ab0	28 18					.word xt_0
>2ab2	19 3b					.word xt_x3d
>2ab4	bc 18					.word xt_x28literalx29
>2ab6	00 00					.word 0
>2ab8	76 16					.word xt_assertx3d
>2aba	bc 18					.word xt_x28literalx29
>2abc	c2 2a					.word l_201
>2abe	6d 35					.word xt_x28branchx29
>2ac0	da 2a					.word l_202
.2ac2					l_201:
>2ac2	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2aca	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2ada					l_202:
>2ada	56 16					.word xt_testname
>2adc	bc 18					.word xt_x28literalx29
>2ade	ff ff					.word 65535
>2ae0	bc 18					.word xt_x28literalx29
>2ae2	ff ff					.word 65535
>2ae4	19 3b					.word xt_x3d
>2ae6	bc 18					.word xt_x28literalx29
>2ae8	ff ff					.word 65535
>2aea	76 16					.word xt_assertx3d
>2aec	bc 18					.word xt_x28literalx29
>2aee	f4 2a					.word l_203
>2af0	6d 35					.word xt_x28branchx29
>2af2	04 2b					.word l_204
.2af4					l_203:
>2af4	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2afc	3e 20 66 66 66 66 68 00
.2b04					l_204:
>2b04	56 16					.word xt_testname
>2b06	28 18					.word xt_0
>2b08	28 18					.word xt_0
>2b0a	19 3b					.word xt_x3d
>2b0c	bc 18					.word xt_x28literalx29
>2b0e	ff ff					.word 65535
>2b10	76 16					.word xt_assertx3d
>2b12	bc 18					.word xt_x28literalx29
>2b14	1a 2b					.word l_206
>2b16	6d 35					.word xt_x28branchx29
>2b18	26 2b					.word l_207
.2b1a					l_206:
>2b1a	31 20 61 62 73 20 2d 2d			.null "1 abs --> 1"
>2b22	3e 20 31 00
.2b26					l_207:
>2b26	56 16					.word xt_testname
>2b28	44 18					.word xt_1
>2b2a	53 3b					.word xt_abs
>2b2c	44 18					.word xt_1
>2b2e	76 16					.word xt_assertx3d
>2b30	bc 18					.word xt_x28literalx29
>2b32	38 2b					.word l_208
>2b34	6d 35					.word xt_x28branchx29
>2b36	48 2b					.word l_209
.2b38					l_208:
>2b38	66 66 66 66 68 20 61 62			.null "ffffh abs --> 1"
>2b40	73 20 2d 2d 3e 20 31 00
.2b48					l_209:
>2b48	56 16					.word xt_testname
>2b4a	bc 18					.word xt_x28literalx29
>2b4c	ff ff					.word 65535
>2b4e	53 3b					.word xt_abs
>2b50	44 18					.word xt_1
>2b52	76 16					.word xt_assertx3d
>2b54	bc 18					.word xt_x28literalx29
>2b56	5c 2b					.word l_210
>2b58	6d 35					.word xt_x28branchx29
>2b5a	68 2b					.word l_211
.2b5c					l_210:
>2b5c	30 20 61 62 73 20 2d 2d			.null "0 abs --> 0"
>2b64	3e 20 30 00
.2b68					l_211:
>2b68	56 16					.word xt_testname
>2b6a	28 18					.word xt_0
>2b6c	53 3b					.word xt_abs
>2b6e	28 18					.word xt_0
>2b70	76 16					.word xt_assertx3d
>2b72	bc 18					.word xt_x28literalx29
>2b74	7a 2b					.word l_213
>2b76	6d 35					.word xt_x28branchx29
>2b78	8b 2b					.word l_214
.2b7a					l_213:
>2b7a	31 20 32 20 64 61 62 73			.null "1 2 dabs --> 1 2"
>2b82	20 2d 2d 3e 20 31 20 32 00
.2b8b					l_214:
>2b8b	56 16					.word xt_testname
>2b8d	44 18					.word xt_1
>2b8f	62 18					.word xt_2
>2b91	79 3b					.word xt_dabs
>2b93	62 18					.word xt_2
>2b95	76 16					.word xt_assertx3d
>2b97	44 18					.word xt_1
>2b99	76 16					.word xt_assertx3d
>2b9b	bc 18					.word xt_x28literalx29
>2b9d	a3 2b					.word l_215
>2b9f	6d 35					.word xt_x28branchx29
>2ba1	bc 2b					.word l_216
.2ba3					l_215:
>2ba3	66 66 66 66 68 20 66 66			.null "ffffh ffffh dabs --> 0 1"
>2bab	66 66 68 20 64 61 62 73 20 2d 2d 3e 20 30 20 31
>2bbb	00
.2bbc					l_216:
>2bbc	56 16					.word xt_testname
>2bbe	bc 18					.word xt_x28literalx29
>2bc0	ff ff					.word 65535
>2bc2	bc 18					.word xt_x28literalx29
>2bc4	ff ff					.word 65535
>2bc6	79 3b					.word xt_dabs
>2bc8	44 18					.word xt_1
>2bca	76 16					.word xt_assertx3d
>2bcc	28 18					.word xt_0
>2bce	76 16					.word xt_assertx3d
>2bd0	bc 18					.word xt_x28literalx29
>2bd2	d8 2b					.word l_217
>2bd4	6d 35					.word xt_x28branchx29
>2bd6	e9 2b					.word l_218
.2bd8					l_217:
>2bd8	30 20 30 20 64 61 62 73			.null "0 0 dabs --> 0 0"
>2be0	20 2d 2d 3e 20 30 20 30 00
.2be9					l_218:
>2be9	56 16					.word xt_testname
>2beb	28 18					.word xt_0
>2bed	28 18					.word xt_0
>2bef	79 3b					.word xt_dabs
>2bf1	28 18					.word xt_0
>2bf3	76 16					.word xt_assertx3d
>2bf5	28 18					.word xt_0
>2bf7	76 16					.word xt_assertx3d
>2bf9	bc 18					.word xt_x28literalx29
>2bfb	01 2c					.word l_220
>2bfd	6d 35					.word xt_x28branchx29
>2bff	0d 2c					.word l_221
.2c01					l_220:
>2c01	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>2c09	3e 20 32 00
.2c0d					l_221:
>2c0d	56 16					.word xt_testname
>2c0f	bc 18					.word xt_x28literalx29
>2c11	06 00					.word 6
>2c13	bc 18					.word xt_x28literalx29
>2c15	03 00					.word 3
>2c17	e7 3b					.word xt_x2f
>2c19	62 18					.word xt_2
>2c1b	76 16					.word xt_assertx3d
>2c1d	bc 18					.word xt_x28literalx29
>2c1f	25 2c					.word l_222
>2c21	6d 35					.word xt_x28branchx29
>2c23	32 2c					.word l_223
.2c25					l_222:
>2c25	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2c2d	2d 3e 20 33 00
.2c32					l_223:
>2c32	56 16					.word xt_testname
>2c34	bc 18					.word xt_x28literalx29
>2c36	0a 00					.word 10
>2c38	bc 18					.word xt_x28literalx29
>2c3a	03 00					.word 3
>2c3c	e7 3b					.word xt_x2f
>2c3e	bc 18					.word xt_x28literalx29
>2c40	03 00					.word 3
>2c42	76 16					.word xt_assertx3d
>2c44	bc 18					.word xt_x28literalx29
>2c46	4c 2c					.word l_224
>2c48	6d 35					.word xt_x28branchx29
>2c4a	5a 2c					.word l_225
.2c4c					l_224:
>2c4c	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2c54	2d 2d 3e 20 30 00
.2c5a					l_225:
>2c5a	56 16					.word xt_testname
>2c5c	bc 18					.word xt_x28literalx29
>2c5e	06 00					.word 6
>2c60	bc 18					.word xt_x28literalx29
>2c62	03 00					.word 3
>2c64	05 3c					.word xt_mod
>2c66	28 18					.word xt_0
>2c68	76 16					.word xt_assertx3d
>2c6a	bc 18					.word xt_x28literalx29
>2c6c	72 2c					.word l_226
>2c6e	6d 35					.word xt_x28branchx29
>2c70	81 2c					.word l_227
.2c72					l_226:
>2c72	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>2c7a	20 2d 2d 3e 20 31 00
.2c81					l_227:
>2c81	56 16					.word xt_testname
>2c83	bc 18					.word xt_x28literalx29
>2c85	0a 00					.word 10
>2c87	bc 18					.word xt_x28literalx29
>2c89	03 00					.word 3
>2c8b	05 3c					.word xt_mod
>2c8d	44 18					.word xt_1
>2c8f	76 16					.word xt_assertx3d
>2c91	bc 18					.word xt_x28literalx29
>2c93	99 2c					.word l_230
>2c95	6d 35					.word xt_x28branchx29
>2c97	a7 2c					.word l_231
.2c99					l_230:
>2c99	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2ca1	2d 2d 3e 20 32 00
.2ca7					l_231:
>2ca7	56 16					.word xt_testname
>2ca9	44 18					.word xt_1
>2cab	62 18					.word xt_2
>2cad	21 3c					.word xt_max
>2caf	62 18					.word xt_2
>2cb1	76 16					.word xt_assertx3d
>2cb3	bc 18					.word xt_x28literalx29
>2cb5	bb 2c					.word l_232
>2cb7	6d 35					.word xt_x28branchx29
>2cb9	c9 2c					.word l_233
.2cbb					l_232:
>2cbb	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2cc3	2d 2d 3e 20 33 00
.2cc9					l_233:
>2cc9	56 16					.word xt_testname
>2ccb	bc 18					.word xt_x28literalx29
>2ccd	03 00					.word 3
>2ccf	28 18					.word xt_0
>2cd1	21 3c					.word xt_max
>2cd3	bc 18					.word xt_x28literalx29
>2cd5	03 00					.word 3
>2cd7	76 16					.word xt_assertx3d
>2cd9	bc 18					.word xt_x28literalx29
>2cdb	e1 2c					.word l_234
>2cdd	6d 35					.word xt_x28branchx29
>2cdf	fb 2c					.word l_235
.2ce1					l_234:
>2ce1	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>2ce9	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>2cf9	68 00
.2cfb					l_235:
>2cfb	56 16					.word xt_testname
>2cfd	bc 18					.word xt_x28literalx29
>2cff	fe ff					.word 65534
>2d01	bc 18					.word xt_x28literalx29
>2d03	ff ff					.word 65535
>2d05	21 3c					.word xt_max
>2d07	bc 18					.word xt_x28literalx29
>2d09	ff ff					.word 65535
>2d0b	76 16					.word xt_assertx3d
>2d0d	bc 18					.word xt_x28literalx29
>2d0f	15 2d					.word l_238
>2d11	6d 35					.word xt_x28branchx29
>2d13	23 2d					.word l_239
.2d15					l_238:
>2d15	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2d1d	2d 2d 3e 20 31 00
.2d23					l_239:
>2d23	56 16					.word xt_testname
>2d25	44 18					.word xt_1
>2d27	62 18					.word xt_2
>2d29	4b 3c					.word xt_min
>2d2b	44 18					.word xt_1
>2d2d	76 16					.word xt_assertx3d
>2d2f	bc 18					.word xt_x28literalx29
>2d31	37 2d					.word l_240
>2d33	6d 35					.word xt_x28branchx29
>2d35	45 2d					.word l_241
.2d37					l_240:
>2d37	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2d3f	2d 2d 3e 20 30 00
.2d45					l_241:
>2d45	56 16					.word xt_testname
>2d47	bc 18					.word xt_x28literalx29
>2d49	03 00					.word 3
>2d4b	28 18					.word xt_0
>2d4d	4b 3c					.word xt_min
>2d4f	28 18					.word xt_0
>2d51	76 16					.word xt_assertx3d
>2d53	bc 18					.word xt_x28literalx29
>2d55	5b 2d					.word l_242
>2d57	6d 35					.word xt_x28branchx29
>2d59	75 2d					.word l_243
.2d5b					l_242:
>2d5b	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2d63	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2d73	68 00
.2d75					l_243:
>2d75	56 16					.word xt_testname
>2d77	bc 18					.word xt_x28literalx29
>2d79	fe ff					.word 65534
>2d7b	bc 18					.word xt_x28literalx29
>2d7d	ff ff					.word 65535
>2d7f	4b 3c					.word xt_min
>2d81	bc 18					.word xt_x28literalx29
>2d83	fe ff					.word 65534
>2d85	76 16					.word xt_assertx3d
>2d87	0e 16					.word i_exit
.2d89					w_drop:
>2d89	04					.byte $04
>2d8a	64 72 6f 70				.text 'drop'
>2d8e						.fill 12
>2d9a	fc 18					.word w_unittest
.2d9c					xt_drop:
.2d9c	e8		inx			inx
.2d9d	e8		inx			inx
.2d9e	4c 29 16	jmp $1629		jmp next
.2da1					w_dup:
>2da1	03					.byte $03
>2da2	64 75 70				.text 'dup'
>2da5						.fill 13
>2db2	89 2d					.word w_drop
.2db4					xt_dup:
.2db4	b5 02		lda $02,x		lda pstack+2,x
.2db6	95 00		sta $00,x		sta pstack,x
.2db8	b5 03		lda $03,x		lda pstack+3,x
.2dba	95 01		sta $01,x		sta pstack+1,x
.2dbc	ca		dex			dex
.2dbd	ca		dex			dex
.2dbe	4c 29 16	jmp $1629		jmp next
.2dc1					w_swap:
>2dc1	04					.byte $04
>2dc2	73 77 61 70				.text 'swap'
>2dc6						.fill 12
>2dd2	a1 2d					.word w_dup
.2dd4					xt_swap:
.2dd4	b5 02		lda $02,x		lda pstack+2,x
.2dd6	b4 04		ldy $04,x		ldy pstack+4,x
.2dd8	94 02		sty $02,x		sty pstack+2,x
.2dda	95 04		sta $04,x		sta pstack+4,x
.2ddc	b5 03		lda $03,x		lda pstack+3,x
.2dde	b4 05		ldy $05,x		ldy pstack+5,x
.2de0	94 03		sty $03,x		sty pstack+3,x
.2de2	95 05		sta $05,x		sta pstack+5,x
.2de4	4c 29 16	jmp $1629		jmp next
.2de7					w_2swap:
>2de7	05					.byte $05
>2de8	32 73 77 61 70				.text '2swap'
>2ded						.fill 11
>2df8	c1 2d					.word w_swap
.2dfa					xt_2swap:
.2dfa	b5 05		lda $05,x		lda pstack+5,x
.2dfc	48		pha			pha
.2dfd	b5 04		lda $04,x		lda pstack+4,x
.2dff	48		pha			pha
.2e00	b5 03		lda $03,x		lda pstack+3,x
.2e02	48		pha			pha
.2e03	b5 02		lda $02,x		lda pstack+2,x
.2e05	48		pha			pha
.2e06	b5 09		lda $09,x		lda pstack+9,x
.2e08	95 05		sta $05,x		sta pstack+5,x
.2e0a	b5 08		lda $08,x		lda pstack+8,x
.2e0c	95 04		sta $04,x		sta pstack+4,x
.2e0e	b5 07		lda $07,x		lda pstack+7,x
.2e10	95 03		sta $03,x		sta pstack+3,x
.2e12	b5 06		lda $06,x		lda pstack+6,x
.2e14	95 02		sta $02,x		sta pstack+2,x
.2e16	68		pla			pla
.2e17	95 06		sta $06,x		sta pstack+6,x
.2e19	68		pla			pla
.2e1a	95 07		sta $07,x		sta pstack+7,x
.2e1c	68		pla			pla
.2e1d	95 08		sta $08,x		sta pstack+8,x
.2e1f	68		pla			pla
.2e20	95 09		sta $09,x		sta pstack+9,x
.2e22	4c 29 16	jmp $1629		jmp next
.2e25					w_over:
>2e25	04					.byte $04
>2e26	6f 76 65 72				.text 'over'
>2e2a						.fill 12
>2e36	e7 2d					.word w_2swap
.2e38					xt_over:
.2e38	b5 04		lda $04,x		lda pstack+4,x
.2e3a	95 00		sta $00,x		sta pstack,x
.2e3c	b5 05		lda $05,x		lda pstack+5,x
.2e3e	95 01		sta $01,x		sta pstack+1,x
.2e40	ca		dex			dex
.2e41	ca		dex			dex
.2e42	4c 29 16	jmp $1629		jmp next
.2e45					w_2over:
>2e45	05					.byte $05
>2e46	32 6f 76 65 72				.text '2over'
>2e4b						.fill 11
>2e56	25 2e					.word w_over
.2e58					xt_2over:
.2e58	ca		dex			dex
.2e59	ca		dex			dex
.2e5a	ca		dex			dex
.2e5b	ca		dex			dex
.2e5c	b5 0d		lda $0d,x		lda pstack+13,x
.2e5e	95 05		sta $05,x		sta pstack+5,x
.2e60	b5 0c		lda $0c,x		lda pstack+12,x
.2e62	95 04		sta $04,x		sta pstack+4,x
.2e64	b5 0b		lda $0b,x		lda pstack+11,x
.2e66	95 03		sta $03,x		sta pstack+3,x
.2e68	b5 0a		lda $0a,x		lda pstack+10,x
.2e6a	95 02		sta $02,x		sta pstack+2,x
.2e6c	4c 29 16	jmp $1629		jmp next
.2e6f					w_x3er:
>2e6f	02					.byte $02
>2e70	3e 72					.text '>r'
>2e72						.fill 14
>2e80	45 2e					.word w_2over
.2e82					xt_x3er:
.2e82	b5 03		lda $03,x		lda pstack+3,x
.2e84	48		pha			pha
.2e85	b5 02		lda $02,x		lda pstack+2,x
.2e87	48		pha			pha
.2e88	e8		inx			inx
.2e89	e8		inx			inx
.2e8a	4c 29 16	jmp $1629		jmp next
.2e8d					w_rx3e:
>2e8d	02					.byte $02
>2e8e	72 3e					.text 'r>'
>2e90						.fill 14
>2e9e	6f 2e					.word w_x3er
.2ea0					xt_rx3e:
.2ea0	68		pla			pla
.2ea1	95 00		sta $00,x		sta pstack,x
.2ea3	68		pla			pla
.2ea4	95 01		sta $01,x		sta pstack+1,x
.2ea6	ca		dex			dex
.2ea7	ca		dex			dex
.2ea8	4c 29 16	jmp $1629		jmp next
.2eab					w_r:
>2eab	01					.byte $01
>2eac	72					.text 'r'
>2ead						.fill 15
>2ebc	8d 2e					.word w_rx3e
.2ebe					xt_r:
.2ebe	68		pla			pla
.2ebf	95 00		sta $00,x		sta pstack,x
.2ec1	68		pla			pla
.2ec2	95 01		sta $01,x		sta pstack+1,x
.2ec4	48		pha			pha
.2ec5	b5 00		lda $00,x		lda pstack,x
.2ec7	48		pha			pha
.2ec8	ca		dex			dex
.2ec9	ca		dex			dex
.2eca	4c 29 16	jmp $1629		jmp next
.2ecd					w_rdrop:
>2ecd	05					.byte $05
>2ece	72 64 72 6f 70				.text 'rdrop'
>2ed3						.fill 11
>2ede	ab 2e					.word w_r
.2ee0					xt_rdrop:
.2ee0	68		pla			pla
.2ee1	68		pla			pla
.2ee2					w_x21:
>2ee2	01					.byte $01
>2ee3	21					.text '!'
>2ee4						.fill 15
>2ef3	cd 2e					.word w_rdrop
.2ef5					xt_x21:
.2ef5	b5 02		lda $02,x		lda pstack+2,x
.2ef7	85 32		sta $32			sta tmp
.2ef9	b5 03		lda $03,x		lda pstack+3,x
.2efb	85 33		sta $33			sta tmp+1
.2efd	a0 01		ldy #$01		ldy #1
.2eff	b5 04		lda $04,x		lda pstack+4,x
.2f01	92 32		sta ($32)		sta (tmp)
.2f03	b5 05		lda $05,x		lda pstack+5,x
.2f05	91 32		sta ($32),y		sta (tmp),y
.2f07	e8		inx			inx
.2f08	e8		inx			inx
.2f09	e8		inx			inx
.2f0a	e8		inx			inx
.2f0b	4c 29 16	jmp $1629		jmp next
.2f0e					w_x40:
>2f0e	01					.byte $01
>2f0f	40					.text '@'
>2f10						.fill 15
>2f1f	e2 2e					.word w_x21
.2f21					xt_x40:
.2f21	b5 02		lda $02,x		lda pstack+2,x
.2f23	85 32		sta $32			sta tmp
.2f25	b5 03		lda $03,x		lda pstack+3,x
.2f27	85 33		sta $33			sta tmp+1
.2f29	a0 01		ldy #$01		ldy #1
.2f2b	b2 32		lda ($32)		lda (tmp)
.2f2d	95 02		sta $02,x		sta pstack+2,x
.2f2f	b1 32		lda ($32),y		lda (tmp),y
.2f31	95 03		sta $03,x		sta pstack+3,x
.2f33	4c 29 16	jmp $1629		jmp next
.2f36					w_cx21:
>2f36	02					.byte $02
>2f37	63 21					.text 'c!'
>2f39						.fill 14
>2f47	0e 2f					.word w_x40
.2f49					xt_cx21:
.2f49	b5 04		lda $04,x		lda pstack+4,x
.2f4b	81 02		sta ($02,x)		sta (pstack+2,x)
.2f4d	e8		inx			inx
.2f4e	e8		inx			inx
.2f4f	e8		inx			inx
.2f50	e8		inx			inx
.2f51	4c 29 16	jmp $1629		jmp next
.2f54					w_cx40:
>2f54	02					.byte $02
>2f55	63 40					.text 'c@'
>2f57						.fill 14
>2f65	36 2f					.word w_cx21
.2f67					xt_cx40:
.2f67	a1 02		lda ($02,x)		lda (pstack+2,x)
.2f69	95 02		sta $02,x		sta pstack+2,x
.2f6b	74 03		stz $03,x		stz pstack+3,x
.2f6d	4c 29 16	jmp $1629		jmp next
.2f70					w_fill:
>2f70	04					.byte $04
>2f71	66 69 6c 6c				.text 'fill'
>2f75						.fill 12
>2f81	54 2f					.word w_cx40
.2f83					xt_fill:
.2f83						loop:
.2f83	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.2f85	d0 04		bne $2f8b		bne do_write
.2f87	b5 04		lda $04,x		lda pstack+4,x
.2f89	f0 19		beq $2fa4		beq done                ; Yes: we're done...
.2f8b						do_write:
.2f8b	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.2f8d	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.2f8f	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.2f91	d0 02		bne $2f95		bne deccount
.2f93	f6 06		inc $06,x		inc pstack+6,x
.2f95						deccount:
.2f95	38		sec			sec                     ; Decrement the count
.2f96	b5 03		lda $03,x		lda pstack+3,x
.2f98	e9 01		sbc #$01		sbc #1
.2f9a	95 03		sta $03,x		sta pstack+3,x
.2f9c	b5 04		lda $04,x		lda pstack+4,x
.2f9e	e9 00		sbc #$00		sbc #0
.2fa0	95 04		sta $04,x		sta pstack+4,x
.2fa2	80 df		bra $2f83		bra loop                ; And check again
.2fa4						done:
.2fa4	8a		txa			txa                     ; Clean up the parameter stack
.2fa5	69 06		adc #$06		adc #6
.2fa7	aa		tax			tax
.2fa8	4c 29 16	jmp $1629		jmp next
.2fab					w_x2bx21:
>2fab	02					.byte $02
>2fac	2b 21					.text '+!'
>2fae						.fill 14
>2fbc	70 2f					.word w_fill
.2fbe					xt_x2bx21:
.2fbe	b5 03		lda $03,x		lda pstack+3,x
.2fc0	85 33		sta $33			sta tmp+1
.2fc2	b5 02		lda $02,x		lda pstack+2,x
.2fc4	85 32		sta $32			sta tmp
.2fc6	18		clc			clc
.2fc7	a0 01		ldy #$01		ldy #1
.2fc9	b2 32		lda ($32)		lda (tmp)
.2fcb	75 04		adc $04,x		adc pstack+4,x
.2fcd	92 32		sta ($32)		sta (tmp)
.2fcf	b1 32		lda ($32),y		lda (tmp),y
.2fd1	75 05		adc $05,x		adc pstack+5,x
.2fd3	91 32		sta ($32),y		sta (tmp),y
.2fd5						done:
.2fd5	e8		inx			inx                     ; Clean up the stack
.2fd6	e8		inx			inx
.2fd7	e8		inx			inx
.2fd8	e8		inx			inx
.2fd9	4c 29 16	jmp $1629		jmp next
.2fdc					w_enclose:
>2fdc	07					.byte $07
>2fdd	65 6e 63 6c 6f 73 65			.text 'enclose'
>2fe4						.fill 9
>2fed	ab 2f					.word w_x2bx21
.2fef					xt_enclose:
.2fef	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.2ff1	85 25		sta $25			sta src_ptr+1
.2ff3	b5 04		lda $04,x		lda pstack+4,x
.2ff5	85 24		sta $24			sta src_ptr
.2ff7	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.2ff9	85 32		sta $32			sta tmp
.2ffb	8a		txa			txa
.2ffc	38		sec			sec
.2ffd	e9 04		sbc #$04		sbc #4
.2fff	aa		tax			tax
.3000	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.3002	74 06		stz $06,x		stz pstack+6,x
.3004	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.3006	74 04		stz $04,x		stz pstack+4,x
.3008	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.300a	74 02		stz $02,x		stz pstack+2,x
.300c	a0 00		ldy #$00		ldy #0
.300e						loop1:
.300e	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.3010	d0 03		bne $3015		bne chk_delim1          ; NUL? No:; check it against the delimiter
.3012						none:
.3012	4c 29 16	jmp $1629		jmp next                ; Yes: we want to return 0s
.3015						chk_delim1:
.3015	c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.3017	f0 13		beq $302c		beq skip2               ; Yes: skip the character
.3019	a5 32		lda $32			lda tmp                 ; Check the delimiter
.301b	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.301d	d0 0b		bne $302a		bne found               ; No: ok, we've found the first character;
.301f	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.3021	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.3023	d0 05		bne $302a		bne found               ; No: we found the first character
.3025	c8		iny			iny                     ; Move to the next character
.3026	f0 ea		beq $3012		beq none                ; If we've rolled over, we found nothing
.3028	80 e4		bra $300e		bra loop1               ; Otherwise: check the next character
.302a						found:
.302a	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.302c						skip2:
.302c	c8		iny			iny                     ; Go to the next character
.302d	f0 1c		beq $304b		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.302f						loop2:
.302f	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.3031	f0 18		beq $304b		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.3033	c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.3035	f0 0c		beq $3043		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.3037	a5 32		lda $32			lda tmp                 ; Get the delimiter
.3039	c9 20		cmp #$20		cmp #' '                ; Is it space?
.303b	d0 ef		bne $302c		bne skip2               ; No: go to the next character
.303d	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.303f	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.3041	d0 e9		bne $302c		bne skip2               ; No: go to the next character
.3043						found_delim:
.3043	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.3045	c8		iny			iny
.3046	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.3048	4c 29 16	jmp $1629		jmp next                ; And we're done
.304b						found_nul:
.304b	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.304d	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.304f	4c 29 16	jmp $1629		jmp next                ; And we're done
.3052					w_cmove:
>3052	05					.byte $05
>3053	63 6d 6f 76 65				.text 'cmove'
>3058						.fill 11
>3063	dc 2f					.word w_enclose
.3065					xt_cmove:
.3065	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.3067	85 33		sta $33			sta tmp+1
.3069	b5 02		lda $02,x		lda pstack+2,x
.306b	85 32		sta $32			sta tmp
.306d	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.306f	85 27		sta $27			sta dst_ptr+1
.3071	b5 04		lda $04,x		lda pstack+4,x
.3073	85 26		sta $26			sta dst_ptr
.3075	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.3077	85 25		sta $25			sta src_ptr+1
.3079	b5 06		lda $06,x		lda pstack+6,x
.307b	85 24		sta $24			sta src_ptr
.307d	8a		txa			txa                     ; Clean up the stack
.307e	18		clc			clc
.307f	69 06		adc #$06		adc #6
.3081	85 36		sta $36			sta savex               ; And save it for later restoration
.3083	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.3085	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.3087						loop:
.3087	e4 33		cpx $33			cpx tmp+1               ; is tmp == X:Y?
.3089	d0 04		bne $308f		bne copy
.308b	c4 32		cpy $32			cpy tmp
.308d	f0 0e		beq $309d		beq done                ; Yes: we're done
.308f						copy:
.308f	b1 24		lda ($24),y		lda (src_ptr),y         ; Copy the byte
.3091	91 26		sta ($26),y		sta (dst_ptr),y
.3093	c8		iny			iny                     ; Move to the next byte
.3094	d0 f1		bne $3087		bne loop                ; Repeat for 256 bytes
.3096	e8		inx			inx                     ; Move to the next block of 256
.3097	e6 25		inc $25			inc src_ptr+1
.3099	e6 27		inc $27			inc dst_ptr+1
.309b	80 ea		bra $3087		bra loop                ; And continue the loop
.309d						done:
.309d	a6 36		ldx $36			ldx savex
.309f	4c 29 16	jmp $1629		jmp next
.30a2					w_move:
>30a2	04					.byte $04
>30a3	6d 6f 76 65				.text 'move'
>30a7						.fill 12
>30b3	52 30					.word w_cmove
.30b5					xt_move:
.30b5	38		sec			sec                     ; Compare addr1 and addr2
.30b6	b5 06		lda $06,x		lda pstack+6,x
.30b8	f5 04		sbc $04,x		sbc pstack+4,x
.30ba	85 32		sta $32			sta tmp
.30bc	b5 07		lda $07,x		lda pstack+7,x
.30be	f5 05		sbc $05,x		sbc pstack+5,x
.30c0	85 33		sta $33			sta tmp+1
.30c2	30 24		bmi $30e8		bmi a1less
.30c4	f0 72		beq $3138		beq chklo
.30c6						a1greater:
.30c6	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.30c8	d0 50		bne $311a		bne docopy1
.30ca	b5 03		lda $03,x		lda pstack+3,x
.30cc	f0 72		beq $3140		beq done                ; Yes: we're done;
.30ce	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.30d0	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.30d2	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.30d4	d0 02		bne $30d8		bne inc2
.30d6	f6 07		inc $07,x		inc pstack+7,x
.30d8						inc2:
.30d8	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.30da	d0 02		bne $30de		bne dec_count
.30dc	f6 03		inc $03,x		inc pstack+3,x
.30de						dec_count:
.30de	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.30e0	d0 02		bne $30e4		bne l1
.30e2	d6 03		dec $03,x		dec pstack+3,x
.30e4						l1:
.30e4	d6 02		dec $02,x		dec pstack+2,x
.30e6	80 de		bra $30c6		bra a1greater
.30e8						a1less:
.30e8	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.30ea	d0 02		bne $30ee		bne l2
.30ec	d6 05		dec $05,x		dec pstack+5,x
.30ee						l2:
.30ee	d6 04		dec $04,x		dec pstack+4,x
.30f0	18		clc			clc                     ; addr2 := addr2 + u
.30f1	b5 04		lda $04,x		lda pstack+4,x
.30f3	75 02		adc $02,x		adc pstack+2,x
.30f5	95 04		sta $04,x		sta pstack+4,x
.30f7	b5 05		lda $05,x		lda pstack+5,x
.30f9	75 03		adc $03,x		adc pstack+3,x
.30fb	95 05		sta $05,x		sta pstack+5,x
.30fd	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.30ff	d0 02		bne $3103		bne l3
.3101	d6 07		dec $07,x		dec pstack+7,x
.3103						l3:
.3103	d6 06		dec $06,x		dec pstack+6,x
.3105	18		clc			clc                     ; addr1 := addr1 + u
.3106	b5 06		lda $06,x		lda pstack+6,x
.3108	75 02		adc $02,x		adc pstack+2,x
.310a	95 06		sta $06,x		sta pstack+6,x
.310c	b5 07		lda $07,x		lda pstack+7,x
.310e	75 03		adc $03,x		adc pstack+3,x
.3110	95 07		sta $07,x		sta pstack+7,x
.3112						loop2:
.3112	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.3114	d0 04		bne $311a		bne docopy1
.3116	b5 03		lda $03,x		lda pstack+3,x
.3118	f0 26		beq $3140		beq done                ; Yes: we're done;
.311a						docopy1:
.311a	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.311c	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.311e	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.3120	d0 02		bne $3124		bne l4
.3122	d6 07		dec $07,x		dec pstack+7,x
.3124						l4:
.3124	d6 06		dec $06,x		dec pstack+6,x
.3126	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.3128	d0 02		bne $312c		bne l5
.312a	d6 05		dec $05,x		dec pstack+5,x
.312c						l5:
.312c	d6 04		dec $04,x		dec pstack+4,x
.312e	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.3130	d0 02		bne $3134		bne l6
.3132	d6 03		dec $03,x		dec pstack+3,x
.3134						l6:
.3134	d6 02		dec $02,x		dec pstack+2,x
.3136	80 da		bra $3112		bra loop2
.3138						chklo:
.3138	a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.313a	30 ac		bmi $30e8		bmi a1less
.313c	f0 02		beq $3140		beq done                ; If equal, we don't need to move the data
.313e	80 86		bra $30c6		bra a1greater
.3140						done:
.3140	8a		txa			txa
.3141	18		clc			clc
.3142	69 06		adc #$06		adc #6
.3144	aa		tax			tax
.3145	60		rts			rts
.3146					w_x2b:
>3146	01					.byte $01
>3147	2b					.text '+'
>3148						.fill 15
>3157	a2 30					.word w_move
.3159					xt_x2b:
.3159	18		clc			clc
.315a	b5 04		lda $04,x		lda pstack+4,x
.315c	75 02		adc $02,x		adc pstack+2,x
.315e	95 04		sta $04,x		sta pstack+4,x
.3160	b5 05		lda $05,x		lda pstack+5,x
.3162	75 03		adc $03,x		adc pstack+3,x
.3164	95 05		sta $05,x		sta pstack+5,x
.3166	e8		inx			inx
.3167	e8		inx			inx
.3168	4c 29 16	jmp $1629		jmp next
.316b					w_dx2b:
>316b	02					.byte $02
>316c	64 2b					.text 'd+'
>316e						.fill 14
>317c	46 31					.word w_x2b
.317e					xt_dx2b:
.317e	18		clc			clc
.317f	b5 06		lda $06,x		lda pstack+6,x
.3181	75 02		adc $02,x		adc pstack+2,x
.3183	95 06		sta $06,x		sta pstack+6,x
.3185	b5 07		lda $07,x		lda pstack+7,x
.3187	75 03		adc $03,x		adc pstack+3,x
.3189	95 07		sta $07,x		sta pstack+7,x
.318b	b5 08		lda $08,x		lda pstack+8,x
.318d	75 04		adc $04,x		adc pstack+4,x
.318f	95 08		sta $08,x		sta pstack+8,x
.3191	b5 09		lda $09,x		lda pstack+9,x
.3193	75 05		adc $05,x		adc pstack+5,x
.3195	95 09		sta $09,x		sta pstack+9,x
.3197	e8		inx			inx
.3198	e8		inx			inx
.3199	e8		inx			inx
.319a	e8		inx			inx
.319b	4c 29 16	jmp $1629		jmp next
.319e					w_dx2d:
>319e	02					.byte $02
>319f	64 2d					.text 'd-'
>31a1						.fill 14
>31af	6b 31					.word w_dx2b
.31b1					xt_dx2d:
.31b1	38		sec			sec
.31b2	b5 06		lda $06,x		lda pstack+6,x
.31b4	f5 02		sbc $02,x		sbc pstack+2,x
.31b6	95 06		sta $06,x		sta pstack+6,x
.31b8	b5 07		lda $07,x		lda pstack+7,x
.31ba	f5 03		sbc $03,x		sbc pstack+3,x
.31bc	95 07		sta $07,x		sta pstack+7,x
.31be	b5 08		lda $08,x		lda pstack+8,x
.31c0	f5 04		sbc $04,x		sbc pstack+4,x
.31c2	95 08		sta $08,x		sta pstack+8,x
.31c4	b5 09		lda $09,x		lda pstack+9,x
.31c6	f5 05		sbc $05,x		sbc pstack+5,x
.31c8	95 09		sta $09,x		sta pstack+9,x
.31ca	e8		inx			inx
.31cb	e8		inx			inx
.31cc	e8		inx			inx
.31cd	e8		inx			inx
.31ce	4c 29 16	jmp $1629		jmp next
.31d1					w_x2d:
>31d1	01					.byte $01
>31d2	2d					.text '-'
>31d3						.fill 15
>31e2	9e 31					.word w_dx2d
.31e4					xt_x2d:
.31e4	38		sec			sec
.31e5	b5 04		lda $04,x		lda pstack+4,x
.31e7	f5 02		sbc $02,x		sbc pstack+2,x
.31e9	95 04		sta $04,x		sta pstack+4,x
.31eb	b5 05		lda $05,x		lda pstack+5,x
.31ed	f5 03		sbc $03,x		sbc pstack+3,x
.31ef	95 05		sta $05,x		sta pstack+5,x
.31f1	e8		inx			inx
.31f2	e8		inx			inx
.31f3	4c 29 16	jmp $1629		jmp next
.31f6					w_ux2a:
>31f6	02					.byte $02
>31f7	75 2a					.text 'u*'
>31f9						.fill 14
>3207	d1 31					.word w_x2d
.3209					xt_ux2a:
.3209	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.320b	85 34		sta $34			sta tmp+2
.320d	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.320f						l1:
.320f	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.3211	76 02		ror $02,x		ror pstack+2,x
.3213	90 0b		bcc $3220		bcc l2          ; 0 or 1?
.3215	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.3216	18		clc			clc
.3217	b5 04		lda $04,x		lda pstack+4,x
.3219	65 34		adc $34			adc tmp+2
.321b	85 34		sta $34			sta tmp+2
.321d	98		tya			tya
.321e	75 05		adc $05,x		adc pstack+5,x
.3220						l2:
.3220	6a		ror a			ror A
.3221	66 34		ror $34			ror tmp+2
.3223	66 33		ror $33			ror tmp+1
.3225	66 32		ror $32			ror tmp
.3227	3a		dec a			dec a
.3228	d0 e5		bne $320f		bne l1
.322a	85 35		sta $35			sta tmp+3
.322c	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.322e	95 04		sta $04,x		sta pstack+4,x
.3230	a5 33		lda $33			lda tmp+1
.3232	95 05		sta $05,x		sta pstack+5,x
.3234	e8		inx			inx             ; Clean up parameter stack
.3235	e8		inx			inx
.3236	4c 29 16	jmp $1629		jmp next
.3239					w_x2a:
>3239	01					.byte $01
>323a	2a					.text '*'
>323b						.fill 15
>324a	f6 31					.word w_ux2a
.324c					xt_x2a:
.324c	64 38		stz $38			stz sign
.324e	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.3250	10 11		bpl $3263		bpl chk_n2
.3252	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.3254	85 38		sta $38			sta sign
.3256	38		sec			sec             ; Negate n1
.3257	a9 00		lda #$00		lda #0
.3259	f5 04		sbc $04,x		sbc pstack+4,x
.325b	95 04		sta $04,x		sta pstack+4,x
.325d	a9 00		lda #$00		lda #0
.325f	f5 05		sbc $05,x		sbc pstack+5,x
.3261	95 05		sta $05,x		sta pstack+5,x
.3263						chk_n2:
.3263	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.3265	10 13		bpl $327a		bpl init_tmp
.3267	a5 38		lda $38			lda sign        ; Flip the sign bit, if so
.3269	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.326b	85 38		sta $38			sta sign
.326d	38		sec			sec             ; Negate n2
.326e	a9 00		lda #$00		lda #0
.3270	f5 02		sbc $02,x		sbc pstack+2,x
.3272	95 02		sta $02,x		sta pstack+2,x
.3274	a9 00		lda #$00		lda #0
.3276	f5 03		sbc $03,x		sbc pstack+3,x
.3278	95 03		sta $03,x		sta pstack+3,x
.327a						init_tmp:
.327a	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.327c	85 34		sta $34			sta tmp+2
.327e	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.3280						l1:
.3280	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.3282	76 02		ror $02,x		ror pstack+2,x
.3284	90 0b		bcc $3291		bcc l2          ; 0 or 1?
.3286	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.3287	18		clc			clc
.3288	b5 04		lda $04,x		lda pstack+4,x
.328a	65 34		adc $34			adc tmp+2
.328c	85 34		sta $34			sta tmp+2
.328e	98		tya			tya
.328f	75 05		adc $05,x		adc pstack+5,x
.3291						l2:
.3291	6a		ror a			ror A
.3292	66 34		ror $34			ror tmp+2
.3294	66 33		ror $33			ror tmp+1
.3296	66 32		ror $32			ror tmp
.3298	3a		dec a			dec a
.3299	d0 e5		bne $3280		bne l1
.329b	85 35		sta $35			sta tmp+3
.329d	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.329f	95 04		sta $04,x		sta pstack+4,x
.32a1	a5 33		lda $33			lda tmp+1
.32a3	95 05		sta $05,x		sta pstack+5,x
.32a5	e8		inx			inx             ; Clean up parameter stack
.32a6	e8		inx			inx
.32a7	a5 38		lda $38			lda sign        ; Check the sign
.32a9	10 0d		bpl $32b8		bpl done
.32ab	38		sec			sec             ; If negative, negate result
.32ac	a9 00		lda #$00		lda #0
.32ae	f5 02		sbc $02,x		sbc pstack+2,x
.32b0	95 02		sta $02,x		sta pstack+2,x
.32b2	a9 00		lda #$00		lda #0
.32b4	f5 03		sbc $03,x		sbc pstack+3,x
.32b6	95 03		sta $03,x		sta pstack+3,x
.32b8						done:
.32b8	4c 29 16	jmp $1629		jmp next
.32bb					w_umx2fmod:
>32bb	06					.byte $06
>32bc	75 6d 2f 6d 6f 64			.text 'um/mod'
>32c2						.fill 10
>32cc	39 32					.word w_x2a
.32ce					xt_umx2fmod:
.32ce	38		sec			sec
.32cf	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract hi cell of dividend by
.32d1	f5 02		sbc $02,x		sbc     pstack+2,x          ; divisor to see if there's an overflow condition.
.32d3	b5 07		lda $07,x		lda     pstack+7,x
.32d5	f5 03		sbc $03,x		sbc     pstack+3,x
.32d7	b0 2e		bcs $3307		bcs     overflow            ; Branch if /0 or overflow.
.32d9	a9 11		lda #$11		lda     #$11                ; Loop 17x.
.32db	85 32		sta $32			sta     tmp                 ; Use tmp for loop counter.
.32dd						loop:
.32dd	36 04		rol $04,x		rol     pstack+4,x          ; Rotate dividend lo cell left one bit.
.32df	36 05		rol $05,x		rol     pstack+5,x
.32e1	c6 32		dec $32			dec     tmp                 ; Decrement loop counter.
.32e3	f0 2c		beq $3311		beq     done                ; If we're done, then branch to end.
.32e5	36 06		rol $06,x		rol     pstack+6,x          ; Otherwise rotate dividend hi cell left one bit.
.32e7	36 07		rol $07,x		rol     pstack+7,x
.32e9	64 33		stz $33			stz     tmp+1
.32eb	26 33		rol $33			rol     tmp+1               ; Rotate the bit carried out of above into tmp+1.
.32ed	38		sec			sec
.32ee	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract dividend hi cell minus divisor.
.32f0	f5 02		sbc $02,x		sbc     pstack+2,x
.32f2	85 34		sta $34			sta     tmp+2               ; Put result temporarily in tmp+2 (lo byte)
.32f4	b5 07		lda $07,x		lda     pstack+7,x
.32f6	f5 03		sbc $03,x		sbc     pstack+3,x
.32f8	a8		tay			tay                         ; and Y (hi byte).
.32f9	a5 33		lda $33			lda     tmp+1               ; Remember now to bring in the bit carried out above.
.32fb	e9 00		sbc #$00		sbc     #0
.32fd	90 de		bcc $32dd		bcc     loop
.32ff	a5 34		lda $34			lda     tmp+2               ; If that didn't cause a borrow,
.3301	95 06		sta $06,x		sta     pstack+6,x          ; make the result from above to
.3303	94 07		sty $07,x		sty     pstack+7,x          ; be the new dividend hi cell
.3305	80 d6		bra $32dd		bra     loop                ; and then brach up.  (NMOS 6502 can use BCS here.)
.3307						overflow:
.3307	a9 ff		lda #$ff		lda     #$ff                ; If overflow or /0 condition found,
.3309	95 06		sta $06,x		sta     pstack+6,x          ; just put FFFF in both the remainder
.330b	95 07		sta $07,x		sta     pstack+7,x
.330d	95 04		sta $04,x		sta     pstack+4,x          ; and the quotient.
.330f	95 05		sta $05,x		sta     pstack+5,x
.3311						done:
.3311	e8		inx			inx
.3312	e8		inx			inx
.3313	4c 29 16	jmp $1629		jmp next
.3316					w_sx3ed:
>3316	03					.byte $03
>3317	73 3e 64				.text 's>d'
>331a						.fill 13
>3327	bb 32					.word w_umx2fmod
.3329					xt_sx3ed:
.3329	ca		dex			dex
.332a	ca		dex			dex
.332b	b5 04		lda $04,x		lda pstack+4,x
.332d	95 02		sta $02,x		sta pstack+2,x
.332f	b5 05		lda $05,x		lda pstack+5,x
.3331	95 03		sta $03,x		sta pstack+3,x
.3333	30 07		bmi $333c		bmi is_neg
.3335	74 04		stz $04,x		stz pstack+4,x
.3337	74 05		stz $05,x		stz pstack+5,x
.3339	4c 29 16	jmp $1629		jmp next
.333c						is_neg:
.333c	a9 ff		lda #$ff		lda #$ff
.333e	95 04		sta $04,x		sta pstack+4,x
.3340	95 05		sta $05,x		sta pstack+5,x
.3342	4c 29 16	jmp $1629		jmp next
.3345					w_1x2b:
>3345	02					.byte $02
>3346	31 2b					.text '1+'
>3348						.fill 14
>3356	16 33					.word w_sx3ed
.3358					xt_1x2b:
.3358	f6 02		inc $02,x		inc pstack+2,x
.335a	d0 02		bne $335e		bne skip
.335c	f6 03		inc $03,x		inc pstack+3,x
.335e						skip:
.335e	4c 29 16	jmp $1629		jmp next
.3361					w_2x2b:
>3361	02					.byte $02
>3362	32 2b					.text '2+'
>3364						.fill 14
>3372	45 33					.word w_1x2b
.3374					xt_2x2b:
.3374	18		clc			clc
.3375	b5 02		lda $02,x		lda pstack+2,x
.3377	69 02		adc #$02		adc #2
.3379	95 02		sta $02,x		sta pstack+2,x
.337b	b5 03		lda $03,x		lda pstack+3,x
.337d	69 00		adc #$00		adc #0
.337f	95 03		sta $03,x		sta pstack+3,x
.3381	4c 29 16	jmp $1629		jmp next
.3384					w_1x2d:
>3384	02					.byte $02
>3385	31 2d					.text '1-'
>3387						.fill 14
>3395	61 33					.word w_2x2b
.3397					xt_1x2d:
.3397	b5 02		lda $02,x		lda pstack+2,x
.3399	d0 02		bne $339d		bne l1
.339b	d6 03		dec $03,x		dec pstack+3,x
.339d						l1:
.339d	d6 02		dec $02,x		dec pstack+2,x
.339f	4c 29 16	jmp $1629		jmp next
.33a2					w_2x2d:
>33a2	02					.byte $02
>33a3	32 2d					.text '2-'
>33a5						.fill 14
>33b3	84 33					.word w_1x2d
.33b5					xt_2x2d:
.33b5	38		sec			sec
.33b6	b5 02		lda $02,x		lda pstack+2,x
.33b8	e9 02		sbc #$02		sbc #2
.33ba	95 02		sta $02,x		sta pstack+2,x
.33bc	b5 03		lda $03,x		lda pstack+3,x
.33be	e9 00		sbc #$00		sbc #0
.33c0	95 03		sta $03,x		sta pstack+3,x
.33c2	4c 29 16	jmp $1629		jmp next
.33c5					w_and:
>33c5	03					.byte $03
>33c6	61 6e 64				.text 'and'
>33c9						.fill 13
>33d6	a2 33					.word w_2x2d
.33d8					xt_and:
.33d8	b5 02		lda $02,x		lda pstack+2,x
.33da	35 04		and $04,x		and pstack+4,x
.33dc	95 04		sta $04,x		sta pstack+4,x
.33de	b5 03		lda $03,x		lda pstack+3,x
.33e0	35 05		and $05,x		and pstack+5,x
.33e2	95 05		sta $05,x		sta pstack+5,x
.33e4	e8		inx			inx
.33e5	e8		inx			inx
.33e6	4c 29 16	jmp $1629		jmp next
.33e9					w_or:
>33e9	02					.byte $02
>33ea	6f 72					.text 'or'
>33ec						.fill 14
>33fa	c5 33					.word w_and
.33fc					xt_or:
.33fc	b5 02		lda $02,x		lda pstack+2,x
.33fe	15 04		ora $04,x		ora pstack+4,x
.3400	95 04		sta $04,x		sta pstack+4,x
.3402	b5 03		lda $03,x		lda pstack+3,x
.3404	15 05		ora $05,x		ora pstack+5,x
.3406	95 05		sta $05,x		sta pstack+5,x
.3408	e8		inx			inx
.3409	e8		inx			inx
.340a	4c 29 16	jmp $1629		jmp next
.340d					w_xor:
>340d	03					.byte $03
>340e	78 6f 72				.text 'xor'
>3411						.fill 13
>341e	e9 33					.word w_or
.3420					xt_xor:
.3420	b5 02		lda $02,x		lda pstack+2,x
.3422	55 04		eor $04,x		eor pstack+4,x
.3424	95 04		sta $04,x		sta pstack+4,x
.3426	b5 03		lda $03,x		lda pstack+3,x
.3428	55 05		eor $05,x		eor pstack+5,x
.342a	95 05		sta $05,x		sta pstack+5,x
.342c	e8		inx			inx
.342d	e8		inx			inx
.342e	4c 29 16	jmp $1629		jmp next
.3431					w_not:
>3431	03					.byte $03
>3432	6e 6f 74				.text 'not'
>3435						.fill 13
>3442	0d 34					.word w_xor
.3444					xt_not:
.3444	b5 02		lda $02,x		lda pstack+2,x
.3446	49 ff		eor #$ff		eor #$ff
.3448	95 02		sta $02,x		sta pstack+2,x
.344a	b5 03		lda $03,x		lda pstack+3,x
.344c	49 ff		eor #$ff		eor #$ff
.344e	95 03		sta $03,x		sta pstack+3,x
.3450	4c 29 16	jmp $1629		jmp next
.3453					w_0x3c:
>3453	02					.byte $02
>3454	30 3c					.text '0<'
>3456						.fill 14
>3464	31 34					.word w_not
.3466					xt_0x3c:
.3466	b5 03		lda $03,x		lda pstack+3,x
.3468	30 07		bmi $3471		bmi istrue
.346a	74 02		stz $02,x		stz pstack+2,x
.346c	74 03		stz $03,x		stz pstack+3,x
.346e	4c 29 16	jmp $1629		jmp next
.3471						istrue:
.3471	a9 ff		lda #$ff		lda #$ff
.3473	95 02		sta $02,x		sta pstack+2,x
.3475	95 03		sta $03,x		sta pstack+3,x
.3477	4c 29 16	jmp $1629		jmp next
.347a					w_0x3d:
>347a	02					.byte $02
>347b	30 3d					.text '0='
>347d						.fill 14
>348b	53 34					.word w_0x3c
.348d					xt_0x3d:
.348d	b5 02		lda $02,x		lda pstack+2,x
.348f	d0 0d		bne $349e		bne isfalse
.3491	b5 03		lda $03,x		lda pstack+3,x
.3493	d0 09		bne $349e		bne isfalse
.3495	a9 ff		lda #$ff		lda #$ff
.3497	95 02		sta $02,x		sta pstack+2,x
.3499	95 03		sta $03,x		sta pstack+3,x
.349b	4c 29 16	jmp $1629		jmp next
.349e						isfalse:
.349e	74 02		stz $02,x		stz pstack+2,x
.34a0	74 03		stz $03,x		stz pstack+3,x
.34a2	4c 29 16	jmp $1629		jmp next
.34a5					w_0x3e:
>34a5	02					.byte $02
>34a6	30 3e					.text '0>'
>34a8						.fill 14
>34b6	7a 34					.word w_0x3d
.34b8					xt_0x3e:
.34b8	b5 03		lda $03,x		lda pstack+3,x
.34ba	30 0f		bmi $34cb		bmi isfalse
.34bc	d0 04		bne $34c2		bne istrue
.34be	b5 02		lda $02,x		lda pstack+2,x
.34c0	f0 09		beq $34cb		beq isfalse
.34c2						istrue:
.34c2	a9 ff		lda #$ff		lda #$ff
.34c4	95 02		sta $02,x		sta pstack+2,x
.34c6	95 03		sta $03,x		sta pstack+3,x
.34c8	4c 29 16	jmp $1629		jmp next
.34cb						isfalse:
.34cb	74 02		stz $02,x		stz pstack+2,x
.34cd	74 03		stz $03,x		stz pstack+3,x
.34cf	4c 29 16	jmp $1629		jmp next
.34d2					w_x28variablex29:
>34d2	0a					.byte $0A
>34d3	28 76 61 72 69 61 62 6c			.text '(variable)'
>34db	65 29
>34dd						.fill 6
>34e3	a5 34					.word w_0x3e
.34e5					xt_x28variablex29:
.34e5	18		clc			clc                     ; push(wp + 3)
.34e6	a5 2a		lda $2a			lda wp
.34e8	69 03		adc #$03		adc #3
.34ea	95 00		sta $00,x		sta pstack,x
.34ec	a5 2b		lda $2b			lda wp+1
.34ee	69 00		adc #$00		adc #0
.34f0	95 01		sta $01,x		sta pstack+1,x
.34f2	ca		dex			dex
.34f3	ca		dex			dex
.34f4	4c 29 16	jmp $1629		jmp next
.34f7					w_x28constantx29:
>34f7	0a					.byte $0A
>34f8	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>3500	74 29
>3502						.fill 6
>3508	d2 34					.word w_x28variablex29
.350a					xt_x28constantx29:
.350a	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.350c	b1 2a		lda ($2a),y		lda (wp),y
.350e	95 00		sta $00,x		sta pstack,x
.3510	c8		iny			iny
.3511	b1 2a		lda ($2a),y		lda (wp),y
.3513	95 01		sta $01,x		sta pstack+1,x
.3515	ca		dex			dex
.3516	ca		dex			dex
.3517	4c 29 16	jmp $1629		jmp next
.351a					w_cells:
>351a	05					.byte $05
>351b	63 65 6c 6c 73				.text 'cells'
>3520						.fill 11
>352b	f7 34					.word w_x28constantx29
.352d					xt_cells:
.352d	4c 0a 35	jmp $350a		jmp xt_x28constantx29
>3530	02 00					.word 2
.3532					w_x28userx29:
>3532	06					.byte $06
>3533	28 75 73 65 72 29			.text '(user)'
>3539						.fill 10
>3543	1a 35					.word w_cells
.3545					xt_x28userx29:
.3545	18		clc			clc                     ; push(up + memory(wp + 3))
.3546	a0 03		ldy #$03		ldy #3
.3548	a5 2c		lda $2c			lda up
.354a	71 2a		adc ($2a),y		adc (wp),y
.354c	95 00		sta $00,x		sta pstack,x
.354e	c8		iny			iny
.354f	a5 2d		lda $2d			lda up+1
.3551	71 2a		adc ($2a),y		adc (wp),y
.3553	95 01		sta $01,x		sta pstack+1,x
.3555	ca		dex			dex
.3556	ca		dex			dex
.3557	4c 29 16	jmp $1629		jmp next
.355a					w_x28branchx29:
>355a	08					.byte $08
>355b	28 62 72 61 6e 63 68 29			.text '(branch)'
>3563						.fill 8
>356b	32 35					.word w_x28userx29
.356d					xt_x28branchx29:
.356d	a0 01		ldy #$01		ldy #1              ; ip := branch address
.356f	b2 28		lda ($28)		lda (ip)
.3571	85 32		sta $32			sta tmp
.3573	b1 28		lda ($28),y		lda (ip),y
.3575	85 29		sta $29			sta ip+1
.3577	a5 32		lda $32			lda tmp
.3579	85 28		sta $28			sta ip
.357b	4c 29 16	jmp $1629		jmp next
.357e					w_x28branch0x29:
>357e	09					.byte $09
>357f	28 62 72 61 6e 63 68 30			.text '(branch0)'
>3587	29
>3588						.fill 7
>358f	5a 35					.word w_x28branchx29
.3591					xt_x28branch0x29:
.3591	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.3593	d0 04		bne $3599		bne nobranch        ; No: skip over the branch address
.3595	b5 03		lda $03,x		lda pstack+3,x
.3597	f0 0f		beq $35a8		beq dobranch        ; Yes: take the branch
.3599						nobranch:
.3599	18		clc			clc                 ; No: skip over the branch address
.359a	a5 28		lda $28			lda ip
.359c	69 02		adc #$02		adc #2
.359e	85 28		sta $28			sta ip
.35a0	a5 29		lda $29			lda ip+1
.35a2	69 00		adc #$00		adc #0
.35a4	85 29		sta $29			sta ip+1
.35a6	80 0e		bra $35b6		bra done
.35a8						dobranch:
.35a8	a0 01		ldy #$01		ldy #1              ; ip := branch address
.35aa	b2 28		lda ($28)		lda (ip)
.35ac	85 32		sta $32			sta tmp
.35ae	b1 28		lda ($28),y		lda (ip),y
.35b0	85 29		sta $29			sta ip+1
.35b2	a5 32		lda $32			lda tmp
.35b4	85 28		sta $28			sta ip
.35b6						done:
.35b6	e8		inx			inx                 ; clean up the parameter stack
.35b7	e8		inx			inx
.35b8	4c 29 16	jmp $1629		jmp next
.35bb					w_x28dox29:
>35bb	04					.byte $04
>35bc	28 64 6f 29				.text '(do)'
>35c0						.fill 12
>35cc	7e 35					.word w_x28branch0x29
.35ce					xt_x28dox29:
.35ce	b5 03		lda $03,x		lda pstack+3,x
.35d0	48		pha			pha
.35d1	b5 02		lda $02,x		lda pstack+2,x
.35d3	48		pha			pha
.35d4	b5 05		lda $05,x		lda pstack+5,x
.35d6	48		pha			pha
.35d7	b5 04		lda $04,x		lda pstack+4,x
.35d9	48		pha			pha
.35da	18		clc			clc
.35db	8a		txa			txa
.35dc	69 04		adc #$04		adc #4
.35de	aa		tax			tax
.35df	4c 29 16	jmp $1629		jmp next
.35e2					w_x3ei:
>35e2	02					.byte $02
>35e3	3e 69					.text '>i'
>35e5						.fill 14
>35f3	bb 35					.word w_x28dox29
.35f5					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.35f5	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.35f7	85 33		sta $33			sta tmp+1
.35f9	b5 02		lda $02,x		lda pstack+2,x
.35fb	85 32		sta $32			sta tmp
.35fd	e8		inx			inx
.35fe	e8		inx			inx
.35ff	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3601	ba		tsx			tsx
.3602	a5 33		lda $33			lda tmp+1           ; current := tmp = n
.3604	9d 04 01	sta $0104,x		sta current+1
.3607	a5 32		lda $32			lda tmp
.3609	9d 03 01	sta $0103,x		sta current
.360c	a6 36		ldx $36			ldx savex
.360e	4c 29 16	jmp $1629		jmp next
.3611					w_leave:
>3611	05					.byte $05
>3612	6c 65 61 76 65				.text 'leave'
>3617						.fill 11
>3622	e2 35					.word w_x3ei
.3624					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.3624	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3626	ba		tsx			tsx
.3627	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.362a	9d 02 01	sta $0102,x		sta limit+1
.362d	bd 03 01	lda $0103,x		lda current
.3630	9d 01 01	sta $0101,x		sta limit
.3633	a6 36		ldx $36			ldx savex
.3635	4c 29 16	jmp $1629		jmp next
.3638					w_x28loopx29:
>3638	06					.byte $06
>3639	28 6c 6f 6f 70 29			.text '(loop)'
>363f						.fill 10
>3649	11 36					.word w_leave
.364b					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.364b	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.364d	ba		tsx			tsx
.364e	fe 03 01	inc $0103,x		inc current         ; Increment current
.3651	d0 03		bne $3656		bne chk_current
.3653	fe 04 01	inc $0104,x		inc current+1
.3656						chk_current:
.3656	38		sec			sec
.3657	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.365a	fd 02 01	sbc $0102,x		sbc limit+1
.365d	50 02		bvc $3661		bvc label1          ; the equality comparison is in the Z flag here
.365f	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.3661						label1:
.3661	30 23		bmi $3686		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.3663	50 02		bvc $3667		bvc label2          ; the Z flag was affected only if V is 1
.3665	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc NUM2H
.3667						label2:
.3667	d0 08		bne $3671		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.3669	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.366c	fd 01 01	sbc $0101,x		sbc limit
.366f	90 15		bcc $3686		bcc dobranch        ; if current < limit then current < limit
.3671						nobranch:
.3671	8a		txa			txa                 ; Yes: Remove the context from the return stack
.3672	18		clc			clc
.3673	69 04		adc #$04		adc #4
.3675	aa		tax			tax
.3676	9a		txs			txs
.3677	18		clc			clc                 ; And skip over the branch address
.3678	a5 28		lda $28			lda ip
.367a	69 02		adc #$02		adc #2
.367c	85 28		sta $28			sta ip
.367e	a5 29		lda $29			lda ip+1
.3680	69 00		adc #$00		adc #0
.3682	85 29		sta $29			sta ip+1
.3684	80 0e		bra $3694		bra done
.3686						dobranch:
.3686	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.3688	b2 28		lda ($28)		lda (ip)
.368a	85 32		sta $32			sta tmp
.368c	b1 28		lda ($28),y		lda (ip),y
.368e	85 29		sta $29			sta ip+1
.3690	a5 32		lda $32			lda tmp
.3692	85 28		sta $28			sta ip
.3694						done:
.3694	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.3696	4c 29 16	jmp $1629		jmp next
.3699					w_x28x2bloopx29:
>3699	07					.byte $07
>369a	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>36a1						.fill 9
>36aa	38 36					.word w_x28loopx29
.36ac					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.36ac	b5 03		lda $03,x		lda pstack+3,x      ; Pop n from the stack
.36ae	85 33		sta $33			sta tmp+1
.36b0	b5 02		lda $02,x		lda pstack+2,x
.36b2	85 32		sta $32			sta tmp
.36b4	e8		inx			inx
.36b5	e8		inx			inx
.36b6	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.36b8	ba		tsx			tsx
.36b9	18		clc			clc                 ; Increment current by n
.36ba	bd 03 01	lda $0103,x		lda current
.36bd	65 32		adc $32			adc tmp
.36bf	9d 03 01	sta $0103,x		sta current
.36c2	bd 04 01	lda $0104,x		lda current+1
.36c5	65 33		adc $33			adc tmp+1
.36c7	9d 04 01	sta $0104,x		sta current+1
.36ca						chk_current:
.36ca	38		sec			sec
.36cb	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.36ce	fd 02 01	sbc $0102,x		sbc limit+1
.36d1	50 02		bvc $36d5		bvc label1          ; the equality comparison is in the Z flag here
.36d3	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.36d5						label1:
.36d5	30 23		bmi $36fa		bmi dobranch        ; if current+1 < limit+1 then current < limit
.36d7	50 02		bvc $36db		bvc label2          ; the Z flag was affected only if V is 1
.36d9	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc current+1
.36db						label2:
.36db	d0 08		bne $36e5		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.36dd	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.36e0	fd 01 01	sbc $0101,x		sbc limit
.36e3	90 15		bcc $36fa		bcc dobranch        ; if current < limit then current < limit
.36e5						nobranch:
.36e5	8a		txa			txa                 ; Yes: Remove the context from the return stack
.36e6	18		clc			clc
.36e7	69 04		adc #$04		adc #4
.36e9	aa		tax			tax
.36ea	9a		txs			txs
.36eb	18		clc			clc                 ; And skip over the branch address
.36ec	a5 28		lda $28			lda ip
.36ee	69 02		adc #$02		adc #2
.36f0	85 28		sta $28			sta ip
.36f2	a5 29		lda $29			lda ip+1
.36f4	69 00		adc #$00		adc #0
.36f6	85 29		sta $29			sta ip+1
.36f8	80 0e		bra $3708		bra done
.36fa						dobranch:
.36fa	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.36fc	b2 28		lda ($28)		lda (ip)
.36fe	85 32		sta $32			sta tmp
.3700	b1 28		lda ($28),y		lda (ip),y
.3702	85 29		sta $29			sta ip+1
.3704	a5 32		lda $32			lda tmp
.3706	85 28		sta $28			sta ip
.3708						done:
.3708	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.370a	4c 29 16	jmp $1629		jmp next
.370d					w_i:
>370d	01					.byte $01
>370e	69					.text 'i'
>370f						.fill 15
>371e	99 36					.word w_x28x2bloopx29
.3720					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.3720	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3722	ba		tsx			tsx
.3723	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.3726	bd 03 01	lda $0103,x		lda current
.3729	a6 36		ldx $36			ldx savex           ; Restore the PSP
.372b	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.372d	95 00		sta $00,x		sta pstack,x
.372f	ca		dex			dex
.3730	ca		dex			dex
.3731	4c 29 16	jmp $1629		jmp next
.3734					w_x28ofx29:
>3734	04					.byte $04
>3735	28 6f 66 29				.text '(of)'
>3739						.fill 12
>3745	0d 37					.word w_i
.3747					xt_x28ofx29:
.3747	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.3749	d5 04		cmp $04,x		cmp pstack+4,x
.374b	d0 1a		bne $3767		bne not_eq
.374d	b5 03		lda $03,x		lda pstack+3,x
.374f	d5 05		cmp $05,x		cmp pstack+5,x
.3751	d0 14		bne $3767		bne not_eq
.3753	e8		inx			inx
.3754	e8		inx			inx
.3755	e8		inx			inx
.3756	e8		inx			inx
.3757	18		clc			clc                 ; Skip over the branch target
.3758	a5 28		lda $28			lda ip
.375a	69 02		adc #$02		adc #2
.375c	85 28		sta $28			sta ip
.375e	a5 29		lda $29			lda ip+1
.3760	69 00		adc #$00		adc #0
.3762	85 29		sta $29			sta ip+1
.3764	4c 29 16	jmp $1629		jmp next
.3767						not_eq:
.3767	e8		inx			inx                 ; Remove n2 from stack
.3768	e8		inx			inx
.3769	a0 01		ldy #$01		ldy #1              ; Take the branch target
.376b	b2 28		lda ($28)		lda (ip)
.376d	85 32		sta $32			sta tmp
.376f	b1 28		lda ($28),y		lda (ip),y
.3771	85 29		sta $29			sta ip+1
.3773	a5 32		lda $32			lda tmp
.3775	85 28		sta $28			sta ip
.3777	4c 29 16	jmp $1629		jmp next
.377a					w_execute:
>377a	07					.byte $07
>377b	65 78 65 63 75 74 65			.text 'execute'
>3782						.fill 9
>378b	34 37					.word w_x28ofx29
.378d					xt_execute:
.378d	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.378f	85 2a		sta $2a			sta wp
.3791	b5 03		lda $03,x		lda pstack+3,x
.3793	85 2b		sta $2b			sta wp+1
.3795	e8		inx			inx                 ; Clean up stack
.3796	e8		inx			inx
.3797	6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.379a					w_x28vocabularyx29:
>379a	0c					.byte $0C
>379b	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>37a3	61 72 79 29
>37a7						.fill 4
>37ab	7a 37					.word w_execute
.37ad					xt_x28vocabularyx29:
.37ad	18		clc			clc                 ; tmp := up + user_context
.37ae	a5 2c		lda $2c			lda up
.37b0	69 08		adc #$08		adc #user_context
.37b2	85 32		sta $32			sta tmp
.37b4	a5 2d		lda $2d			lda up+1
.37b6	69 00		adc #$00		adc #0
.37b8	85 33		sta $33			sta tmp+1
.37ba	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.37bc	18		clc			clc
.37bd	a5 2a		lda $2a			lda wp
.37bf	69 03		adc #$03		adc #3
.37c1	92 32		sta ($32)		sta (tmp)
.37c3	a5 2b		lda $2b			lda wp+1
.37c5	69 00		adc #$00		adc #0
.37c7	91 32		sta ($32),y		sta (tmp),y
.37c9	4c 29 16	jmp $1629		jmp next
.37cc					w_forth:
>37cc	05					.byte $05
>37cd	66 6f 72 74 68				.text 'forth'
>37d2						.fill 11
>37dd	9a 37					.word w_x28vocabularyx29
.37df					xt_forth:
.37df	4c ad 37	jmp $37ad		jmp xt_x28vocabularyx29
>37e2	0c 43					.word <>w_cold
.37e4					w_x28findx29:
>37e4	06					.byte $06
>37e5	28 66 69 6e 64 29			.text '(find)'
>37eb						.fill 10
>37f5	cc 37					.word w_forth
.37f7					xt_x28findx29:
.37f7	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.37f9	85 25		sta $25			sta src_ptr+1
.37fb	b5 02		lda $02,x		lda pstack+2,x
.37fd	85 24		sta $24			sta src_ptr
.37ff	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.3801	85 27		sta $27			sta dst_ptr+1
.3803	b5 04		lda $04,x		lda pstack+4,x
.3805	85 26		sta $26			sta dst_ptr
.3807						loop:
.3807	a5 24		lda $24			lda src_ptr             ; Check to see if src_ptr = NULL
.3809	d0 0d		bne $3818		bne not_eod
.380b	a5 25		lda $25			lda src_ptr+1
.380d	d0 09		bne $3818		bne not_eod
.380f	e8		inx			inx                     ; Clean up the stack
.3810	e8		inx			inx
.3811	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.3813	74 02		stz $02,x		stz pstack+2,x
.3815	4c 29 16	jmp $1629		jmp next
.3818						not_eod:
.3818	b2 24		lda ($24)		lda (src_ptr)           ; Get the size of the word in the dictionary
.381a	29 3f		and #$3f		and #$3f                ; Filter out the flags
.381c	d2 26		cmp ($26)		cmp (dst_ptr)           ; Check it against the word to search
.381e	f0 1b		beq $383b		beq chk_chars           ; If they match, check the characters
.3820						next_word:
.3820	18		clc			clc                     ; Move src_ptr to the link field
.3821	a5 24		lda $24			lda src_ptr
.3823	69 11		adc #$11		adc #17
.3825	85 24		sta $24			sta src_ptr
.3827	a5 25		lda $25			lda src_ptr+1
.3829	69 00		adc #$00		adc #0
.382b	85 25		sta $25			sta src_ptr+1
.382d	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.382f	b2 24		lda ($24)		lda (src_ptr)
.3831	48		pha			pha
.3832	b1 24		lda ($24),y		lda (src_ptr),y
.3834	85 25		sta $25			sta src_ptr+1
.3836	68		pla			pla
.3837	85 24		sta $24			sta src_ptr
.3839	80 cc		bra $3807		bra loop                ; And check that word
.383b						chk_chars:
.383b	a8		tay			tay                     ; y := index of last character in word
.383c	88		dey			dey
.383d						char_loop:
.383d	b1 24		lda ($24),y		lda (src_ptr),y         ; Check the yth character
.383f	d1 26		cmp ($26),y		cmp (dst_ptr),y
.3841	d0 dd		bne $3820		bne next_word           ; If they are not equal, go to the next word in the dictionary
.3843	88		dey			dey                     ; Move to the previous character in the words
.3844	c0 ff		cpy #$ff		cpy #$ff                ; Did we just check the first character?
.3846	d0 f5		bne $383d		bne char_loop           ; No: check this one
.3848	ca		dex			dex                     ; Make room for all the return values
.3849	ca		dex			dex
.384a	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.384c	74 03		stz $03,x		stz pstack+3,x
.384e	95 02		sta $02,x		sta pstack+2,x
.3850	b2 26		lda ($26)		lda (dst_ptr)           ; Then the length of the word
.3852	74 05		stz $05,x		stz pstack+5,x
.3854	95 04		sta $04,x		sta pstack+4,x
.3856	18		clc			clc                     ; Then the pfa pointer
.3857	a5 24		lda $24			lda src_ptr
.3859	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.385b	95 06		sta $06,x		sta pstack+6,x
.385d	a5 25		lda $25			lda src_ptr+1
.385f	69 00		adc #$00		adc #0
.3861	95 07		sta $07,x		sta pstack+7,x
.3863	4c 29 16	jmp $1629		jmp next
.3866					w_digit:
>3866	05					.byte $05
>3867	64 69 67 69 74				.text 'digit'
>386c						.fill 11
>3877	e4 37					.word w_x28findx29
.3879					xt_digit:
.3879	b5 04		lda $04,x		lda pstack+4,x          ; Get the character in A
.387b	c9 61		cmp #$61		cmp #'a'
.387d	90 06		bcc $3885		blt get_base
.387f	c9 7b		cmp #$7b		cmp #'z'+1
.3881	b0 02		bcs $3885		bge get_base
.3883	29 df		and #$df		and #$df               ; Turn off the case bit
.3885						get_base:
.3885	b4 02		ldy $02,x		ldy pstack+2,x          ; Get the base into Y
.3887	88		dey			dey
.3888						loop:
.3888	d9 a8 38	cmp $38a8,y		cmp digits,y            ; Check to see if we have a match
.388b	f0 0e		beq $389b		beq found               ; If so: return the number
.388d	88		dey			dey                     ; Move to the previous digit
.388e	c0 ff		cpy #$ff		cpy #$ff                ; Have we checked the first digit?
.3890	d0 f6		bne $3888		bne loop                ; No: check against this digit
.3892	74 05		stz $05,x		stz pstack+5,x          ; Return false
.3894	74 04		stz $04,x		stz pstack+4,x
.3896	e8		inx			inx                     ; Clean up the stack
.3897	e8		inx			inx
.3898	4c 29 16	jmp $1629		jmp next
.389b						found:
.389b	74 05		stz $05,x		stz pstack+5,x          ; Return the value of the digit
.389d	94 04		sty $04,x		sty pstack+4,x
.389f	a9 ff		lda #$ff		lda #$ff                ; And the true flag
.38a1	95 03		sta $03,x		sta pstack+3,x
.38a3	95 02		sta $02,x		sta pstack+2,x
.38a5	4c 29 16	jmp $1629		jmp next
.38a8						digits:
>38a8	30 31 32 33 34 35 36 37			.text "0123456789ABCDEF"
>38b0	38 39 41 42 43 44 45 46
.38b8					w_pad:
>38b8	03					.byte $03
>38b9	70 61 64				.text 'pad'
>38bc						.fill 13
>38c9	66 38					.word w_digit
.38cb					xt_pad:
.38cb	a9 90		lda #$90		lda #$90
.38cd	95 01		sta $01,x		sta pstack+1,x
.38cf	74 00		stz $00,x		stz pstack,x
.38d1	ca		dex			dex
.38d2	ca		dex			dex
.38d3	4c 29 16	jmp $1629		jmp next
.38d6					w_bs:
>38d6	02					.byte $02
>38d7	62 73					.text 'bs'
>38d9						.fill 14
>38e7	b8 38					.word w_pad
.38e9					xt_bs:
.38e9	4c 0a 35	jmp $350a		jmp xt_x28constantx29
>38ec	08 00					.word 8
.38ee					w_nl:
>38ee	02					.byte $02
>38ef	6e 6c					.text 'nl'
>38f1						.fill 14
>38ff	d6 38					.word w_bs
.3901					xt_nl:
.3901	4c 0a 35	jmp $350a		jmp xt_x28constantx29
>3904	0d 00					.word 13
.3906					w_bl:
>3906	02					.byte $02
>3907	62 6c					.text 'bl'
>3909						.fill 14
>3917	ee 38					.word w_nl
.3919					xt_bl:
.3919	4c 0a 35	jmp $350a		jmp xt_x28constantx29
>391c	20 00					.word 32
.391e					w_s0:
>391e	02					.byte $02
>391f	73 30					.text 's0'
>3921						.fill 14
>392f	06 39					.word w_bl
.3931					xt_s0:
.3931	4c 45 35	jmp $3545		jmp xt_x28userx29
>3934	00 00					.word 0
.3936					w_r0:
>3936	02					.byte $02
>3937	72 30					.text 'r0'
>3939						.fill 14
>3947	1e 39					.word w_s0
.3949					xt_r0:
.3949	4c 45 35	jmp $3545		jmp xt_x28userx29
>394c	02 00					.word 2
.394e					w_base:
>394e	04					.byte $04
>394f	62 61 73 65				.text 'base'
>3953						.fill 12
>395f	36 39					.word w_r0
.3961					xt_base:
.3961	4c 45 35	jmp $3545		jmp xt_x28userx29
>3964	04 00					.word 4
.3966					w_state:
>3966	05					.byte $05
>3967	73 74 61 74 65				.text 'state'
>396c						.fill 11
>3977	4e 39					.word w_base
.3979					xt_state:
.3979	4c 45 35	jmp $3545		jmp xt_x28userx29
>397c	06 00					.word 6
.397e					w_context:
>397e	07					.byte $07
>397f	63 6f 6e 74 65 78 74			.text 'context'
>3986						.fill 9
>398f	66 39					.word w_state
.3991					xt_context:
.3991	4c 45 35	jmp $3545		jmp xt_x28userx29
>3994	08 00					.word 8
.3996					w_current:
>3996	07					.byte $07
>3997	63 75 72 72 65 6e 74			.text 'current'
>399e						.fill 9
>39a7	7e 39					.word w_context
.39a9					xt_current:
.39a9	4c 45 35	jmp $3545		jmp xt_x28userx29
>39ac	0a 00					.word 10
.39ae					w_dp:
>39ae	02					.byte $02
>39af	64 70					.text 'dp'
>39b1						.fill 14
>39bf	96 39					.word w_current
.39c1					xt_dp:
.39c1	4c 45 35	jmp $3545		jmp xt_x28userx29
>39c4	0c 00					.word 12
.39c6					w_x3ein:
>39c6	03					.byte $03
>39c7	3e 69 6e				.text '>in'
>39ca						.fill 13
>39d7	ae 39					.word w_dp
.39d9					xt_x3ein:
.39d9	4c 45 35	jmp $3545		jmp xt_x28userx29
>39dc	0e 00					.word 14
.39de					w_tib:
>39de	03					.byte $03
>39df	74 69 62				.text 'tib'
>39e2						.fill 13
>39ef	c6 39					.word w_x3ein
.39f1					xt_tib:
.39f1	4c 45 35	jmp $3545		jmp xt_x28userx29
>39f4	10 00					.word 16
.39f6					w_sourcex2did:
>39f6	09					.byte $09
>39f7	73 6f 75 72 63 65 2d 69			.text 'source-id'
>39ff	64
>3a00						.fill 7
>3a07	de 39					.word w_tib
.3a09					xt_sourcex2did:
.3a09	4c 45 35	jmp $3545		jmp xt_x28userx29
>3a0c	12 00					.word 18
.3a0e					w_blk:
>3a0e	03					.byte $03
>3a0f	62 6c 6b				.text 'blk'
>3a12						.fill 13
>3a1f	f6 39					.word w_sourcex2did
.3a21					xt_blk:
.3a21	4c 45 35	jmp $3545		jmp xt_x28userx29
>3a24	14 00					.word 20
.3a26					w_dpl:
>3a26	03					.byte $03
>3a27	64 70 6c				.text 'dpl'
>3a2a						.fill 13
>3a37	0e 3a					.word w_blk
.3a39					xt_dpl:
.3a39	4c 45 35	jmp $3545		jmp xt_x28userx29
>3a3c	16 00					.word 22
.3a3e					w_hld:
>3a3e	03					.byte $03
>3a3f	68 6c 64				.text 'hld'
>3a42						.fill 13
>3a4f	26 3a					.word w_dpl
.3a51					xt_hld:
.3a51	4c 45 35	jmp $3545		jmp xt_x28userx29
>3a54	18 00					.word 24
.3a56					w_x3fdup:
>3a56	04					.byte $04
>3a57	3f 64 75 70				.text '?dup'
>3a5b						.fill 12
>3a67	3e 3a					.word w_hld
.3a69					xt_x3fdup:
.3a69	4c 16 16	jmp $1616		jmp i_enter
>3a6c	b4 2d					.word xt_dup
>3a6e	91 35					.word xt_x28branch0x29
>3a70	74 3a					.word l_168
>3a72	b4 2d					.word xt_dup
.3a74					l_168:
>3a74	0e 16					.word i_exit
.3a76					w_rot:
>3a76	03					.byte $03
>3a77	72 6f 74				.text 'rot'
>3a7a						.fill 13
>3a87	56 3a					.word w_x3fdup
.3a89					xt_rot:
.3a89	4c 16 16	jmp $1616		jmp i_enter
>3a8c	82 2e					.word xt_x3er
>3a8e	d4 2d					.word xt_swap
>3a90	a0 2e					.word xt_rx3e
>3a92	d4 2d					.word xt_swap
>3a94	0e 16					.word i_exit
.3a96					w_2dup:
>3a96	04					.byte $04
>3a97	32 64 75 70				.text '2dup'
>3a9b						.fill 12
>3aa7	76 3a					.word w_rot
.3aa9					xt_2dup:
.3aa9	4c 16 16	jmp $1616		jmp i_enter
>3aac	38 2e					.word xt_over
>3aae	38 2e					.word xt_over
>3ab0	0e 16					.word i_exit
.3ab2					w_2drop:
>3ab2	05					.byte $05
>3ab3	32 64 72 6f 70				.text '2drop'
>3ab8						.fill 11
>3ac3	96 3a					.word w_2dup
.3ac5					xt_2drop:
.3ac5	4c 16 16	jmp $1616		jmp i_enter
>3ac8	9c 2d					.word xt_drop
>3aca	9c 2d					.word xt_drop
>3acc	0e 16					.word i_exit
.3ace					w_x3c:
>3ace	01					.byte $01
>3acf	3c					.text '<'
>3ad0						.fill 15
>3adf	b2 3a					.word w_2drop
.3ae1					xt_x3c:
.3ae1	4c 16 16	jmp $1616		jmp i_enter
>3ae4	e4 31					.word xt_x2d
>3ae6	66 34					.word xt_0x3c
>3ae8	0e 16					.word i_exit
.3aea					w_x3e:
>3aea	01					.byte $01
>3aeb	3e					.text '>'
>3aec						.fill 15
>3afb	ce 3a					.word w_x3c
.3afd					xt_x3e:
.3afd	4c 16 16	jmp $1616		jmp i_enter
>3b00	e4 31					.word xt_x2d
>3b02	b8 34					.word xt_0x3e
>3b04	0e 16					.word i_exit
.3b06					w_x3d:
>3b06	01					.byte $01
>3b07	3d					.text '='
>3b08						.fill 15
>3b17	ea 3a					.word w_x3e
.3b19					xt_x3d:
.3b19	4c 16 16	jmp $1616		jmp i_enter
>3b1c	e4 31					.word xt_x2d
>3b1e	8d 34					.word xt_0x3d
>3b20	0e 16					.word i_exit
.3b22					w_dx3c:
>3b22	02					.byte $02
>3b23	64 3c					.text 'd<'
>3b25						.fill 14
>3b33	06 3b					.word w_x3d
.3b35					xt_dx3c:
.3b35	4c 16 16	jmp $1616		jmp i_enter
>3b38	b1 31					.word xt_dx2d
>3b3a	9c 2d					.word xt_drop
>3b3c	66 34					.word xt_0x3c
>3b3e	0e 16					.word i_exit
.3b40					w_abs:
>3b40	03					.byte $03
>3b41	61 62 73				.text 'abs'
>3b44						.fill 13
>3b51	22 3b					.word w_dx3c
.3b53					xt_abs:
.3b53	4c 16 16	jmp $1616		jmp i_enter
>3b56	b4 2d					.word xt_dup
>3b58	66 34					.word xt_0x3c
>3b5a	91 35					.word xt_x28branch0x29
>3b5c	64 3b					.word l_205
>3b5e	28 18					.word xt_0
>3b60	d4 2d					.word xt_swap
>3b62	e4 31					.word xt_x2d
.3b64					l_205:
>3b64	0e 16					.word i_exit
.3b66					w_dabs:
>3b66	04					.byte $04
>3b67	64 61 62 73				.text 'dabs'
>3b6b						.fill 12
>3b77	40 3b					.word w_abs
.3b79					xt_dabs:
.3b79	4c 16 16	jmp $1616		jmp i_enter
>3b7c	38 2e					.word xt_over
>3b7e	66 34					.word xt_0x3c
>3b80	91 35					.word xt_x28branch0x29
>3b82	8c 3b					.word l_212
>3b84	28 18					.word xt_0
>3b86	28 18					.word xt_0
>3b88	fa 2d					.word xt_2swap
>3b8a	b1 31					.word xt_dx2d
.3b8c					l_212:
>3b8c	0e 16					.word i_exit
.3b8e					w_x2fmod:
>3b8e	04					.byte $04
>3b8f	2f 6d 6f 64				.text '/mod'
>3b93						.fill 12
>3b9f	66 3b					.word w_dabs
.3ba1					xt_x2fmod:
.3ba1	4c 16 16	jmp $1616		jmp i_enter
>3ba4	b4 2d					.word xt_dup
>3ba6	bc 18					.word xt_x28literalx29
>3ba8	00 80					.word 32768
>3baa	d8 33					.word xt_and
>3bac	82 2e					.word xt_x3er
>3bae	d4 2d					.word xt_swap
>3bb0	b4 2d					.word xt_dup
>3bb2	bc 18					.word xt_x28literalx29
>3bb4	00 80					.word 32768
>3bb6	d8 33					.word xt_and
>3bb8	82 2e					.word xt_x3er
>3bba	53 3b					.word xt_abs
>3bbc	29 33					.word xt_sx3ed
>3bbe	89 3a					.word xt_rot
>3bc0	ce 32					.word xt_umx2fmod
>3bc2	a0 2e					.word xt_rx3e
>3bc4	a0 2e					.word xt_rx3e
>3bc6	20 34					.word xt_xor
>3bc8	91 35					.word xt_x28branch0x29
>3bca	d2 3b					.word l_219
>3bcc	28 18					.word xt_0
>3bce	d4 2d					.word xt_swap
>3bd0	e4 31					.word xt_x2d
.3bd2					l_219:
>3bd2	0e 16					.word i_exit
.3bd4					w_x2f:
>3bd4	01					.byte $01
>3bd5	2f					.text '/'
>3bd6						.fill 15
>3be5	8e 3b					.word w_x2fmod
.3be7					xt_x2f:
.3be7	4c 16 16	jmp $1616		jmp i_enter
>3bea	a1 3b					.word xt_x2fmod
>3bec	d4 2d					.word xt_swap
>3bee	9c 2d					.word xt_drop
>3bf0	0e 16					.word i_exit
.3bf2					w_mod:
>3bf2	03					.byte $03
>3bf3	6d 6f 64				.text 'mod'
>3bf6						.fill 13
>3c03	d4 3b					.word w_x2f
.3c05					xt_mod:
.3c05	4c 16 16	jmp $1616		jmp i_enter
>3c08	a1 3b					.word xt_x2fmod
>3c0a	9c 2d					.word xt_drop
>3c0c	0e 16					.word i_exit
.3c0e					w_max:
>3c0e	03					.byte $03
>3c0f	6d 61 78				.text 'max'
>3c12						.fill 13
>3c1f	f2 3b					.word w_mod
.3c21					xt_max:
.3c21	4c 16 16	jmp $1616		jmp i_enter
>3c24	a9 3a					.word xt_2dup
>3c26	e1 3a					.word xt_x3c
>3c28	91 35					.word xt_x28branch0x29
>3c2a	34 3c					.word l_228
>3c2c	38 2e					.word xt_over
>3c2e	9c 2d					.word xt_drop
>3c30	6d 35					.word xt_x28branchx29
>3c32	36 3c					.word l_229
.3c34					l_228:
>3c34	9c 2d					.word xt_drop
.3c36					l_229:
>3c36	0e 16					.word i_exit
.3c38					w_min:
>3c38	03					.byte $03
>3c39	6d 69 6e				.text 'min'
>3c3c						.fill 13
>3c49	0e 3c					.word w_max
.3c4b					xt_min:
.3c4b	4c 16 16	jmp $1616		jmp i_enter
>3c4e	a9 3a					.word xt_2dup
>3c50	fd 3a					.word xt_x3e
>3c52	91 35					.word xt_x28branch0x29
>3c54	5e 3c					.word l_236
>3c56	38 2e					.word xt_over
>3c58	9c 2d					.word xt_drop
>3c5a	6d 35					.word xt_x28branchx29
>3c5c	60 3c					.word l_237
.3c5e					l_236:
>3c5e	9c 2d					.word xt_drop
.3c60					l_237:
>3c60	0e 16					.word i_exit
.3c62					w_lfa:
>3c62	03					.byte $03
>3c63	6c 66 61				.text 'lfa'
>3c66						.fill 13
>3c73	38 3c					.word w_min
.3c75					xt_lfa:
.3c75	4c 16 16	jmp $1616		jmp i_enter
>3c78	bc 18					.word xt_x28literalx29
>3c7a	05 00					.word 5
>3c7c	e4 31					.word xt_x2d
>3c7e	0e 16					.word i_exit
.3c80					w_cfa:
>3c80	03					.byte $03
>3c81	63 66 61				.text 'cfa'
>3c84						.fill 13
>3c91	62 3c					.word w_lfa
.3c93					xt_cfa:
.3c93	4c 16 16	jmp $1616		jmp i_enter
>3c96	bc 18					.word xt_x28literalx29
>3c98	03 00					.word 3
>3c9a	e4 31					.word xt_x2d
>3c9c	0e 16					.word i_exit
.3c9e					w_nfa:
>3c9e	03					.byte $03
>3c9f	6e 66 61				.text 'nfa'
>3ca2						.fill 13
>3caf	80 3c					.word w_cfa
.3cb1					xt_nfa:
.3cb1	4c 16 16	jmp $1616		jmp i_enter
>3cb4	bc 18					.word xt_x28literalx29
>3cb6	16 00					.word 22
>3cb8	e4 31					.word xt_x2d
>3cba	0e 16					.word i_exit
.3cbc					w_pfa:
>3cbc	03					.byte $03
>3cbd	70 66 61				.text 'pfa'
>3cc0						.fill 13
>3ccd	9e 3c					.word w_nfa
.3ccf					xt_pfa:
.3ccf	4c 16 16	jmp $1616		jmp i_enter
>3cd2	bc 18					.word xt_x28literalx29
>3cd4	16 00					.word 22
>3cd6	59 31					.word xt_x2b
>3cd8	0e 16					.word i_exit
.3cda					w_here:
>3cda	04					.byte $04
>3cdb	68 65 72 65				.text 'here'
>3cdf						.fill 12
>3ceb	bc 3c					.word w_pfa
.3ced					xt_here:
.3ced	4c 16 16	jmp $1616		jmp i_enter
>3cf0	c1 39					.word xt_dp
>3cf2	21 2f					.word xt_x40
>3cf4	0e 16					.word i_exit
.3cf6					w_allot:
>3cf6	05					.byte $05
>3cf7	61 6c 6c 6f 74				.text 'allot'
>3cfc						.fill 11
>3d07	da 3c					.word w_here
.3d09					xt_allot:
.3d09	4c 16 16	jmp $1616		jmp i_enter
>3d0c	c1 39					.word xt_dp
>3d0e	be 2f					.word xt_x2bx21
>3d10	0e 16					.word i_exit
.3d12					w_x2c:
>3d12	01					.byte $01
>3d13	2c					.text ','
>3d14						.fill 15
>3d23	f6 3c					.word w_allot
.3d25					xt_x2c:
.3d25	4c 16 16	jmp $1616		jmp i_enter
>3d28	ed 3c					.word xt_here
>3d2a	f5 2e					.word xt_x21
>3d2c	62 18					.word xt_2
>3d2e	09 3d					.word xt_allot
>3d30	0e 16					.word i_exit
.3d32					w_cx2c:
>3d32	02					.byte $02
>3d33	63 2c					.text 'c,'
>3d35						.fill 14
>3d43	12 3d					.word w_x2c
.3d45					xt_cx2c:
.3d45	4c 16 16	jmp $1616		jmp i_enter
>3d48	ed 3c					.word xt_here
>3d4a	49 2f					.word xt_cx21
>3d4c	44 18					.word xt_1
>3d4e	09 3d					.word xt_allot
>3d50	0e 16					.word i_exit
.3d52					w_definitions:
>3d52	0b					.byte $0B
>3d53	64 65 66 69 6e 69 74 69			.text 'definitions'
>3d5b	6f 6e 73
>3d5e						.fill 5
>3d63	32 3d					.word w_cx2c
.3d65					xt_definitions:
.3d65	4c 16 16	jmp $1616		jmp i_enter
>3d68	91 39					.word xt_context
>3d6a	21 2f					.word xt_x40
>3d6c	a9 39					.word xt_current
>3d6e	f5 2e					.word xt_x21
>3d70	0e 16					.word i_exit
.3d72					w_latest:
>3d72	06					.byte $06
>3d73	6c 61 74 65 73 74			.text 'latest'
>3d79						.fill 10
>3d83	52 3d					.word w_definitions
.3d85					xt_latest:
.3d85	4c 16 16	jmp $1616		jmp i_enter
>3d88	a9 39					.word xt_current
>3d8a	21 2f					.word xt_x40
>3d8c	21 2f					.word xt_x40
>3d8e	0e 16					.word i_exit
.3d90					w_count:
>3d90	05					.byte $05
>3d91	63 6f 75 6e 74				.text 'count'
>3d96						.fill 11
>3da1	72 3d					.word w_latest
.3da3					xt_count:
.3da3	4c 16 16	jmp $1616		jmp i_enter
>3da6	b4 2d					.word xt_dup
>3da8	58 33					.word xt_1x2b
>3daa	d4 2d					.word xt_swap
>3dac	67 2f					.word xt_cx40
>3dae	0e 16					.word i_exit
.3db0					w_type:
>3db0	04					.byte $04
>3db1	74 79 70 65				.text 'type'
>3db5						.fill 12
>3dc1	90 3d					.word w_count
.3dc3					xt_type:
.3dc3	4c 16 16	jmp $1616		jmp i_enter
>3dc6	69 3a					.word xt_x3fdup
>3dc8	91 35					.word xt_x28branch0x29
>3dca	ee 3d					.word l_244
>3dcc	38 2e					.word xt_over
>3dce	59 31					.word xt_x2b
>3dd0	d4 2d					.word xt_swap
>3dd2	ce 35					.word xt_x28dox29
.3dd4					l_245:
>3dd4	20 37					.word xt_i
>3dd6	67 2f					.word xt_cx40
>3dd8	69 3a					.word xt_x3fdup
>3dda	91 35					.word xt_x28branch0x29
>3ddc	e4 3d					.word l_247
>3dde	9c 17					.word xt_emit
>3de0	6d 35					.word xt_x28branchx29
>3de2	e6 3d					.word l_248
.3de4					l_247:
>3de4	24 36					.word xt_leave
.3de6					l_248:
>3de6	4b 36					.word xt_x28loopx29
>3de8	d4 3d					.word l_245
.3dea					l_246:
>3dea	6d 35					.word xt_x28branchx29
>3dec	f0 3d					.word l_249
.3dee					l_244:
>3dee	9c 2d					.word xt_drop
.3df0					l_249:
>3df0	0e 16					.word i_exit
.3df2					w_space:
>3df2	05					.byte $05
>3df3	73 70 61 63 65				.text 'space'
>3df8						.fill 11
>3e03	b0 3d					.word w_type
.3e05					xt_space:
.3e05	4c 16 16	jmp $1616		jmp i_enter
>3e08	bc 18					.word xt_x28literalx29
>3e0a	20 00					.word 32
>3e0c	9c 17					.word xt_emit
>3e0e	0e 16					.word i_exit
.3e10					w_spaces:
>3e10	06					.byte $06
>3e11	73 70 61 63 65 73			.text 'spaces'
>3e17						.fill 10
>3e21	f2 3d					.word w_space
.3e23					xt_spaces:
.3e23	4c 16 16	jmp $1616		jmp i_enter
>3e26	b4 2d					.word xt_dup
>3e28	b8 34					.word xt_0x3e
>3e2a	91 35					.word xt_x28branch0x29
>3e2c	3c 3e					.word l_250
>3e2e	28 18					.word xt_0
>3e30	ce 35					.word xt_x28dox29
.3e32					l_251:
>3e32	05 3e					.word xt_space
>3e34	4b 36					.word xt_x28loopx29
>3e36	32 3e					.word l_251
.3e38					l_252:
>3e38	6d 35					.word xt_x28branchx29
>3e3a	3e 3e					.word l_253
.3e3c					l_250:
>3e3c	9c 2d					.word xt_drop
.3e3e					l_253:
>3e3e	0e 16					.word i_exit
.3e40					w_expect:
>3e40	06					.byte $06
>3e41	65 78 70 65 63 74			.text 'expect'
>3e47						.fill 10
>3e51	10 3e					.word w_spaces
.3e53					xt_expect:
.3e53	4c 16 16	jmp $1616		jmp i_enter
>3e56	38 2e					.word xt_over
>3e58	59 31					.word xt_x2b
>3e5a	38 2e					.word xt_over
>3e5c	ce 35					.word xt_x28dox29
.3e5e					l_254:
>3e5e	e6 17					.word xt_key
>3e60	e9 38					.word xt_bs
>3e62	47 37					.word xt_x28ofx29
>3e64	90 3e					.word l_257
>3e66	b4 2d					.word xt_dup
>3e68	20 37					.word xt_i
>3e6a	19 3b					.word xt_x3d
>3e6c	44 34					.word xt_not
>3e6e	91 35					.word xt_x28branch0x29
>3e70	8c 3e					.word l_258
>3e72	e9 38					.word xt_bs
>3e74	9c 17					.word xt_emit
>3e76	19 39					.word xt_bl
>3e78	9c 17					.word xt_emit
>3e7a	e9 38					.word xt_bs
>3e7c	9c 17					.word xt_emit
>3e7e	28 18					.word xt_0
>3e80	20 37					.word xt_i
>3e82	97 33					.word xt_1x2d
>3e84	49 2f					.word xt_cx21
>3e86	20 37					.word xt_i
>3e88	b5 33					.word xt_2x2d
>3e8a	f5 35					.word xt_x3ei
.3e8c					l_258:
>3e8c	6d 35					.word xt_x28branchx29
>3e8e	b6 3e					.word l_256
.3e90					l_257:
>3e90	01 39					.word xt_nl
>3e92	47 37					.word xt_x28ofx29
>3e94	a2 3e					.word l_259
>3e96	28 18					.word xt_0
>3e98	20 37					.word xt_i
>3e9a	49 2f					.word xt_cx21
>3e9c	24 36					.word xt_leave
>3e9e	6d 35					.word xt_x28branchx29
>3ea0	b6 3e					.word l_256
.3ea2					l_259:
>3ea2	b4 2d					.word xt_dup
>3ea4	b4 2d					.word xt_dup
>3ea6	20 37					.word xt_i
>3ea8	49 2f					.word xt_cx21
>3eaa	28 18					.word xt_0
>3eac	20 37					.word xt_i
>3eae	58 33					.word xt_1x2b
>3eb0	49 2f					.word xt_cx21
>3eb2	9c 17					.word xt_emit
>3eb4	9c 2d					.word xt_drop
.3eb6					l_256:
>3eb6	4b 36					.word xt_x28loopx29
>3eb8	5e 3e					.word l_254
.3eba					l_255:
>3eba	9c 2d					.word xt_drop
>3ebc	0e 16					.word i_exit
.3ebe					w_query:
>3ebe	05					.byte $05
>3ebf	71 75 65 72 79				.text 'query'
>3ec4						.fill 11
>3ecf	40 3e					.word w_expect
.3ed1					xt_query:
.3ed1	4c 16 16	jmp $1616		jmp i_enter
>3ed4	f1 39					.word xt_tib
>3ed6	21 2f					.word xt_x40
>3ed8	bc 18					.word xt_x28literalx29
>3eda	50 00					.word 80
>3edc	53 3e					.word xt_expect
>3ede	28 18					.word xt_0
>3ee0	d9 39					.word xt_x3ein
>3ee2	f5 2e					.word xt_x21
>3ee4	0e 16					.word i_exit
.3ee6					w_erase:
>3ee6	05					.byte $05
>3ee7	65 72 61 73 65				.text 'erase'
>3eec						.fill 11
>3ef7	be 3e					.word w_query
.3ef9					xt_erase:
.3ef9	4c 16 16	jmp $1616		jmp i_enter
>3efc	28 18					.word xt_0
>3efe	83 2f					.word xt_fill
>3f00	0e 16					.word i_exit
.3f02					w_blanks:
>3f02	06					.byte $06
>3f03	62 6c 61 6e 6b 73			.text 'blanks'
>3f09						.fill 10
>3f13	e6 3e					.word w_erase
.3f15					xt_blanks:
.3f15	4c 16 16	jmp $1616		jmp i_enter
>3f18	19 39					.word xt_bl
>3f1a	83 2f					.word xt_fill
>3f1c	0e 16					.word i_exit
.3f1e					w_word:
>3f1e	04					.byte $04
>3f1f	77 6f 72 64				.text 'word'
>3f23						.fill 12
>3f2f	02 3f					.word w_blanks
.3f31					xt_word:
.3f31	4c 16 16	jmp $1616		jmp i_enter
>3f34	f1 39					.word xt_tib
>3f36	21 2f					.word xt_x40
>3f38	d9 39					.word xt_x3ein
>3f3a	21 2f					.word xt_x40
>3f3c	59 31					.word xt_x2b
>3f3e	d4 2d					.word xt_swap
>3f40	ef 2f					.word xt_enclose
>3f42	28 18					.word xt_0
>3f44	ed 3c					.word xt_here
>3f46	f5 2e					.word xt_x21
>3f48	d9 39					.word xt_x3ein
>3f4a	be 2f					.word xt_x2bx21
>3f4c	38 2e					.word xt_over
>3f4e	e4 31					.word xt_x2d
>3f50	82 2e					.word xt_x3er
>3f52	be 2e					.word xt_r
>3f54	ed 3c					.word xt_here
>3f56	49 2f					.word xt_cx21
>3f58	59 31					.word xt_x2b
>3f5a	ed 3c					.word xt_here
>3f5c	58 33					.word xt_1x2b
>3f5e	a0 2e					.word xt_rx3e
>3f60	65 30					.word xt_cmove
>3f62	0e 16					.word i_exit
.3f64					w_x2dfind:
>3f64	05					.byte $05
>3f65	2d 66 69 6e 64				.text '-find'
>3f6a						.fill 11
>3f75	1e 3f					.word w_word
.3f77					xt_x2dfind:
.3f77	4c 16 16	jmp $1616		jmp i_enter
>3f7a	19 39					.word xt_bl
>3f7c	31 3f					.word xt_word
>3f7e	ed 3c					.word xt_here
>3f80	91 39					.word xt_context
>3f82	21 2f					.word xt_x40
>3f84	21 2f					.word xt_x40
>3f86	f7 37					.word xt_x28findx29
>3f88	b4 2d					.word xt_dup
>3f8a	8d 34					.word xt_0x3d
>3f8c	91 35					.word xt_x28branch0x29
>3f8e	98 3f					.word l_260
>3f90	9c 2d					.word xt_drop
>3f92	ed 3c					.word xt_here
>3f94	85 3d					.word xt_latest
>3f96	f7 37					.word xt_x28findx29
.3f98					l_260:
>3f98	0e 16					.word i_exit
.3f9a					w_decimal:
>3f9a	07					.byte $07
>3f9b	64 65 63 69 6d 61 6c			.text 'decimal'
>3fa2						.fill 9
>3fab	64 3f					.word w_x2dfind
.3fad					xt_decimal:
.3fad	4c 16 16	jmp $1616		jmp i_enter
>3fb0	bc 18					.word xt_x28literalx29
>3fb2	0a 00					.word 10
>3fb4	61 39					.word xt_base
>3fb6	f5 2e					.word xt_x21
>3fb8	0e 16					.word i_exit
.3fba					w_hex:
>3fba	03					.byte $03
>3fbb	68 65 78				.text 'hex'
>3fbe						.fill 13
>3fcb	9a 3f					.word w_decimal
.3fcd					xt_hex:
.3fcd	4c 16 16	jmp $1616		jmp i_enter
>3fd0	bc 18					.word xt_x28literalx29
>3fd2	10 00					.word 16
>3fd4	61 39					.word xt_base
>3fd6	f5 2e					.word xt_x21
>3fd8	0e 16					.word i_exit
.3fda					w_octal:
>3fda	05					.byte $05
>3fdb	6f 63 74 61 6c				.text 'octal'
>3fe0						.fill 11
>3feb	ba 3f					.word w_hex
.3fed					xt_octal:
.3fed	4c 16 16	jmp $1616		jmp i_enter
>3ff0	bc 18					.word xt_x28literalx29
>3ff2	08 00					.word 8
>3ff4	61 39					.word xt_base
>3ff6	f5 2e					.word xt_x21
>3ff8	0e 16					.word i_exit
.3ffa					w_x28numberx29:
>3ffa	08					.byte $08
>3ffb	28 6e 75 6d 62 65 72 29			.text '(number)'
>4003						.fill 8
>400b	da 3f					.word w_octal
.400d					xt_x28numberx29:
.400d	4c 16 16	jmp $1616		jmp i_enter
.4010					l_261:
>4010	58 33					.word xt_1x2b
>4012	b4 2d					.word xt_dup
>4014	82 2e					.word xt_x3er
>4016	67 2f					.word xt_cx40
>4018	61 39					.word xt_base
>401a	21 2f					.word xt_x40
>401c	79 38					.word xt_digit
>401e	91 35					.word xt_x28branch0x29
>4020	36 40					.word l_262
>4022	82 2e					.word xt_x3er
>4024	61 39					.word xt_base
>4026	21 2f					.word xt_x40
>4028	09 32					.word xt_ux2a
>402a	a0 2e					.word xt_rx3e
>402c	29 33					.word xt_sx3ed
>402e	7e 31					.word xt_dx2b
>4030	a0 2e					.word xt_rx3e
>4032	6d 35					.word xt_x28branchx29
>4034	10 40					.word l_261
.4036					l_262:
>4036	a0 2e					.word xt_rx3e
>4038	0e 16					.word i_exit
.403a					w_number:
>403a	06					.byte $06
>403b	6e 75 6d 62 65 72			.text 'number'
>4041						.fill 10
>404b	fa 3f					.word w_x28numberx29
.404d					xt_number:
.404d	4c 16 16	jmp $1616		jmp i_enter
>4050	28 18					.word xt_0
>4052	28 18					.word xt_0
>4054	89 3a					.word xt_rot
>4056	b4 2d					.word xt_dup
>4058	58 33					.word xt_1x2b
>405a	67 2f					.word xt_cx40
>405c	bc 18					.word xt_x28literalx29
>405e	2d 00					.word 45
>4060	19 3b					.word xt_x3d
>4062	91 35					.word xt_x28branch0x29
>4064	6e 40					.word l_263
>4066	44 18					.word xt_1
>4068	82 2e					.word xt_x3er
>406a	6d 35					.word xt_x28branchx29
>406c	76 40					.word l_264
.406e					l_263:
>406e	28 18					.word xt_0
>4070	82 2e					.word xt_x3er
>4072	44 18					.word xt_1
>4074	59 31					.word xt_x2b
.4076					l_264:
>4076	80 18					.word xt_x2d1
.4078					l_265:
>4078	39 3a					.word xt_dpl
>407a	f5 2e					.word xt_x21
>407c	0d 40					.word xt_x28numberx29
>407e	b4 2d					.word xt_dup
>4080	67 2f					.word xt_cx40
>4082	19 39					.word xt_bl
>4084	19 3b					.word xt_x3d
>4086	91 35					.word xt_x28branch0x29
>4088	a6 40					.word l_266
>408a	b4 2d					.word xt_dup
>408c	67 2f					.word xt_cx40
>408e	bc 18					.word xt_x28literalx29
>4090	2e 00					.word 46
>4092	19 3b					.word xt_x3d
>4094	91 35					.word xt_x28branch0x29
>4096	9e 40					.word l_267
>4098	28 18					.word xt_0
>409a	6d 35					.word xt_x28branchx29
>409c	a2 40					.word l_268
.409e					l_267:
>409e	39 3a					.word xt_dpl
>40a0	21 2f					.word xt_x40
.40a2					l_268:
>40a2	6d 35					.word xt_x28branchx29
>40a4	78 40					.word l_265
.40a6					l_266:
>40a6	9c 2d					.word xt_drop
>40a8	a0 2e					.word xt_rx3e
>40aa	91 35					.word xt_x28branch0x29
>40ac	b6 40					.word l_269
>40ae	28 18					.word xt_0
>40b0	28 18					.word xt_0
>40b2	fa 2d					.word xt_2swap
>40b4	b1 31					.word xt_dx2d
.40b6					l_269:
>40b6	0e 16					.word i_exit
.40b8					w_x3cx23:
>40b8	02					.byte $02
>40b9	3c 23					.text '<#'
>40bb						.fill 14
>40c9	3a 40					.word w_number
.40cb					xt_x3cx23:
.40cb	4c 16 16	jmp $1616		jmp i_enter
>40ce	cb 38					.word xt_pad
>40d0	51 3a					.word xt_hld
>40d2	f5 2e					.word xt_x21
>40d4	0e 16					.word i_exit
.40d6					w_hold:
>40d6	04					.byte $04
>40d7	68 6f 6c 64				.text 'hold'
>40db						.fill 12
>40e7	b8 40					.word w_x3cx23
.40e9					xt_hold:
.40e9	4c 16 16	jmp $1616		jmp i_enter
>40ec	80 18					.word xt_x2d1
>40ee	51 3a					.word xt_hld
>40f0	be 2f					.word xt_x2bx21
>40f2	51 3a					.word xt_hld
>40f4	21 2f					.word xt_x40
>40f6	49 2f					.word xt_cx21
>40f8	0e 16					.word i_exit
.40fa					w_x23:
>40fa	01					.byte $01
>40fb	23					.text '#'
>40fc						.fill 15
>410b	d6 40					.word w_hold
.410d					xt_x23:
.410d	4c 16 16	jmp $1616		jmp i_enter
>4110	61 39					.word xt_base
>4112	21 2f					.word xt_x40
>4114	ce 32					.word xt_umx2fmod
>4116	29 33					.word xt_sx3ed
>4118	89 3a					.word xt_rot
>411a	bc 18					.word xt_x28literalx29
>411c	09 00					.word 9
>411e	38 2e					.word xt_over
>4120	e1 3a					.word xt_x3c
>4122	91 35					.word xt_x28branch0x29
>4124	2c 41					.word l_270
>4126	bc 18					.word xt_x28literalx29
>4128	07 00					.word 7
>412a	59 31					.word xt_x2b
.412c					l_270:
>412c	bc 18					.word xt_x28literalx29
>412e	30 00					.word 48
>4130	59 31					.word xt_x2b
>4132	e9 40					.word xt_hold
>4134	0e 16					.word i_exit
.4136					w_x23s:
>4136	02					.byte $02
>4137	23 73					.text '#s'
>4139						.fill 14
>4147	fa 40					.word w_x23
.4149					xt_x23s:
.4149	4c 16 16	jmp $1616		jmp i_enter
.414c					l_271:
>414c	0d 41					.word xt_x23
>414e	38 2e					.word xt_over
>4150	38 2e					.word xt_over
>4152	fc 33					.word xt_or
>4154	8d 34					.word xt_0x3d
>4156	91 35					.word xt_x28branch0x29
>4158	4c 41					.word l_271
.415a					l_272:
>415a	0e 16					.word i_exit
.415c					w_sign:
>415c	04					.byte $04
>415d	73 69 67 6e				.text 'sign'
>4161						.fill 12
>416d	36 41					.word w_x23s
.416f					xt_sign:
.416f	4c 16 16	jmp $1616		jmp i_enter
>4172	89 3a					.word xt_rot
>4174	66 34					.word xt_0x3c
>4176	91 35					.word xt_x28branch0x29
>4178	80 41					.word l_273
>417a	bc 18					.word xt_x28literalx29
>417c	2d 00					.word 45
>417e	e9 40					.word xt_hold
.4180					l_273:
>4180	0e 16					.word i_exit
.4182					w_x23x3e:
>4182	02					.byte $02
>4183	23 3e					.text '#>'
>4185						.fill 14
>4193	5c 41					.word w_sign
.4195					xt_x23x3e:
.4195	4c 16 16	jmp $1616		jmp i_enter
>4198	c5 3a					.word xt_2drop
>419a	51 3a					.word xt_hld
>419c	21 2f					.word xt_x40
>419e	cb 38					.word xt_pad
>41a0	38 2e					.word xt_over
>41a2	e4 31					.word xt_x2d
>41a4	0e 16					.word i_exit
.41a6					w_dx2er:
>41a6	03					.byte $03
>41a7	64 2e 72				.text 'd.r'
>41aa						.fill 13
>41b7	82 41					.word w_x23x3e
.41b9					xt_dx2er:
.41b9	4c 16 16	jmp $1616		jmp i_enter
>41bc	82 2e					.word xt_x3er
>41be	38 2e					.word xt_over
>41c0	d4 2d					.word xt_swap
>41c2	79 3b					.word xt_dabs
>41c4	cb 40					.word xt_x3cx23
>41c6	49 41					.word xt_x23s
>41c8	6f 41					.word xt_sign
>41ca	95 41					.word xt_x23x3e
>41cc	a0 2e					.word xt_rx3e
>41ce	38 2e					.word xt_over
>41d0	e4 31					.word xt_x2d
>41d2	23 3e					.word xt_spaces
>41d4	c3 3d					.word xt_type
>41d6	0e 16					.word i_exit
.41d8					w_dx2e:
>41d8	02					.byte $02
>41d9	64 2e					.text 'd.'
>41db						.fill 14
>41e9	a6 41					.word w_dx2er
.41eb					xt_dx2e:
.41eb	4c 16 16	jmp $1616		jmp i_enter
>41ee	28 18					.word xt_0
>41f0	b9 41					.word xt_dx2er
>41f2	0e 16					.word i_exit
.41f4					w_x2e:
>41f4	01					.byte $01
>41f5	2e					.text '.'
>41f6						.fill 15
>4205	d8 41					.word w_dx2e
.4207					xt_x2e:
.4207	4c 16 16	jmp $1616		jmp i_enter
>420a	29 33					.word xt_sx3ed
>420c	eb 41					.word xt_dx2e
>420e	0e 16					.word i_exit
.4210					w_x2er:
>4210	02					.byte $02
>4211	2e 72					.text '.r'
>4213						.fill 14
>4221	f4 41					.word w_x2e
.4223					xt_x2er:
.4223	4c 16 16	jmp $1616		jmp i_enter
>4226	82 2e					.word xt_x3er
>4228	29 33					.word xt_sx3ed
>422a	a0 2e					.word xt_rx3e
>422c	b9 41					.word xt_dx2er
>422e	0e 16					.word i_exit
.4230					w_x3f:
>4230	01					.byte $01
>4231	3f					.text '?'
>4232						.fill 15
>4241	10 42					.word w_x2er
.4243					xt_x3f:
.4243	4c 16 16	jmp $1616		jmp i_enter
>4246	21 2f					.word xt_x40
>4248	07 42					.word xt_x2e
>424a	0e 16					.word i_exit
.424c					w_dump:
>424c	04					.byte $04
>424d	64 75 6d 70				.text 'dump'
>4251						.fill 12
>425d	30 42					.word w_x3f
.425f					xt_dump:
.425f	4c 16 16	jmp $1616		jmp i_enter
>4262	28 18					.word xt_0
>4264	ce 35					.word xt_x28dox29
.4266					l_274:
>4266	0b 18					.word xt_cr
>4268	b4 2d					.word xt_dup
>426a	28 18					.word xt_0
>426c	d4 2d					.word xt_swap
>426e	bc 18					.word xt_x28literalx29
>4270	05 00					.word 5
>4272	b9 41					.word xt_dx2er
>4274	bc 18					.word xt_x28literalx29
>4276	3a 00					.word 58
>4278	9c 17					.word xt_emit
>427a	bc 18					.word xt_x28literalx29
>427c	08 00					.word 8
>427e	28 18					.word xt_0
>4280	ce 35					.word xt_x28dox29
.4282					l_276:
>4282	b4 2d					.word xt_dup
>4284	21 2f					.word xt_x40
>4286	28 18					.word xt_0
>4288	d4 2d					.word xt_swap
>428a	bc 18					.word xt_x28literalx29
>428c	05 00					.word 5
>428e	b9 41					.word xt_dx2er
>4290	74 33					.word xt_2x2b
>4292	4b 36					.word xt_x28loopx29
>4294	82 42					.word l_276
.4296					l_277:
>4296	bc 18					.word xt_x28literalx29
>4298	08 00					.word 8
>429a	ac 36					.word xt_x28x2bloopx29
>429c	66 42					.word l_274
.429e					l_275:
>429e	9c 2d					.word xt_drop
>42a0	0e 16					.word i_exit
.42a2					w_initrandom:
>42a2	0a					.byte $0A
>42a3	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>42ab	6f 6d
>42ad						.fill 6
>42b3	4c 42					.word w_dump
.42b5					xt_initrandom:
.42b5	4c 16 16	jmp $1616		jmp i_enter
>42b8	44 18					.word xt_1
>42ba	bc 18					.word xt_x28literalx29
>42bc	a6 d6					.word 54950
>42be	49 2f					.word xt_cx21
>42c0	0e 16					.word i_exit
.42c2					w_random:
>42c2	06					.byte $06
>42c3	72 61 6e 64 6f 6d			.text 'random'
>42c9						.fill 10
>42d3	a2 42					.word w_initrandom
.42d5					xt_random:
.42d5	4c 16 16	jmp $1616		jmp i_enter
>42d8	bc 18					.word xt_x28literalx29
>42da	a4 d6					.word 54948
>42dc	21 2f					.word xt_x40
>42de	0e 16					.word i_exit
.42e0					w_maze:
>42e0	04					.byte $04
>42e1	6d 61 7a 65				.text 'maze'
>42e5						.fill 12
>42f1	c2 42					.word w_random
.42f3					xt_maze:
.42f3	4c 16 16	jmp $1616		jmp i_enter
>42f6	b5 42					.word xt_initrandom
.42f8					l_278:
>42f8	d5 42					.word xt_random
>42fa	44 18					.word xt_1
>42fc	d8 33					.word xt_and
>42fe	bc 18					.word xt_x28literalx29
>4300	cd 00					.word 205
>4302	59 31					.word xt_x2b
>4304	9c 17					.word xt_emit
>4306	6d 35					.word xt_x28branchx29
>4308	f8 42					.word l_278
.430a					l_279:
>430a	0e 16					.word i_exit
.430c					w_cold:
>430c	04					.byte $04
>430d	63 6f 6c 64				.text 'cold'
>4311						.fill 12
>431d	e0 42					.word w_maze
.431f					xt_cold:
.431f	4c 16 16	jmp $1616		jmp i_enter
>4322	df 37					.word xt_forth
>4324	65 3d					.word xt_definitions
>4326	28 18					.word xt_0
>4328	21 3a					.word xt_blk
>432a	f5 2e					.word xt_x21
>432c	bc 18					.word xt_x28literalx29
>432e	00 40					.word 16384
>4330	c1 39					.word xt_dp
>4332	f5 2e					.word xt_x21
>4334	bc 18					.word xt_x28literalx29
>4336	00 bf					.word 48896
>4338	f1 39					.word xt_tib
>433a	f5 2e					.word xt_x21
>433c	bc 18					.word xt_x28literalx29
>433e	44 43					.word l_280
>4340	6d 35					.word xt_x28branchx29
>4342	63 43					.word l_281
.4344					l_280:
>4344	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>434c	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>435c	30 2e 30 30 2e 30 30
.4363					l_281:
>4363	a3 3d					.word xt_count
>4365	c3 3d					.word xt_type
>4367	0b 18					.word xt_cr
>4369	0f 19					.word xt_unittest
>436b	bc 18					.word xt_x28literalx29
>436d	73 43					.word l_282
>436f	6d 35					.word xt_x28branchx29
>4371	8a 43					.word l_283
.4373					l_282:
>4373	16 41 6c 6c 20 75 6e 69			.ptext "All unit tests PASSED!"
>437b	74 20 74 65 73 74 73 20 50 41 53 53 45 44 21
.438a					l_283:
>438a	a3 3d					.word xt_count
>438c	c3 3d					.word xt_type
>438e	0b 18					.word xt_cr
>4390	cd 3f					.word xt_hex
>4392	bc 18					.word xt_x28literalx29
>4394	00 90					.word 36864
>4396	43 42					.word xt_x3f
>4398	bc 18					.word xt_x28literalx29
>439a	00 80					.word 32768
>439c	ed 3c					.word xt_here
>439e	f5 2e					.word xt_x21
.43a0					l_284:
>43a0	ed 3c					.word xt_here
>43a2	21 2f					.word xt_x40
>43a4	8d 34					.word xt_0x3d
>43a6	91 35					.word xt_x28branch0x29
>43a8	bf 43					.word l_286
>43aa	0b 18					.word xt_cr
>43ac	bc 18					.word xt_x28literalx29
>43ae	b4 43					.word l_287
>43b0	6d 35					.word xt_x28branchx29
>43b2	b7 43					.word l_288
.43b4					l_287:
>43b4	02 6f 6b				.ptext "ok"
.43b7					l_288:
>43b7	a3 3d					.word xt_count
>43b9	c3 3d					.word xt_type
>43bb	0b 18					.word xt_cr
>43bd	d1 3e					.word xt_query
.43bf					l_286:
>43bf	77 3f					.word xt_x2dfind
>43c1	b4 2d					.word xt_dup
>43c3	8d 34					.word xt_0x3d
>43c5	91 35					.word xt_x28branch0x29
>43c7	05 44					.word l_289
>43c9	9c 2d					.word xt_drop
>43cb	ed 3c					.word xt_here
>43cd	21 2f					.word xt_x40
>43cf	8d 34					.word xt_0x3d
>43d1	44 34					.word xt_not
>43d3	91 35					.word xt_x28branch0x29
>43d5	01 44					.word l_290
>43d7	0b 18					.word xt_cr
>43d9	bc 18					.word xt_x28literalx29
>43db	e1 43					.word l_291
>43dd	6d 35					.word xt_x28branchx29
>43df	f1 43					.word l_292
.43e1					l_291:
>43e1	0f 57 6f 72 64 20 6e 6f			.ptext "Word not found:"
>43e9	74 20 66 6f 75 6e 64 3a
.43f1					l_292:
>43f1	a3 3d					.word xt_count
>43f3	c3 3d					.word xt_type
>43f5	19 39					.word xt_bl
>43f7	9c 17					.word xt_emit
>43f9	ed 3c					.word xt_here
>43fb	a3 3d					.word xt_count
>43fd	c3 3d					.word xt_type
>43ff	0b 18					.word xt_cr
.4401					l_290:
>4401	6d 35					.word xt_x28branchx29
>4403	2a 44					.word l_293
.4405					l_289:
>4405	9c 2d					.word xt_drop
>4407	9c 2d					.word xt_drop
>4409	0b 18					.word xt_cr
>440b	bc 18					.word xt_x28literalx29
>440d	13 44					.word l_294
>440f	6d 35					.word xt_x28branchx29
>4411	1a 44					.word l_295
.4413					l_294:
>4413	06 46 6f 75 6e 64 3a			.ptext "Found:"
.441a					l_295:
>441a	a3 3d					.word xt_count
>441c	c3 3d					.word xt_type
>441e	19 39					.word xt_bl
>4420	9c 17					.word xt_emit
>4422	b1 3c					.word xt_nfa
>4424	a3 3d					.word xt_count
>4426	c3 3d					.word xt_type
>4428	0b 18					.word xt_cr
.442a					l_293:
>442a	6d 35					.word xt_x28branchx29
>442c	a0 43					.word l_284
.442e					l_285:
>442e	0e 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.4430					endcode:

;******  Return to file: forth.asm


;******  End of listing
