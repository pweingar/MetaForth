
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Feb 22 19:41:41 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$a000					USERAREA = $A000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa	cc 0a				vnmi:       .word <>h_nmi
>fffc	00 b0				vreset:     .word <>boot
>fffe	cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
>0020					shell_start .word ?                 ; Address for the recognized shell program
>0022					cur_line    .word ?                 ; Address of the current line on the text screen
>0024					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200					curs_color  .byte ?                 ; Current color for printing
>0201					curs_x      .byte ?                 ; Current column for the text cursor
>0202					curs_y      .byte ?                 ; Current row for the text cursor
>0203					old_y       .byte ?                 ; Previous cursor row
>0204					curs_width  .byte ?                 ; Width of the screen in text columns
>0205					curs_height .byte ?                 ; Height of the screen in text columns
.b000	4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003	4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006	4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009	4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c	4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f	4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012	4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015	4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018	4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800	a9 f1		lda #$f1	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802	a0 15		ldy #$15	            ldy #>start
.0804	20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807	4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a					isetshell:
.080a	84 21		sty $21		            sty shell_start+1
.080c	85 20		sta $20		            sta shell_start
.080e	60		rts		            rts
.080f					iwarm:
.080f	78		sei		            sei                     ; Disable IRQs
.0810	d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811	a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813	9a		txs		            txs
.0814	a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816	85 01		sta $01		            sta MMU_IO_CTRL
.0818	20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b	20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e	20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821	6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824					inittext:
.0824	a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826	8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829	9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c	a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e	8d 04 02	sta $0204	            sta curs_width
.0831	a9 3c		lda #$3c	            lda #60
.0833	8d 05 02	sta $0205	            sta curs_height
.0836	a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838	8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b	a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d	8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840	a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842	8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845	a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847	8d 00 02	sta $0200	            sta curs_color
.084a	a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c	8d 03 02	sta $0203	            sta old_y
.084f	20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852	20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855	20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858	60		rts		            rts
.0859					initint:
.0859	a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b	8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e	a9 ff		lda #$ff	            lda #$ff
.0860	8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863	8d 60 d6	sta $d660	            sta INT_PEND_0
.0866	8d 61 d6	sta $d661	            sta INT_PEND_1
.0869	58		cli		            cli
.086a	60		rts		            rts
=$7f					CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b					initfont:
.086b	48		pha		            pha
.086c	da		phx		            phx
.086d	5a		phy		            phy
.086e	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870	48		pha		            pha
.0871	a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873	85 01		sta $01		            sta MMU_IO_CTRL
.0875	a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877	85 24		sta $24		            sta src_ptr
.0879	a9 0a		lda #$0a	            lda #>bios_font
.087b	85 25		sta $25		            sta src_ptr+1
.087d	a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f	85 26		sta $26		            sta dst_ptr
.0881	a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883	85 27		sta $27		            sta dst_ptr+1
.0885	a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887	a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889	b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b	91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d	c8		iny		            iny                     ; Move to the next byte
.088e	d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890	e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892	e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894	ca		dex		            dex                     ; Count down the pages moved
.0895	d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897	68		pla		            pla
.0898	85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a	7a		ply		            ply
.089b	fa		plx		            plx
.089c	68		pla		            pla
.089d	60		rts		            rts
=$f4					DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e					initlut:
.089e	48		pha		            pha
.089f	5a		phy		            phy
.08a0	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2	48		pha		            pha
.08a3	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5	85 01		sta $01		            sta MMU_IO_CTRL
.08a7	a0 00		ldy #$00	            ldy #0
.08a9	b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2	c8		iny		            iny
.08b3	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5	d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7	68		pla		            pla
.08b8	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba	7a		ply		            ply
.08bb	68		pla		            pla
.08bc	60		rts		            rts
>08bd	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd					consclr:
.08fd	48		pha		            pha
.08fe	da		phx		            phx
.08ff	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901	85 22		sta $22		            sta cur_line
.0903	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905	85 23		sta $23		            sta cur_line+1
.0907	a0 00		ldy #$00	            ldy #0
.0909	20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c	c8		iny		            iny                     ; Move to the next line
.090d	cc 05 02	cpy $0205	            cpy curs_height
.0910	f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913	a5 22		lda $22		            lda cur_line
.0915	6d 04 02	adc $0204	            adc curs_width
.0918	85 22		sta $22		            sta cur_line
.091a	a5 23		lda $23		            lda cur_line+1
.091c	69 00		adc #$00	            adc #0
.091e	85 23		sta $23		            sta cur_line+1
.0920	80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922	9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925	9c 02 02	stz $0202	            stz curs_y
.0928	20 2e 09	jsr $092e	            jsr cursset
.092b	fa		plx		            plx
.092c	68		pla		            pla
.092d	60		rts		            rts
.092e					cursset:
.092e	48		pha		            pha
.092f	5a		phy		            phy
.0930	ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933	cd 04 02	cmp $0204	            cmp curs_width
.0936	90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938	9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b	ee 02 02	inc $0202	            inc curs_y
.093e					chk_row:
.093e	ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941	cd 05 02	cmp $0205	            cmp curs_height
.0944	90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946	ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949	3a		dec a		            dec a
.094a	8d 02 02	sta $0202	            sta curs_y
.094d	20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950	ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953	8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959	ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962	ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965	cd 02 02	cmp $0202	            cmp curs_y
.0968	f0 21		beq $098b	            beq done                ; Yes: we are done
.096a	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c	85 22		sta $22		            sta cur_line
.096e	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970	85 23		sta $23		            sta cur_line+1
.0972	ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975	8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978	f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a	18		clc		loop:       clc                     ; Move cur_line to the next line
.097b	a5 22		lda $22		            lda cur_line
.097d	6d 04 02	adc $0204	            adc curs_width
.0980	85 22		sta $22		            sta cur_line
.0982	a5 23		lda $23		            lda cur_line+1
.0984	69 00		adc #$00	            adc #0
.0986	85 23		sta $23		            sta cur_line+1
.0988	88		dey		            dey                     ; Decrement line counter
.0989	d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b	7a		ply		done:       ply
.098c	68		pla		            pla
.098d	60		rts		            rts
.098e					consscroll:
.098e	48		pha		            pha
.098f	da		phx		            phx
.0990	a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992	48		pha		            pha
.0993	a5 22		lda $22		            lda cur_line
.0995	48		pha		            pha
.0996	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998	48		pha		            pha
.0999	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b	85 26		sta $26		            sta dst_ptr
.099d	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f	85 27		sta $27		            sta dst_ptr+1
.09a1	18		clc		            clc                     ; src_ptr is the second line
.09a2	a5 26		lda $26		            lda dst_ptr
.09a4	6d 04 02	adc $0204	            adc curs_width
.09a7	85 24		sta $24		            sta src_ptr
.09a9	a5 27		lda $27		            lda dst_ptr+1
.09ab	69 00		adc #$00	            adc #0
.09ad	85 25		sta $25		            sta src_ptr+1
.09af	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3	85 01		sta $01		            sta MMU_IO_CTRL
.09b5	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7	b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9	91 26		sta ($26),y	            sta (dst_ptr),y
.09bb	c8		iny		            iny
.09bc	cc 04 02	cpy $0204	            cpy curs_width
.09bf	d0 f6		bne $09b7	            bne loop1
.09c1	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3	85 01		sta $01		            sta MMU_IO_CTRL
.09c5	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7	b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9	91 26		sta ($26),y	            sta (dst_ptr),y
.09cb	c8		iny		            iny
.09cc	cc 04 02	cpy $0204	            cpy curs_width
.09cf	d0 f6		bne $09c7	            bne loop2
.09d1	a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3	85 26		sta $26		            sta dst_ptr
.09d5	a5 25		lda $25		            lda src_ptr+1
.09d7	85 27		sta $27		            sta dst_ptr+1
.09d9	18		clc		            clc                     ; Move src_ptr to the next line
.09da	a5 24		lda $24		            lda src_ptr
.09dc	6d 04 02	adc $0204	            adc curs_width
.09df	85 24		sta $24		            sta src_ptr
.09e1	a5 25		lda $25		            lda src_ptr+1
.09e3	69 00		adc #$00	            adc #0
.09e5	85 25		sta $25		            sta src_ptr+1
.09e7	e8		inx		            inx                     ; Move src line number to the next row
.09e8	ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb	d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed	a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef	85 22		sta $22		            sta cur_line
.09f1	a5 27		lda $27		            lda dst_ptr+1
.09f3	85 22		sta $22		            sta cur_line
.09f5	20 04 0a	jsr $0a04	            jsr clrline
.09f8	68		pla		            pla                     ; Restore the original I/O page
.09f9	85 01		sta $01		            sta MMU_IO_CTRL
.09fb	68		pla		            pla                     ; Restore the current line
.09fc	85 22		sta $22		            sta cur_line
.09fe	68		pla		            pla
.09ff	85 23		sta $23		            sta cur_line+1
.0a01	fa		plx		            plx
.0a02	68		pla		            pla
.0a03	60		rts		            rts
.0a04					clrline:
.0a04	48		pha		            pha
.0a05	5a		phy		            phy
.0a06	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08	48		pha		            pha
.0a09	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b	85 01		sta $01		            sta MMU_IO_CTRL
.0a0d	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f	a9 20		lda #$20	            lda #' '
.0a11	91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13	c8		iny		            iny
.0a14	cc 04 02	cpy $0204	            cpy curs_width
.0a17	d0 f8		bne $0a11	            bne loop1
.0a19	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b	85 01		sta $01		            sta MMU_IO_CTRL
.0a1d	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f	ad 00 02	lda $0200	            lda curs_color
.0a22	91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24	c8		iny		            iny
.0a25	cc 04 02	cpy $0204	            cpy curs_width
.0a28	d0 f8		bne $0a22	            bne loop2
.0a2a	68		pla		            pla                     ; Restore the original I/O page
.0a2b	85 01		sta $01		            sta MMU_IO_CTRL
.0a2d	7a		ply		            ply
.0a2e	68		pla		            pla
.0a2f	60		rts		            rts
.0a30					iconout:
.0a30	5a		phy		            phy
.0a31	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33	d0 0b		bne $0a40	            bne not_cr
.0a35	9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38	ee 02 02	inc $0202	            inc curs_y
.0a3b	20 2e 09	jsr $092e	            jsr cursset
.0a3e	80 44		bra $0a84	            bra done
.0a40	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42	d0 05		bne $0a49	            bne not_ff
.0a44	20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47	80 3b		bra $0a84	            bra done
.0a49	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b	d0 15		bne $0a62	            bne not_bs
.0a4d	ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50	f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52	3a		dec a		            dec a                   ; No: move it back one
.0a53	8d 01 02	sta $0201	            sta curs_x
.0a56	20 2e 09	jsr $092e	            jsr cursset
.0a59					bs_leftmost:
.0a59	a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60	80 22		bra $0a84	            bra done
.0a62	85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66	48		pha		            pha
.0a67	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69	85 01		sta $01		            sta MMU_IO_CTRL
.0a6b	a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74	85 01		sta $01		            sta MMU_IO_CTRL
.0a76	ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79	91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b	68		pla		            pla                     ; Restore the I/O page
.0a7c	85 01		sta $01		            sta MMU_IO_CTRL
.0a7e	ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81	20 2e 09	jsr $092e	            jsr cursset
.0a84	7a		ply		done:       ply
.0a85	60		rts		            rts
.0a86					iprintah:
.0a86	da		phx		            phx
.0a87	48		pha		            pha
.0a88	4a		lsr a		            lsr a
.0a89	4a		lsr a		            lsr a
.0a8a	4a		lsr a		            lsr a
.0a8b	4a		lsr a		            lsr a
.0a8c	29 0f		and #$0f	            and #$0f
.0a8e	aa		tax		            tax                     ; Convert it to an index
.0a8f	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95	68		pla		            pla
.0a96	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98	aa		tax		            tax                     ; Convert it to an index
.0a99	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f	fa		plx		            plx
.0aa0	60		rts		            rts
.0aa1					iprintyah:
.0aa1	48		pha		            pha
.0aa2	98		tya		            tya
.0aa3	20 12 b0	jsr $b012	            jsr printah
.0aa6	68		pla		            pla
.0aa7	20 12 b0	jsr $b012	            jsr printah
.0aaa	60		rts		            rts
>0aab	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3	38 39 41 42 43 44 45 46
.0abb					iprints:
.0abb	48		pha		            pha
.0abc	5a		phy		            phy
.0abd	a0 00		ldy #$00	            ldy #0
.0abf	b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1	f0 06		beq $0ac9	            beq done
.0ac3	20 09 b0	jsr $b009	            jsr conout
.0ac6	c8		iny		            iny
.0ac7	d0 f6		bne $0abf	            bne loop
.0ac9	7a		ply		done:       ply
.0aca	68		pla		            pla
.0acb	60		rts		            rts
.0acc					h_nmi:
.0acc	40		rti		            rti                     ; Just return
.0acd					h_irq:
.0acd	48		pha		            pha
.0ace	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0	48		pha		            pha
.0ad1	64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3	ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6	89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8	f0 03		beq $0add	            beq done                ; No: we're done
.0ada	20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add					done:
.0add	a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf	8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2	8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5	68		pla		            pla                     ; Restore the IO page settings
.0ae6	85 01		sta $01		            sta MMU_IO_CTRL
.0ae8	68		pla		            pla
.0ae9	40		rti		            rti                     ; Just return
>0aea	00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2	7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02	00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12	38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32	00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52	30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62	10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72	04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82	48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92	1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2	10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2	10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2	00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2	00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2	00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2	10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02	28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12	60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22	08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32	10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52	00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62	00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72	10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92	7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2	7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2	38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2	00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2	00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2	38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2	10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02	18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12	7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22	38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32	38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42	44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52	44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62	38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72	38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82	38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92	44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2	44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2	44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2	3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2	00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2	00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02	00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12	00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22	00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32	00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42	40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52	00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62	00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72	00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82	00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92	00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2	00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2	00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2	0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2	30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2	7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2	48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02	10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12	20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22	00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32	28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42	28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52	20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62	10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72	00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82	10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92	20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2	20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2	28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2	00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2	44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2	18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2	10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002	10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012	14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022	10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032	00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042	42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052	10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062	00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072	cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082	10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092	10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2	00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2	28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2	00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2	28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2	00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2	10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102	10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112	10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122	28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132	00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142	00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152	00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162	10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172	00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182	28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192	00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2	28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2	10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2	ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2	00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202	00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212	00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222	00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232	38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242	3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252	00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262	38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272	10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282	08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292	10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2	00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2	00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2	1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2	38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2	00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642					KBD_SCAN = $d642
=$d644					KBD_STAT = $d644
=$01					KBD_RDY = $01
=$01					KBD_ST_F0 = $01
=$02					KBD_ST_E0 = $02
=$80					KBD_SHIFT = $80
=$81					KBD_CTRL = $81
=$82					KBD_ALT = $82
=$83					KBD_OS = $83
=$84					KBD_CAP = $84
=$01					KBD_MOD_SHIFT = $01
=$02					KBD_MOD_CTRL = $02
=$04					KBD_MOD_ALT = $04
=$08					KBD_MOD_OS = $08
=$10					KBD_MOD_CAP = $10
=80					KBD_BUFFER_SIZE = 80
>0206					kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207					kbd_mods    .byte ?         ; The current state of the modifier keys
>0208					kbd_buffer  .fill 80        ; Keyboard buffer
>0258					kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea					initkbd:
.12ea	9c 06 02	stz $0206	            stz kbd_state
.12ed	9c 07 02	stz $0207	            stz kbd_mods
.12f0	9c 58 02	stz $0258	            stz kbd_head
.12f3	60		rts		            rts
.12f4					kbd_status:
.12f4	ad 58 02	lda $0258	            lda kbd_head
.12f7	f0 03		beq $12fc	            beq is_empty
.12f9	a9 01		lda #$01	            lda #1
.12fb	60		rts		            rts
.12fc					is_empty:
.12fc	60		rts		            rts
.12fd					kbd_enqueue:
.12fd	da		phx		            phx
.12fe	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301	e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303	b0 07		bcs $130c	            bge done
.1305	9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308	e8		inx		            inx
.1309	8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c					done:
.130c	fa		plx		            plx
.130d	60		rts		            rts
.130e					kbd_dequeue:
.130e	da		phx		            phx
.130f	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312	f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314	ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317	48		pha		            pha                     ; Save it temporarily to the stack
.1318	a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a					loop:
.131a	bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d	9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320	e8		inx		            inx                     ; Move to the next character
.1321	ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324	d0 f4		bne $131a	            bne loop
.1326	ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329	68		pla		            pla                     ; Get the character back and return
.132a	80 02		bra $132e	            bra done
.132c					is_empty:
.132c	a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e					done:
.132e	fa		plx		            plx
.132f	60		rts		            rts
.1330					handlekbd:
.1330	ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333	29 01		and #$01	            and #KBD_RDY
.1335	d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337	ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a	f0 08		beq $1344	            beq st_0        ; If base state...
.133c	c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e	f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340	9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343					done:
.1343	60		rts		            rts
.1344					st_0:
.1344	ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347	c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349	d0 07		bne $1352	            bne not_f0
.134b	a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d	8d 06 02	sta $0206	            sta kbd_state
.1350	80 f1		bra $1343	            bra done
.1352	c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354	d0 07		bne $135d	            bne not_f0e0
.1356	a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358	8d 06 02	sta $0206	            sta kbd_state
.135b	80 e6		bra $1343	            bra done
.135d					not_f0e0:
.135d	48		pha		            pha
.135e	ad 07 02	lda $0207	            lda kbd_mods
.1361	89 10		bit #$10	            bit #KBD_MOD_CAP
.1363	d0 0b		bne $1370	            bne read_caps
.1365	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367	d0 19		bne $1382	            bne read_shift
.1369	68		pla		            pla
.136a	aa		tax		            tax
.136b	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e	80 17		bra $1387	            bra proc_ascii
.1370					read_caps:
.1370	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372	d0 07		bne $137b	            bne read_caps_shift
.1374	68		pla		            pla
.1375	aa		tax		            tax
.1376	bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379	80 0c		bra $1387	            bra proc_ascii
.137b					read_caps_shift:
.137b	68		pla		            pla
.137c	aa		tax		            tax
.137d	bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380	80 05		bra $1387	            bra proc_ascii
.1382					read_shift:
.1382	68		pla		            pla
.1383	aa		tax		            tax
.1384	bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387					proc_ascii:
.1387	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389	f0 09		beq $1394	            beq raise_shift
.138b	c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d	f0 0f		beq $139e	            beq toggle_caps
.138f	20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392	80 af		bra $1343	            bra done
.1394					raise_shift:
.1394	ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397	09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399	8d 07 02	sta $0207	            sta kbd_mods
.139c	80 a5		bra $1343	            bra done
.139e					toggle_caps:
.139e	ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1	49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3	8d 07 02	sta $0207	            sta kbd_mods
.13a6	80 9b		bra $1343	            bra done
.13a8					st_f0:
.13a8	ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab	aa		tax		            tax
.13ac	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1	d0 08		bne $13bb	            bne exit_f0
.13b3	ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6	29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8	8d 07 02	sta $0207	            sta kbd_mods
.13bb					exit_f0:
.13bb	9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be	80 83		bra $1343	            bra done
>13c0	00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8	00 00 00 00 00 08 60 00
>13d0	00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8	00 00 7a 73 61 77 32 00
>13e0	00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8	00 20 76 66 74 72 35 00
>13f0	00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8	00 00 6d 6a 75 37 38 00
>1400	00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408	00 2e 2f 6c 3b 70 2d 00
>1410	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418	84 80 0d 5d 00 5c 00 00
>1420	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428	00 00 00 00 00 00 00 00
>1430	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438	00 00 00 00 00 00 00 00
>1440	00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448	00 00 00 00 00 08 7e 00
>1450	00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458	00 00 5a 53 41 57 40 00
>1460	00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468	00 20 56 46 54 52 25 00
>1470	00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478	00 00 4d 4a 55 26 2a 00
>1480	00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488	00 3e 3f 4c 3a 50 5f 00
>1490	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498	84 80 0d 7d 00 7c 00 00
>14a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8	00 00 00 00 00 00 00 00
>14b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8	00 00 00 00 00 00 00 00
>14c0	00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8	00 00 00 00 00 08 60 00
>14d0	00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8	00 00 5a 53 41 57 32 00
>14e0	00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8	00 20 56 46 54 52 35 00
>14f0	00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8	00 00 4d 4a 55 37 38 00
>1500	00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508	00 2e 2f 4c 3b 50 2d 00
>1510	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518	84 80 0d 5d 00 5c 00 00
>1520	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528	00 00 00 00 00 00 00 00
>1530	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538	00 00 00 00 00 00 00 00
>1540	00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548	00 00 00 00 00 08 7e 00
>1550	00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558	00 00 7a 73 61 77 40 00
>1560	00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568	00 20 76 66 74 72 25 00
>1570	00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578	00 00 6d 6a 75 26 2a 00
>1580	00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588	00 3e 3f 6c 3a 70 5f 00
>1590	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598	84 80 0d 7d 00 7c 00 00
>15a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8	00 00 00 00 00 00 00 00
>15b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8	00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028					ip      .word ?         ; Instruction pointer
>002a					wp      .word ?         ; Word pointer
>002c					up      .word ?         ; User pointer
>002e					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030					test    .word ?         ; Pointer to the current test name
>0032					tmp     .fill 4
>0036					savex   .byte ?
>0037					counter .byte ?         ; A counter used for some code
>0038					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0	4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8	68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5					init_user:
>15d5	6e 00				        .word $006e     ; Initial PSP (S0)
>15d7	ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9	0a 00				        .word 10        ; Initial BASE
>15db	00 00				        .word 0         ; Initial STATE
>15dd	00 00				        .word 0         ; Initial CONTEXT
>15df	00 00				        .word 0         ; Initial CURRENT
>15e1	f1 49				        .word <>endcode ; Initial DP
>15e3	00 00				        .word 0         ; Initial >IN
>15e5	00 bf				        .word $bf00     ; Initial TIB
>15e7	00 00				        .word 0         ; Initial SOURCE-ID
>15e9	00 00				        .word 0         ; Initial BLK
>15eb	ff ff				        .word $ffff     ; Initial DPL
>15ed	00 00				        .word 0         ; Initial HLD
>15ef	00 00				        .word 0         ; Initial HANDLER
.15f1					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
=20					user_blk = 20
=22					user_dpl = 22
=24					user_hld = 24
=26					user_handler = 26
.15f1	a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15f3	9a		txs		        txs
.15f4	a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15f6	a9 15		lda #$15	        lda #<vstart
.15f8	85 28		sta $28		        sta ip
.15fa	a9 16		lda #$16	        lda #>vstart
.15fc	85 29		sta $29		        sta ip+1
.15fe	a9 00		lda #$00	        lda #<USERAREA
.1600	85 2c		sta $2c		        sta up
.1602	a9 a0		lda #$a0	        lda #>USERAREA
.1604	85 2d		sta $2d		        sta up+1
.1606	a0 00		ldy #$00	        ldy #0
.1608					init_user_loop:
.1608	b9 d5 15	lda $15d5,y	        lda init_user,y
.160b	91 2c		sta ($2c),y	        sta (up),y
.160d	c8		iny		        iny
.160e	c0 1c		cpy #$1c	        cpy #(init_user_end - init_user)
.1610	d0 f6		bne $1608	        bne init_user_loop
.1612	4c 1c 16	jmp $161c	        jmp next
>1615	79 49				vstart  .word xt_cold
>1617	2f 17				        .word xt_halt
.1619	6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.161c	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.161e	b2 28		lda ($28)	        lda (ip)
.1620	85 2a		sta $2a		        sta wp
.1622	b1 28		lda ($28),y	        lda (ip),y
.1624	85 2b		sta $2b		        sta wp+1
.1626	18		clc		        clc             ; ip := ip + 2
.1627	a5 28		lda $28		        lda ip
.1629	69 02		adc #$02	        adc #2
.162b	85 28		sta $28		        sta ip
.162d	a5 29		lda $29		        lda ip+1
.162f	69 00		adc #$00	        adc #0
.1631	85 29		sta $29		        sta ip+1
.1633	6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.1636					w_exit:
>1636	04					.byte $04
>1637	65 78 69 74				.text 'exit'
>163b						.fill 12
>1647	00 00					.word 0
.1649					xt_exit:
.1649	68		pla			pla             ; ip := pop()
.164a	85 28		sta $28			sta ip
.164c	68		pla			pla
.164d	85 29		sta $29			sta ip+1
.164f	4c 1c 16	jmp $161c		jmp next        ; jmp next
.1652					w_enter:
>1652	05					.byte $05
>1653	65 6e 74 65 72				.text 'enter'
>1658						.fill 11
>1663	36 16					.word w_exit
.1665					xt_enter:
.1665	a5 29		lda $29			lda ip+1        ; push(ip)
.1667	48		pha			pha
.1668	a5 28		lda $28			lda ip
.166a	48		pha			pha
.166b	18		clc			clc             ; ip := wp + 3
.166c	a5 2a		lda $2a			lda wp
.166e	69 03		adc #$03		adc #3
.1670	85 28		sta $28			sta ip
.1672	a5 2b		lda $2b			lda wp+1
.1674	69 00		adc #$00		adc #0
.1676	85 29		sta $29			sta ip+1
.1678	4c 1c 16	jmp $161c		jmp next
.167b					w_testname:
>167b	08					.byte $08
>167c	74 65 73 74 6e 61 6d 65			.text 'testname'
>1684						.fill 8
>168c	52 16					.word w_enter
.168e					xt_testname:
.168e	b5 02		lda $02,x		lda pstack+2,x
.1690	85 30		sta $30			sta test
.1692	b5 03		lda $03,x		lda pstack+3,x
.1694	85 31		sta $31			sta test+1
.1696	e8		inx			inx
.1697	e8		inx			inx
.1698	4c 1c 16	jmp $161c		jmp next
.169b					w_assertx3d:
>169b	07					.byte $07
>169c	61 73 73 65 72 74 3d			.text 'assert='
>16a3						.fill 9
>16ac	7b 16					.word w_testname
.16ae					xt_assertx3d:
.16ae	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.16b0	d5 04		cmp $04,x		cmp pstack+4,x
.16b2	d0 0e		bne $16c2		bne fail            ; If not, fail
.16b4	b5 03		lda $03,x		lda pstack+3,x
.16b6	d5 05		cmp $05,x		cmp pstack+5,x
.16b8	d0 08		bne $16c2		bne fail
.16ba	8a		txa			txa                 ; If so, clean up the stack
.16bb	18		clc			clc
.16bc	69 04		adc #$04		adc #4
.16be	aa		tax			tax
.16bf	4c 1c 16	jmp $161c		jmp next            ; And continue
.16c2						fail:
.16c2	a9 ff		lda #$ff		lda #<leadin        ; Print the failure message
.16c4	85 24		sta $24			sta src_ptr
.16c6	a9 16		lda #$16		lda #>leadin
.16c8	85 25		sta $25			sta src_ptr+1
.16ca	20 18 b0	jsr $b018		jsr prints
.16cd	a5 30		lda $30			lda test            ; Print the name of the test
.16cf	85 24		sta $24			sta src_ptr
.16d1	a5 31		lda $31			lda test+1
.16d3	85 25		sta $25			sta src_ptr+1
.16d5	20 18 b0	jsr $b018		jsr prints
.16d8	a9 12		lda #$12		lda #<actual        ; Print the "Actual" label
.16da	85 24		sta $24			sta src_ptr
.16dc	a9 17		lda #$17		lda #>actual
.16de	85 25		sta $25			sta src_ptr+1
.16e0	20 18 b0	jsr $b018		jsr prints
.16e3	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.16e5	b5 04		lda $04,x		lda pstack+4,x
.16e7	20 15 b0	jsr $b015		jsr printyah
.16ea	a9 06		lda #$06		lda #<expected      ; Print the "Expected" label
.16ec	85 24		sta $24			sta src_ptr
.16ee	a9 17		lda #$17		lda #>expected
.16f0	85 25		sta $25			sta src_ptr+1
.16f2	20 18 b0	jsr $b018		jsr prints
.16f5	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16f7	b5 02		lda $02,x		lda pstack+2,x
.16f9	20 15 b0	jsr $b015		jsr printyah
.16fc						lock:
.16fc	ea		nop			nop                 ; Lock up
.16fd	80 fd		bra $16fc		bra lock
.16ff						leadin:
>16ff	46 41 49 4c 3a 20 00			.null "FAIL: "
.1706						expected:
>1706	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>170e	44 3a 20 00
.1712						actual:
>1712	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>171a	20 00
.171c					w_halt:
>171c	04					.byte $04
>171d	68 61 6c 74				.text 'halt'
>1721						.fill 12
>172d	9b 16					.word w_assertx3d
.172f					xt_halt:
.172f	a9 93		lda #$93		lda #<registers         ; Print register banner
.1731	85 24		sta $24			sta src_ptr
.1733	a9 17		lda #$17		lda #>registers
.1735	85 25		sta $25			sta src_ptr+1
.1737	20 18 b0	jsr $b018		jsr prints
.173a	a4 29		ldy $29			ldy ip+1                ; Print the IP
.173c	a5 28		lda $28			lda ip
.173e	20 15 b0	jsr $b015		jsr printyah
.1741	a9 20		lda #$20		lda #' '
.1743	20 09 b0	jsr $b009		jsr conout
.1746	a4 2b		ldy $2b			ldy wp+1                ; Print the WP
.1748	a5 2a		lda $2a			lda wp
.174a	20 15 b0	jsr $b015		jsr printyah
.174d	a9 20		lda #$20		lda #' '
.174f	20 09 b0	jsr $b009		jsr conout
.1752	86 36		stx $36			stx savex               ; Print the return stack pointer
.1754	a0 01		ldy #$01		ldy #$01
.1756	ba		tsx			tsx
.1757	8a		txa			txa
.1758	20 15 b0	jsr $b015		jsr printyah
.175b	a6 36		ldx $36			ldx savex
.175d	a9 20		lda #$20		lda #' '
.175f	20 09 b0	jsr $b009		jsr conout
.1762	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.1764	8a		txa			txa
.1765	20 15 b0	jsr $b015		jsr printyah
.1768	a9 0d		lda #$0d		lda #13
.176a	20 09 b0	jsr $b009		jsr conout
.176d	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.176f	b0 1f		bcs $1790		bge lock
.1771	a9 17		lda #$17		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.1773	85 25		sta $25			sta src_ptr+1
.1775	a9 ae		lda #$ae		lda #<stackmsg
.1777	85 24		sta $24			sta src_ptr
.1779	20 18 b0	jsr $b018		jsr prints
.177c						loop:
.177c	e0 6e		cpx #$6e		cpx #$6e
.177e	b0 10		bcs $1790		bge lock
.1780	b4 03		ldy $03,x		ldy pstack+3,x
.1782	b5 02		lda $02,x		lda pstack+2,x
.1784	e8		inx			inx
.1785	e8		inx			inx
.1786	20 15 b0	jsr $b015		jsr printyah
.1789	a9 20		lda #$20		lda #' '
.178b	20 09 b0	jsr $b009		jsr conout
.178e	80 ec		bra $177c		bra loop
.1790						lock:
.1790						wait:
.1790	ea		nop			nop
.1791	80 fd		bra $1790		bra wait
>1793	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>179b	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>17ab	7c 20 00				.null "| "
>17ae	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>17b6	65 72 20 53 74 61 63 6b 3a 0d 00
.17c1					w_rpx40:
>17c1	03					.byte $03
>17c2	72 70 40				.text 'rp@'
>17c5						.fill 13
>17d2	1c 17					.word w_halt
.17d4					xt_rpx40:
.17d4	86 36		stx $36			stx savex           ; Save the parameter stack pointer
.17d6	ba		tsx			tsx                 ; Get the return stack pointer
.17d7	85 32		sta $32			sta tmp             ; Save it for later
.17d9	a6 36		ldx $36			ldx savex           ; Recover the parameter stack pointer
.17db	a9 01		lda #$01		lda #$01            ; Get the high byte of the RSP
.17dd	95 01		sta $01,x		sta pstack+1,x      ; Save it to the parameter stack
.17df	a5 32		lda $32			lda tmp             ; Get the low byte of the RSP
.17e1	95 00		sta $00,x		sta pstack,x        ; Save it to the parameter stack
.17e3	ca		dex			dex
.17e4	ca		dex			dex
.17e5	4c 1c 16	jmp $161c		jmp next
.17e8					w_rpx21:
>17e8	03					.byte $03
>17e9	72 70 21				.text 'rp!'
>17ec						.fill 13
>17f9	c1 17					.word w_rpx40
.17fb					xt_rpx21:
.17fb	86 36		stx $36			stx savex           ; Save the parameter stack pointer
.17fd	b5 02		lda $02,x		lda pstack+2,x      ; Get the new RSP from the parameter stack
.17ff	aa		tax			tax
.1800	9a		txs			txs                 ; Set the RSP
.1801	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.1803	e8		inx			inx
.1804	e8		inx			inx
.1805	4c 1c 16	jmp $161c		jmp next
.1808					w_spx40:
>1808	03					.byte $03
>1809	73 70 40				.text 'sp@'
>180c						.fill 13
>1819	e8 17					.word w_rpx21
.181b					xt_spx40:
.181b	a9 00		lda #$00		lda #>pstack        ; Get the high byte of the stack address
.181d	95 01		sta $01,x		sta pstack+1,x      ; And push it to the stack
.181f	8a		txa			txa                 ; Get the low byte of the stack address
.1820	95 00		sta $00,x		sta pstack,x        ; And push it to the stack
.1822	ca		dex			dex
.1823	ca		dex			dex
.1824	4c 1c 16	jmp $161c		jmp next
.1827					w_spx21:
>1827	03					.byte $03
>1828	73 70 21				.text 'sp!'
>182b						.fill 13
>1838	08 18					.word w_spx40
.183a					xt_spx21:
.183a	b5 02		lda $02,x		lda pstack+2,x      ; Get the address from the stack
.183c	aa		tax			tax                 ; And set the stack pointer
.183d	4c 1c 16	jmp $161c		jmp next
.1840					w_emit:
>1840	04					.byte $04
>1841	65 6d 69 74				.text 'emit'
>1845						.fill 12
>1851	27 18					.word w_spx21
.1853					xt_emit:
.1853	b5 02		lda $02,x		lda pstack+2,x
.1855	da		phx			phx
.1856	20 09 b0	jsr $b009		jsr conout
.1859	fa		plx			plx
.185a	e8		inx			inx
.185b	e8		inx			inx
.185c	4c 1c 16	jmp $161c		jmp next
.185f					w_keyx3f:
>185f	04					.byte $04
>1860	6b 65 79 3f				.text 'key?'
>1864						.fill 12
>1870	40 18					.word w_emit
.1872					xt_keyx3f:
.1872	20 0c b0	jsr $b00c		jsr constat
.1875	29 01		and #$01		and #1
.1877	f0 06		beq $187f		beq waiting
.1879	74 00		stz $00,x		stz pstack,x
.187b	74 01		stz $01,x		stz pstack+1,x
.187d	80 06		bra $1885		bra done
.187f						waiting:
.187f	a9 ff		lda #$ff		lda #$ff
.1881	95 00		sta $00,x		sta pstack,x
.1883	95 01		sta $01,x		sta pstack+1,x
.1885						done:
.1885	ca		dex			dex
.1886	ca		dex			dex
.1887	4c 1c 16	jmp $161c		jmp next
.188a					w_key:
>188a	03					.byte $03
>188b	6b 65 79				.text 'key'
>188e						.fill 13
>189b	5f 18					.word w_keyx3f
.189d					xt_key:
.189d	da		phx			phx
.189e						wait:
.189e	20 0f b0	jsr $b00f		jsr conin
.18a1	c9 00		cmp #$00		cmp #0
.18a3	f0 f9		beq $189e		beq wait
.18a5	fa		plx			plx
.18a6	95 00		sta $00,x		sta pstack,x
.18a8	74 01		stz $01,x		stz pstack+1,x
.18aa	ca		dex			dex
.18ab	ca		dex			dex
.18ac	4c 1c 16	jmp $161c		jmp next
.18af					w_cr:
>18af	02					.byte $02
>18b0	63 72					.text 'cr'
>18b2						.fill 14
>18c0	8a 18					.word w_key
.18c2					xt_cr:
.18c2	da		phx			phx
.18c3	a9 0d		lda #$0d		lda #$0d
.18c5	20 09 b0	jsr $b009		jsr conout
.18c8	fa		plx			plx
.18c9	4c 1c 16	jmp $161c		jmp next
.18cc					w_0:
>18cc	01					.byte $01
>18cd	30					.text '0'
>18ce						.fill 15
>18dd	af 18					.word w_cr
.18df					xt_0:
.18df	74 01		stz $01,x		stz pstack+1,x
.18e1	74 00		stz $00,x		stz pstack,x
.18e3	ca		dex			dex
.18e4	ca		dex			dex
.18e5	4c 1c 16	jmp $161c		jmp next
.18e8					w_1:
>18e8	01					.byte $01
>18e9	31					.text '1'
>18ea						.fill 15
>18f9	cc 18					.word w_0
.18fb					xt_1:
.18fb	74 01		stz $01,x		stz pstack+1,x
.18fd	a9 01		lda #$01		lda #1
.18ff	95 00		sta $00,x		sta pstack,x
.1901	ca		dex			dex
.1902	ca		dex			dex
.1903	4c 1c 16	jmp $161c		jmp next
.1906					w_2:
>1906	01					.byte $01
>1907	32					.text '2'
>1908						.fill 15
>1917	e8 18					.word w_1
.1919					xt_2:
.1919	74 01		stz $01,x		stz pstack+1,x
.191b	a9 02		lda #$02		lda #2
.191d	95 00		sta $00,x		sta pstack,x
.191f	ca		dex			dex
.1920	ca		dex			dex
.1921	4c 1c 16	jmp $161c		jmp next
.1924					w_x2d1:
>1924	02					.byte $02
>1925	2d 31					.text '-1'
>1927						.fill 14
>1935	06 19					.word w_2
.1937					xt_x2d1:
.1937	a9 ff		lda #$ff		lda #$ff
.1939	95 01		sta $01,x		sta pstack+1,x
.193b	95 00		sta $00,x		sta pstack,x
.193d	ca		dex			dex
.193e	ca		dex			dex
.193f	4c 1c 16	jmp $161c		jmp next
.1942					w_x2d2:
>1942	02					.byte $02
>1943	2d 32					.text '-2'
>1945						.fill 14
>1953	24 19					.word w_x2d1
.1955					xt_x2d2:
.1955	a9 fe		lda #$fe		lda #$fe
.1957	95 01		sta $01,x		sta pstack+1,x
.1959	95 00		sta $00,x		sta pstack,x
.195b	ca		dex			dex
.195c	ca		dex			dex
.195d	4c 1c 16	jmp $161c		jmp next
.1960					w_x28literalx29:
>1960	09					.byte $09
>1961	28 6c 69 74 65 72 61 6c			.text '(literal)'
>1969	29
>196a						.fill 7
>1971	42 19					.word w_x2d2
.1973					xt_x28literalx29:
.1973	a0 01		ldy #$01		ldy #1
.1975	b2 28		lda ($28)		lda (ip)
.1977	95 00		sta $00,x		sta pstack,x
.1979	b1 28		lda ($28),y		lda (ip),y
.197b	95 01		sta $01,x		sta pstack+1,x
.197d	ca		dex			dex
.197e	ca		dex			dex
.197f	18		clc			clc
.1980	a5 28		lda $28			lda ip
.1982	69 02		adc #$02		adc #2
.1984	85 28		sta $28			sta ip
.1986	a5 29		lda $29			lda ip+1
.1988	69 00		adc #$00		adc #0
.198a	85 29		sta $29			sta ip+1
.198c	4c 1c 16	jmp $161c		jmp next
.198f					w_x28dliteralx29:
>198f	0a					.byte $0A
>1990	28 64 6c 69 74 65 72 61			.text '(dliteral)'
>1998	6c 29
>199a						.fill 6
>19a0	60 19					.word w_x28literalx29
.19a2					xt_x28dliteralx29:
.19a2	a0 01		ldy #$01		ldy #1
.19a4	b2 28		lda ($28)		lda (ip)
.19a6	95 00		sta $00,x		sta pstack,x
.19a8	b1 28		lda ($28),y		lda (ip),y
.19aa	95 01		sta $01,x		sta pstack+1,x
.19ac	c8		iny			iny
.19ad	95 02		sta $02,x		sta pstack+2,x
.19af	c8		iny			iny
.19b0	95 03		sta $03,x		sta pstack+3,x
.19b2	ca		dex			dex
.19b3	ca		dex			dex
.19b4	ca		dex			dex
.19b5	ca		dex			dex
.19b6	18		clc			clc
.19b7	a5 28		lda $28			lda ip
.19b9	69 02		adc #$02		adc #2
.19bb	85 28		sta $28			sta ip
.19bd	a5 29		lda $29			lda ip+1
.19bf	69 00		adc #$00		adc #0
.19c1	85 29		sta $29			sta ip+1
.19c3	4c 1c 16	jmp $161c		jmp next
.19c6					w_depth:
>19c6	05					.byte $05
>19c7	64 65 70 74 68				.text 'depth'
>19cc						.fill 11
>19d7	8f 19					.word w_x28dliteralx29
.19d9					xt_depth:
.19d9	86 32		stx $32			stx tmp
.19db	38		sec			sec
.19dc	a9 6e		lda #$6e		lda #$6e
.19de	e5 32		sbc $32			sbc tmp
.19e0	4a		lsr a			lsr a
.19e1	74 01		stz $01,x		stz pstack+1,x
.19e3	95 00		sta $00,x		sta pstack,x
.19e5	ca		dex			dex
.19e6	ca		dex			dex
.19e7	4c 1c 16	jmp $161c		jmp next
.19ea					w_unittest:
>19ea	08					.byte $08
>19eb	75 6e 69 74 74 65 73 74			.text 'unittest'
>19f3						.fill 8
>19fb	c6 19					.word w_depth
.19fd					xt_unittest:
.19fd	4c 65 16	jmp $1665		jmp xt_enter
>1a00	73 19					.word xt_x28literalx29
>1a02	08 1a					.word l_2
>1a04	93 37					.word xt_x28branchx29
>1a06	14 1a					.word l_3
.1a08					l_2:
>1a08	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1a10	3e 20 30 00
.1a14					l_3:
>1a14	8e 16					.word xt_testname
>1a16	d9 19					.word xt_depth
>1a18	df 18					.word xt_0
>1a1a	ae 16					.word xt_assertx3d
>1a1c	73 19					.word xt_x28literalx29
>1a1e	24 1a					.word l_4
>1a20	93 37					.word xt_x28branchx29
>1a22	34 1a					.word l_5
.1a24					l_4:
>1a24	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>1a2c	2d 2d 3e 20 30 20 31 00
.1a34					l_5:
>1a34	8e 16					.word xt_testname
>1a36	df 18					.word xt_0
>1a38	d9 19					.word xt_depth
>1a3a	fb 18					.word xt_1
>1a3c	ae 16					.word xt_assertx3d
>1a3e	df 18					.word xt_0
>1a40	ae 16					.word xt_assertx3d
>1a42	73 19					.word xt_x28literalx29
>1a44	4a 1a					.word l_6
>1a46	93 37					.word xt_x28branchx29
>1a48	62 1a					.word l_7
.1a4a					l_6:
>1a4a	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>1a52	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.1a62					l_7:
>1a62	8e 16					.word xt_testname
>1a64	fb 18					.word xt_1
>1a66	fb 18					.word xt_1
>1a68	fb 18					.word xt_1
>1a6a	d9 19					.word xt_depth
>1a6c	73 19					.word xt_x28literalx29
>1a6e	03 00					.word 3
>1a70	ae 16					.word xt_assertx3d
>1a72	fb 18					.word xt_1
>1a74	ae 16					.word xt_assertx3d
>1a76	fb 18					.word xt_1
>1a78	ae 16					.word xt_assertx3d
>1a7a	fb 18					.word xt_1
>1a7c	ae 16					.word xt_assertx3d
>1a7e	73 19					.word xt_x28literalx29
>1a80	86 1a					.word l_8
>1a82	93 37					.word xt_x28branchx29
>1a84	95 1a					.word l_9
.1a86					l_8:
>1a86	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>1a8e	20 2d 2d 3e 20 31 00
.1a95					l_9:
>1a95	8e 16					.word xt_testname
>1a97	fb 18					.word xt_1
>1a99	19 19					.word xt_2
>1a9b	52 2f					.word xt_drop
>1a9d	fb 18					.word xt_1
>1a9f	ae 16					.word xt_assertx3d
>1aa1	73 19					.word xt_x28literalx29
>1aa3	a9 1a					.word l_10
>1aa5	93 37					.word xt_x28branchx29
>1aa7	bc 1a					.word l_11
.1aa9					l_10:
>1aa9	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1ab1	6f 70 20 2d 2d 3e 20 31 20 32 00
.1abc					l_11:
>1abc	8e 16					.word xt_testname
>1abe	fb 18					.word xt_1
>1ac0	19 19					.word xt_2
>1ac2	73 19					.word xt_x28literalx29
>1ac4	03 00					.word 3
>1ac6	52 2f					.word xt_drop
>1ac8	19 19					.word xt_2
>1aca	ae 16					.word xt_assertx3d
>1acc	fb 18					.word xt_1
>1ace	ae 16					.word xt_assertx3d
>1ad0	73 19					.word xt_x28literalx29
>1ad2	d8 1a					.word l_12
>1ad4	93 37					.word xt_x28branchx29
>1ad6	e6 1a					.word l_13
.1ad8					l_12:
>1ad8	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1ae0	3e 20 31 20 31 00
.1ae6					l_13:
>1ae6	8e 16					.word xt_testname
>1ae8	fb 18					.word xt_1
>1aea	6a 2f					.word xt_dup
>1aec	fb 18					.word xt_1
>1aee	ae 16					.word xt_assertx3d
>1af0	fb 18					.word xt_1
>1af2	ae 16					.word xt_assertx3d
>1af4	73 19					.word xt_x28literalx29
>1af6	fc 1a					.word l_14
>1af8	93 37					.word xt_x28branchx29
>1afa	0e 1b					.word l_15
.1afc					l_14:
>1afc	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1b04	2d 2d 3e 20 31 20 32 20 32 00
.1b0e					l_15:
>1b0e	8e 16					.word xt_testname
>1b10	fb 18					.word xt_1
>1b12	19 19					.word xt_2
>1b14	6a 2f					.word xt_dup
>1b16	19 19					.word xt_2
>1b18	ae 16					.word xt_assertx3d
>1b1a	19 19					.word xt_2
>1b1c	ae 16					.word xt_assertx3d
>1b1e	fb 18					.word xt_1
>1b20	ae 16					.word xt_assertx3d
>1b22	73 19					.word xt_x28literalx29
>1b24	2a 1b					.word l_16
>1b26	93 37					.word xt_x28branchx29
>1b28	3f 1b					.word l_17
.1b2a					l_16:
>1b2a	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1b32	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1b3f					l_17:
>1b3f	8e 16					.word xt_testname
>1b41	fb 18					.word xt_1
>1b43	19 19					.word xt_2
>1b45	73 19					.word xt_x28literalx29
>1b47	03 00					.word 3
>1b49	8a 2f					.word xt_swap
>1b4b	19 19					.word xt_2
>1b4d	ae 16					.word xt_assertx3d
>1b4f	73 19					.word xt_x28literalx29
>1b51	03 00					.word 3
>1b53	ae 16					.word xt_assertx3d
>1b55	fb 18					.word xt_1
>1b57	ae 16					.word xt_assertx3d
>1b59	73 19					.word xt_x28literalx29
>1b5b	61 1b					.word l_18
>1b5d	93 37					.word xt_x28branchx29
>1b5f	7b 1b					.word l_19
.1b61					l_18:
>1b61	31 20 32 20 33 20 34 20			.null "1 2 3 4 2swap --> 3 4 1 2"
>1b69	32 73 77 61 70 20 2d 2d 3e 20 33 20 34 20 31 20
>1b79	32 00
.1b7b					l_19:
>1b7b	8e 16					.word xt_testname
>1b7d	fb 18					.word xt_1
>1b7f	19 19					.word xt_2
>1b81	73 19					.word xt_x28literalx29
>1b83	03 00					.word 3
>1b85	73 19					.word xt_x28literalx29
>1b87	04 00					.word 4
>1b89	b0 2f					.word xt_2swap
>1b8b	19 19					.word xt_2
>1b8d	ae 16					.word xt_assertx3d
>1b8f	fb 18					.word xt_1
>1b91	ae 16					.word xt_assertx3d
>1b93	73 19					.word xt_x28literalx29
>1b95	04 00					.word 4
>1b97	ae 16					.word xt_assertx3d
>1b99	73 19					.word xt_x28literalx29
>1b9b	03 00					.word 3
>1b9d	ae 16					.word xt_assertx3d
>1b9f	73 19					.word xt_x28literalx29
>1ba1	a7 1b					.word l_20
>1ba3	93 37					.word xt_x28branchx29
>1ba5	ba 1b					.word l_21
.1ba7					l_20:
>1ba7	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>1baf	20 2d 2d 3e 20 31 20 32 20 31 00
.1bba					l_21:
>1bba	8e 16					.word xt_testname
>1bbc	fb 18					.word xt_1
>1bbe	19 19					.word xt_2
>1bc0	ee 2f					.word xt_over
>1bc2	fb 18					.word xt_1
>1bc4	ae 16					.word xt_assertx3d
>1bc6	19 19					.word xt_2
>1bc8	ae 16					.word xt_assertx3d
>1bca	fb 18					.word xt_1
>1bcc	ae 16					.word xt_assertx3d
>1bce	73 19					.word xt_x28literalx29
>1bd0	d6 1b					.word l_22
>1bd2	93 37					.word xt_x28branchx29
>1bd4	f4 1b					.word l_23
.1bd6					l_22:
>1bd6	31 20 32 20 33 20 34 20			.null "1 2 3 4 2over --> 1 2 3 4 1 2"
>1bde	32 6f 76 65 72 20 2d 2d 3e 20 31 20 32 20 33 20
>1bee	34 20 31 20 32 00
.1bf4					l_23:
>1bf4	8e 16					.word xt_testname
>1bf6	fb 18					.word xt_1
>1bf8	19 19					.word xt_2
>1bfa	73 19					.word xt_x28literalx29
>1bfc	03 00					.word 3
>1bfe	73 19					.word xt_x28literalx29
>1c00	04 00					.word 4
>1c02	0e 30					.word xt_2over
>1c04	19 19					.word xt_2
>1c06	ae 16					.word xt_assertx3d
>1c08	fb 18					.word xt_1
>1c0a	ae 16					.word xt_assertx3d
>1c0c	73 19					.word xt_x28literalx29
>1c0e	04 00					.word 4
>1c10	ae 16					.word xt_assertx3d
>1c12	73 19					.word xt_x28literalx29
>1c14	03 00					.word 3
>1c16	ae 16					.word xt_assertx3d
>1c18	19 19					.word xt_2
>1c1a	ae 16					.word xt_assertx3d
>1c1c	fb 18					.word xt_1
>1c1e	ae 16					.word xt_assertx3d
>1c20	73 19					.word xt_x28literalx29
>1c22	28 1c					.word l_24
>1c24	93 37					.word xt_x28branchx29
>1c26	48 1c					.word l_25
.1c28					l_24:
>1c28	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1c30	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1c40	3e 20 35 35 35 35 68 00
.1c48					l_25:
>1c48	8e 16					.word xt_testname
>1c4a	73 19					.word xt_x28literalx29
>1c4c	55 55					.word 21845
>1c4e	73 19					.word xt_x28literalx29
>1c50	04 00					.word 4
>1c52	ab 30					.word xt_x21
>1c54	73 19					.word xt_x28literalx29
>1c56	04 00					.word 4
>1c58	d7 30					.word xt_x40
>1c5a	73 19					.word xt_x28literalx29
>1c5c	55 55					.word 21845
>1c5e	ae 16					.word xt_assertx3d
>1c60	73 19					.word xt_x28literalx29
>1c62	68 1c					.word l_26
>1c64	93 37					.word xt_x28branchx29
>1c66	88 1c					.word l_27
.1c68					l_26:
>1c68	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1c70	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1c80	3e 20 61 61 61 61 68 00
.1c88					l_27:
>1c88	8e 16					.word xt_testname
>1c8a	73 19					.word xt_x28literalx29
>1c8c	aa aa					.word 43690
>1c8e	73 19					.word xt_x28literalx29
>1c90	04 00					.word 4
>1c92	ab 30					.word xt_x21
>1c94	73 19					.word xt_x28literalx29
>1c96	04 00					.word 4
>1c98	d7 30					.word xt_x40
>1c9a	73 19					.word xt_x28literalx29
>1c9c	aa aa					.word 43690
>1c9e	ae 16					.word xt_assertx3d
>1ca0	73 19					.word xt_x28literalx29
>1ca2	a8 1c					.word l_28
>1ca4	93 37					.word xt_x28branchx29
>1ca6	c6 1c					.word l_29
.1ca8					l_28:
>1ca8	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1cb0	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1cc0	3e 20 35 35 68 00
.1cc6					l_29:
>1cc6	8e 16					.word xt_testname
>1cc8	73 19					.word xt_x28literalx29
>1cca	55 00					.word 85
>1ccc	73 19					.word xt_x28literalx29
>1cce	03 00					.word 3
>1cd0	ff 30					.word xt_cx21
>1cd2	73 19					.word xt_x28literalx29
>1cd4	03 00					.word 3
>1cd6	1d 31					.word xt_cx40
>1cd8	73 19					.word xt_x28literalx29
>1cda	55 00					.word 85
>1cdc	ae 16					.word xt_assertx3d
>1cde	73 19					.word xt_x28literalx29
>1ce0	e6 1c					.word l_30
>1ce2	93 37					.word xt_x28branchx29
>1ce4	04 1d					.word l_31
.1ce6					l_30:
>1ce6	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1cee	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1cfe	3e 20 61 61 68 00
.1d04					l_31:
>1d04	8e 16					.word xt_testname
>1d06	73 19					.word xt_x28literalx29
>1d08	aa 00					.word 170
>1d0a	73 19					.word xt_x28literalx29
>1d0c	03 00					.word 3
>1d0e	ff 30					.word xt_cx21
>1d10	73 19					.word xt_x28literalx29
>1d12	03 00					.word 3
>1d14	1d 31					.word xt_cx40
>1d16	73 19					.word xt_x28literalx29
>1d18	aa 00					.word 170
>1d1a	ae 16					.word xt_assertx3d
>1d1c	73 19					.word xt_x28literalx29
>1d1e	24 1d					.word l_32
>1d20	93 37					.word xt_x28branchx29
>1d22	30 1d					.word l_33
.1d24					l_32:
>1d24	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1d2c	3e 20 31 00
.1d30					l_33:
>1d30	8e 16					.word xt_testname
>1d32	fb 18					.word xt_1
>1d34	df 18					.word xt_0
>1d36	0f 33					.word xt_x2b
>1d38	fb 18					.word xt_1
>1d3a	ae 16					.word xt_assertx3d
>1d3c	73 19					.word xt_x28literalx29
>1d3e	44 1d					.word l_34
>1d40	93 37					.word xt_x28branchx29
>1d42	50 1d					.word l_35
.1d44					l_34:
>1d44	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1d4c	3e 20 32 00
.1d50					l_35:
>1d50	8e 16					.word xt_testname
>1d52	fb 18					.word xt_1
>1d54	fb 18					.word xt_1
>1d56	0f 33					.word xt_x2b
>1d58	19 19					.word xt_2
>1d5a	ae 16					.word xt_assertx3d
>1d5c	73 19					.word xt_x28literalx29
>1d5e	64 1d					.word l_36
>1d60	93 37					.word xt_x28branchx29
>1d62	72 1d					.word l_37
.1d64					l_36:
>1d64	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1d6c	2d 3e 20 31 33 00
.1d72					l_37:
>1d72	8e 16					.word xt_testname
>1d74	73 19					.word xt_x28literalx29
>1d76	03 00					.word 3
>1d78	73 19					.word xt_x28literalx29
>1d7a	0a 00					.word 10
>1d7c	0f 33					.word xt_x2b
>1d7e	73 19					.word xt_x28literalx29
>1d80	0d 00					.word 13
>1d82	ae 16					.word xt_assertx3d
>1d84	73 19					.word xt_x28literalx29
>1d86	8c 1d					.word l_38
>1d88	93 37					.word xt_x28branchx29
>1d8a	9c 1d					.word l_39
.1d8c					l_38:
>1d8c	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1d94	2b 20 2d 2d 3e 20 34 00
.1d9c					l_39:
>1d9c	8e 16					.word xt_testname
>1d9e	73 19					.word xt_x28literalx29
>1da0	ff ff					.word 65535
>1da2	73 19					.word xt_x28literalx29
>1da4	05 00					.word 5
>1da6	0f 33					.word xt_x2b
>1da8	73 19					.word xt_x28literalx29
>1daa	04 00					.word 4
>1dac	ae 16					.word xt_assertx3d
>1dae	73 19					.word xt_x28literalx29
>1db0	b6 1d					.word l_40
>1db2	93 37					.word xt_x28branchx29
>1db4	e1 1d					.word l_41
.1db6					l_40:
>1db6	31 32 33 34 68 20 35 36			.null "1234h 5678h 1111h 1111h d+ --> 2345h 6789h"
>1dbe	37 38 68 20 31 31 31 31 68 20 31 31 31 31 68 20
>1dce	64 2b 20 2d 2d 3e 20 32 33 34 35 68 20 36 37 38
>1dde	39 68 00
.1de1					l_41:
>1de1	8e 16					.word xt_testname
>1de3	73 19					.word xt_x28literalx29
>1de5	34 12					.word 4660
>1de7	73 19					.word xt_x28literalx29
>1de9	78 56					.word 22136
>1deb	73 19					.word xt_x28literalx29
>1ded	11 11					.word 4369
>1def	73 19					.word xt_x28literalx29
>1df1	11 11					.word 4369
>1df3	34 33					.word xt_dx2b
>1df5	73 19					.word xt_x28literalx29
>1df7	89 67					.word 26505
>1df9	ae 16					.word xt_assertx3d
>1dfb	73 19					.word xt_x28literalx29
>1dfd	45 23					.word 9029
>1dff	ae 16					.word xt_assertx3d
>1e01	73 19					.word xt_x28literalx29
>1e03	09 1e					.word l_42
>1e05	93 37					.word xt_x28branchx29
>1e07	34 1e					.word l_43
.1e09					l_42:
>1e09	30 30 30 30 68 20 31 31			.null "0000h 1111h 0000h eeefh d+ --> 0001h 0000h"
>1e11	31 31 68 20 30 30 30 30 68 20 65 65 65 66 68 20
>1e21	64 2b 20 2d 2d 3e 20 30 30 30 31 68 20 30 30 30
>1e31	30 68 00
.1e34					l_43:
>1e34	8e 16					.word xt_testname
>1e36	73 19					.word xt_x28literalx29
>1e38	00 00					.word 0
>1e3a	73 19					.word xt_x28literalx29
>1e3c	11 11					.word 4369
>1e3e	73 19					.word xt_x28literalx29
>1e40	00 00					.word 0
>1e42	73 19					.word xt_x28literalx29
>1e44	ef ee					.word 61167
>1e46	34 33					.word xt_dx2b
>1e48	73 19					.word xt_x28literalx29
>1e4a	00 00					.word 0
>1e4c	ae 16					.word xt_assertx3d
>1e4e	73 19					.word xt_x28literalx29
>1e50	01 00					.word 1
>1e52	ae 16					.word xt_assertx3d
>1e54	73 19					.word xt_x28literalx29
>1e56	5c 1e					.word l_44
>1e58	93 37					.word xt_x28branchx29
>1e5a	68 1e					.word l_45
.1e5c					l_44:
>1e5c	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1e64	3e 20 31 00
.1e68					l_45:
>1e68	8e 16					.word xt_testname
>1e6a	73 19					.word xt_x28literalx29
>1e6c	04 00					.word 4
>1e6e	73 19					.word xt_x28literalx29
>1e70	03 00					.word 3
>1e72	9a 33					.word xt_x2d
>1e74	fb 18					.word xt_1
>1e76	ae 16					.word xt_assertx3d
>1e78	73 19					.word xt_x28literalx29
>1e7a	80 1e					.word l_46
>1e7c	93 37					.word xt_x28branchx29
>1e7e	90 1e					.word l_47
.1e80					l_46:
>1e80	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1e88	3e 20 66 66 66 66 68 00
.1e90					l_47:
>1e90	8e 16					.word xt_testname
>1e92	73 19					.word xt_x28literalx29
>1e94	03 00					.word 3
>1e96	73 19					.word xt_x28literalx29
>1e98	04 00					.word 4
>1e9a	9a 33					.word xt_x2d
>1e9c	73 19					.word xt_x28literalx29
>1e9e	ff ff					.word 65535
>1ea0	ae 16					.word xt_assertx3d
>1ea2	73 19					.word xt_x28literalx29
>1ea4	aa 1e					.word l_48
>1ea6	93 37					.word xt_x28branchx29
>1ea8	b7 1e					.word l_49
.1eaa					l_48:
>1eaa	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1eb2	2d 3e 20 35 00
.1eb7					l_49:
>1eb7	8e 16					.word xt_testname
>1eb9	73 19					.word xt_x28literalx29
>1ebb	0a 00					.word 10
>1ebd	73 19					.word xt_x28literalx29
>1ebf	05 00					.word 5
>1ec1	9a 33					.word xt_x2d
>1ec3	73 19					.word xt_x28literalx29
>1ec5	05 00					.word 5
>1ec7	ae 16					.word xt_assertx3d
>1ec9	73 19					.word xt_x28literalx29
>1ecb	d1 1e					.word l_50
>1ecd	93 37					.word xt_x28branchx29
>1ecf	de 1e					.word l_51
.1ed1					l_50:
>1ed1	32 20 33 20 75 2a 20 2d			.null "2 3 u* --> 6"
>1ed9	2d 3e 20 36 00
.1ede					l_51:
>1ede	8e 16					.word xt_testname
>1ee0	19 19					.word xt_2
>1ee2	73 19					.word xt_x28literalx29
>1ee4	03 00					.word 3
>1ee6	bf 33					.word xt_ux2a
>1ee8	73 19					.word xt_x28literalx29
>1eea	06 00					.word 6
>1eec	ae 16					.word xt_assertx3d
>1eee	73 19					.word xt_x28literalx29
>1ef0	f6 1e					.word l_52
>1ef2	93 37					.word xt_x28branchx29
>1ef4	05 1f					.word l_53
.1ef6					l_52:
>1ef6	31 30 20 34 20 75 2a 20			.null "10 4 u* --> 40"
>1efe	2d 2d 3e 20 34 30 00
.1f05					l_53:
>1f05	8e 16					.word xt_testname
>1f07	73 19					.word xt_x28literalx29
>1f09	0a 00					.word 10
>1f0b	73 19					.word xt_x28literalx29
>1f0d	04 00					.word 4
>1f0f	bf 33					.word xt_ux2a
>1f11	73 19					.word xt_x28literalx29
>1f13	28 00					.word 40
>1f15	ae 16					.word xt_assertx3d
>1f17	73 19					.word xt_x28literalx29
>1f19	1f 1f					.word l_54
>1f1b	93 37					.word xt_x28branchx29
>1f1d	2b 1f					.word l_55
.1f1f					l_54:
>1f1f	32 20 33 20 2a 20 2d 2d			.null "2 3 * --> 6"
>1f27	3e 20 36 00
.1f2b					l_55:
>1f2b	8e 16					.word xt_testname
>1f2d	19 19					.word xt_2
>1f2f	73 19					.word xt_x28literalx29
>1f31	03 00					.word 3
>1f33	f7 33					.word xt_x2a
>1f35	73 19					.word xt_x28literalx29
>1f37	06 00					.word 6
>1f39	ae 16					.word xt_assertx3d
>1f3b	73 19					.word xt_x28literalx29
>1f3d	43 1f					.word l_56
>1f3f	93 37					.word xt_x28branchx29
>1f41	51 1f					.word l_57
.1f43					l_56:
>1f43	31 30 20 34 20 2a 20 2d			.null "10 4 * --> 40"
>1f4b	2d 3e 20 34 30 00
.1f51					l_57:
>1f51	8e 16					.word xt_testname
>1f53	73 19					.word xt_x28literalx29
>1f55	0a 00					.word 10
>1f57	73 19					.word xt_x28literalx29
>1f59	04 00					.word 4
>1f5b	f7 33					.word xt_x2a
>1f5d	73 19					.word xt_x28literalx29
>1f5f	28 00					.word 40
>1f61	ae 16					.word xt_assertx3d
>1f63	73 19					.word xt_x28literalx29
>1f65	6b 1f					.word l_58
>1f67	93 37					.word xt_x28branchx29
>1f69	7f 1f					.word l_59
.1f6b					l_58:
>1f6b	66 66 66 65 68 20 33 20			.null "fffeh 3 * --> fffah"
>1f73	2a 20 2d 2d 3e 20 66 66 66 61 68 00
.1f7f					l_59:
>1f7f	8e 16					.word xt_testname
>1f81	73 19					.word xt_x28literalx29
>1f83	fe ff					.word 65534
>1f85	73 19					.word xt_x28literalx29
>1f87	03 00					.word 3
>1f89	f7 33					.word xt_x2a
>1f8b	73 19					.word xt_x28literalx29
>1f8d	fa ff					.word 65530
>1f8f	ae 16					.word xt_assertx3d
>1f91	73 19					.word xt_x28literalx29
>1f93	99 1f					.word l_60
>1f95	93 37					.word xt_x28branchx29
>1f97	ae 1f					.word l_61
.1f99					l_60:
>1f99	30 20 31 20 33 20 75 6d			.null "0 1 3 um/mod --> 1 0"
>1fa1	2f 6d 6f 64 20 2d 2d 3e 20 31 20 30 00
.1fae					l_61:
>1fae	8e 16					.word xt_testname
>1fb0	df 18					.word xt_0
>1fb2	fb 18					.word xt_1
>1fb4	73 19					.word xt_x28literalx29
>1fb6	03 00					.word 3
>1fb8	f4 34					.word xt_umx2fmod
>1fba	df 18					.word xt_0
>1fbc	ae 16					.word xt_assertx3d
>1fbe	fb 18					.word xt_1
>1fc0	ae 16					.word xt_assertx3d
>1fc2	73 19					.word xt_x28literalx29
>1fc4	ca 1f					.word l_62
>1fc6	93 37					.word xt_x28branchx29
>1fc8	df 1f					.word l_63
.1fca					l_62:
>1fca	30 20 32 20 33 20 75 6d			.null "0 2 3 um/mod --> 2 0"
>1fd2	2f 6d 6f 64 20 2d 2d 3e 20 32 20 30 00
.1fdf					l_63:
>1fdf	8e 16					.word xt_testname
>1fe1	df 18					.word xt_0
>1fe3	19 19					.word xt_2
>1fe5	73 19					.word xt_x28literalx29
>1fe7	03 00					.word 3
>1fe9	f4 34					.word xt_umx2fmod
>1feb	df 18					.word xt_0
>1fed	ae 16					.word xt_assertx3d
>1fef	19 19					.word xt_2
>1ff1	ae 16					.word xt_assertx3d
>1ff3	73 19					.word xt_x28literalx29
>1ff5	fb 1f					.word l_64
>1ff7	93 37					.word xt_x28branchx29
>1ff9	10 20					.word l_65
.1ffb					l_64:
>1ffb	30 20 33 20 33 20 75 6d			.null "0 3 3 um/mod --> 0 1"
>2003	2f 6d 6f 64 20 2d 2d 3e 20 30 20 31 00
.2010					l_65:
>2010	8e 16					.word xt_testname
>2012	df 18					.word xt_0
>2014	73 19					.word xt_x28literalx29
>2016	03 00					.word 3
>2018	73 19					.word xt_x28literalx29
>201a	03 00					.word 3
>201c	f4 34					.word xt_umx2fmod
>201e	fb 18					.word xt_1
>2020	ae 16					.word xt_assertx3d
>2022	df 18					.word xt_0
>2024	ae 16					.word xt_assertx3d
>2026	73 19					.word xt_x28literalx29
>2028	2e 20					.word l_66
>202a	93 37					.word xt_x28branchx29
>202c	43 20					.word l_67
.202e					l_66:
>202e	30 20 34 20 33 20 75 6d			.null "0 4 3 um/mod --> 1 1"
>2036	2f 6d 6f 64 20 2d 2d 3e 20 31 20 31 00
.2043					l_67:
>2043	8e 16					.word xt_testname
>2045	df 18					.word xt_0
>2047	73 19					.word xt_x28literalx29
>2049	04 00					.word 4
>204b	73 19					.word xt_x28literalx29
>204d	03 00					.word 3
>204f	f4 34					.word xt_umx2fmod
>2051	fb 18					.word xt_1
>2053	ae 16					.word xt_assertx3d
>2055	fb 18					.word xt_1
>2057	ae 16					.word xt_assertx3d
>2059	73 19					.word xt_x28literalx29
>205b	61 20					.word l_68
>205d	93 37					.word xt_x28branchx29
>205f	76 20					.word l_69
.2061					l_68:
>2061	30 20 36 20 33 20 75 6d			.null "0 6 3 um/mod --> 0 2"
>2069	2f 6d 6f 64 20 2d 2d 3e 20 30 20 32 00
.2076					l_69:
>2076	8e 16					.word xt_testname
>2078	df 18					.word xt_0
>207a	73 19					.word xt_x28literalx29
>207c	06 00					.word 6
>207e	73 19					.word xt_x28literalx29
>2080	03 00					.word 3
>2082	f4 34					.word xt_umx2fmod
>2084	19 19					.word xt_2
>2086	ae 16					.word xt_assertx3d
>2088	df 18					.word xt_0
>208a	ae 16					.word xt_assertx3d
>208c	73 19					.word xt_x28literalx29
>208e	94 20					.word l_70
>2090	93 37					.word xt_x28branchx29
>2092	ae 20					.word l_71
.2094					l_70:
>2094	31 32 33 34 68 20 73 3e			.null "1234h s>d --> 0000h 1234h"
>209c	64 20 2d 2d 3e 20 30 30 30 30 68 20 31 32 33 34
>20ac	68 00
.20ae					l_71:
>20ae	8e 16					.word xt_testname
>20b0	73 19					.word xt_x28literalx29
>20b2	34 12					.word 4660
>20b4	4f 35					.word xt_sx3ed
>20b6	73 19					.word xt_x28literalx29
>20b8	34 12					.word 4660
>20ba	ae 16					.word xt_assertx3d
>20bc	73 19					.word xt_x28literalx29
>20be	00 00					.word 0
>20c0	ae 16					.word xt_assertx3d
>20c2	73 19					.word xt_x28literalx29
>20c4	ca 20					.word l_72
>20c6	93 37					.word xt_x28branchx29
>20c8	e4 20					.word l_73
.20ca					l_72:
>20ca	66 66 66 66 68 20 73 3e			.null "ffffh s>d --> ffffh ffffh"
>20d2	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 66
>20e2	68 00
.20e4					l_73:
>20e4	8e 16					.word xt_testname
>20e6	73 19					.word xt_x28literalx29
>20e8	ff ff					.word 65535
>20ea	4f 35					.word xt_sx3ed
>20ec	73 19					.word xt_x28literalx29
>20ee	ff ff					.word 65535
>20f0	ae 16					.word xt_assertx3d
>20f2	73 19					.word xt_x28literalx29
>20f4	ff ff					.word 65535
>20f6	ae 16					.word xt_assertx3d
>20f8	73 19					.word xt_x28literalx29
>20fa	00 21					.word l_74
>20fc	93 37					.word xt_x28branchx29
>20fe	1a 21					.word l_75
.2100					l_74:
>2100	66 66 66 65 68 20 73 3e			.null "fffeh s>d --> ffffh fffeh"
>2108	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 65
>2118	68 00
.211a					l_75:
>211a	8e 16					.word xt_testname
>211c	73 19					.word xt_x28literalx29
>211e	fe ff					.word 65534
>2120	4f 35					.word xt_sx3ed
>2122	73 19					.word xt_x28literalx29
>2124	fe ff					.word 65534
>2126	ae 16					.word xt_assertx3d
>2128	73 19					.word xt_x28literalx29
>212a	ff ff					.word 65535
>212c	ae 16					.word xt_assertx3d
>212e	73 19					.word xt_x28literalx29
>2130	36 21					.word l_76
>2132	93 37					.word xt_x28branchx29
>2134	41 21					.word l_77
.2136					l_76:
>2136	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>213e	20 32 00
.2141					l_77:
>2141	8e 16					.word xt_testname
>2143	fb 18					.word xt_1
>2145	7e 35					.word xt_1x2b
>2147	19 19					.word xt_2
>2149	ae 16					.word xt_assertx3d
>214b	73 19					.word xt_x28literalx29
>214d	53 21					.word l_78
>214f	93 37					.word xt_x28branchx29
>2151	5e 21					.word l_79
.2153					l_78:
>2153	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>215b	20 31 00
.215e					l_79:
>215e	8e 16					.word xt_testname
>2160	df 18					.word xt_0
>2162	7e 35					.word xt_1x2b
>2164	fb 18					.word xt_1
>2166	ae 16					.word xt_assertx3d
>2168	73 19					.word xt_x28literalx29
>216a	70 21					.word l_80
>216c	93 37					.word xt_x28branchx29
>216e	7d 21					.word l_81
.2170					l_80:
>2170	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>2178	3e 20 32 31 00
.217d					l_81:
>217d	8e 16					.word xt_testname
>217f	73 19					.word xt_x28literalx29
>2181	14 00					.word 20
>2183	7e 35					.word xt_1x2b
>2185	73 19					.word xt_x28literalx29
>2187	15 00					.word 21
>2189	ae 16					.word xt_assertx3d
>218b	73 19					.word xt_x28literalx29
>218d	93 21					.word l_82
>218f	93 37					.word xt_x28branchx29
>2191	a2 21					.word l_83
.2193					l_82:
>2193	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>219b	20 2d 2d 3e 20 30 00
.21a2					l_83:
>21a2	8e 16					.word xt_testname
>21a4	73 19					.word xt_x28literalx29
>21a6	ff ff					.word 65535
>21a8	7e 35					.word xt_1x2b
>21aa	df 18					.word xt_0
>21ac	ae 16					.word xt_assertx3d
>21ae	73 19					.word xt_x28literalx29
>21b0	b6 21					.word l_84
>21b2	93 37					.word xt_x28branchx29
>21b4	c1 21					.word l_85
.21b6					l_84:
>21b6	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>21be	20 33 00
.21c1					l_85:
>21c1	8e 16					.word xt_testname
>21c3	fb 18					.word xt_1
>21c5	9a 35					.word xt_2x2b
>21c7	73 19					.word xt_x28literalx29
>21c9	03 00					.word 3
>21cb	ae 16					.word xt_assertx3d
>21cd	73 19					.word xt_x28literalx29
>21cf	d5 21					.word l_86
>21d1	93 37					.word xt_x28branchx29
>21d3	e0 21					.word l_87
.21d5					l_86:
>21d5	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>21dd	20 32 00
.21e0					l_87:
>21e0	8e 16					.word xt_testname
>21e2	df 18					.word xt_0
>21e4	9a 35					.word xt_2x2b
>21e6	19 19					.word xt_2
>21e8	ae 16					.word xt_assertx3d
>21ea	73 19					.word xt_x28literalx29
>21ec	f2 21					.word l_88
>21ee	93 37					.word xt_x28branchx29
>21f0	ff 21					.word l_89
.21f2					l_88:
>21f2	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>21fa	3e 20 32 32 00
.21ff					l_89:
>21ff	8e 16					.word xt_testname
>2201	73 19					.word xt_x28literalx29
>2203	14 00					.word 20
>2205	9a 35					.word xt_2x2b
>2207	73 19					.word xt_x28literalx29
>2209	16 00					.word 22
>220b	ae 16					.word xt_assertx3d
>220d	73 19					.word xt_x28literalx29
>220f	15 22					.word l_90
>2211	93 37					.word xt_x28branchx29
>2213	24 22					.word l_91
.2215					l_90:
>2215	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>221d	20 2d 2d 3e 20 30 00
.2224					l_91:
>2224	8e 16					.word xt_testname
>2226	73 19					.word xt_x28literalx29
>2228	fe ff					.word 65534
>222a	9a 35					.word xt_2x2b
>222c	df 18					.word xt_0
>222e	ae 16					.word xt_assertx3d
>2230	73 19					.word xt_x28literalx29
>2232	38 22					.word l_92
>2234	93 37					.word xt_x28branchx29
>2236	43 22					.word l_93
.2238					l_92:
>2238	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>2240	20 30 00
.2243					l_93:
>2243	8e 16					.word xt_testname
>2245	fb 18					.word xt_1
>2247	bd 35					.word xt_1x2d
>2249	df 18					.word xt_0
>224b	ae 16					.word xt_assertx3d
>224d	73 19					.word xt_x28literalx29
>224f	55 22					.word l_94
>2251	93 37					.word xt_x28branchx29
>2253	64 22					.word l_95
.2255					l_94:
>2255	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>225d	20 66 66 66 66 68 00
.2264					l_95:
>2264	8e 16					.word xt_testname
>2266	df 18					.word xt_0
>2268	bd 35					.word xt_1x2d
>226a	73 19					.word xt_x28literalx29
>226c	ff ff					.word 65535
>226e	ae 16					.word xt_assertx3d
>2270	73 19					.word xt_x28literalx29
>2272	78 22					.word l_96
>2274	93 37					.word xt_x28branchx29
>2276	85 22					.word l_97
.2278					l_96:
>2278	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>2280	3e 20 31 39 00
.2285					l_97:
>2285	8e 16					.word xt_testname
>2287	73 19					.word xt_x28literalx29
>2289	14 00					.word 20
>228b	bd 35					.word xt_1x2d
>228d	73 19					.word xt_x28literalx29
>228f	13 00					.word 19
>2291	ae 16					.word xt_assertx3d
>2293	73 19					.word xt_x28literalx29
>2295	9b 22					.word l_98
>2297	93 37					.word xt_x28branchx29
>2299	ae 22					.word l_99
.229b					l_98:
>229b	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>22a3	20 2d 2d 3e 20 66 66 66 65 68 00
.22ae					l_99:
>22ae	8e 16					.word xt_testname
>22b0	73 19					.word xt_x28literalx29
>22b2	ff ff					.word 65535
>22b4	bd 35					.word xt_1x2d
>22b6	73 19					.word xt_x28literalx29
>22b8	fe ff					.word 65534
>22ba	ae 16					.word xt_assertx3d
>22bc	73 19					.word xt_x28literalx29
>22be	c4 22					.word l_100
>22c0	93 37					.word xt_x28branchx29
>22c2	d3 22					.word l_101
.22c4					l_100:
>22c4	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>22cc	20 66 66 66 66 68 00
.22d3					l_101:
>22d3	8e 16					.word xt_testname
>22d5	fb 18					.word xt_1
>22d7	db 35					.word xt_2x2d
>22d9	73 19					.word xt_x28literalx29
>22db	ff ff					.word 65535
>22dd	ae 16					.word xt_assertx3d
>22df	73 19					.word xt_x28literalx29
>22e1	e7 22					.word l_102
>22e3	93 37					.word xt_x28branchx29
>22e5	f6 22					.word l_103
.22e7					l_102:
>22e7	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>22ef	20 66 66 66 65 68 00
.22f6					l_103:
>22f6	8e 16					.word xt_testname
>22f8	df 18					.word xt_0
>22fa	db 35					.word xt_2x2d
>22fc	73 19					.word xt_x28literalx29
>22fe	fe ff					.word 65534
>2300	ae 16					.word xt_assertx3d
>2302	73 19					.word xt_x28literalx29
>2304	0a 23					.word l_104
>2306	93 37					.word xt_x28branchx29
>2308	17 23					.word l_105
.230a					l_104:
>230a	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>2312	3e 20 31 38 00
.2317					l_105:
>2317	8e 16					.word xt_testname
>2319	73 19					.word xt_x28literalx29
>231b	14 00					.word 20
>231d	db 35					.word xt_2x2d
>231f	73 19					.word xt_x28literalx29
>2321	12 00					.word 18
>2323	ae 16					.word xt_assertx3d
>2325	73 19					.word xt_x28literalx29
>2327	2d 23					.word l_106
>2329	93 37					.word xt_x28branchx29
>232b	40 23					.word l_107
.232d					l_106:
>232d	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>2335	20 2d 2d 3e 20 66 66 66 64 68 00
.2340					l_107:
>2340	8e 16					.word xt_testname
>2342	73 19					.word xt_x28literalx29
>2344	ff ff					.word 65535
>2346	db 35					.word xt_2x2d
>2348	73 19					.word xt_x28literalx29
>234a	fd ff					.word 65533
>234c	ae 16					.word xt_assertx3d
>234e	73 19					.word xt_x28literalx29
>2350	56 23					.word l_108
>2352	93 37					.word xt_x28branchx29
>2354	70 23					.word l_109
.2356					l_108:
>2356	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>235e	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>236e	68 00
.2370					l_109:
>2370	8e 16					.word xt_testname
>2372	73 19					.word xt_x28literalx29
>2374	00 00					.word 0
>2376	73 19					.word xt_x28literalx29
>2378	00 00					.word 0
>237a	fe 35					.word xt_and
>237c	73 19					.word xt_x28literalx29
>237e	00 00					.word 0
>2380	ae 16					.word xt_assertx3d
>2382	73 19					.word xt_x28literalx29
>2384	8a 23					.word l_110
>2386	93 37					.word xt_x28branchx29
>2388	a4 23					.word l_111
.238a					l_110:
>238a	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>2392	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>23a2	68 00
.23a4					l_111:
>23a4	8e 16					.word xt_testname
>23a6	73 19					.word xt_x28literalx29
>23a8	00 00					.word 0
>23aa	73 19					.word xt_x28literalx29
>23ac	ff ff					.word 65535
>23ae	fe 35					.word xt_and
>23b0	73 19					.word xt_x28literalx29
>23b2	00 00					.word 0
>23b4	ae 16					.word xt_assertx3d
>23b6	73 19					.word xt_x28literalx29
>23b8	be 23					.word l_112
>23ba	93 37					.word xt_x28branchx29
>23bc	d8 23					.word l_113
.23be					l_112:
>23be	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>23c6	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>23d6	68 00
.23d8					l_113:
>23d8	8e 16					.word xt_testname
>23da	73 19					.word xt_x28literalx29
>23dc	ff ff					.word 65535
>23de	73 19					.word xt_x28literalx29
>23e0	00 00					.word 0
>23e2	fe 35					.word xt_and
>23e4	73 19					.word xt_x28literalx29
>23e6	00 00					.word 0
>23e8	ae 16					.word xt_assertx3d
>23ea	73 19					.word xt_x28literalx29
>23ec	f2 23					.word l_114
>23ee	93 37					.word xt_x28branchx29
>23f0	0c 24					.word l_115
.23f2					l_114:
>23f2	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>23fa	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>240a	68 00
.240c					l_115:
>240c	8e 16					.word xt_testname
>240e	73 19					.word xt_x28literalx29
>2410	ff ff					.word 65535
>2412	73 19					.word xt_x28literalx29
>2414	ff ff					.word 65535
>2416	fe 35					.word xt_and
>2418	73 19					.word xt_x28literalx29
>241a	ff ff					.word 65535
>241c	ae 16					.word xt_assertx3d
>241e	73 19					.word xt_x28literalx29
>2420	26 24					.word l_116
>2422	93 37					.word xt_x28branchx29
>2424	3f 24					.word l_117
.2426					l_116:
>2426	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>242e	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>243e	00
.243f					l_117:
>243f	8e 16					.word xt_testname
>2441	73 19					.word xt_x28literalx29
>2443	00 00					.word 0
>2445	73 19					.word xt_x28literalx29
>2447	00 00					.word 0
>2449	22 36					.word xt_or
>244b	73 19					.word xt_x28literalx29
>244d	00 00					.word 0
>244f	ae 16					.word xt_assertx3d
>2451	73 19					.word xt_x28literalx29
>2453	59 24					.word l_118
>2455	93 37					.word xt_x28branchx29
>2457	72 24					.word l_119
.2459					l_118:
>2459	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>2461	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2471	00
.2472					l_119:
>2472	8e 16					.word xt_testname
>2474	73 19					.word xt_x28literalx29
>2476	00 00					.word 0
>2478	73 19					.word xt_x28literalx29
>247a	ff ff					.word 65535
>247c	22 36					.word xt_or
>247e	73 19					.word xt_x28literalx29
>2480	ff ff					.word 65535
>2482	ae 16					.word xt_assertx3d
>2484	73 19					.word xt_x28literalx29
>2486	8c 24					.word l_120
>2488	93 37					.word xt_x28branchx29
>248a	a5 24					.word l_121
.248c					l_120:
>248c	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>2494	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>24a4	00
.24a5					l_121:
>24a5	8e 16					.word xt_testname
>24a7	73 19					.word xt_x28literalx29
>24a9	ff ff					.word 65535
>24ab	73 19					.word xt_x28literalx29
>24ad	00 00					.word 0
>24af	22 36					.word xt_or
>24b1	73 19					.word xt_x28literalx29
>24b3	ff ff					.word 65535
>24b5	ae 16					.word xt_assertx3d
>24b7	73 19					.word xt_x28literalx29
>24b9	bf 24					.word l_122
>24bb	93 37					.word xt_x28branchx29
>24bd	d8 24					.word l_123
.24bf					l_122:
>24bf	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>24c7	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>24d7	00
.24d8					l_123:
>24d8	8e 16					.word xt_testname
>24da	73 19					.word xt_x28literalx29
>24dc	ff ff					.word 65535
>24de	73 19					.word xt_x28literalx29
>24e0	ff ff					.word 65535
>24e2	22 36					.word xt_or
>24e4	73 19					.word xt_x28literalx29
>24e6	ff ff					.word 65535
>24e8	ae 16					.word xt_assertx3d
>24ea	73 19					.word xt_x28literalx29
>24ec	f2 24					.word l_124
>24ee	93 37					.word xt_x28branchx29
>24f0	0c 25					.word l_125
.24f2					l_124:
>24f2	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>24fa	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>250a	68 00
.250c					l_125:
>250c	8e 16					.word xt_testname
>250e	73 19					.word xt_x28literalx29
>2510	00 00					.word 0
>2512	73 19					.word xt_x28literalx29
>2514	00 00					.word 0
>2516	46 36					.word xt_xor
>2518	73 19					.word xt_x28literalx29
>251a	00 00					.word 0
>251c	ae 16					.word xt_assertx3d
>251e	73 19					.word xt_x28literalx29
>2520	26 25					.word l_126
>2522	93 37					.word xt_x28branchx29
>2524	40 25					.word l_127
.2526					l_126:
>2526	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>252e	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>253e	68 00
.2540					l_127:
>2540	8e 16					.word xt_testname
>2542	73 19					.word xt_x28literalx29
>2544	00 00					.word 0
>2546	73 19					.word xt_x28literalx29
>2548	ff ff					.word 65535
>254a	46 36					.word xt_xor
>254c	73 19					.word xt_x28literalx29
>254e	ff ff					.word 65535
>2550	ae 16					.word xt_assertx3d
>2552	73 19					.word xt_x28literalx29
>2554	5a 25					.word l_128
>2556	93 37					.word xt_x28branchx29
>2558	74 25					.word l_129
.255a					l_128:
>255a	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>2562	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>2572	68 00
.2574					l_129:
>2574	8e 16					.word xt_testname
>2576	73 19					.word xt_x28literalx29
>2578	ff ff					.word 65535
>257a	73 19					.word xt_x28literalx29
>257c	00 00					.word 0
>257e	46 36					.word xt_xor
>2580	73 19					.word xt_x28literalx29
>2582	ff ff					.word 65535
>2584	ae 16					.word xt_assertx3d
>2586	73 19					.word xt_x28literalx29
>2588	8e 25					.word l_130
>258a	93 37					.word xt_x28branchx29
>258c	a8 25					.word l_131
.258e					l_130:
>258e	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>2596	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>25a6	68 00
.25a8					l_131:
>25a8	8e 16					.word xt_testname
>25aa	73 19					.word xt_x28literalx29
>25ac	ff ff					.word 65535
>25ae	73 19					.word xt_x28literalx29
>25b0	ff ff					.word 65535
>25b2	46 36					.word xt_xor
>25b4	73 19					.word xt_x28literalx29
>25b6	00 00					.word 0
>25b8	ae 16					.word xt_assertx3d
>25ba	73 19					.word xt_x28literalx29
>25bc	c2 25					.word l_132
>25be	93 37					.word xt_x28branchx29
>25c0	d6 25					.word l_133
.25c2					l_132:
>25c2	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>25ca	74 20 2d 2d 3e 20 66 66 66 66 68 00
.25d6					l_133:
>25d6	8e 16					.word xt_testname
>25d8	73 19					.word xt_x28literalx29
>25da	00 00					.word 0
>25dc	6a 36					.word xt_not
>25de	73 19					.word xt_x28literalx29
>25e0	ff ff					.word 65535
>25e2	ae 16					.word xt_assertx3d
>25e4	73 19					.word xt_x28literalx29
>25e6	ec 25					.word l_134
>25e8	93 37					.word xt_x28branchx29
>25ea	00 26					.word l_135
.25ec					l_134:
>25ec	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>25f4	74 20 2d 2d 3e 20 30 30 30 30 68 00
.2600					l_135:
>2600	8e 16					.word xt_testname
>2602	73 19					.word xt_x28literalx29
>2604	ff ff					.word 65535
>2606	6a 36					.word xt_not
>2608	73 19					.word xt_x28literalx29
>260a	00 00					.word 0
>260c	ae 16					.word xt_assertx3d
>260e	73 19					.word xt_x28literalx29
>2610	16 26					.word l_136
>2612	93 37					.word xt_x28branchx29
>2614	25 26					.word l_137
.2616					l_136:
>2616	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>261e	20 30 30 30 30 68 00
.2625					l_137:
>2625	8e 16					.word xt_testname
>2627	df 18					.word xt_0
>2629	8c 36					.word xt_0x3c
>262b	73 19					.word xt_x28literalx29
>262d	00 00					.word 0
>262f	ae 16					.word xt_assertx3d
>2631	73 19					.word xt_x28literalx29
>2633	39 26					.word l_138
>2635	93 37					.word xt_x28branchx29
>2637	48 26					.word l_139
.2639					l_138:
>2639	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>2641	20 30 30 30 30 68 00
.2648					l_139:
>2648	8e 16					.word xt_testname
>264a	73 19					.word xt_x28literalx29
>264c	03 00					.word 3
>264e	8c 36					.word xt_0x3c
>2650	73 19					.word xt_x28literalx29
>2652	00 00					.word 0
>2654	ae 16					.word xt_assertx3d
>2656	73 19					.word xt_x28literalx29
>2658	5e 26					.word l_140
>265a	93 37					.word xt_x28branchx29
>265c	71 26					.word l_141
.265e					l_140:
>265e	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>2666	20 2d 2d 3e 20 66 66 66 66 68 00
.2671					l_141:
>2671	8e 16					.word xt_testname
>2673	73 19					.word xt_x28literalx29
>2675	ff ff					.word 65535
>2677	8c 36					.word xt_0x3c
>2679	73 19					.word xt_x28literalx29
>267b	ff ff					.word 65535
>267d	ae 16					.word xt_assertx3d
>267f	73 19					.word xt_x28literalx29
>2681	87 26					.word l_142
>2683	93 37					.word xt_x28branchx29
>2685	96 26					.word l_143
.2687					l_142:
>2687	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>268f	20 66 66 66 66 68 00
.2696					l_143:
>2696	8e 16					.word xt_testname
>2698	df 18					.word xt_0
>269a	b3 36					.word xt_0x3d
>269c	73 19					.word xt_x28literalx29
>269e	ff ff					.word 65535
>26a0	ae 16					.word xt_assertx3d
>26a2	73 19					.word xt_x28literalx29
>26a4	aa 26					.word l_144
>26a6	93 37					.word xt_x28branchx29
>26a8	b9 26					.word l_145
.26aa					l_144:
>26aa	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>26b2	20 30 30 30 30 68 00
.26b9					l_145:
>26b9	8e 16					.word xt_testname
>26bb	73 19					.word xt_x28literalx29
>26bd	03 00					.word 3
>26bf	b3 36					.word xt_0x3d
>26c1	73 19					.word xt_x28literalx29
>26c3	00 00					.word 0
>26c5	ae 16					.word xt_assertx3d
>26c7	73 19					.word xt_x28literalx29
>26c9	cf 26					.word l_146
>26cb	93 37					.word xt_x28branchx29
>26cd	e2 26					.word l_147
.26cf					l_146:
>26cf	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>26d7	20 2d 2d 3e 20 30 30 30 30 68 00
.26e2					l_147:
>26e2	8e 16					.word xt_testname
>26e4	73 19					.word xt_x28literalx29
>26e6	ff ff					.word 65535
>26e8	b3 36					.word xt_0x3d
>26ea	73 19					.word xt_x28literalx29
>26ec	00 00					.word 0
>26ee	ae 16					.word xt_assertx3d
>26f0	73 19					.word xt_x28literalx29
>26f2	f8 26					.word l_148
>26f4	93 37					.word xt_x28branchx29
>26f6	07 27					.word l_149
.26f8					l_148:
>26f8	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>2700	20 30 30 30 30 68 00
.2707					l_149:
>2707	8e 16					.word xt_testname
>2709	df 18					.word xt_0
>270b	de 36					.word xt_0x3e
>270d	73 19					.word xt_x28literalx29
>270f	00 00					.word 0
>2711	ae 16					.word xt_assertx3d
>2713	73 19					.word xt_x28literalx29
>2715	1b 27					.word l_150
>2717	93 37					.word xt_x28branchx29
>2719	2a 27					.word l_151
.271b					l_150:
>271b	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>2723	20 66 66 66 66 68 00
.272a					l_151:
>272a	8e 16					.word xt_testname
>272c	73 19					.word xt_x28literalx29
>272e	03 00					.word 3
>2730	de 36					.word xt_0x3e
>2732	73 19					.word xt_x28literalx29
>2734	ff ff					.word 65535
>2736	ae 16					.word xt_assertx3d
>2738	73 19					.word xt_x28literalx29
>273a	40 27					.word l_152
>273c	93 37					.word xt_x28branchx29
>273e	53 27					.word l_153
.2740					l_152:
>2740	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>2748	20 2d 2d 3e 20 30 30 30 30 68 00
.2753					l_153:
>2753	8e 16					.word xt_testname
>2755	73 19					.word xt_x28literalx29
>2757	ff ff					.word 65535
>2759	de 36					.word xt_0x3e
>275b	73 19					.word xt_x28literalx29
>275d	00 00					.word 0
>275f	ae 16					.word xt_assertx3d
>2761	73 19					.word xt_x28literalx29
>2763	69 27					.word l_154
>2765	93 37					.word xt_x28branchx29
>2767	80 27					.word l_155
.2769					l_154:
>2769	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>2771	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2780					l_155:
>2780	8e 16					.word xt_testname
>2782	53 37					.word xt_cells
>2784	19 19					.word xt_2
>2786	9a 33					.word xt_x2d
>2788	b3 36					.word xt_0x3d
>278a	73 19					.word xt_x28literalx29
>278c	ff ff					.word 65535
>278e	ae 16					.word xt_assertx3d
>2790	73 19					.word xt_x28literalx29
>2792	98 27					.word l_156
>2794	93 37					.word xt_x28branchx29
>2796	aa 27					.word l_157
.2798					l_156:
>2798	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>27a0	75 74 65 20 2d 2d 3e 20 31 00
.27aa					l_157:
>27aa	8e 16					.word xt_testname
>27ac	73 19					.word xt_x28literalx29
>27ae	fb 18					.word xt_1
>27b0	b3 39					.word xt_execute
>27b2	fb 18					.word xt_1
>27b4	ae 16					.word xt_assertx3d
>27b6	73 19					.word xt_x28literalx29
>27b8	be 27					.word l_158
>27ba	93 37					.word xt_x28branchx29
>27bc	d4 27					.word l_159
.27be					l_158:
>27be	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>27c6	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.27d4					l_159:
>27d4	8e 16					.word xt_testname
>27d6	fb 18					.word xt_1
>27d8	19 19					.word xt_2
>27da	73 19					.word xt_x28literalx29
>27dc	0f 33					.word xt_x2b
>27de	b3 39					.word xt_execute
>27e0	73 19					.word xt_x28literalx29
>27e2	03 00					.word 3
>27e4	ae 16					.word xt_assertx3d
>27e6	73 19					.word xt_x28literalx29
>27e8	ee 27					.word l_160
>27ea	93 37					.word xt_x28branchx29
>27ec	07 28					.word l_161
.27ee					l_160:
>27ee	33 30 68 20 31 30 20 64			.null "30h 10 digit --> 0 ffffh"
>27f6	69 67 69 74 20 2d 2d 3e 20 30 20 66 66 66 66 68
>2806	00
.2807					l_161:
>2807	8e 16					.word xt_testname
>2809	73 19					.word xt_x28literalx29
>280b	30 00					.word 48
>280d	73 19					.word xt_x28literalx29
>280f	0a 00					.word 10
>2811	9c 3a					.word xt_digit
>2813	73 19					.word xt_x28literalx29
>2815	ff ff					.word 65535
>2817	ae 16					.word xt_assertx3d
>2819	df 18					.word xt_0
>281b	ae 16					.word xt_assertx3d
>281d	73 19					.word xt_x28literalx29
>281f	25 28					.word l_162
>2821	93 37					.word xt_x28branchx29
>2823	3e 28					.word l_163
.2825					l_162:
>2825	33 31 68 20 31 30 20 64			.null "31h 10 digit --> 1 ffffh"
>282d	69 67 69 74 20 2d 2d 3e 20 31 20 66 66 66 66 68
>283d	00
.283e					l_163:
>283e	8e 16					.word xt_testname
>2840	73 19					.word xt_x28literalx29
>2842	31 00					.word 49
>2844	73 19					.word xt_x28literalx29
>2846	0a 00					.word 10
>2848	9c 3a					.word xt_digit
>284a	73 19					.word xt_x28literalx29
>284c	ff ff					.word 65535
>284e	ae 16					.word xt_assertx3d
>2850	fb 18					.word xt_1
>2852	ae 16					.word xt_assertx3d
>2854	73 19					.word xt_x28literalx29
>2856	5c 28					.word l_164
>2858	93 37					.word xt_x28branchx29
>285a	75 28					.word l_165
.285c					l_164:
>285c	33 39 68 20 31 30 20 64			.null "39h 10 digit --> 9 ffffh"
>2864	69 67 69 74 20 2d 2d 3e 20 39 20 66 66 66 66 68
>2874	00
.2875					l_165:
>2875	8e 16					.word xt_testname
>2877	73 19					.word xt_x28literalx29
>2879	39 00					.word 57
>287b	73 19					.word xt_x28literalx29
>287d	0a 00					.word 10
>287f	9c 3a					.word xt_digit
>2881	73 19					.word xt_x28literalx29
>2883	ff ff					.word 65535
>2885	ae 16					.word xt_assertx3d
>2887	73 19					.word xt_x28literalx29
>2889	09 00					.word 9
>288b	ae 16					.word xt_assertx3d
>288d	73 19					.word xt_x28literalx29
>288f	95 28					.word l_166
>2891	93 37					.word xt_x28branchx29
>2893	a8 28					.word l_167
.2895					l_166:
>2895	34 31 68 20 31 30 20 64			.null "41h 10 digit --> 0"
>289d	69 67 69 74 20 2d 2d 3e 20 30 00
.28a8					l_167:
>28a8	8e 16					.word xt_testname
>28aa	73 19					.word xt_x28literalx29
>28ac	41 00					.word 65
>28ae	73 19					.word xt_x28literalx29
>28b0	0a 00					.word 10
>28b2	9c 3a					.word xt_digit
>28b4	df 18					.word xt_0
>28b6	ae 16					.word xt_assertx3d
>28b8	73 19					.word xt_x28literalx29
>28ba	c0 28					.word l_168
>28bc	93 37					.word xt_x28branchx29
>28be	d3 28					.word l_169
.28c0					l_168:
>28c0	36 31 68 20 31 30 20 64			.null "61h 10 digit --> 0"
>28c8	69 67 69 74 20 2d 2d 3e 20 30 00
.28d3					l_169:
>28d3	8e 16					.word xt_testname
>28d5	73 19					.word xt_x28literalx29
>28d7	61 00					.word 97
>28d9	73 19					.word xt_x28literalx29
>28db	0a 00					.word 10
>28dd	9c 3a					.word xt_digit
>28df	df 18					.word xt_0
>28e1	ae 16					.word xt_assertx3d
>28e3	73 19					.word xt_x28literalx29
>28e5	eb 28					.word l_170
>28e7	93 37					.word xt_x28branchx29
>28e9	05 29					.word l_171
.28eb					l_170:
>28eb	34 31 68 20 31 36 20 64			.null "41h 16 digit --> 10 ffffh"
>28f3	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>2903	68 00
.2905					l_171:
>2905	8e 16					.word xt_testname
>2907	73 19					.word xt_x28literalx29
>2909	41 00					.word 65
>290b	73 19					.word xt_x28literalx29
>290d	10 00					.word 16
>290f	9c 3a					.word xt_digit
>2911	73 19					.word xt_x28literalx29
>2913	ff ff					.word 65535
>2915	ae 16					.word xt_assertx3d
>2917	73 19					.word xt_x28literalx29
>2919	0a 00					.word 10
>291b	ae 16					.word xt_assertx3d
>291d	73 19					.word xt_x28literalx29
>291f	25 29					.word l_172
>2921	93 37					.word xt_x28branchx29
>2923	3f 29					.word l_173
.2925					l_172:
>2925	36 31 68 20 31 36 20 64			.null "61h 16 digit --> 10 ffffh"
>292d	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>293d	68 00
.293f					l_173:
>293f	8e 16					.word xt_testname
>2941	73 19					.word xt_x28literalx29
>2943	61 00					.word 97
>2945	73 19					.word xt_x28literalx29
>2947	10 00					.word 16
>2949	9c 3a					.word xt_digit
>294b	73 19					.word xt_x28literalx29
>294d	ff ff					.word 65535
>294f	ae 16					.word xt_assertx3d
>2951	73 19					.word xt_x28literalx29
>2953	0a 00					.word 10
>2955	ae 16					.word xt_assertx3d
>2957	73 19					.word xt_x28literalx29
>2959	5f 29					.word l_174
>295b	93 37					.word xt_x28branchx29
>295d	79 29					.word l_175
.295f					l_174:
>295f	34 36 68 20 31 36 20 64			.null "46h 16 digit --> fh ffffh"
>2967	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>2977	68 00
.2979					l_175:
>2979	8e 16					.word xt_testname
>297b	73 19					.word xt_x28literalx29
>297d	46 00					.word 70
>297f	73 19					.word xt_x28literalx29
>2981	10 00					.word 16
>2983	9c 3a					.word xt_digit
>2985	73 19					.word xt_x28literalx29
>2987	ff ff					.word 65535
>2989	ae 16					.word xt_assertx3d
>298b	73 19					.word xt_x28literalx29
>298d	0f 00					.word 15
>298f	ae 16					.word xt_assertx3d
>2991	73 19					.word xt_x28literalx29
>2993	99 29					.word l_176
>2995	93 37					.word xt_x28branchx29
>2997	b3 29					.word l_177
.2999					l_176:
>2999	36 36 68 20 31 36 20 64			.null "66h 16 digit --> fh ffffh"
>29a1	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>29b1	68 00
.29b3					l_177:
>29b3	8e 16					.word xt_testname
>29b5	73 19					.word xt_x28literalx29
>29b7	66 00					.word 102
>29b9	73 19					.word xt_x28literalx29
>29bb	10 00					.word 16
>29bd	9c 3a					.word xt_digit
>29bf	73 19					.word xt_x28literalx29
>29c1	ff ff					.word 65535
>29c3	ae 16					.word xt_assertx3d
>29c5	73 19					.word xt_x28literalx29
>29c7	0f 00					.word 15
>29c9	ae 16					.word xt_assertx3d
>29cb	73 19					.word xt_x28literalx29
>29cd	d3 29					.word l_179
>29cf	93 37					.word xt_x28branchx29
>29d1	e0 29					.word l_180
.29d3					l_179:
>29d3	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>29db	2d 3e 20 30 00
.29e0					l_180:
>29e0	8e 16					.word xt_testname
>29e2	df 18					.word xt_0
>29e4	fa 3c					.word xt_x3fdup
>29e6	df 18					.word xt_0
>29e8	ae 16					.word xt_assertx3d
>29ea	73 19					.word xt_x28literalx29
>29ec	f2 29					.word l_181
>29ee	93 37					.word xt_x28branchx29
>29f0	01 2a					.word l_182
.29f2					l_181:
>29f2	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>29fa	2d 3e 20 31 20 31 00
.2a01					l_182:
>2a01	8e 16					.word xt_testname
>2a03	fb 18					.word xt_1
>2a05	fa 3c					.word xt_x3fdup
>2a07	fb 18					.word xt_1
>2a09	ae 16					.word xt_assertx3d
>2a0b	fb 18					.word xt_1
>2a0d	ae 16					.word xt_assertx3d
>2a0f	73 19					.word xt_x28literalx29
>2a11	17 2a					.word l_183
>2a13	93 37					.word xt_x28branchx29
>2a15	2b 2a					.word l_184
.2a17					l_183:
>2a17	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>2a1f	74 20 2d 2d 3e 20 32 20 33 20 31 00
.2a2b					l_184:
>2a2b	8e 16					.word xt_testname
>2a2d	fb 18					.word xt_1
>2a2f	19 19					.word xt_2
>2a31	73 19					.word xt_x28literalx29
>2a33	03 00					.word 3
>2a35	1a 3d					.word xt_rot
>2a37	fb 18					.word xt_1
>2a39	ae 16					.word xt_assertx3d
>2a3b	73 19					.word xt_x28literalx29
>2a3d	03 00					.word 3
>2a3f	ae 16					.word xt_assertx3d
>2a41	19 19					.word xt_2
>2a43	ae 16					.word xt_assertx3d
>2a45	73 19					.word xt_x28literalx29
>2a47	4d 2a					.word l_185
>2a49	93 37					.word xt_x28branchx29
>2a4b	62 2a					.word l_186
.2a4d					l_185:
>2a4d	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>2a55	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.2a62					l_186:
>2a62	8e 16					.word xt_testname
>2a64	fb 18					.word xt_1
>2a66	19 19					.word xt_2
>2a68	3a 3d					.word xt_2dup
>2a6a	19 19					.word xt_2
>2a6c	ae 16					.word xt_assertx3d
>2a6e	fb 18					.word xt_1
>2a70	ae 16					.word xt_assertx3d
>2a72	19 19					.word xt_2
>2a74	ae 16					.word xt_assertx3d
>2a76	fb 18					.word xt_1
>2a78	ae 16					.word xt_assertx3d
>2a7a	73 19					.word xt_x28literalx29
>2a7c	82 2a					.word l_187
>2a7e	93 37					.word xt_x28branchx29
>2a80	98 2a					.word l_188
.2a82					l_187:
>2a82	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>2a8a	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.2a98					l_188:
>2a98	8e 16					.word xt_testname
>2a9a	fb 18					.word xt_1
>2a9c	19 19					.word xt_2
>2a9e	73 19					.word xt_x28literalx29
>2aa0	03 00					.word 3
>2aa2	73 19					.word xt_x28literalx29
>2aa4	04 00					.word 4
>2aa6	56 3d					.word xt_2drop
>2aa8	19 19					.word xt_2
>2aaa	ae 16					.word xt_assertx3d
>2aac	fb 18					.word xt_1
>2aae	ae 16					.word xt_assertx3d
>2ab0	73 19					.word xt_x28literalx29
>2ab2	b8 2a					.word l_189
>2ab4	93 37					.word xt_x28branchx29
>2ab6	c8 2a					.word l_190
.2ab8					l_189:
>2ab8	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>2ac0	3e 20 66 66 66 66 68 00
.2ac8					l_190:
>2ac8	8e 16					.word xt_testname
>2aca	fb 18					.word xt_1
>2acc	19 19					.word xt_2
>2ace	72 3d					.word xt_x3c
>2ad0	73 19					.word xt_x28literalx29
>2ad2	ff ff					.word 65535
>2ad4	ae 16					.word xt_assertx3d
>2ad6	73 19					.word xt_x28literalx29
>2ad8	de 2a					.word l_191
>2ada	93 37					.word xt_x28branchx29
>2adc	ee 2a					.word l_192
.2ade					l_191:
>2ade	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>2ae6	3e 20 30 30 30 30 68 00
.2aee					l_192:
>2aee	8e 16					.word xt_testname
>2af0	19 19					.word xt_2
>2af2	fb 18					.word xt_1
>2af4	72 3d					.word xt_x3c
>2af6	73 19					.word xt_x28literalx29
>2af8	00 00					.word 0
>2afa	ae 16					.word xt_assertx3d
>2afc	73 19					.word xt_x28literalx29
>2afe	04 2b					.word l_193
>2b00	93 37					.word xt_x28branchx29
>2b02	18 2b					.word l_194
.2b04					l_193:
>2b04	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2b0c	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.2b18					l_194:
>2b18	8e 16					.word xt_testname
>2b1a	df 18					.word xt_0
>2b1c	73 19					.word xt_x28literalx29
>2b1e	ff ff					.word 65535
>2b20	72 3d					.word xt_x3c
>2b22	73 19					.word xt_x28literalx29
>2b24	00 00					.word 0
>2b26	ae 16					.word xt_assertx3d
>2b28	73 19					.word xt_x28literalx29
>2b2a	30 2b					.word l_195
>2b2c	93 37					.word xt_x28branchx29
>2b2e	44 2b					.word l_196
.2b30					l_195:
>2b30	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>2b38	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2b44					l_196:
>2b44	8e 16					.word xt_testname
>2b46	73 19					.word xt_x28literalx29
>2b48	ff ff					.word 65535
>2b4a	df 18					.word xt_0
>2b4c	72 3d					.word xt_x3c
>2b4e	73 19					.word xt_x28literalx29
>2b50	ff ff					.word 65535
>2b52	ae 16					.word xt_assertx3d
>2b54	73 19					.word xt_x28literalx29
>2b56	5c 2b					.word l_197
>2b58	93 37					.word xt_x28branchx29
>2b5a	6c 2b					.word l_198
.2b5c					l_197:
>2b5c	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2b64	3e 20 30 30 30 30 68 00
.2b6c					l_198:
>2b6c	8e 16					.word xt_testname
>2b6e	fb 18					.word xt_1
>2b70	19 19					.word xt_2
>2b72	8e 3d					.word xt_x3e
>2b74	73 19					.word xt_x28literalx29
>2b76	00 00					.word 0
>2b78	ae 16					.word xt_assertx3d
>2b7a	73 19					.word xt_x28literalx29
>2b7c	82 2b					.word l_199
>2b7e	93 37					.word xt_x28branchx29
>2b80	92 2b					.word l_200
.2b82					l_199:
>2b82	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>2b8a	3e 20 66 66 66 66 68 00
.2b92					l_200:
>2b92	8e 16					.word xt_testname
>2b94	19 19					.word xt_2
>2b96	fb 18					.word xt_1
>2b98	8e 3d					.word xt_x3e
>2b9a	73 19					.word xt_x28literalx29
>2b9c	ff ff					.word 65535
>2b9e	ae 16					.word xt_assertx3d
>2ba0	73 19					.word xt_x28literalx29
>2ba2	a8 2b					.word l_201
>2ba4	93 37					.word xt_x28branchx29
>2ba6	bc 2b					.word l_202
.2ba8					l_201:
>2ba8	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2bb0	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2bbc					l_202:
>2bbc	8e 16					.word xt_testname
>2bbe	df 18					.word xt_0
>2bc0	73 19					.word xt_x28literalx29
>2bc2	ff ff					.word 65535
>2bc4	8e 3d					.word xt_x3e
>2bc6	73 19					.word xt_x28literalx29
>2bc8	ff ff					.word 65535
>2bca	ae 16					.word xt_assertx3d
>2bcc	73 19					.word xt_x28literalx29
>2bce	d4 2b					.word l_203
>2bd0	93 37					.word xt_x28branchx29
>2bd2	e8 2b					.word l_204
.2bd4					l_203:
>2bd4	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2bdc	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.2be8					l_204:
>2be8	8e 16					.word xt_testname
>2bea	73 19					.word xt_x28literalx29
>2bec	ff ff					.word 65535
>2bee	df 18					.word xt_0
>2bf0	8e 3d					.word xt_x3e
>2bf2	73 19					.word xt_x28literalx29
>2bf4	00 00					.word 0
>2bf6	ae 16					.word xt_assertx3d
>2bf8	73 19					.word xt_x28literalx29
>2bfa	00 2c					.word l_205
>2bfc	93 37					.word xt_x28branchx29
>2bfe	10 2c					.word l_206
.2c00					l_205:
>2c00	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>2c08	3e 20 30 30 30 30 68 00
.2c10					l_206:
>2c10	8e 16					.word xt_testname
>2c12	fb 18					.word xt_1
>2c14	df 18					.word xt_0
>2c16	aa 3d					.word xt_x3d
>2c18	73 19					.word xt_x28literalx29
>2c1a	00 00					.word 0
>2c1c	ae 16					.word xt_assertx3d
>2c1e	73 19					.word xt_x28literalx29
>2c20	26 2c					.word l_207
>2c22	93 37					.word xt_x28branchx29
>2c24	36 2c					.word l_208
.2c26					l_207:
>2c26	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2c2e	3e 20 66 66 66 66 68 00
.2c36					l_208:
>2c36	8e 16					.word xt_testname
>2c38	fb 18					.word xt_1
>2c3a	fb 18					.word xt_1
>2c3c	aa 3d					.word xt_x3d
>2c3e	73 19					.word xt_x28literalx29
>2c40	ff ff					.word 65535
>2c42	ae 16					.word xt_assertx3d
>2c44	73 19					.word xt_x28literalx29
>2c46	4c 2c					.word l_209
>2c48	93 37					.word xt_x28branchx29
>2c4a	60 2c					.word l_210
.2c4c					l_209:
>2c4c	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2c54	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2c60					l_210:
>2c60	8e 16					.word xt_testname
>2c62	73 19					.word xt_x28literalx29
>2c64	ff ff					.word 65535
>2c66	df 18					.word xt_0
>2c68	aa 3d					.word xt_x3d
>2c6a	73 19					.word xt_x28literalx29
>2c6c	00 00					.word 0
>2c6e	ae 16					.word xt_assertx3d
>2c70	73 19					.word xt_x28literalx29
>2c72	78 2c					.word l_211
>2c74	93 37					.word xt_x28branchx29
>2c76	90 2c					.word l_212
.2c78					l_211:
>2c78	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2c80	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2c90					l_212:
>2c90	8e 16					.word xt_testname
>2c92	73 19					.word xt_x28literalx29
>2c94	ff ff					.word 65535
>2c96	73 19					.word xt_x28literalx29
>2c98	ff ff					.word 65535
>2c9a	aa 3d					.word xt_x3d
>2c9c	73 19					.word xt_x28literalx29
>2c9e	ff ff					.word 65535
>2ca0	ae 16					.word xt_assertx3d
>2ca2	73 19					.word xt_x28literalx29
>2ca4	aa 2c					.word l_213
>2ca6	93 37					.word xt_x28branchx29
>2ca8	ba 2c					.word l_214
.2caa					l_213:
>2caa	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2cb2	3e 20 66 66 66 66 68 00
.2cba					l_214:
>2cba	8e 16					.word xt_testname
>2cbc	df 18					.word xt_0
>2cbe	df 18					.word xt_0
>2cc0	aa 3d					.word xt_x3d
>2cc2	73 19					.word xt_x28literalx29
>2cc4	ff ff					.word 65535
>2cc6	ae 16					.word xt_assertx3d
>2cc8	73 19					.word xt_x28literalx29
>2cca	d0 2c					.word l_216
>2ccc	93 37					.word xt_x28branchx29
>2cce	dc 2c					.word l_217
.2cd0					l_216:
>2cd0	31 20 61 62 73 20 2d 2d			.null "1 abs --> 1"
>2cd8	3e 20 31 00
.2cdc					l_217:
>2cdc	8e 16					.word xt_testname
>2cde	fb 18					.word xt_1
>2ce0	e4 3d					.word xt_abs
>2ce2	fb 18					.word xt_1
>2ce4	ae 16					.word xt_assertx3d
>2ce6	73 19					.word xt_x28literalx29
>2ce8	ee 2c					.word l_218
>2cea	93 37					.word xt_x28branchx29
>2cec	fe 2c					.word l_219
.2cee					l_218:
>2cee	66 66 66 66 68 20 61 62			.null "ffffh abs --> 1"
>2cf6	73 20 2d 2d 3e 20 31 00
.2cfe					l_219:
>2cfe	8e 16					.word xt_testname
>2d00	73 19					.word xt_x28literalx29
>2d02	ff ff					.word 65535
>2d04	e4 3d					.word xt_abs
>2d06	fb 18					.word xt_1
>2d08	ae 16					.word xt_assertx3d
>2d0a	73 19					.word xt_x28literalx29
>2d0c	12 2d					.word l_220
>2d0e	93 37					.word xt_x28branchx29
>2d10	1e 2d					.word l_221
.2d12					l_220:
>2d12	30 20 61 62 73 20 2d 2d			.null "0 abs --> 0"
>2d1a	3e 20 30 00
.2d1e					l_221:
>2d1e	8e 16					.word xt_testname
>2d20	df 18					.word xt_0
>2d22	e4 3d					.word xt_abs
>2d24	df 18					.word xt_0
>2d26	ae 16					.word xt_assertx3d
>2d28	73 19					.word xt_x28literalx29
>2d2a	30 2d					.word l_223
>2d2c	93 37					.word xt_x28branchx29
>2d2e	41 2d					.word l_224
.2d30					l_223:
>2d30	31 20 32 20 64 61 62 73			.null "1 2 dabs --> 1 2"
>2d38	20 2d 2d 3e 20 31 20 32 00
.2d41					l_224:
>2d41	8e 16					.word xt_testname
>2d43	fb 18					.word xt_1
>2d45	19 19					.word xt_2
>2d47	0a 3e					.word xt_dabs
>2d49	19 19					.word xt_2
>2d4b	ae 16					.word xt_assertx3d
>2d4d	fb 18					.word xt_1
>2d4f	ae 16					.word xt_assertx3d
>2d51	73 19					.word xt_x28literalx29
>2d53	59 2d					.word l_225
>2d55	93 37					.word xt_x28branchx29
>2d57	72 2d					.word l_226
.2d59					l_225:
>2d59	66 66 66 66 68 20 66 66			.null "ffffh ffffh dabs --> 0 1"
>2d61	66 66 68 20 64 61 62 73 20 2d 2d 3e 20 30 20 31
>2d71	00
.2d72					l_226:
>2d72	8e 16					.word xt_testname
>2d74	73 19					.word xt_x28literalx29
>2d76	ff ff					.word 65535
>2d78	73 19					.word xt_x28literalx29
>2d7a	ff ff					.word 65535
>2d7c	0a 3e					.word xt_dabs
>2d7e	fb 18					.word xt_1
>2d80	ae 16					.word xt_assertx3d
>2d82	df 18					.word xt_0
>2d84	ae 16					.word xt_assertx3d
>2d86	73 19					.word xt_x28literalx29
>2d88	8e 2d					.word l_227
>2d8a	93 37					.word xt_x28branchx29
>2d8c	9f 2d					.word l_228
.2d8e					l_227:
>2d8e	30 20 30 20 64 61 62 73			.null "0 0 dabs --> 0 0"
>2d96	20 2d 2d 3e 20 30 20 30 00
.2d9f					l_228:
>2d9f	8e 16					.word xt_testname
>2da1	df 18					.word xt_0
>2da3	df 18					.word xt_0
>2da5	0a 3e					.word xt_dabs
>2da7	df 18					.word xt_0
>2da9	ae 16					.word xt_assertx3d
>2dab	df 18					.word xt_0
>2dad	ae 16					.word xt_assertx3d
>2daf	73 19					.word xt_x28literalx29
>2db1	b7 2d					.word l_229
>2db3	93 37					.word xt_x28branchx29
>2db5	c3 2d					.word l_230
.2db7					l_229:
>2db7	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>2dbf	3e 20 32 00
.2dc3					l_230:
>2dc3	8e 16					.word xt_testname
>2dc5	73 19					.word xt_x28literalx29
>2dc7	06 00					.word 6
>2dc9	73 19					.word xt_x28literalx29
>2dcb	03 00					.word 3
>2dcd	4a 3e					.word xt_x2f
>2dcf	19 19					.word xt_2
>2dd1	ae 16					.word xt_assertx3d
>2dd3	73 19					.word xt_x28literalx29
>2dd5	db 2d					.word l_231
>2dd7	93 37					.word xt_x28branchx29
>2dd9	e8 2d					.word l_232
.2ddb					l_231:
>2ddb	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2de3	2d 3e 20 33 00
.2de8					l_232:
>2de8	8e 16					.word xt_testname
>2dea	73 19					.word xt_x28literalx29
>2dec	0a 00					.word 10
>2dee	73 19					.word xt_x28literalx29
>2df0	03 00					.word 3
>2df2	4a 3e					.word xt_x2f
>2df4	73 19					.word xt_x28literalx29
>2df6	03 00					.word 3
>2df8	ae 16					.word xt_assertx3d
>2dfa	73 19					.word xt_x28literalx29
>2dfc	02 2e					.word l_233
>2dfe	93 37					.word xt_x28branchx29
>2e00	10 2e					.word l_234
.2e02					l_233:
>2e02	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2e0a	2d 2d 3e 20 30 00
.2e10					l_234:
>2e10	8e 16					.word xt_testname
>2e12	73 19					.word xt_x28literalx29
>2e14	06 00					.word 6
>2e16	73 19					.word xt_x28literalx29
>2e18	03 00					.word 3
>2e1a	68 3e					.word xt_mod
>2e1c	df 18					.word xt_0
>2e1e	ae 16					.word xt_assertx3d
>2e20	73 19					.word xt_x28literalx29
>2e22	28 2e					.word l_235
>2e24	93 37					.word xt_x28branchx29
>2e26	37 2e					.word l_236
.2e28					l_235:
>2e28	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>2e30	20 2d 2d 3e 20 31 00
.2e37					l_236:
>2e37	8e 16					.word xt_testname
>2e39	73 19					.word xt_x28literalx29
>2e3b	0a 00					.word 10
>2e3d	73 19					.word xt_x28literalx29
>2e3f	03 00					.word 3
>2e41	68 3e					.word xt_mod
>2e43	fb 18					.word xt_1
>2e45	ae 16					.word xt_assertx3d
>2e47	73 19					.word xt_x28literalx29
>2e49	4f 2e					.word l_239
>2e4b	93 37					.word xt_x28branchx29
>2e4d	5d 2e					.word l_240
.2e4f					l_239:
>2e4f	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2e57	2d 2d 3e 20 32 00
.2e5d					l_240:
>2e5d	8e 16					.word xt_testname
>2e5f	fb 18					.word xt_1
>2e61	19 19					.word xt_2
>2e63	84 3e					.word xt_max
>2e65	19 19					.word xt_2
>2e67	ae 16					.word xt_assertx3d
>2e69	73 19					.word xt_x28literalx29
>2e6b	71 2e					.word l_241
>2e6d	93 37					.word xt_x28branchx29
>2e6f	7f 2e					.word l_242
.2e71					l_241:
>2e71	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2e79	2d 2d 3e 20 33 00
.2e7f					l_242:
>2e7f	8e 16					.word xt_testname
>2e81	73 19					.word xt_x28literalx29
>2e83	03 00					.word 3
>2e85	df 18					.word xt_0
>2e87	84 3e					.word xt_max
>2e89	73 19					.word xt_x28literalx29
>2e8b	03 00					.word 3
>2e8d	ae 16					.word xt_assertx3d
>2e8f	73 19					.word xt_x28literalx29
>2e91	97 2e					.word l_243
>2e93	93 37					.word xt_x28branchx29
>2e95	b1 2e					.word l_244
.2e97					l_243:
>2e97	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>2e9f	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>2eaf	68 00
.2eb1					l_244:
>2eb1	8e 16					.word xt_testname
>2eb3	73 19					.word xt_x28literalx29
>2eb5	fe ff					.word 65534
>2eb7	73 19					.word xt_x28literalx29
>2eb9	ff ff					.word 65535
>2ebb	84 3e					.word xt_max
>2ebd	73 19					.word xt_x28literalx29
>2ebf	ff ff					.word 65535
>2ec1	ae 16					.word xt_assertx3d
>2ec3	73 19					.word xt_x28literalx29
>2ec5	cb 2e					.word l_247
>2ec7	93 37					.word xt_x28branchx29
>2ec9	d9 2e					.word l_248
.2ecb					l_247:
>2ecb	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2ed3	2d 2d 3e 20 31 00
.2ed9					l_248:
>2ed9	8e 16					.word xt_testname
>2edb	fb 18					.word xt_1
>2edd	19 19					.word xt_2
>2edf	ae 3e					.word xt_min
>2ee1	fb 18					.word xt_1
>2ee3	ae 16					.word xt_assertx3d
>2ee5	73 19					.word xt_x28literalx29
>2ee7	ed 2e					.word l_249
>2ee9	93 37					.word xt_x28branchx29
>2eeb	fb 2e					.word l_250
.2eed					l_249:
>2eed	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2ef5	2d 2d 3e 20 30 00
.2efb					l_250:
>2efb	8e 16					.word xt_testname
>2efd	73 19					.word xt_x28literalx29
>2eff	03 00					.word 3
>2f01	df 18					.word xt_0
>2f03	ae 3e					.word xt_min
>2f05	df 18					.word xt_0
>2f07	ae 16					.word xt_assertx3d
>2f09	73 19					.word xt_x28literalx29
>2f0b	11 2f					.word l_251
>2f0d	93 37					.word xt_x28branchx29
>2f0f	2b 2f					.word l_252
.2f11					l_251:
>2f11	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2f19	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2f29	68 00
.2f2b					l_252:
>2f2b	8e 16					.word xt_testname
>2f2d	73 19					.word xt_x28literalx29
>2f2f	fe ff					.word 65534
>2f31	73 19					.word xt_x28literalx29
>2f33	ff ff					.word 65535
>2f35	ae 3e					.word xt_min
>2f37	73 19					.word xt_x28literalx29
>2f39	fe ff					.word 65534
>2f3b	ae 16					.word xt_assertx3d
>2f3d	49 16					.word xt_exit
.2f3f					w_drop:
>2f3f	04					.byte $04
>2f40	64 72 6f 70				.text 'drop'
>2f44						.fill 12
>2f50	ea 19					.word w_unittest
.2f52					xt_drop:
.2f52	e8		inx			inx
.2f53	e8		inx			inx
.2f54	4c 1c 16	jmp $161c		jmp next
.2f57					w_dup:
>2f57	03					.byte $03
>2f58	64 75 70				.text 'dup'
>2f5b						.fill 13
>2f68	3f 2f					.word w_drop
.2f6a					xt_dup:
.2f6a	b5 02		lda $02,x		lda pstack+2,x
.2f6c	95 00		sta $00,x		sta pstack,x
.2f6e	b5 03		lda $03,x		lda pstack+3,x
.2f70	95 01		sta $01,x		sta pstack+1,x
.2f72	ca		dex			dex
.2f73	ca		dex			dex
.2f74	4c 1c 16	jmp $161c		jmp next
.2f77					w_swap:
>2f77	04					.byte $04
>2f78	73 77 61 70				.text 'swap'
>2f7c						.fill 12
>2f88	57 2f					.word w_dup
.2f8a					xt_swap:
.2f8a	b5 02		lda $02,x		lda pstack+2,x
.2f8c	b4 04		ldy $04,x		ldy pstack+4,x
.2f8e	94 02		sty $02,x		sty pstack+2,x
.2f90	95 04		sta $04,x		sta pstack+4,x
.2f92	b5 03		lda $03,x		lda pstack+3,x
.2f94	b4 05		ldy $05,x		ldy pstack+5,x
.2f96	94 03		sty $03,x		sty pstack+3,x
.2f98	95 05		sta $05,x		sta pstack+5,x
.2f9a	4c 1c 16	jmp $161c		jmp next
.2f9d					w_2swap:
>2f9d	05					.byte $05
>2f9e	32 73 77 61 70				.text '2swap'
>2fa3						.fill 11
>2fae	77 2f					.word w_swap
.2fb0					xt_2swap:
.2fb0	b5 05		lda $05,x		lda pstack+5,x
.2fb2	48		pha			pha
.2fb3	b5 04		lda $04,x		lda pstack+4,x
.2fb5	48		pha			pha
.2fb6	b5 03		lda $03,x		lda pstack+3,x
.2fb8	48		pha			pha
.2fb9	b5 02		lda $02,x		lda pstack+2,x
.2fbb	48		pha			pha
.2fbc	b5 09		lda $09,x		lda pstack+9,x
.2fbe	95 05		sta $05,x		sta pstack+5,x
.2fc0	b5 08		lda $08,x		lda pstack+8,x
.2fc2	95 04		sta $04,x		sta pstack+4,x
.2fc4	b5 07		lda $07,x		lda pstack+7,x
.2fc6	95 03		sta $03,x		sta pstack+3,x
.2fc8	b5 06		lda $06,x		lda pstack+6,x
.2fca	95 02		sta $02,x		sta pstack+2,x
.2fcc	68		pla			pla
.2fcd	95 06		sta $06,x		sta pstack+6,x
.2fcf	68		pla			pla
.2fd0	95 07		sta $07,x		sta pstack+7,x
.2fd2	68		pla			pla
.2fd3	95 08		sta $08,x		sta pstack+8,x
.2fd5	68		pla			pla
.2fd6	95 09		sta $09,x		sta pstack+9,x
.2fd8	4c 1c 16	jmp $161c		jmp next
.2fdb					w_over:
>2fdb	04					.byte $04
>2fdc	6f 76 65 72				.text 'over'
>2fe0						.fill 12
>2fec	9d 2f					.word w_2swap
.2fee					xt_over:
.2fee	b5 04		lda $04,x		lda pstack+4,x
.2ff0	95 00		sta $00,x		sta pstack,x
.2ff2	b5 05		lda $05,x		lda pstack+5,x
.2ff4	95 01		sta $01,x		sta pstack+1,x
.2ff6	ca		dex			dex
.2ff7	ca		dex			dex
.2ff8	4c 1c 16	jmp $161c		jmp next
.2ffb					w_2over:
>2ffb	05					.byte $05
>2ffc	32 6f 76 65 72				.text '2over'
>3001						.fill 11
>300c	db 2f					.word w_over
.300e					xt_2over:
.300e	ca		dex			dex
.300f	ca		dex			dex
.3010	ca		dex			dex
.3011	ca		dex			dex
.3012	b5 0d		lda $0d,x		lda pstack+13,x
.3014	95 05		sta $05,x		sta pstack+5,x
.3016	b5 0c		lda $0c,x		lda pstack+12,x
.3018	95 04		sta $04,x		sta pstack+4,x
.301a	b5 0b		lda $0b,x		lda pstack+11,x
.301c	95 03		sta $03,x		sta pstack+3,x
.301e	b5 0a		lda $0a,x		lda pstack+10,x
.3020	95 02		sta $02,x		sta pstack+2,x
.3022	4c 1c 16	jmp $161c		jmp next
.3025					w_x3er:
>3025	02					.byte $02
>3026	3e 72					.text '>r'
>3028						.fill 14
>3036	fb 2f					.word w_2over
.3038					xt_x3er:
.3038	b5 03		lda $03,x		lda pstack+3,x
.303a	48		pha			pha
.303b	b5 02		lda $02,x		lda pstack+2,x
.303d	48		pha			pha
.303e	e8		inx			inx
.303f	e8		inx			inx
.3040	4c 1c 16	jmp $161c		jmp next
.3043					w_rx3e:
>3043	02					.byte $02
>3044	72 3e					.text 'r>'
>3046						.fill 14
>3054	25 30					.word w_x3er
.3056					xt_rx3e:
.3056	68		pla			pla
.3057	95 00		sta $00,x		sta pstack,x
.3059	68		pla			pla
.305a	95 01		sta $01,x		sta pstack+1,x
.305c	ca		dex			dex
.305d	ca		dex			dex
.305e	4c 1c 16	jmp $161c		jmp next
.3061					w_r:
>3061	01					.byte $01
>3062	72					.text 'r'
>3063						.fill 15
>3072	43 30					.word w_rx3e
.3074					xt_r:
.3074	68		pla			pla
.3075	95 00		sta $00,x		sta pstack,x
.3077	68		pla			pla
.3078	95 01		sta $01,x		sta pstack+1,x
.307a	48		pha			pha
.307b	b5 00		lda $00,x		lda pstack,x
.307d	48		pha			pha
.307e	ca		dex			dex
.307f	ca		dex			dex
.3080	4c 1c 16	jmp $161c		jmp next
.3083					w_rdrop:
>3083	05					.byte $05
>3084	72 64 72 6f 70				.text 'rdrop'
>3089						.fill 11
>3094	61 30					.word w_r
.3096					xt_rdrop:
.3096	68		pla			pla
.3097	68		pla			pla
.3098					w_x21:
>3098	01					.byte $01
>3099	21					.text '!'
>309a						.fill 15
>30a9	83 30					.word w_rdrop
.30ab					xt_x21:
.30ab	b5 02		lda $02,x		lda pstack+2,x
.30ad	85 32		sta $32			sta tmp
.30af	b5 03		lda $03,x		lda pstack+3,x
.30b1	85 33		sta $33			sta tmp+1
.30b3	a0 01		ldy #$01		ldy #1
.30b5	b5 04		lda $04,x		lda pstack+4,x
.30b7	92 32		sta ($32)		sta (tmp)
.30b9	b5 05		lda $05,x		lda pstack+5,x
.30bb	91 32		sta ($32),y		sta (tmp),y
.30bd	e8		inx			inx
.30be	e8		inx			inx
.30bf	e8		inx			inx
.30c0	e8		inx			inx
.30c1	4c 1c 16	jmp $161c		jmp next
.30c4					w_x40:
>30c4	01					.byte $01
>30c5	40					.text '@'
>30c6						.fill 15
>30d5	98 30					.word w_x21
.30d7					xt_x40:
.30d7	b5 02		lda $02,x		lda pstack+2,x
.30d9	85 32		sta $32			sta tmp
.30db	b5 03		lda $03,x		lda pstack+3,x
.30dd	85 33		sta $33			sta tmp+1
.30df	a0 01		ldy #$01		ldy #1
.30e1	b2 32		lda ($32)		lda (tmp)
.30e3	95 02		sta $02,x		sta pstack+2,x
.30e5	b1 32		lda ($32),y		lda (tmp),y
.30e7	95 03		sta $03,x		sta pstack+3,x
.30e9	4c 1c 16	jmp $161c		jmp next
.30ec					w_cx21:
>30ec	02					.byte $02
>30ed	63 21					.text 'c!'
>30ef						.fill 14
>30fd	c4 30					.word w_x40
.30ff					xt_cx21:
.30ff	b5 04		lda $04,x		lda pstack+4,x
.3101	81 02		sta ($02,x)		sta (pstack+2,x)
.3103	e8		inx			inx
.3104	e8		inx			inx
.3105	e8		inx			inx
.3106	e8		inx			inx
.3107	4c 1c 16	jmp $161c		jmp next
.310a					w_cx40:
>310a	02					.byte $02
>310b	63 40					.text 'c@'
>310d						.fill 14
>311b	ec 30					.word w_cx21
.311d					xt_cx40:
.311d	a1 02		lda ($02,x)		lda (pstack+2,x)
.311f	95 02		sta $02,x		sta pstack+2,x
.3121	74 03		stz $03,x		stz pstack+3,x
.3123	4c 1c 16	jmp $161c		jmp next
.3126					w_fill:
>3126	04					.byte $04
>3127	66 69 6c 6c				.text 'fill'
>312b						.fill 12
>3137	0a 31					.word w_cx40
.3139					xt_fill:
.3139						loop:
.3139	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.313b	d0 04		bne $3141		bne do_write
.313d	b5 04		lda $04,x		lda pstack+4,x
.313f	f0 19		beq $315a		beq done                ; Yes: we're done...
.3141						do_write:
.3141	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.3143	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.3145	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.3147	d0 02		bne $314b		bne deccount
.3149	f6 06		inc $06,x		inc pstack+6,x
.314b						deccount:
.314b	38		sec			sec                     ; Decrement the count
.314c	b5 03		lda $03,x		lda pstack+3,x
.314e	e9 01		sbc #$01		sbc #1
.3150	95 03		sta $03,x		sta pstack+3,x
.3152	b5 04		lda $04,x		lda pstack+4,x
.3154	e9 00		sbc #$00		sbc #0
.3156	95 04		sta $04,x		sta pstack+4,x
.3158	80 df		bra $3139		bra loop                ; And check again
.315a						done:
.315a	8a		txa			txa                     ; Clean up the parameter stack
.315b	69 06		adc #$06		adc #6
.315d	aa		tax			tax
.315e	4c 1c 16	jmp $161c		jmp next
.3161					w_x2bx21:
>3161	02					.byte $02
>3162	2b 21					.text '+!'
>3164						.fill 14
>3172	26 31					.word w_fill
.3174					xt_x2bx21:
.3174	b5 03		lda $03,x		lda pstack+3,x
.3176	85 33		sta $33			sta tmp+1
.3178	b5 02		lda $02,x		lda pstack+2,x
.317a	85 32		sta $32			sta tmp
.317c	18		clc			clc
.317d	a0 01		ldy #$01		ldy #1
.317f	b2 32		lda ($32)		lda (tmp)
.3181	75 04		adc $04,x		adc pstack+4,x
.3183	92 32		sta ($32)		sta (tmp)
.3185	b1 32		lda ($32),y		lda (tmp),y
.3187	75 05		adc $05,x		adc pstack+5,x
.3189	91 32		sta ($32),y		sta (tmp),y
.318b						done:
.318b	e8		inx			inx                     ; Clean up the stack
.318c	e8		inx			inx
.318d	e8		inx			inx
.318e	e8		inx			inx
.318f	4c 1c 16	jmp $161c		jmp next
.3192					w_enclose:
>3192	07					.byte $07
>3193	65 6e 63 6c 6f 73 65			.text 'enclose'
>319a						.fill 9
>31a3	61 31					.word w_x2bx21
.31a5					xt_enclose:
.31a5	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.31a7	85 25		sta $25			sta src_ptr+1
.31a9	b5 04		lda $04,x		lda pstack+4,x
.31ab	85 24		sta $24			sta src_ptr
.31ad	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.31af	85 32		sta $32			sta tmp
.31b1	8a		txa			txa
.31b2	38		sec			sec
.31b3	e9 04		sbc #$04		sbc #4
.31b5	aa		tax			tax
.31b6	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.31b8	74 06		stz $06,x		stz pstack+6,x
.31ba	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.31bc	74 04		stz $04,x		stz pstack+4,x
.31be	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.31c0	74 02		stz $02,x		stz pstack+2,x
.31c2	a0 00		ldy #$00		ldy #0
.31c4						loop1:
.31c4	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.31c6	d0 03		bne $31cb		bne chk_delim1          ; NUL? No:; check it against the delimiter
.31c8						none:
.31c8	4c 1c 16	jmp $161c		jmp next                ; Yes: we want to return 0s
.31cb						chk_delim1:
.31cb	c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.31cd	f0 13		beq $31e2		beq skip2               ; Yes: skip the character
.31cf	a5 32		lda $32			lda tmp                 ; Check the delimiter
.31d1	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.31d3	d0 0b		bne $31e0		bne found               ; No: ok, we've found the first character;
.31d5	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.31d7	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.31d9	d0 05		bne $31e0		bne found               ; No: we found the first character
.31db	c8		iny			iny                     ; Move to the next character
.31dc	f0 ea		beq $31c8		beq none                ; If we've rolled over, we found nothing
.31de	80 e4		bra $31c4		bra loop1               ; Otherwise: check the next character
.31e0						found:
.31e0	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.31e2						skip2:
.31e2	c8		iny			iny                     ; Go to the next character
.31e3	f0 1c		beq $3201		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.31e5						loop2:
.31e5	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.31e7	f0 18		beq $3201		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.31e9	c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.31eb	f0 0c		beq $31f9		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.31ed	a5 32		lda $32			lda tmp                 ; Get the delimiter
.31ef	c9 20		cmp #$20		cmp #' '                ; Is it space?
.31f1	d0 ef		bne $31e2		bne skip2               ; No: go to the next character
.31f3	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.31f5	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.31f7	d0 e9		bne $31e2		bne skip2               ; No: go to the next character
.31f9						found_delim:
.31f9	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.31fb	c8		iny			iny
.31fc	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.31fe	4c 1c 16	jmp $161c		jmp next                ; And we're done
.3201						found_nul:
.3201	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.3203	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.3205	4c 1c 16	jmp $161c		jmp next                ; And we're done
.3208					w_cmove:
>3208	05					.byte $05
>3209	63 6d 6f 76 65				.text 'cmove'
>320e						.fill 11
>3219	92 31					.word w_enclose
.321b					xt_cmove:
.321b	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.321d	85 33		sta $33			sta tmp+1
.321f	b5 02		lda $02,x		lda pstack+2,x
.3221	85 32		sta $32			sta tmp
.3223	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.3225	85 27		sta $27			sta dst_ptr+1
.3227	b5 04		lda $04,x		lda pstack+4,x
.3229	85 26		sta $26			sta dst_ptr
.322b	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.322d	85 25		sta $25			sta src_ptr+1
.322f	b5 06		lda $06,x		lda pstack+6,x
.3231	85 24		sta $24			sta src_ptr
.3233	8a		txa			txa                     ; Clean up the stack
.3234	18		clc			clc
.3235	69 06		adc #$06		adc #6
.3237	85 36		sta $36			sta savex               ; And save it for later restoration
.3239	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.323b	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.323d						loop:
.323d	e4 33		cpx $33			cpx tmp+1               ; is tmp == X:Y?
.323f	d0 04		bne $3245		bne copy
.3241	c4 32		cpy $32			cpy tmp
.3243	f0 0e		beq $3253		beq done                ; Yes: we're done
.3245						copy:
.3245	b1 24		lda ($24),y		lda (src_ptr),y         ; Copy the byte
.3247	91 26		sta ($26),y		sta (dst_ptr),y
.3249	c8		iny			iny                     ; Move to the next byte
.324a	d0 f1		bne $323d		bne loop                ; Repeat for 256 bytes
.324c	e8		inx			inx                     ; Move to the next block of 256
.324d	e6 25		inc $25			inc src_ptr+1
.324f	e6 27		inc $27			inc dst_ptr+1
.3251	80 ea		bra $323d		bra loop                ; And continue the loop
.3253						done:
.3253	a6 36		ldx $36			ldx savex
.3255	4c 1c 16	jmp $161c		jmp next
.3258					w_move:
>3258	04					.byte $04
>3259	6d 6f 76 65				.text 'move'
>325d						.fill 12
>3269	08 32					.word w_cmove
.326b					xt_move:
.326b	38		sec			sec                     ; Compare addr1 and addr2
.326c	b5 06		lda $06,x		lda pstack+6,x
.326e	f5 04		sbc $04,x		sbc pstack+4,x
.3270	85 32		sta $32			sta tmp
.3272	b5 07		lda $07,x		lda pstack+7,x
.3274	f5 05		sbc $05,x		sbc pstack+5,x
.3276	85 33		sta $33			sta tmp+1
.3278	30 24		bmi $329e		bmi a1less
.327a	f0 72		beq $32ee		beq chklo
.327c						a1greater:
.327c	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.327e	d0 50		bne $32d0		bne docopy1
.3280	b5 03		lda $03,x		lda pstack+3,x
.3282	f0 72		beq $32f6		beq done                ; Yes: we're done;
.3284	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.3286	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.3288	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.328a	d0 02		bne $328e		bne inc2
.328c	f6 07		inc $07,x		inc pstack+7,x
.328e						inc2:
.328e	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.3290	d0 02		bne $3294		bne dec_count
.3292	f6 03		inc $03,x		inc pstack+3,x
.3294						dec_count:
.3294	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.3296	d0 02		bne $329a		bne l1
.3298	d6 03		dec $03,x		dec pstack+3,x
.329a						l1:
.329a	d6 02		dec $02,x		dec pstack+2,x
.329c	80 de		bra $327c		bra a1greater
.329e						a1less:
.329e	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.32a0	d0 02		bne $32a4		bne l2
.32a2	d6 05		dec $05,x		dec pstack+5,x
.32a4						l2:
.32a4	d6 04		dec $04,x		dec pstack+4,x
.32a6	18		clc			clc                     ; addr2 := addr2 + u
.32a7	b5 04		lda $04,x		lda pstack+4,x
.32a9	75 02		adc $02,x		adc pstack+2,x
.32ab	95 04		sta $04,x		sta pstack+4,x
.32ad	b5 05		lda $05,x		lda pstack+5,x
.32af	75 03		adc $03,x		adc pstack+3,x
.32b1	95 05		sta $05,x		sta pstack+5,x
.32b3	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.32b5	d0 02		bne $32b9		bne l3
.32b7	d6 07		dec $07,x		dec pstack+7,x
.32b9						l3:
.32b9	d6 06		dec $06,x		dec pstack+6,x
.32bb	18		clc			clc                     ; addr1 := addr1 + u
.32bc	b5 06		lda $06,x		lda pstack+6,x
.32be	75 02		adc $02,x		adc pstack+2,x
.32c0	95 06		sta $06,x		sta pstack+6,x
.32c2	b5 07		lda $07,x		lda pstack+7,x
.32c4	75 03		adc $03,x		adc pstack+3,x
.32c6	95 07		sta $07,x		sta pstack+7,x
.32c8						loop2:
.32c8	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.32ca	d0 04		bne $32d0		bne docopy1
.32cc	b5 03		lda $03,x		lda pstack+3,x
.32ce	f0 26		beq $32f6		beq done                ; Yes: we're done;
.32d0						docopy1:
.32d0	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.32d2	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.32d4	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.32d6	d0 02		bne $32da		bne l4
.32d8	d6 07		dec $07,x		dec pstack+7,x
.32da						l4:
.32da	d6 06		dec $06,x		dec pstack+6,x
.32dc	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.32de	d0 02		bne $32e2		bne l5
.32e0	d6 05		dec $05,x		dec pstack+5,x
.32e2						l5:
.32e2	d6 04		dec $04,x		dec pstack+4,x
.32e4	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.32e6	d0 02		bne $32ea		bne l6
.32e8	d6 03		dec $03,x		dec pstack+3,x
.32ea						l6:
.32ea	d6 02		dec $02,x		dec pstack+2,x
.32ec	80 da		bra $32c8		bra loop2
.32ee						chklo:
.32ee	a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.32f0	30 ac		bmi $329e		bmi a1less
.32f2	f0 02		beq $32f6		beq done                ; If equal, we don't need to move the data
.32f4	80 86		bra $327c		bra a1greater
.32f6						done:
.32f6	8a		txa			txa
.32f7	18		clc			clc
.32f8	69 06		adc #$06		adc #6
.32fa	aa		tax			tax
.32fb	60		rts			rts
.32fc					w_x2b:
>32fc	01					.byte $01
>32fd	2b					.text '+'
>32fe						.fill 15
>330d	58 32					.word w_move
.330f					xt_x2b:
.330f	18		clc			clc
.3310	b5 04		lda $04,x		lda pstack+4,x
.3312	75 02		adc $02,x		adc pstack+2,x
.3314	95 04		sta $04,x		sta pstack+4,x
.3316	b5 05		lda $05,x		lda pstack+5,x
.3318	75 03		adc $03,x		adc pstack+3,x
.331a	95 05		sta $05,x		sta pstack+5,x
.331c	e8		inx			inx
.331d	e8		inx			inx
.331e	4c 1c 16	jmp $161c		jmp next
.3321					w_dx2b:
>3321	02					.byte $02
>3322	64 2b					.text 'd+'
>3324						.fill 14
>3332	fc 32					.word w_x2b
.3334					xt_dx2b:
.3334	18		clc			clc
.3335	b5 06		lda $06,x		lda pstack+6,x
.3337	75 02		adc $02,x		adc pstack+2,x
.3339	95 06		sta $06,x		sta pstack+6,x
.333b	b5 07		lda $07,x		lda pstack+7,x
.333d	75 03		adc $03,x		adc pstack+3,x
.333f	95 07		sta $07,x		sta pstack+7,x
.3341	b5 08		lda $08,x		lda pstack+8,x
.3343	75 04		adc $04,x		adc pstack+4,x
.3345	95 08		sta $08,x		sta pstack+8,x
.3347	b5 09		lda $09,x		lda pstack+9,x
.3349	75 05		adc $05,x		adc pstack+5,x
.334b	95 09		sta $09,x		sta pstack+9,x
.334d	e8		inx			inx
.334e	e8		inx			inx
.334f	e8		inx			inx
.3350	e8		inx			inx
.3351	4c 1c 16	jmp $161c		jmp next
.3354					w_dx2d:
>3354	02					.byte $02
>3355	64 2d					.text 'd-'
>3357						.fill 14
>3365	21 33					.word w_dx2b
.3367					xt_dx2d:
.3367	38		sec			sec
.3368	b5 06		lda $06,x		lda pstack+6,x
.336a	f5 02		sbc $02,x		sbc pstack+2,x
.336c	95 06		sta $06,x		sta pstack+6,x
.336e	b5 07		lda $07,x		lda pstack+7,x
.3370	f5 03		sbc $03,x		sbc pstack+3,x
.3372	95 07		sta $07,x		sta pstack+7,x
.3374	b5 08		lda $08,x		lda pstack+8,x
.3376	f5 04		sbc $04,x		sbc pstack+4,x
.3378	95 08		sta $08,x		sta pstack+8,x
.337a	b5 09		lda $09,x		lda pstack+9,x
.337c	f5 05		sbc $05,x		sbc pstack+5,x
.337e	95 09		sta $09,x		sta pstack+9,x
.3380	e8		inx			inx
.3381	e8		inx			inx
.3382	e8		inx			inx
.3383	e8		inx			inx
.3384	4c 1c 16	jmp $161c		jmp next
.3387					w_x2d:
>3387	01					.byte $01
>3388	2d					.text '-'
>3389						.fill 15
>3398	54 33					.word w_dx2d
.339a					xt_x2d:
.339a	38		sec			sec
.339b	b5 04		lda $04,x		lda pstack+4,x
.339d	f5 02		sbc $02,x		sbc pstack+2,x
.339f	95 04		sta $04,x		sta pstack+4,x
.33a1	b5 05		lda $05,x		lda pstack+5,x
.33a3	f5 03		sbc $03,x		sbc pstack+3,x
.33a5	95 05		sta $05,x		sta pstack+5,x
.33a7	e8		inx			inx
.33a8	e8		inx			inx
.33a9	4c 1c 16	jmp $161c		jmp next
.33ac					w_ux2a:
>33ac	02					.byte $02
>33ad	75 2a					.text 'u*'
>33af						.fill 14
>33bd	87 33					.word w_x2d
.33bf					xt_ux2a:
.33bf	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.33c1	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.33c3	8d 01 de	sta $de01		sta $de01
.33c6	b5 04		lda $04,x		lda pstack+4,x
.33c8	8d 00 de	sta $de00		sta $de00
.33cb	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.33cd	8d 03 de	sta $de03		sta $de03
.33d0	b5 02		lda $02,x		lda pstack+2,x
.33d2	8d 02 de	sta $de02		sta $de02
.33d5	e8		inx			inx
.33d6	e8		inx			inx
.33d7	ad 05 de	lda $de05		lda $de05       ; Read the coprocessor unsigned multiplication result
.33da	95 03		sta $03,x		sta pstack+3,x
.33dc	ad 04 de	lda $de04		lda $de04
.33df	95 02		sta $02,x		sta pstack+2,x
.33e1	4c 1c 16	jmp $161c		jmp next
.33e4					w_x2a:
>33e4	01					.byte $01
>33e5	2a					.text '*'
>33e6						.fill 15
>33f5	ac 33					.word w_ux2a
.33f7					xt_x2a:
.33f7	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.33f9	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.33fb	8d 05 de	sta $de05		sta $de05
.33fe	b5 04		lda $04,x		lda pstack+4,x
.3400	8d 04 de	sta $de04		sta $de04
.3403	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.3405	8d 07 de	sta $de07		sta $de07
.3408	b5 02		lda $02,x		lda pstack+2,x
.340a	8d 06 de	sta $de06		sta $de06
.340d	e8		inx			inx
.340e	e8		inx			inx
.340f	ad 0d de	lda $de0d		lda $de0d       ; Read the coprocessor unsigned multiplication result
.3412	95 03		sta $03,x		sta pstack+3,x
.3414	ad 0c de	lda $de0c		lda $de0c
.3417	95 02		sta $02,x		sta pstack+2,x
.3419	4c 1c 16	jmp $161c		jmp next
.341c					w_ux2ax2dsoft:
>341c	07					.byte $07
>341d	75 2a 2d 73 6f 66 74			.text 'u*-soft'
>3424						.fill 9
>342d	e4 33					.word w_x2a
.342f					xt_ux2ax2dsoft:
.342f	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.3431	85 34		sta $34			sta tmp+2
.3433	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.3435						l1:
.3435	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.3437	76 02		ror $02,x		ror pstack+2,x
.3439	90 0b		bcc $3446		bcc l2          ; 0 or 1?
.343b	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.343c	18		clc			clc
.343d	b5 04		lda $04,x		lda pstack+4,x
.343f	65 34		adc $34			adc tmp+2
.3441	85 34		sta $34			sta tmp+2
.3443	98		tya			tya
.3444	75 05		adc $05,x		adc pstack+5,x
.3446						l2:
.3446	6a		ror a			ror A
.3447	66 34		ror $34			ror tmp+2
.3449	66 33		ror $33			ror tmp+1
.344b	66 32		ror $32			ror tmp
.344d	3a		dec a			dec a
.344e	d0 e5		bne $3435		bne l1
.3450	85 35		sta $35			sta tmp+3
.3452	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.3454	95 04		sta $04,x		sta pstack+4,x
.3456	a5 33		lda $33			lda tmp+1
.3458	95 05		sta $05,x		sta pstack+5,x
.345a	e8		inx			inx             ; Clean up parameter stack
.345b	e8		inx			inx
.345c	4c 1c 16	jmp $161c		jmp next
.345f					w_x2ax2dsoft:
>345f	06					.byte $06
>3460	2a 2d 73 6f 66 74			.text '*-soft'
>3466						.fill 10
>3470	1c 34					.word w_ux2ax2dsoft
.3472					xt_x2ax2dsoft:
.3472	64 38		stz $38			stz sign
.3474	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.3476	10 11		bpl $3489		bpl chk_n2
.3478	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.347a	85 38		sta $38			sta sign
.347c	38		sec			sec             ; Negate n1
.347d	a9 00		lda #$00		lda #0
.347f	f5 04		sbc $04,x		sbc pstack+4,x
.3481	95 04		sta $04,x		sta pstack+4,x
.3483	a9 00		lda #$00		lda #0
.3485	f5 05		sbc $05,x		sbc pstack+5,x
.3487	95 05		sta $05,x		sta pstack+5,x
.3489						chk_n2:
.3489	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.348b	10 13		bpl $34a0		bpl init_tmp
.348d	a5 38		lda $38			lda sign        ; Flip the sign bit, if so
.348f	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.3491	85 38		sta $38			sta sign
.3493	38		sec			sec             ; Negate n2
.3494	a9 00		lda #$00		lda #0
.3496	f5 02		sbc $02,x		sbc pstack+2,x
.3498	95 02		sta $02,x		sta pstack+2,x
.349a	a9 00		lda #$00		lda #0
.349c	f5 03		sbc $03,x		sbc pstack+3,x
.349e	95 03		sta $03,x		sta pstack+3,x
.34a0						init_tmp:
.34a0	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.34a2	85 34		sta $34			sta tmp+2
.34a4	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.34a6						l1:
.34a6	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.34a8	76 02		ror $02,x		ror pstack+2,x
.34aa	90 0b		bcc $34b7		bcc l2          ; 0 or 1?
.34ac	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.34ad	18		clc			clc
.34ae	b5 04		lda $04,x		lda pstack+4,x
.34b0	65 34		adc $34			adc tmp+2
.34b2	85 34		sta $34			sta tmp+2
.34b4	98		tya			tya
.34b5	75 05		adc $05,x		adc pstack+5,x
.34b7						l2:
.34b7	6a		ror a			ror A
.34b8	66 34		ror $34			ror tmp+2
.34ba	66 33		ror $33			ror tmp+1
.34bc	66 32		ror $32			ror tmp
.34be	3a		dec a			dec a
.34bf	d0 e5		bne $34a6		bne l1
.34c1	85 35		sta $35			sta tmp+3
.34c3	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.34c5	95 04		sta $04,x		sta pstack+4,x
.34c7	a5 33		lda $33			lda tmp+1
.34c9	95 05		sta $05,x		sta pstack+5,x
.34cb	e8		inx			inx             ; Clean up parameter stack
.34cc	e8		inx			inx
.34cd	a5 38		lda $38			lda sign        ; Check the sign
.34cf	10 0d		bpl $34de		bpl done
.34d1	38		sec			sec             ; If negative, negate result
.34d2	a9 00		lda #$00		lda #0
.34d4	f5 02		sbc $02,x		sbc pstack+2,x
.34d6	95 02		sta $02,x		sta pstack+2,x
.34d8	a9 00		lda #$00		lda #0
.34da	f5 03		sbc $03,x		sbc pstack+3,x
.34dc	95 03		sta $03,x		sta pstack+3,x
.34de						done:
.34de	4c 1c 16	jmp $161c		jmp next
.34e1					w_umx2fmod:
>34e1	06					.byte $06
>34e2	75 6d 2f 6d 6f 64			.text 'um/mod'
>34e8						.fill 10
>34f2	5f 34					.word w_x2ax2dsoft
.34f4					xt_umx2fmod:
.34f4	38		sec			sec
.34f5	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract hi cell of dividend by
.34f7	f5 02		sbc $02,x		sbc     pstack+2,x          ; divisor to see if there's an overflow condition.
.34f9	b5 07		lda $07,x		lda     pstack+7,x
.34fb	f5 03		sbc $03,x		sbc     pstack+3,x
.34fd	b0 2e		bcs $352d		bcs     overflow            ; Branch if /0 or overflow.
.34ff	a9 11		lda #$11		lda     #$11                ; Loop 17x.
.3501	85 32		sta $32			sta     tmp                 ; Use tmp for loop counter.
.3503						loop:
.3503	36 04		rol $04,x		rol     pstack+4,x          ; Rotate dividend lo cell left one bit.
.3505	36 05		rol $05,x		rol     pstack+5,x
.3507	c6 32		dec $32			dec     tmp                 ; Decrement loop counter.
.3509	f0 2c		beq $3537		beq     done                ; If we're done, then branch to end.
.350b	36 06		rol $06,x		rol     pstack+6,x          ; Otherwise rotate dividend hi cell left one bit.
.350d	36 07		rol $07,x		rol     pstack+7,x
.350f	64 33		stz $33			stz     tmp+1
.3511	26 33		rol $33			rol     tmp+1               ; Rotate the bit carried out of above into tmp+1.
.3513	38		sec			sec
.3514	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract dividend hi cell minus divisor.
.3516	f5 02		sbc $02,x		sbc     pstack+2,x
.3518	85 34		sta $34			sta     tmp+2               ; Put result temporarily in tmp+2 (lo byte)
.351a	b5 07		lda $07,x		lda     pstack+7,x
.351c	f5 03		sbc $03,x		sbc     pstack+3,x
.351e	a8		tay			tay                         ; and Y (hi byte).
.351f	a5 33		lda $33			lda     tmp+1               ; Remember now to bring in the bit carried out above.
.3521	e9 00		sbc #$00		sbc     #0
.3523	90 de		bcc $3503		bcc     loop
.3525	a5 34		lda $34			lda     tmp+2               ; If that didn't cause a borrow,
.3527	95 06		sta $06,x		sta     pstack+6,x          ; make the result from above to
.3529	94 07		sty $07,x		sty     pstack+7,x          ; be the new dividend hi cell
.352b	80 d6		bra $3503		bra     loop                ; and then brach up.  (NMOS 6502 can use BCS here.)
.352d						overflow:
.352d	a9 ff		lda #$ff		lda     #$ff                ; If overflow or /0 condition found,
.352f	95 06		sta $06,x		sta     pstack+6,x          ; just put FFFF in both the remainder
.3531	95 07		sta $07,x		sta     pstack+7,x
.3533	95 04		sta $04,x		sta     pstack+4,x          ; and the quotient.
.3535	95 05		sta $05,x		sta     pstack+5,x
.3537						done:
.3537	e8		inx			inx
.3538	e8		inx			inx
.3539	4c 1c 16	jmp $161c		jmp next
.353c					w_sx3ed:
>353c	03					.byte $03
>353d	73 3e 64				.text 's>d'
>3540						.fill 13
>354d	e1 34					.word w_umx2fmod
.354f					xt_sx3ed:
.354f	ca		dex			dex
.3550	ca		dex			dex
.3551	b5 04		lda $04,x		lda pstack+4,x
.3553	95 02		sta $02,x		sta pstack+2,x
.3555	b5 05		lda $05,x		lda pstack+5,x
.3557	95 03		sta $03,x		sta pstack+3,x
.3559	30 07		bmi $3562		bmi is_neg
.355b	74 04		stz $04,x		stz pstack+4,x
.355d	74 05		stz $05,x		stz pstack+5,x
.355f	4c 1c 16	jmp $161c		jmp next
.3562						is_neg:
.3562	a9 ff		lda #$ff		lda #$ff
.3564	95 04		sta $04,x		sta pstack+4,x
.3566	95 05		sta $05,x		sta pstack+5,x
.3568	4c 1c 16	jmp $161c		jmp next
.356b					w_1x2b:
>356b	02					.byte $02
>356c	31 2b					.text '1+'
>356e						.fill 14
>357c	3c 35					.word w_sx3ed
.357e					xt_1x2b:
.357e	f6 02		inc $02,x		inc pstack+2,x
.3580	d0 02		bne $3584		bne skip
.3582	f6 03		inc $03,x		inc pstack+3,x
.3584						skip:
.3584	4c 1c 16	jmp $161c		jmp next
.3587					w_2x2b:
>3587	02					.byte $02
>3588	32 2b					.text '2+'
>358a						.fill 14
>3598	6b 35					.word w_1x2b
.359a					xt_2x2b:
.359a	18		clc			clc
.359b	b5 02		lda $02,x		lda pstack+2,x
.359d	69 02		adc #$02		adc #2
.359f	95 02		sta $02,x		sta pstack+2,x
.35a1	b5 03		lda $03,x		lda pstack+3,x
.35a3	69 00		adc #$00		adc #0
.35a5	95 03		sta $03,x		sta pstack+3,x
.35a7	4c 1c 16	jmp $161c		jmp next
.35aa					w_1x2d:
>35aa	02					.byte $02
>35ab	31 2d					.text '1-'
>35ad						.fill 14
>35bb	87 35					.word w_2x2b
.35bd					xt_1x2d:
.35bd	b5 02		lda $02,x		lda pstack+2,x
.35bf	d0 02		bne $35c3		bne l1
.35c1	d6 03		dec $03,x		dec pstack+3,x
.35c3						l1:
.35c3	d6 02		dec $02,x		dec pstack+2,x
.35c5	4c 1c 16	jmp $161c		jmp next
.35c8					w_2x2d:
>35c8	02					.byte $02
>35c9	32 2d					.text '2-'
>35cb						.fill 14
>35d9	aa 35					.word w_1x2d
.35db					xt_2x2d:
.35db	38		sec			sec
.35dc	b5 02		lda $02,x		lda pstack+2,x
.35de	e9 02		sbc #$02		sbc #2
.35e0	95 02		sta $02,x		sta pstack+2,x
.35e2	b5 03		lda $03,x		lda pstack+3,x
.35e4	e9 00		sbc #$00		sbc #0
.35e6	95 03		sta $03,x		sta pstack+3,x
.35e8	4c 1c 16	jmp $161c		jmp next
.35eb					w_and:
>35eb	03					.byte $03
>35ec	61 6e 64				.text 'and'
>35ef						.fill 13
>35fc	c8 35					.word w_2x2d
.35fe					xt_and:
.35fe	b5 02		lda $02,x		lda pstack+2,x
.3600	35 04		and $04,x		and pstack+4,x
.3602	95 04		sta $04,x		sta pstack+4,x
.3604	b5 03		lda $03,x		lda pstack+3,x
.3606	35 05		and $05,x		and pstack+5,x
.3608	95 05		sta $05,x		sta pstack+5,x
.360a	e8		inx			inx
.360b	e8		inx			inx
.360c	4c 1c 16	jmp $161c		jmp next
.360f					w_or:
>360f	02					.byte $02
>3610	6f 72					.text 'or'
>3612						.fill 14
>3620	eb 35					.word w_and
.3622					xt_or:
.3622	b5 02		lda $02,x		lda pstack+2,x
.3624	15 04		ora $04,x		ora pstack+4,x
.3626	95 04		sta $04,x		sta pstack+4,x
.3628	b5 03		lda $03,x		lda pstack+3,x
.362a	15 05		ora $05,x		ora pstack+5,x
.362c	95 05		sta $05,x		sta pstack+5,x
.362e	e8		inx			inx
.362f	e8		inx			inx
.3630	4c 1c 16	jmp $161c		jmp next
.3633					w_xor:
>3633	03					.byte $03
>3634	78 6f 72				.text 'xor'
>3637						.fill 13
>3644	0f 36					.word w_or
.3646					xt_xor:
.3646	b5 02		lda $02,x		lda pstack+2,x
.3648	55 04		eor $04,x		eor pstack+4,x
.364a	95 04		sta $04,x		sta pstack+4,x
.364c	b5 03		lda $03,x		lda pstack+3,x
.364e	55 05		eor $05,x		eor pstack+5,x
.3650	95 05		sta $05,x		sta pstack+5,x
.3652	e8		inx			inx
.3653	e8		inx			inx
.3654	4c 1c 16	jmp $161c		jmp next
.3657					w_not:
>3657	03					.byte $03
>3658	6e 6f 74				.text 'not'
>365b						.fill 13
>3668	33 36					.word w_xor
.366a					xt_not:
.366a	b5 02		lda $02,x		lda pstack+2,x
.366c	49 ff		eor #$ff		eor #$ff
.366e	95 02		sta $02,x		sta pstack+2,x
.3670	b5 03		lda $03,x		lda pstack+3,x
.3672	49 ff		eor #$ff		eor #$ff
.3674	95 03		sta $03,x		sta pstack+3,x
.3676	4c 1c 16	jmp $161c		jmp next
.3679					w_0x3c:
>3679	02					.byte $02
>367a	30 3c					.text '0<'
>367c						.fill 14
>368a	57 36					.word w_not
.368c					xt_0x3c:
.368c	b5 03		lda $03,x		lda pstack+3,x
.368e	30 07		bmi $3697		bmi istrue
.3690	74 02		stz $02,x		stz pstack+2,x
.3692	74 03		stz $03,x		stz pstack+3,x
.3694	4c 1c 16	jmp $161c		jmp next
.3697						istrue:
.3697	a9 ff		lda #$ff		lda #$ff
.3699	95 02		sta $02,x		sta pstack+2,x
.369b	95 03		sta $03,x		sta pstack+3,x
.369d	4c 1c 16	jmp $161c		jmp next
.36a0					w_0x3d:
>36a0	02					.byte $02
>36a1	30 3d					.text '0='
>36a3						.fill 14
>36b1	79 36					.word w_0x3c
.36b3					xt_0x3d:
.36b3	b5 02		lda $02,x		lda pstack+2,x
.36b5	d0 0d		bne $36c4		bne isfalse
.36b7	b5 03		lda $03,x		lda pstack+3,x
.36b9	d0 09		bne $36c4		bne isfalse
.36bb	a9 ff		lda #$ff		lda #$ff
.36bd	95 02		sta $02,x		sta pstack+2,x
.36bf	95 03		sta $03,x		sta pstack+3,x
.36c1	4c 1c 16	jmp $161c		jmp next
.36c4						isfalse:
.36c4	74 02		stz $02,x		stz pstack+2,x
.36c6	74 03		stz $03,x		stz pstack+3,x
.36c8	4c 1c 16	jmp $161c		jmp next
.36cb					w_0x3e:
>36cb	02					.byte $02
>36cc	30 3e					.text '0>'
>36ce						.fill 14
>36dc	a0 36					.word w_0x3d
.36de					xt_0x3e:
.36de	b5 03		lda $03,x		lda pstack+3,x
.36e0	30 0f		bmi $36f1		bmi isfalse
.36e2	d0 04		bne $36e8		bne istrue
.36e4	b5 02		lda $02,x		lda pstack+2,x
.36e6	f0 09		beq $36f1		beq isfalse
.36e8						istrue:
.36e8	a9 ff		lda #$ff		lda #$ff
.36ea	95 02		sta $02,x		sta pstack+2,x
.36ec	95 03		sta $03,x		sta pstack+3,x
.36ee	4c 1c 16	jmp $161c		jmp next
.36f1						isfalse:
.36f1	74 02		stz $02,x		stz pstack+2,x
.36f3	74 03		stz $03,x		stz pstack+3,x
.36f5	4c 1c 16	jmp $161c		jmp next
.36f8					w_x28variablex29:
>36f8	0a					.byte $0A
>36f9	28 76 61 72 69 61 62 6c			.text '(variable)'
>3701	65 29
>3703						.fill 6
>3709	cb 36					.word w_0x3e
.370b					xt_x28variablex29:
.370b	18		clc			clc                     ; push(wp + 3)
.370c	a5 2a		lda $2a			lda wp
.370e	69 03		adc #$03		adc #3
.3710	95 00		sta $00,x		sta pstack,x
.3712	a5 2b		lda $2b			lda wp+1
.3714	69 00		adc #$00		adc #0
.3716	95 01		sta $01,x		sta pstack+1,x
.3718	ca		dex			dex
.3719	ca		dex			dex
.371a	4c 1c 16	jmp $161c		jmp next
.371d					w_x28constantx29:
>371d	0a					.byte $0A
>371e	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>3726	74 29
>3728						.fill 6
>372e	f8 36					.word w_x28variablex29
.3730					xt_x28constantx29:
.3730	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.3732	b1 2a		lda ($2a),y		lda (wp),y
.3734	95 00		sta $00,x		sta pstack,x
.3736	c8		iny			iny
.3737	b1 2a		lda ($2a),y		lda (wp),y
.3739	95 01		sta $01,x		sta pstack+1,x
.373b	ca		dex			dex
.373c	ca		dex			dex
.373d	4c 1c 16	jmp $161c		jmp next
.3740					w_cells:
>3740	05					.byte $05
>3741	63 65 6c 6c 73				.text 'cells'
>3746						.fill 11
>3751	1d 37					.word w_x28constantx29
.3753					xt_cells:
.3753	4c 30 37	jmp $3730		jmp xt_x28constantx29
>3756	02 00					.word 2
.3758					w_x28userx29:
>3758	06					.byte $06
>3759	28 75 73 65 72 29			.text '(user)'
>375f						.fill 10
>3769	40 37					.word w_cells
.376b					xt_x28userx29:
.376b	18		clc			clc                     ; push(up + memory(wp + 3))
.376c	a0 03		ldy #$03		ldy #3
.376e	a5 2c		lda $2c			lda up
.3770	71 2a		adc ($2a),y		adc (wp),y
.3772	95 00		sta $00,x		sta pstack,x
.3774	c8		iny			iny
.3775	a5 2d		lda $2d			lda up+1
.3777	71 2a		adc ($2a),y		adc (wp),y
.3779	95 01		sta $01,x		sta pstack+1,x
.377b	ca		dex			dex
.377c	ca		dex			dex
.377d	4c 1c 16	jmp $161c		jmp next
.3780					w_x28branchx29:
>3780	08					.byte $08
>3781	28 62 72 61 6e 63 68 29			.text '(branch)'
>3789						.fill 8
>3791	58 37					.word w_x28userx29
.3793					xt_x28branchx29:
.3793	a0 01		ldy #$01		ldy #1              ; ip := branch address
.3795	b2 28		lda ($28)		lda (ip)
.3797	85 32		sta $32			sta tmp
.3799	b1 28		lda ($28),y		lda (ip),y
.379b	85 29		sta $29			sta ip+1
.379d	a5 32		lda $32			lda tmp
.379f	85 28		sta $28			sta ip
.37a1	4c 1c 16	jmp $161c		jmp next
.37a4					w_x28branch0x29:
>37a4	09					.byte $09
>37a5	28 62 72 61 6e 63 68 30			.text '(branch0)'
>37ad	29
>37ae						.fill 7
>37b5	80 37					.word w_x28branchx29
.37b7					xt_x28branch0x29:
.37b7	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.37b9	d0 04		bne $37bf		bne nobranch        ; No: skip over the branch address
.37bb	b5 03		lda $03,x		lda pstack+3,x
.37bd	f0 0f		beq $37ce		beq dobranch        ; Yes: take the branch
.37bf						nobranch:
.37bf	18		clc			clc                 ; No: skip over the branch address
.37c0	a5 28		lda $28			lda ip
.37c2	69 02		adc #$02		adc #2
.37c4	85 28		sta $28			sta ip
.37c6	a5 29		lda $29			lda ip+1
.37c8	69 00		adc #$00		adc #0
.37ca	85 29		sta $29			sta ip+1
.37cc	80 0e		bra $37dc		bra done
.37ce						dobranch:
.37ce	a0 01		ldy #$01		ldy #1              ; ip := branch address
.37d0	b2 28		lda ($28)		lda (ip)
.37d2	85 32		sta $32			sta tmp
.37d4	b1 28		lda ($28),y		lda (ip),y
.37d6	85 29		sta $29			sta ip+1
.37d8	a5 32		lda $32			lda tmp
.37da	85 28		sta $28			sta ip
.37dc						done:
.37dc	e8		inx			inx                 ; clean up the parameter stack
.37dd	e8		inx			inx
.37de	4c 1c 16	jmp $161c		jmp next
.37e1					w_x28dox29:
>37e1	04					.byte $04
>37e2	28 64 6f 29				.text '(do)'
>37e6						.fill 12
>37f2	a4 37					.word w_x28branch0x29
.37f4					xt_x28dox29:
.37f4	b5 03		lda $03,x		lda pstack+3,x
.37f6	48		pha			pha
.37f7	b5 02		lda $02,x		lda pstack+2,x
.37f9	48		pha			pha
.37fa	b5 05		lda $05,x		lda pstack+5,x
.37fc	48		pha			pha
.37fd	b5 04		lda $04,x		lda pstack+4,x
.37ff	48		pha			pha
.3800	18		clc			clc
.3801	8a		txa			txa
.3802	69 04		adc #$04		adc #4
.3804	aa		tax			tax
.3805	4c 1c 16	jmp $161c		jmp next
.3808					w_x3ei:
>3808	02					.byte $02
>3809	3e 69					.text '>i'
>380b						.fill 14
>3819	e1 37					.word w_x28dox29
.381b					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.381b	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.381d	85 33		sta $33			sta tmp+1
.381f	b5 02		lda $02,x		lda pstack+2,x
.3821	85 32		sta $32			sta tmp
.3823	e8		inx			inx
.3824	e8		inx			inx
.3825	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3827	ba		tsx			tsx
.3828	a5 33		lda $33			lda tmp+1           ; current := tmp = n
.382a	9d 04 01	sta $0104,x		sta current+1
.382d	a5 32		lda $32			lda tmp
.382f	9d 03 01	sta $0103,x		sta current
.3832	a6 36		ldx $36			ldx savex
.3834	4c 1c 16	jmp $161c		jmp next
.3837					w_leave:
>3837	05					.byte $05
>3838	6c 65 61 76 65				.text 'leave'
>383d						.fill 11
>3848	08 38					.word w_x3ei
.384a					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.384a	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.384c	ba		tsx			tsx
.384d	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.3850	9d 02 01	sta $0102,x		sta limit+1
.3853	bd 03 01	lda $0103,x		lda current
.3856	9d 01 01	sta $0101,x		sta limit
.3859	a6 36		ldx $36			ldx savex
.385b	4c 1c 16	jmp $161c		jmp next
.385e					w_x28loopx29:
>385e	06					.byte $06
>385f	28 6c 6f 6f 70 29			.text '(loop)'
>3865						.fill 10
>386f	37 38					.word w_leave
.3871					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.3871	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3873	ba		tsx			tsx
.3874	fe 03 01	inc $0103,x		inc current         ; Increment current
.3877	d0 03		bne $387c		bne chk_current
.3879	fe 04 01	inc $0104,x		inc current+1
.387c						chk_current:
.387c	38		sec			sec
.387d	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.3880	fd 02 01	sbc $0102,x		sbc limit+1
.3883	50 02		bvc $3887		bvc label1          ; the equality comparison is in the Z flag here
.3885	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.3887						label1:
.3887	30 23		bmi $38ac		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.3889	50 02		bvc $388d		bvc label2          ; the Z flag was affected only if V is 1
.388b	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc NUM2H
.388d						label2:
.388d	d0 08		bne $3897		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.388f	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.3892	fd 01 01	sbc $0101,x		sbc limit
.3895	90 15		bcc $38ac		bcc dobranch        ; if current < limit then current < limit
.3897						nobranch:
.3897	8a		txa			txa                 ; Yes: Remove the context from the return stack
.3898	18		clc			clc
.3899	69 04		adc #$04		adc #4
.389b	aa		tax			tax
.389c	9a		txs			txs
.389d	18		clc			clc                 ; And skip over the branch address
.389e	a5 28		lda $28			lda ip
.38a0	69 02		adc #$02		adc #2
.38a2	85 28		sta $28			sta ip
.38a4	a5 29		lda $29			lda ip+1
.38a6	69 00		adc #$00		adc #0
.38a8	85 29		sta $29			sta ip+1
.38aa	80 0e		bra $38ba		bra done
.38ac						dobranch:
.38ac	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.38ae	b2 28		lda ($28)		lda (ip)
.38b0	85 32		sta $32			sta tmp
.38b2	b1 28		lda ($28),y		lda (ip),y
.38b4	85 29		sta $29			sta ip+1
.38b6	a5 32		lda $32			lda tmp
.38b8	85 28		sta $28			sta ip
.38ba						done:
.38ba	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.38bc	4c 1c 16	jmp $161c		jmp next
.38bf					w_x28x2bloopx29:
>38bf	07					.byte $07
>38c0	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>38c7						.fill 9
>38d0	5e 38					.word w_x28loopx29
.38d2					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.38d2	b5 03		lda $03,x		lda pstack+3,x      ; Pop n from the stack
.38d4	85 33		sta $33			sta tmp+1
.38d6	b5 02		lda $02,x		lda pstack+2,x
.38d8	85 32		sta $32			sta tmp
.38da	e8		inx			inx
.38db	e8		inx			inx
.38dc	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.38de	ba		tsx			tsx
.38df	18		clc			clc                 ; Increment current by n
.38e0	bd 03 01	lda $0103,x		lda current
.38e3	65 32		adc $32			adc tmp
.38e5	9d 03 01	sta $0103,x		sta current
.38e8	bd 04 01	lda $0104,x		lda current+1
.38eb	65 33		adc $33			adc tmp+1
.38ed	9d 04 01	sta $0104,x		sta current+1
.38f0						chk_current:
.38f0	38		sec			sec
.38f1	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.38f4	fd 02 01	sbc $0102,x		sbc limit+1
.38f7	50 02		bvc $38fb		bvc label1          ; the equality comparison is in the Z flag here
.38f9	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.38fb						label1:
.38fb	30 23		bmi $3920		bmi dobranch        ; if current+1 < limit+1 then current < limit
.38fd	50 02		bvc $3901		bvc label2          ; the Z flag was affected only if V is 1
.38ff	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc current+1
.3901						label2:
.3901	d0 08		bne $390b		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.3903	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.3906	fd 01 01	sbc $0101,x		sbc limit
.3909	90 15		bcc $3920		bcc dobranch        ; if current < limit then current < limit
.390b						nobranch:
.390b	8a		txa			txa                 ; Yes: Remove the context from the return stack
.390c	18		clc			clc
.390d	69 04		adc #$04		adc #4
.390f	aa		tax			tax
.3910	9a		txs			txs
.3911	18		clc			clc                 ; And skip over the branch address
.3912	a5 28		lda $28			lda ip
.3914	69 02		adc #$02		adc #2
.3916	85 28		sta $28			sta ip
.3918	a5 29		lda $29			lda ip+1
.391a	69 00		adc #$00		adc #0
.391c	85 29		sta $29			sta ip+1
.391e	80 0e		bra $392e		bra done
.3920						dobranch:
.3920	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.3922	b2 28		lda ($28)		lda (ip)
.3924	85 32		sta $32			sta tmp
.3926	b1 28		lda ($28),y		lda (ip),y
.3928	85 29		sta $29			sta ip+1
.392a	a5 32		lda $32			lda tmp
.392c	85 28		sta $28			sta ip
.392e						done:
.392e	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.3930	4c 1c 16	jmp $161c		jmp next
.3933					w_i:
>3933	01					.byte $01
>3934	69					.text 'i'
>3935						.fill 15
>3944	bf 38					.word w_x28x2bloopx29
.3946					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.3946	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3948	ba		tsx			tsx
.3949	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.394c	bd 03 01	lda $0103,x		lda current
.394f	a6 36		ldx $36			ldx savex           ; Restore the PSP
.3951	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.3953	95 00		sta $00,x		sta pstack,x
.3955	ca		dex			dex
.3956	ca		dex			dex
.3957	4c 1c 16	jmp $161c		jmp next
.395a					w_x28ofx29:
>395a	04					.byte $04
>395b	28 6f 66 29				.text '(of)'
>395f						.fill 12
>396b	33 39					.word w_i
.396d					xt_x28ofx29:
.396d	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.396f	d5 04		cmp $04,x		cmp pstack+4,x
.3971	d0 1a		bne $398d		bne not_eq
.3973	b5 03		lda $03,x		lda pstack+3,x
.3975	d5 05		cmp $05,x		cmp pstack+5,x
.3977	d0 14		bne $398d		bne not_eq
.3979	e8		inx			inx
.397a	e8		inx			inx
.397b	e8		inx			inx
.397c	e8		inx			inx
.397d	18		clc			clc                 ; Skip over the branch target
.397e	a5 28		lda $28			lda ip
.3980	69 02		adc #$02		adc #2
.3982	85 28		sta $28			sta ip
.3984	a5 29		lda $29			lda ip+1
.3986	69 00		adc #$00		adc #0
.3988	85 29		sta $29			sta ip+1
.398a	4c 1c 16	jmp $161c		jmp next
.398d						not_eq:
.398d	e8		inx			inx                 ; Remove n2 from stack
.398e	e8		inx			inx
.398f	a0 01		ldy #$01		ldy #1              ; Take the branch target
.3991	b2 28		lda ($28)		lda (ip)
.3993	85 32		sta $32			sta tmp
.3995	b1 28		lda ($28),y		lda (ip),y
.3997	85 29		sta $29			sta ip+1
.3999	a5 32		lda $32			lda tmp
.399b	85 28		sta $28			sta ip
.399d	4c 1c 16	jmp $161c		jmp next
.39a0					w_execute:
>39a0	07					.byte $07
>39a1	65 78 65 63 75 74 65			.text 'execute'
>39a8						.fill 9
>39b1	5a 39					.word w_x28ofx29
.39b3					xt_execute:
.39b3	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.39b5	85 2a		sta $2a			sta wp
.39b7	b5 03		lda $03,x		lda pstack+3,x
.39b9	85 2b		sta $2b			sta wp+1
.39bb	e8		inx			inx                 ; Clean up stack
.39bc	e8		inx			inx
.39bd	6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.39c0					w_x28vocabularyx29:
>39c0	0c					.byte $0C
>39c1	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>39c9	61 72 79 29
>39cd						.fill 4
>39d1	a0 39					.word w_execute
.39d3					xt_x28vocabularyx29:
.39d3	18		clc			clc                 ; tmp := up + user_context
.39d4	a5 2c		lda $2c			lda up
.39d6	69 08		adc #$08		adc #user_context
.39d8	85 32		sta $32			sta tmp
.39da	a5 2d		lda $2d			lda up+1
.39dc	69 00		adc #$00		adc #0
.39de	85 33		sta $33			sta tmp+1
.39e0	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.39e2	18		clc			clc
.39e3	a5 2a		lda $2a			lda wp
.39e5	69 03		adc #$03		adc #3
.39e7	92 32		sta ($32)		sta (tmp)
.39e9	a5 2b		lda $2b			lda wp+1
.39eb	69 00		adc #$00		adc #0
.39ed	91 32		sta ($32),y		sta (tmp),y
.39ef	4c 1c 16	jmp $161c		jmp next
.39f2					w_forth:
>39f2	05					.byte $05
>39f3	66 6f 72 74 68				.text 'forth'
>39f8						.fill 11
>3a03	c0 39					.word w_x28vocabularyx29
.3a05					xt_forth:
.3a05	4c d3 39	jmp $39d3		jmp xt_x28vocabularyx29
>3a08	66 49					.word <>w_cold
.3a0a					w_x28findx29:
>3a0a	06					.byte $06
>3a0b	28 66 69 6e 64 29			.text '(find)'
>3a11						.fill 10
>3a1b	f2 39					.word w_forth
.3a1d					xt_x28findx29:
.3a1d	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.3a1f	85 25		sta $25			sta src_ptr+1
.3a21	b5 02		lda $02,x		lda pstack+2,x
.3a23	85 24		sta $24			sta src_ptr
.3a25	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.3a27	85 27		sta $27			sta dst_ptr+1
.3a29	b5 04		lda $04,x		lda pstack+4,x
.3a2b	85 26		sta $26			sta dst_ptr
.3a2d						loop:
.3a2d	a5 24		lda $24			lda src_ptr             ; Check to see if src_ptr = NULL
.3a2f	d0 0d		bne $3a3e		bne not_eod
.3a31	a5 25		lda $25			lda src_ptr+1
.3a33	d0 09		bne $3a3e		bne not_eod
.3a35	e8		inx			inx                     ; Clean up the stack
.3a36	e8		inx			inx
.3a37	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.3a39	74 02		stz $02,x		stz pstack+2,x
.3a3b	4c 1c 16	jmp $161c		jmp next
.3a3e						not_eod:
.3a3e	b2 24		lda ($24)		lda (src_ptr)           ; Get the size of the word in the dictionary
.3a40	29 3f		and #$3f		and #$3f                ; Filter out the flags
.3a42	d2 26		cmp ($26)		cmp (dst_ptr)           ; Check it against the word to search
.3a44	f0 1b		beq $3a61		beq chk_chars           ; If they match, check the characters
.3a46						next_word:
.3a46	18		clc			clc                     ; Move src_ptr to the link field
.3a47	a5 24		lda $24			lda src_ptr
.3a49	69 11		adc #$11		adc #17
.3a4b	85 24		sta $24			sta src_ptr
.3a4d	a5 25		lda $25			lda src_ptr+1
.3a4f	69 00		adc #$00		adc #0
.3a51	85 25		sta $25			sta src_ptr+1
.3a53	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.3a55	b2 24		lda ($24)		lda (src_ptr)
.3a57	48		pha			pha
.3a58	b1 24		lda ($24),y		lda (src_ptr),y
.3a5a	85 25		sta $25			sta src_ptr+1
.3a5c	68		pla			pla
.3a5d	85 24		sta $24			sta src_ptr
.3a5f	80 cc		bra $3a2d		bra loop                ; And check that word
.3a61						chk_chars:
.3a61	a8		tay			tay                     ; y := index to character to check
.3a62						char_loop:
.3a62	b1 24		lda ($24),y		lda (src_ptr),y         ; Check the yth character
.3a64	d1 26		cmp ($26),y		cmp (dst_ptr),y
.3a66	d0 de		bne $3a46		bne next_word           ; If they are not equal, go to the next word in the dictionary
.3a68	88		dey			dey                     ; Move to the previous character in the words
.3a69	d0 f7		bne $3a62		bne char_loop           ; Are we back at the size? No: keep checking
.3a6b	ca		dex			dex                     ; Make room for all the return values
.3a6c	ca		dex			dex
.3a6d	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.3a6f	74 03		stz $03,x		stz pstack+3,x
.3a71	95 02		sta $02,x		sta pstack+2,x
.3a73	b2 26		lda ($26)		lda (dst_ptr)           ; Then the length of the word
.3a75	74 05		stz $05,x		stz pstack+5,x
.3a77	95 04		sta $04,x		sta pstack+4,x
.3a79	18		clc			clc                     ; Then the pfa pointer
.3a7a	a5 24		lda $24			lda src_ptr
.3a7c	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.3a7e	95 06		sta $06,x		sta pstack+6,x
.3a80	a5 25		lda $25			lda src_ptr+1
.3a82	69 00		adc #$00		adc #0
.3a84	95 07		sta $07,x		sta pstack+7,x
.3a86	4c 1c 16	jmp $161c		jmp next
.3a89					w_digit:
>3a89	05					.byte $05
>3a8a	64 69 67 69 74				.text 'digit'
>3a8f						.fill 11
>3a9a	0a 3a					.word w_x28findx29
.3a9c					xt_digit:
.3a9c	b5 04		lda $04,x		lda pstack+4,x          ; Get the character in A
.3a9e	c9 61		cmp #$61		cmp #'a'
.3aa0	90 06		bcc $3aa8		blt get_base
.3aa2	c9 7b		cmp #$7b		cmp #'z'+1
.3aa4	b0 02		bcs $3aa8		bge get_base
.3aa6	29 df		and #$df		and #$df               ; Turn off the case bit
.3aa8						get_base:
.3aa8	b4 02		ldy $02,x		ldy pstack+2,x          ; Get the base into Y
.3aaa	88		dey			dey
.3aab						loop:
.3aab	d9 cb 3a	cmp $3acb,y		cmp digits,y            ; Check to see if we have a match
.3aae	f0 0e		beq $3abe		beq found               ; If so: return the number
.3ab0	88		dey			dey                     ; Move to the previous digit
.3ab1	c0 ff		cpy #$ff		cpy #$ff                ; Have we checked the first digit?
.3ab3	d0 f6		bne $3aab		bne loop                ; No: check against this digit
.3ab5						not_found:
.3ab5	e8		inx			inx                     ; Clean up the stack
.3ab6	e8		inx			inx
.3ab7	74 03		stz $03,x		stz pstack+3,x          ; Return false
.3ab9	74 02		stz $02,x		stz pstack+2,x
.3abb	4c 1c 16	jmp $161c		jmp next
.3abe						found:
.3abe	74 05		stz $05,x		stz pstack+5,x          ; Return the value of the digit
.3ac0	94 04		sty $04,x		sty pstack+4,x
.3ac2	a9 ff		lda #$ff		lda #$ff                ; And the true flag
.3ac4	95 03		sta $03,x		sta pstack+3,x
.3ac6	95 02		sta $02,x		sta pstack+2,x
.3ac8	4c 1c 16	jmp $161c		jmp next
.3acb						digits:
>3acb	30 31 32 33 34 35 36 37			.text "0123456789ABCDEF"
>3ad3	38 39 41 42 43 44 45 46
.3adb					w_pad:
>3adb	03					.byte $03
>3adc	70 61 64				.text 'pad'
>3adf						.fill 13
>3aec	89 3a					.word w_digit
.3aee					xt_pad:
.3aee	a9 90		lda #$90		lda #$90
.3af0	95 01		sta $01,x		sta pstack+1,x
.3af2	74 00		stz $00,x		stz pstack,x
.3af4	ca		dex			dex
.3af5	ca		dex			dex
.3af6	4c 1c 16	jmp $161c		jmp next
.3af9					w_bs:
>3af9	02					.byte $02
>3afa	62 73					.text 'bs'
>3afc						.fill 14
>3b0a	db 3a					.word w_pad
.3b0c					xt_bs:
.3b0c	4c 30 37	jmp $3730		jmp xt_x28constantx29
>3b0f	08 00					.word 8
.3b11					w_nl:
>3b11	02					.byte $02
>3b12	6e 6c					.text 'nl'
>3b14						.fill 14
>3b22	f9 3a					.word w_bs
.3b24					xt_nl:
.3b24	4c 30 37	jmp $3730		jmp xt_x28constantx29
>3b27	0d 00					.word 13
.3b29					w_bl:
>3b29	02					.byte $02
>3b2a	62 6c					.text 'bl'
>3b2c						.fill 14
>3b3a	11 3b					.word w_nl
.3b3c					xt_bl:
.3b3c	4c 30 37	jmp $3730		jmp xt_x28constantx29
>3b3f	20 00					.word 32
.3b41					w_s0:
>3b41	02					.byte $02
>3b42	73 30					.text 's0'
>3b44						.fill 14
>3b52	29 3b					.word w_bl
.3b54					xt_s0:
.3b54	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3b57	00 00					.word 0
.3b59					w_r0:
>3b59	02					.byte $02
>3b5a	72 30					.text 'r0'
>3b5c						.fill 14
>3b6a	41 3b					.word w_s0
.3b6c					xt_r0:
.3b6c	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3b6f	02 00					.word 2
.3b71					w_base:
>3b71	04					.byte $04
>3b72	62 61 73 65				.text 'base'
>3b76						.fill 12
>3b82	59 3b					.word w_r0
.3b84					xt_base:
.3b84	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3b87	04 00					.word 4
.3b89					w_state:
>3b89	05					.byte $05
>3b8a	73 74 61 74 65				.text 'state'
>3b8f						.fill 11
>3b9a	71 3b					.word w_base
.3b9c					xt_state:
.3b9c	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3b9f	06 00					.word 6
.3ba1					w_context:
>3ba1	07					.byte $07
>3ba2	63 6f 6e 74 65 78 74			.text 'context'
>3ba9						.fill 9
>3bb2	89 3b					.word w_state
.3bb4					xt_context:
.3bb4	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3bb7	08 00					.word 8
.3bb9					w_current:
>3bb9	07					.byte $07
>3bba	63 75 72 72 65 6e 74			.text 'current'
>3bc1						.fill 9
>3bca	a1 3b					.word w_context
.3bcc					xt_current:
.3bcc	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3bcf	0a 00					.word 10
.3bd1					w_dp:
>3bd1	02					.byte $02
>3bd2	64 70					.text 'dp'
>3bd4						.fill 14
>3be2	b9 3b					.word w_current
.3be4					xt_dp:
.3be4	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3be7	0c 00					.word 12
.3be9					w_x3ein:
>3be9	03					.byte $03
>3bea	3e 69 6e				.text '>in'
>3bed						.fill 13
>3bfa	d1 3b					.word w_dp
.3bfc					xt_x3ein:
.3bfc	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3bff	0e 00					.word 14
.3c01					w_tib:
>3c01	03					.byte $03
>3c02	74 69 62				.text 'tib'
>3c05						.fill 13
>3c12	e9 3b					.word w_x3ein
.3c14					xt_tib:
.3c14	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c17	10 00					.word 16
.3c19					w_sourcex2did:
>3c19	09					.byte $09
>3c1a	73 6f 75 72 63 65 2d 69			.text 'source-id'
>3c22	64
>3c23						.fill 7
>3c2a	01 3c					.word w_tib
.3c2c					xt_sourcex2did:
.3c2c	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c2f	12 00					.word 18
.3c31					w_blk:
>3c31	03					.byte $03
>3c32	62 6c 6b				.text 'blk'
>3c35						.fill 13
>3c42	19 3c					.word w_sourcex2did
.3c44					xt_blk:
.3c44	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c47	14 00					.word 20
.3c49					w_dpl:
>3c49	03					.byte $03
>3c4a	64 70 6c				.text 'dpl'
>3c4d						.fill 13
>3c5a	31 3c					.word w_blk
.3c5c					xt_dpl:
.3c5c	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c5f	16 00					.word 22
.3c61					w_hld:
>3c61	03					.byte $03
>3c62	68 6c 64				.text 'hld'
>3c65						.fill 13
>3c72	49 3c					.word w_dpl
.3c74					xt_hld:
.3c74	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c77	18 00					.word 24
.3c79					w_handler:
>3c79	07					.byte $07
>3c7a	68 61 6e 64 6c 65 72			.text 'handler'
>3c81						.fill 9
>3c8a	61 3c					.word w_hld
.3c8c					xt_handler:
.3c8c	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3c8f	1a 00					.word 26
.3c91					w_csp:
>3c91	03					.byte $03
>3c92	63 73 70				.text 'csp'
>3c95						.fill 13
>3ca2	79 3c					.word w_handler
.3ca4					xt_csp:
.3ca4	4c 6b 37	jmp $376b		jmp xt_x28userx29
>3ca7	1c 00					.word 28
.3ca9					w_x5b:
>3ca9	c1					.byte $C1
>3caa	5b					.text '['
>3cab						.fill 15
>3cba	91 3c					.word w_csp
.3cbc					xt_x5b:
.3cbc	4c 65 16	jmp $1665		jmp xt_enter
>3cbf	df 18					.word xt_0
>3cc1	9c 3b					.word xt_state
>3cc3	ab 30					.word xt_x21
>3cc5	49 16					.word xt_exit
.3cc7					w_x5d:
>3cc7	c1					.byte $C1
>3cc8	5d					.text ']'
>3cc9						.fill 15
>3cd8	a9 3c					.word w_x5b
.3cda					xt_x5d:
.3cda	4c 65 16	jmp $1665		jmp xt_enter
>3cdd	73 19					.word xt_x28literalx29
>3cdf	c0 00					.word 192
>3ce1	9c 3b					.word xt_state
>3ce3	ab 30					.word xt_x21
>3ce5	49 16					.word xt_exit
.3ce7					w_x3fdup:
>3ce7	04					.byte $04
>3ce8	3f 64 75 70				.text '?dup'
>3cec						.fill 12
>3cf8	c7 3c					.word w_x5d
.3cfa					xt_x3fdup:
.3cfa	4c 65 16	jmp $1665		jmp xt_enter
>3cfd	6a 2f					.word xt_dup
>3cff	b7 37					.word xt_x28branch0x29
>3d01	05 3d					.word l_178
>3d03	6a 2f					.word xt_dup
.3d05					l_178:
>3d05	49 16					.word xt_exit
.3d07					w_rot:
>3d07	03					.byte $03
>3d08	72 6f 74				.text 'rot'
>3d0b						.fill 13
>3d18	e7 3c					.word w_x3fdup
.3d1a					xt_rot:
.3d1a	4c 65 16	jmp $1665		jmp xt_enter
>3d1d	38 30					.word xt_x3er
>3d1f	8a 2f					.word xt_swap
>3d21	56 30					.word xt_rx3e
>3d23	8a 2f					.word xt_swap
>3d25	49 16					.word xt_exit
.3d27					w_2dup:
>3d27	04					.byte $04
>3d28	32 64 75 70				.text '2dup'
>3d2c						.fill 12
>3d38	07 3d					.word w_rot
.3d3a					xt_2dup:
.3d3a	4c 65 16	jmp $1665		jmp xt_enter
>3d3d	ee 2f					.word xt_over
>3d3f	ee 2f					.word xt_over
>3d41	49 16					.word xt_exit
.3d43					w_2drop:
>3d43	05					.byte $05
>3d44	32 64 72 6f 70				.text '2drop'
>3d49						.fill 11
>3d54	27 3d					.word w_2dup
.3d56					xt_2drop:
.3d56	4c 65 16	jmp $1665		jmp xt_enter
>3d59	52 2f					.word xt_drop
>3d5b	52 2f					.word xt_drop
>3d5d	49 16					.word xt_exit
.3d5f					w_x3c:
>3d5f	01					.byte $01
>3d60	3c					.text '<'
>3d61						.fill 15
>3d70	43 3d					.word w_2drop
.3d72					xt_x3c:
.3d72	4c 65 16	jmp $1665		jmp xt_enter
>3d75	9a 33					.word xt_x2d
>3d77	8c 36					.word xt_0x3c
>3d79	49 16					.word xt_exit
.3d7b					w_x3e:
>3d7b	01					.byte $01
>3d7c	3e					.text '>'
>3d7d						.fill 15
>3d8c	5f 3d					.word w_x3c
.3d8e					xt_x3e:
.3d8e	4c 65 16	jmp $1665		jmp xt_enter
>3d91	9a 33					.word xt_x2d
>3d93	de 36					.word xt_0x3e
>3d95	49 16					.word xt_exit
.3d97					w_x3d:
>3d97	01					.byte $01
>3d98	3d					.text '='
>3d99						.fill 15
>3da8	7b 3d					.word w_x3e
.3daa					xt_x3d:
.3daa	4c 65 16	jmp $1665		jmp xt_enter
>3dad	9a 33					.word xt_x2d
>3daf	b3 36					.word xt_0x3d
>3db1	49 16					.word xt_exit
.3db3					w_dx3c:
>3db3	02					.byte $02
>3db4	64 3c					.text 'd<'
>3db6						.fill 14
>3dc4	97 3d					.word w_x3d
.3dc6					xt_dx3c:
.3dc6	4c 65 16	jmp $1665		jmp xt_enter
>3dc9	67 33					.word xt_dx2d
>3dcb	52 2f					.word xt_drop
>3dcd	8c 36					.word xt_0x3c
>3dcf	49 16					.word xt_exit
.3dd1					w_abs:
>3dd1	03					.byte $03
>3dd2	61 62 73				.text 'abs'
>3dd5						.fill 13
>3de2	b3 3d					.word w_dx3c
.3de4					xt_abs:
.3de4	4c 65 16	jmp $1665		jmp xt_enter
>3de7	6a 2f					.word xt_dup
>3de9	8c 36					.word xt_0x3c
>3deb	b7 37					.word xt_x28branch0x29
>3ded	f5 3d					.word l_215
>3def	df 18					.word xt_0
>3df1	8a 2f					.word xt_swap
>3df3	9a 33					.word xt_x2d
.3df5					l_215:
>3df5	49 16					.word xt_exit
.3df7					w_dabs:
>3df7	04					.byte $04
>3df8	64 61 62 73				.text 'dabs'
>3dfc						.fill 12
>3e08	d1 3d					.word w_abs
.3e0a					xt_dabs:
.3e0a	4c 65 16	jmp $1665		jmp xt_enter
>3e0d	ee 2f					.word xt_over
>3e0f	8c 36					.word xt_0x3c
>3e11	b7 37					.word xt_x28branch0x29
>3e13	1d 3e					.word l_222
>3e15	df 18					.word xt_0
>3e17	df 18					.word xt_0
>3e19	b0 2f					.word xt_2swap
>3e1b	67 33					.word xt_dx2d
.3e1d					l_222:
>3e1d	49 16					.word xt_exit
.3e1f					w_x2fmod:
>3e1f	04					.byte $04
>3e20	2f 6d 6f 64				.text '/mod'
>3e24						.fill 12
>3e30	f7 3d					.word w_dabs
.3e32					xt_x2fmod:
.3e32	4c 65 16	jmp $1665		jmp xt_enter
>3e35	49 16					.word xt_exit
.3e37					w_x2f:
>3e37	01					.byte $01
>3e38	2f					.text '/'
>3e39						.fill 15
>3e48	1f 3e					.word w_x2fmod
.3e4a					xt_x2f:
.3e4a	4c 65 16	jmp $1665		jmp xt_enter
>3e4d	32 3e					.word xt_x2fmod
>3e4f	8a 2f					.word xt_swap
>3e51	52 2f					.word xt_drop
>3e53	49 16					.word xt_exit
.3e55					w_mod:
>3e55	03					.byte $03
>3e56	6d 6f 64				.text 'mod'
>3e59						.fill 13
>3e66	37 3e					.word w_x2f
.3e68					xt_mod:
.3e68	4c 65 16	jmp $1665		jmp xt_enter
>3e6b	32 3e					.word xt_x2fmod
>3e6d	52 2f					.word xt_drop
>3e6f	49 16					.word xt_exit
.3e71					w_max:
>3e71	03					.byte $03
>3e72	6d 61 78				.text 'max'
>3e75						.fill 13
>3e82	55 3e					.word w_mod
.3e84					xt_max:
.3e84	4c 65 16	jmp $1665		jmp xt_enter
>3e87	3a 3d					.word xt_2dup
>3e89	72 3d					.word xt_x3c
>3e8b	b7 37					.word xt_x28branch0x29
>3e8d	97 3e					.word l_237
>3e8f	ee 2f					.word xt_over
>3e91	52 2f					.word xt_drop
>3e93	93 37					.word xt_x28branchx29
>3e95	99 3e					.word l_238
.3e97					l_237:
>3e97	52 2f					.word xt_drop
.3e99					l_238:
>3e99	49 16					.word xt_exit
.3e9b					w_min:
>3e9b	03					.byte $03
>3e9c	6d 69 6e				.text 'min'
>3e9f						.fill 13
>3eac	71 3e					.word w_max
.3eae					xt_min:
.3eae	4c 65 16	jmp $1665		jmp xt_enter
>3eb1	3a 3d					.word xt_2dup
>3eb3	8e 3d					.word xt_x3e
>3eb5	b7 37					.word xt_x28branch0x29
>3eb7	c1 3e					.word l_245
>3eb9	ee 2f					.word xt_over
>3ebb	52 2f					.word xt_drop
>3ebd	93 37					.word xt_x28branchx29
>3ebf	c3 3e					.word l_246
.3ec1					l_245:
>3ec1	52 2f					.word xt_drop
.3ec3					l_246:
>3ec3	49 16					.word xt_exit
.3ec5					w_lfa:
>3ec5	03					.byte $03
>3ec6	6c 66 61				.text 'lfa'
>3ec9						.fill 13
>3ed6	9b 3e					.word w_min
.3ed8					xt_lfa:
.3ed8	4c 65 16	jmp $1665		jmp xt_enter
>3edb	73 19					.word xt_x28literalx29
>3edd	05 00					.word 5
>3edf	9a 33					.word xt_x2d
>3ee1	49 16					.word xt_exit
.3ee3					w_cfa:
>3ee3	03					.byte $03
>3ee4	63 66 61				.text 'cfa'
>3ee7						.fill 13
>3ef4	c5 3e					.word w_lfa
.3ef6					xt_cfa:
.3ef6	4c 65 16	jmp $1665		jmp xt_enter
>3ef9	73 19					.word xt_x28literalx29
>3efb	03 00					.word 3
>3efd	9a 33					.word xt_x2d
>3eff	49 16					.word xt_exit
.3f01					w_nfa:
>3f01	03					.byte $03
>3f02	6e 66 61				.text 'nfa'
>3f05						.fill 13
>3f12	e3 3e					.word w_cfa
.3f14					xt_nfa:
.3f14	4c 65 16	jmp $1665		jmp xt_enter
>3f17	73 19					.word xt_x28literalx29
>3f19	16 00					.word 22
>3f1b	9a 33					.word xt_x2d
>3f1d	49 16					.word xt_exit
.3f1f					w_pfa:
>3f1f	03					.byte $03
>3f20	70 66 61				.text 'pfa'
>3f23						.fill 13
>3f30	01 3f					.word w_nfa
.3f32					xt_pfa:
.3f32	4c 65 16	jmp $1665		jmp xt_enter
>3f35	73 19					.word xt_x28literalx29
>3f37	16 00					.word 22
>3f39	0f 33					.word xt_x2b
>3f3b	49 16					.word xt_exit
.3f3d					w_here:
>3f3d	04					.byte $04
>3f3e	68 65 72 65				.text 'here'
>3f42						.fill 12
>3f4e	1f 3f					.word w_pfa
.3f50					xt_here:
.3f50	4c 65 16	jmp $1665		jmp xt_enter
>3f53	e4 3b					.word xt_dp
>3f55	d7 30					.word xt_x40
>3f57	49 16					.word xt_exit
.3f59					w_allot:
>3f59	05					.byte $05
>3f5a	61 6c 6c 6f 74				.text 'allot'
>3f5f						.fill 11
>3f6a	3d 3f					.word w_here
.3f6c					xt_allot:
.3f6c	4c 65 16	jmp $1665		jmp xt_enter
>3f6f	e4 3b					.word xt_dp
>3f71	74 31					.word xt_x2bx21
>3f73	49 16					.word xt_exit
.3f75					w_x2c:
>3f75	01					.byte $01
>3f76	2c					.text ','
>3f77						.fill 15
>3f86	59 3f					.word w_allot
.3f88					xt_x2c:
.3f88	4c 65 16	jmp $1665		jmp xt_enter
>3f8b	50 3f					.word xt_here
>3f8d	ab 30					.word xt_x21
>3f8f	19 19					.word xt_2
>3f91	6c 3f					.word xt_allot
>3f93	49 16					.word xt_exit
.3f95					w_cx2c:
>3f95	02					.byte $02
>3f96	63 2c					.text 'c,'
>3f98						.fill 14
>3fa6	75 3f					.word w_x2c
.3fa8					xt_cx2c:
.3fa8	4c 65 16	jmp $1665		jmp xt_enter
>3fab	50 3f					.word xt_here
>3fad	ff 30					.word xt_cx21
>3faf	fb 18					.word xt_1
>3fb1	6c 3f					.word xt_allot
>3fb3	49 16					.word xt_exit
.3fb5					w_definitions:
>3fb5	0b					.byte $0B
>3fb6	64 65 66 69 6e 69 74 69			.text 'definitions'
>3fbe	6f 6e 73
>3fc1						.fill 5
>3fc6	95 3f					.word w_cx2c
.3fc8					xt_definitions:
.3fc8	4c 65 16	jmp $1665		jmp xt_enter
>3fcb	b4 3b					.word xt_context
>3fcd	d7 30					.word xt_x40
>3fcf	cc 3b					.word xt_current
>3fd1	ab 30					.word xt_x21
>3fd3	49 16					.word xt_exit
.3fd5					w_latest:
>3fd5	06					.byte $06
>3fd6	6c 61 74 65 73 74			.text 'latest'
>3fdc						.fill 10
>3fe6	b5 3f					.word w_definitions
.3fe8					xt_latest:
.3fe8	4c 65 16	jmp $1665		jmp xt_enter
>3feb	cc 3b					.word xt_current
>3fed	d7 30					.word xt_x40
>3fef	d7 30					.word xt_x40
>3ff1	49 16					.word xt_exit
.3ff3					w_count:
>3ff3	05					.byte $05
>3ff4	63 6f 75 6e 74				.text 'count'
>3ff9						.fill 11
>4004	d5 3f					.word w_latest
.4006					xt_count:
.4006	4c 65 16	jmp $1665		jmp xt_enter
>4009	6a 2f					.word xt_dup
>400b	7e 35					.word xt_1x2b
>400d	8a 2f					.word xt_swap
>400f	1d 31					.word xt_cx40
>4011	49 16					.word xt_exit
.4013					w_type:
>4013	04					.byte $04
>4014	74 79 70 65				.text 'type'
>4018						.fill 12
>4024	f3 3f					.word w_count
.4026					xt_type:
.4026	4c 65 16	jmp $1665		jmp xt_enter
>4029	fa 3c					.word xt_x3fdup
>402b	b7 37					.word xt_x28branch0x29
>402d	51 40					.word l_253
>402f	ee 2f					.word xt_over
>4031	0f 33					.word xt_x2b
>4033	8a 2f					.word xt_swap
>4035	f4 37					.word xt_x28dox29
.4037					l_254:
>4037	46 39					.word xt_i
>4039	1d 31					.word xt_cx40
>403b	fa 3c					.word xt_x3fdup
>403d	b7 37					.word xt_x28branch0x29
>403f	47 40					.word l_256
>4041	53 18					.word xt_emit
>4043	93 37					.word xt_x28branchx29
>4045	49 40					.word l_257
.4047					l_256:
>4047	4a 38					.word xt_leave
.4049					l_257:
>4049	71 38					.word xt_x28loopx29
>404b	37 40					.word l_254
.404d					l_255:
>404d	93 37					.word xt_x28branchx29
>404f	53 40					.word l_258
.4051					l_253:
>4051	52 2f					.word xt_drop
.4053					l_258:
>4053	49 16					.word xt_exit
.4055					w_x28x2ex22x29:
>4055	04					.byte $04
>4056	28 2e 22 29				.text '(.")'
>405a						.fill 12
>4066	13 40					.word w_type
.4068					xt_x28x2ex22x29:
.4068	4c 65 16	jmp $1665		jmp xt_enter
>406b	74 30					.word xt_r
>406d	06 40					.word xt_count
>406f	6a 2f					.word xt_dup
>4071	7e 35					.word xt_1x2b
>4073	56 30					.word xt_rx3e
>4075	0f 33					.word xt_x2b
>4077	38 30					.word xt_x3er
>4079	26 40					.word xt_type
>407b	49 16					.word xt_exit
.407d					w_space:
>407d	05					.byte $05
>407e	73 70 61 63 65				.text 'space'
>4083						.fill 11
>408e	55 40					.word w_x28x2ex22x29
.4090					xt_space:
.4090	4c 65 16	jmp $1665		jmp xt_enter
>4093	73 19					.word xt_x28literalx29
>4095	20 00					.word 32
>4097	53 18					.word xt_emit
>4099	49 16					.word xt_exit
.409b					w_spaces:
>409b	06					.byte $06
>409c	73 70 61 63 65 73			.text 'spaces'
>40a2						.fill 10
>40ac	7d 40					.word w_space
.40ae					xt_spaces:
.40ae	4c 65 16	jmp $1665		jmp xt_enter
>40b1	6a 2f					.word xt_dup
>40b3	de 36					.word xt_0x3e
>40b5	b7 37					.word xt_x28branch0x29
>40b7	c7 40					.word l_259
>40b9	df 18					.word xt_0
>40bb	f4 37					.word xt_x28dox29
.40bd					l_260:
>40bd	90 40					.word xt_space
>40bf	71 38					.word xt_x28loopx29
>40c1	bd 40					.word l_260
.40c3					l_261:
>40c3	93 37					.word xt_x28branchx29
>40c5	c9 40					.word l_262
.40c7					l_259:
>40c7	52 2f					.word xt_drop
.40c9					l_262:
>40c9	49 16					.word xt_exit
.40cb					w_expect:
>40cb	06					.byte $06
>40cc	65 78 70 65 63 74			.text 'expect'
>40d2						.fill 10
>40dc	9b 40					.word w_spaces
.40de					xt_expect:
.40de	4c 65 16	jmp $1665		jmp xt_enter
>40e1	ee 2f					.word xt_over
>40e3	0f 33					.word xt_x2b
>40e5	ee 2f					.word xt_over
>40e7	f4 37					.word xt_x28dox29
.40e9					l_263:
>40e9	9d 18					.word xt_key
>40eb	0c 3b					.word xt_bs
>40ed	6d 39					.word xt_x28ofx29
>40ef	1b 41					.word l_266
>40f1	6a 2f					.word xt_dup
>40f3	46 39					.word xt_i
>40f5	aa 3d					.word xt_x3d
>40f7	6a 36					.word xt_not
>40f9	b7 37					.word xt_x28branch0x29
>40fb	17 41					.word l_267
>40fd	0c 3b					.word xt_bs
>40ff	53 18					.word xt_emit
>4101	3c 3b					.word xt_bl
>4103	53 18					.word xt_emit
>4105	0c 3b					.word xt_bs
>4107	53 18					.word xt_emit
>4109	df 18					.word xt_0
>410b	46 39					.word xt_i
>410d	bd 35					.word xt_1x2d
>410f	ff 30					.word xt_cx21
>4111	46 39					.word xt_i
>4113	db 35					.word xt_2x2d
>4115	1b 38					.word xt_x3ei
.4117					l_267:
>4117	93 37					.word xt_x28branchx29
>4119	41 41					.word l_265
.411b					l_266:
>411b	24 3b					.word xt_nl
>411d	6d 39					.word xt_x28ofx29
>411f	2d 41					.word l_268
>4121	df 18					.word xt_0
>4123	46 39					.word xt_i
>4125	ff 30					.word xt_cx21
>4127	4a 38					.word xt_leave
>4129	93 37					.word xt_x28branchx29
>412b	41 41					.word l_265
.412d					l_268:
>412d	6a 2f					.word xt_dup
>412f	6a 2f					.word xt_dup
>4131	46 39					.word xt_i
>4133	ff 30					.word xt_cx21
>4135	df 18					.word xt_0
>4137	46 39					.word xt_i
>4139	7e 35					.word xt_1x2b
>413b	ff 30					.word xt_cx21
>413d	53 18					.word xt_emit
>413f	52 2f					.word xt_drop
.4141					l_265:
>4141	71 38					.word xt_x28loopx29
>4143	e9 40					.word l_263
.4145					l_264:
>4145	52 2f					.word xt_drop
>4147	49 16					.word xt_exit
.4149					w_query:
>4149	05					.byte $05
>414a	71 75 65 72 79				.text 'query'
>414f						.fill 11
>415a	cb 40					.word w_expect
.415c					xt_query:
.415c	4c 65 16	jmp $1665		jmp xt_enter
>415f	14 3c					.word xt_tib
>4161	d7 30					.word xt_x40
>4163	73 19					.word xt_x28literalx29
>4165	50 00					.word 80
>4167	de 40					.word xt_expect
>4169	df 18					.word xt_0
>416b	fc 3b					.word xt_x3ein
>416d	ab 30					.word xt_x21
>416f	49 16					.word xt_exit
.4171					w_erase:
>4171	05					.byte $05
>4172	65 72 61 73 65				.text 'erase'
>4177						.fill 11
>4182	49 41					.word w_query
.4184					xt_erase:
.4184	4c 65 16	jmp $1665		jmp xt_enter
>4187	df 18					.word xt_0
>4189	39 31					.word xt_fill
>418b	49 16					.word xt_exit
.418d					w_blanks:
>418d	06					.byte $06
>418e	62 6c 61 6e 6b 73			.text 'blanks'
>4194						.fill 10
>419e	71 41					.word w_erase
.41a0					xt_blanks:
.41a0	4c 65 16	jmp $1665		jmp xt_enter
>41a3	3c 3b					.word xt_bl
>41a5	39 31					.word xt_fill
>41a7	49 16					.word xt_exit
.41a9					w_word:
>41a9	04					.byte $04
>41aa	77 6f 72 64				.text 'word'
>41ae						.fill 12
>41ba	8d 41					.word w_blanks
.41bc					xt_word:
.41bc	4c 65 16	jmp $1665		jmp xt_enter
>41bf	14 3c					.word xt_tib
>41c1	d7 30					.word xt_x40
>41c3	fc 3b					.word xt_x3ein
>41c5	d7 30					.word xt_x40
>41c7	0f 33					.word xt_x2b
>41c9	8a 2f					.word xt_swap
>41cb	a5 31					.word xt_enclose
>41cd	df 18					.word xt_0
>41cf	50 3f					.word xt_here
>41d1	ab 30					.word xt_x21
>41d3	fc 3b					.word xt_x3ein
>41d5	74 31					.word xt_x2bx21
>41d7	ee 2f					.word xt_over
>41d9	9a 33					.word xt_x2d
>41db	38 30					.word xt_x3er
>41dd	74 30					.word xt_r
>41df	50 3f					.word xt_here
>41e1	ff 30					.word xt_cx21
>41e3	0f 33					.word xt_x2b
>41e5	50 3f					.word xt_here
>41e7	7e 35					.word xt_1x2b
>41e9	56 30					.word xt_rx3e
>41eb	1b 32					.word xt_cmove
>41ed	3c 3b					.word xt_bl
>41ef	50 3f					.word xt_here
>41f1	06 40					.word xt_count
>41f3	0f 33					.word xt_x2b
>41f5	ff 30					.word xt_cx21
>41f7	49 16					.word xt_exit
.41f9					w_x2dfind:
>41f9	05					.byte $05
>41fa	2d 66 69 6e 64				.text '-find'
>41ff						.fill 11
>420a	a9 41					.word w_word
.420c					xt_x2dfind:
.420c	4c 65 16	jmp $1665		jmp xt_enter
>420f	3c 3b					.word xt_bl
>4211	bc 41					.word xt_word
>4213	50 3f					.word xt_here
>4215	b4 3b					.word xt_context
>4217	d7 30					.word xt_x40
>4219	d7 30					.word xt_x40
>421b	1d 3a					.word xt_x28findx29
>421d	6a 2f					.word xt_dup
>421f	b3 36					.word xt_0x3d
>4221	b7 37					.word xt_x28branch0x29
>4223	2d 42					.word l_269
>4225	52 2f					.word xt_drop
>4227	50 3f					.word xt_here
>4229	e8 3f					.word xt_latest
>422b	1d 3a					.word xt_x28findx29
.422d					l_269:
>422d	49 16					.word xt_exit
.422f					w_decimal:
>422f	07					.byte $07
>4230	64 65 63 69 6d 61 6c			.text 'decimal'
>4237						.fill 9
>4240	f9 41					.word w_x2dfind
.4242					xt_decimal:
.4242	4c 65 16	jmp $1665		jmp xt_enter
>4245	73 19					.word xt_x28literalx29
>4247	0a 00					.word 10
>4249	84 3b					.word xt_base
>424b	ab 30					.word xt_x21
>424d	49 16					.word xt_exit
.424f					w_hex:
>424f	03					.byte $03
>4250	68 65 78				.text 'hex'
>4253						.fill 13
>4260	2f 42					.word w_decimal
.4262					xt_hex:
.4262	4c 65 16	jmp $1665		jmp xt_enter
>4265	73 19					.word xt_x28literalx29
>4267	10 00					.word 16
>4269	84 3b					.word xt_base
>426b	ab 30					.word xt_x21
>426d	49 16					.word xt_exit
.426f					w_octal:
>426f	05					.byte $05
>4270	6f 63 74 61 6c				.text 'octal'
>4275						.fill 11
>4280	4f 42					.word w_hex
.4282					xt_octal:
.4282	4c 65 16	jmp $1665		jmp xt_enter
>4285	73 19					.word xt_x28literalx29
>4287	08 00					.word 8
>4289	84 3b					.word xt_base
>428b	ab 30					.word xt_x21
>428d	49 16					.word xt_exit
.428f					w_x2e:
>428f	01					.byte $01
>4290	2e					.text '.'
>4291						.fill 15
>42a0	6f 42					.word w_octal
.42a2					xt_x2e:
.42a2	4c 65 16	jmp $1665		jmp xt_enter
>42a5	4f 35					.word xt_sx3ed
>42a7	be 44					.word xt_dx2e
>42a9	49 16					.word xt_exit
.42ab					w_x28numberx29:
>42ab	08					.byte $08
>42ac	28 6e 75 6d 62 65 72 29			.text '(number)'
>42b4						.fill 8
>42bc	8f 42					.word w_x2e
.42be					xt_x28numberx29:
.42be	4c 65 16	jmp $1665		jmp xt_enter
.42c1					l_270:
>42c1	6a 2f					.word xt_dup
>42c3	38 30					.word xt_x3er
>42c5	1d 31					.word xt_cx40
>42c7	84 3b					.word xt_base
>42c9	d7 30					.word xt_x40
>42cb	9c 3a					.word xt_digit
>42cd	b7 37					.word xt_x28branch0x29
>42cf	e7 42					.word l_271
>42d1	38 30					.word xt_x3er
>42d3	84 3b					.word xt_base
>42d5	d7 30					.word xt_x40
>42d7	bf 33					.word xt_ux2a
>42d9	56 30					.word xt_rx3e
>42db	4f 35					.word xt_sx3ed
>42dd	34 33					.word xt_dx2b
>42df	56 30					.word xt_rx3e
>42e1	7e 35					.word xt_1x2b
>42e3	93 37					.word xt_x28branchx29
>42e5	c1 42					.word l_270
.42e7					l_271:
>42e7	56 30					.word xt_rx3e
>42e9	49 16					.word xt_exit
.42eb					w_x3ferror:
>42eb	06					.byte $06
>42ec	3f 65 72 72 6f 72			.text '?error'
>42f2						.fill 10
>42fc	ab 42					.word w_x28numberx29
.42fe					xt_x3ferror:
.42fe	4c 65 16	jmp $1665		jmp xt_enter
>4301	8a 2f					.word xt_swap
>4303	b7 37					.word xt_x28branch0x29
>4305	0d 43					.word l_293
>4307	82 46					.word xt_error
>4309	93 37					.word xt_x28branchx29
>430b	0f 43					.word l_294
.430d					l_293:
>430d	52 2f					.word xt_drop
.430f					l_294:
>430f	49 16					.word xt_exit
.4311					w_number:
>4311	06					.byte $06
>4312	6e 75 6d 62 65 72			.text 'number'
>4318						.fill 10
>4322	eb 42					.word w_x3ferror
.4324					xt_number:
.4324	4c 65 16	jmp $1665		jmp xt_enter
>4327	df 18					.word xt_0
>4329	df 18					.word xt_0
>432b	1a 3d					.word xt_rot
>432d	6a 2f					.word xt_dup
>432f	1d 31					.word xt_cx40
>4331	73 19					.word xt_x28literalx29
>4333	2d 00					.word 45
>4335	aa 3d					.word xt_x3d
>4337	b7 37					.word xt_x28branch0x29
>4339	43 43					.word l_272
>433b	fb 18					.word xt_1
>433d	38 30					.word xt_x3er
>433f	93 37					.word xt_x28branchx29
>4341	4b 43					.word l_273
.4343					l_272:
>4343	df 18					.word xt_0
>4345	38 30					.word xt_x3er
>4347	fb 18					.word xt_1
>4349	0f 33					.word xt_x2b
.434b					l_273:
>434b	37 19					.word xt_x2d1
.434d					l_274:
>434d	5c 3c					.word xt_dpl
>434f	ab 30					.word xt_x21
>4351	be 42					.word xt_x28numberx29
>4353	6a 2f					.word xt_dup
>4355	1d 31					.word xt_cx40
>4357	3c 3b					.word xt_bl
>4359	9a 33					.word xt_x2d
>435b	b7 37					.word xt_x28branch0x29
>435d	79 43					.word l_275
>435f	6a 2f					.word xt_dup
>4361	1d 31					.word xt_cx40
>4363	73 19					.word xt_x28literalx29
>4365	2e 00					.word 46
>4367	9a 33					.word xt_x2d
>4369	b7 37					.word xt_x28branch0x29
>436b	73 43					.word l_276
>436d	73 19					.word xt_x28literalx29
>436f	f3 ff					.word 65523
>4371	fe 42					.word xt_x3ferror
.4373					l_276:
>4373	df 18					.word xt_0
>4375	93 37					.word xt_x28branchx29
>4377	4d 43					.word l_274
.4379					l_275:
>4379	52 2f					.word xt_drop
>437b	56 30					.word xt_rx3e
>437d	b7 37					.word xt_x28branch0x29
>437f	89 43					.word l_277
>4381	df 18					.word xt_0
>4383	df 18					.word xt_0
>4385	b0 2f					.word xt_2swap
>4387	67 33					.word xt_dx2d
.4389					l_277:
>4389	49 16					.word xt_exit
.438b					w_x3cx23:
>438b	02					.byte $02
>438c	3c 23					.text '<#'
>438e						.fill 14
>439c	11 43					.word w_number
.439e					xt_x3cx23:
.439e	4c 65 16	jmp $1665		jmp xt_enter
>43a1	ee 3a					.word xt_pad
>43a3	74 3c					.word xt_hld
>43a5	ab 30					.word xt_x21
>43a7	49 16					.word xt_exit
.43a9					w_hold:
>43a9	04					.byte $04
>43aa	68 6f 6c 64				.text 'hold'
>43ae						.fill 12
>43ba	8b 43					.word w_x3cx23
.43bc					xt_hold:
.43bc	4c 65 16	jmp $1665		jmp xt_enter
>43bf	37 19					.word xt_x2d1
>43c1	74 3c					.word xt_hld
>43c3	74 31					.word xt_x2bx21
>43c5	74 3c					.word xt_hld
>43c7	d7 30					.word xt_x40
>43c9	ff 30					.word xt_cx21
>43cb	49 16					.word xt_exit
.43cd					w_x23:
>43cd	01					.byte $01
>43ce	23					.text '#'
>43cf						.fill 15
>43de	a9 43					.word w_hold
.43e0					xt_x23:
.43e0	4c 65 16	jmp $1665		jmp xt_enter
>43e3	84 3b					.word xt_base
>43e5	d7 30					.word xt_x40
>43e7	f4 34					.word xt_umx2fmod
>43e9	4f 35					.word xt_sx3ed
>43eb	1a 3d					.word xt_rot
>43ed	73 19					.word xt_x28literalx29
>43ef	09 00					.word 9
>43f1	ee 2f					.word xt_over
>43f3	72 3d					.word xt_x3c
>43f5	b7 37					.word xt_x28branch0x29
>43f7	ff 43					.word l_278
>43f9	73 19					.word xt_x28literalx29
>43fb	07 00					.word 7
>43fd	0f 33					.word xt_x2b
.43ff					l_278:
>43ff	73 19					.word xt_x28literalx29
>4401	30 00					.word 48
>4403	0f 33					.word xt_x2b
>4405	bc 43					.word xt_hold
>4407	49 16					.word xt_exit
.4409					w_x23s:
>4409	02					.byte $02
>440a	23 73					.text '#s'
>440c						.fill 14
>441a	cd 43					.word w_x23
.441c					xt_x23s:
.441c	4c 65 16	jmp $1665		jmp xt_enter
.441f					l_279:
>441f	e0 43					.word xt_x23
>4421	ee 2f					.word xt_over
>4423	ee 2f					.word xt_over
>4425	22 36					.word xt_or
>4427	b3 36					.word xt_0x3d
>4429	b7 37					.word xt_x28branch0x29
>442b	1f 44					.word l_279
.442d					l_280:
>442d	49 16					.word xt_exit
.442f					w_sign:
>442f	04					.byte $04
>4430	73 69 67 6e				.text 'sign'
>4434						.fill 12
>4440	09 44					.word w_x23s
.4442					xt_sign:
.4442	4c 65 16	jmp $1665		jmp xt_enter
>4445	1a 3d					.word xt_rot
>4447	8c 36					.word xt_0x3c
>4449	b7 37					.word xt_x28branch0x29
>444b	53 44					.word l_281
>444d	73 19					.word xt_x28literalx29
>444f	2d 00					.word 45
>4451	bc 43					.word xt_hold
.4453					l_281:
>4453	49 16					.word xt_exit
.4455					w_x23x3e:
>4455	02					.byte $02
>4456	23 3e					.text '#>'
>4458						.fill 14
>4466	2f 44					.word w_sign
.4468					xt_x23x3e:
.4468	4c 65 16	jmp $1665		jmp xt_enter
>446b	56 3d					.word xt_2drop
>446d	74 3c					.word xt_hld
>446f	d7 30					.word xt_x40
>4471	ee 3a					.word xt_pad
>4473	ee 2f					.word xt_over
>4475	9a 33					.word xt_x2d
>4477	49 16					.word xt_exit
.4479					w_dx2er:
>4479	03					.byte $03
>447a	64 2e 72				.text 'd.r'
>447d						.fill 13
>448a	55 44					.word w_x23x3e
.448c					xt_dx2er:
.448c	4c 65 16	jmp $1665		jmp xt_enter
>448f	38 30					.word xt_x3er
>4491	ee 2f					.word xt_over
>4493	8a 2f					.word xt_swap
>4495	0a 3e					.word xt_dabs
>4497	9e 43					.word xt_x3cx23
>4499	1c 44					.word xt_x23s
>449b	42 44					.word xt_sign
>449d	68 44					.word xt_x23x3e
>449f	56 30					.word xt_rx3e
>44a1	ee 2f					.word xt_over
>44a3	9a 33					.word xt_x2d
>44a5	ae 40					.word xt_spaces
>44a7	26 40					.word xt_type
>44a9	49 16					.word xt_exit
.44ab					w_dx2e:
>44ab	02					.byte $02
>44ac	64 2e					.text 'd.'
>44ae						.fill 14
>44bc	79 44					.word w_dx2er
.44be					xt_dx2e:
.44be	4c 65 16	jmp $1665		jmp xt_enter
>44c1	df 18					.word xt_0
>44c3	8c 44					.word xt_dx2er
>44c5	49 16					.word xt_exit
.44c7					w_x2er:
>44c7	02					.byte $02
>44c8	2e 72					.text '.r'
>44ca						.fill 14
>44d8	ab 44					.word w_dx2e
.44da					xt_x2er:
.44da	4c 65 16	jmp $1665		jmp xt_enter
>44dd	38 30					.word xt_x3er
>44df	4f 35					.word xt_sx3ed
>44e1	56 30					.word xt_rx3e
>44e3	8c 44					.word xt_dx2er
>44e5	49 16					.word xt_exit
.44e7					w_x3f:
>44e7	01					.byte $01
>44e8	3f					.text '?'
>44e9						.fill 15
>44f8	c7 44					.word w_x2er
.44fa					xt_x3f:
.44fa	4c 65 16	jmp $1665		jmp xt_enter
>44fd	d7 30					.word xt_x40
>44ff	a2 42					.word xt_x2e
>4501	49 16					.word xt_exit
.4503					w_dump:
>4503	04					.byte $04
>4504	64 75 6d 70				.text 'dump'
>4508						.fill 12
>4514	e7 44					.word w_x3f
.4516					xt_dump:
.4516	4c 65 16	jmp $1665		jmp xt_enter
>4519	df 18					.word xt_0
>451b	f4 37					.word xt_x28dox29
.451d					l_282:
>451d	c2 18					.word xt_cr
>451f	6a 2f					.word xt_dup
>4521	df 18					.word xt_0
>4523	8a 2f					.word xt_swap
>4525	73 19					.word xt_x28literalx29
>4527	05 00					.word 5
>4529	8c 44					.word xt_dx2er
>452b	73 19					.word xt_x28literalx29
>452d	3a 00					.word 58
>452f	53 18					.word xt_emit
>4531	73 19					.word xt_x28literalx29
>4533	08 00					.word 8
>4535	df 18					.word xt_0
>4537	f4 37					.word xt_x28dox29
.4539					l_284:
>4539	6a 2f					.word xt_dup
>453b	d7 30					.word xt_x40
>453d	df 18					.word xt_0
>453f	8a 2f					.word xt_swap
>4541	73 19					.word xt_x28literalx29
>4543	05 00					.word 5
>4545	8c 44					.word xt_dx2er
>4547	9a 35					.word xt_2x2b
>4549	71 38					.word xt_x28loopx29
>454b	39 45					.word l_284
.454d					l_285:
>454d	73 19					.word xt_x28literalx29
>454f	08 00					.word 8
>4551	d2 38					.word xt_x28x2bloopx29
>4553	1d 45					.word l_282
.4555					l_283:
>4555	52 2f					.word xt_drop
>4557	49 16					.word xt_exit
.4559					w_interpret:
>4559	09					.byte $09
>455a	69 6e 74 65 72 70 72 65			.text 'interpret'
>4562	74
>4563						.fill 7
>456a	03 45					.word w_dump
.456c					xt_interpret:
.456c	4c 65 16	jmp $1665		jmp xt_enter
.456f					l_296:
>456f	14 3c					.word xt_tib
>4571	d7 30					.word xt_x40
>4573	fc 3b					.word xt_x3ein
>4575	d7 30					.word xt_x40
>4577	0f 33					.word xt_x2b
>4579	1d 31					.word xt_cx40
>457b	b7 37					.word xt_x28branch0x29
>457d	bd 45					.word l_297
>457f	0c 42					.word xt_x2dfind
>4581	b7 37					.word xt_x28branch0x29
>4583	9f 45					.word l_298
>4585	9c 3b					.word xt_state
>4587	d7 30					.word xt_x40
>4589	72 3d					.word xt_x3c
>458b	b7 37					.word xt_x28branch0x29
>458d	97 45					.word l_299
>458f	f6 3e					.word xt_cfa
>4591	88 3f					.word xt_x2c
>4593	93 37					.word xt_x28branchx29
>4595	9b 45					.word l_300
.4597					l_299:
>4597	f6 3e					.word xt_cfa
>4599	b3 39					.word xt_execute
.459b					l_300:
>459b	93 37					.word xt_x28branchx29
>459d	b9 45					.word l_301
.459f					l_298:
>459f	50 3f					.word xt_here
>45a1	24 43					.word xt_number
>45a3	8a 2f					.word xt_swap
>45a5	52 2f					.word xt_drop
>45a7	9c 3b					.word xt_state
>45a9	d7 30					.word xt_x40
>45ab	b7 37					.word xt_x28branch0x29
>45ad	b9 45					.word l_302
>45af	73 19					.word xt_x28literalx29
>45b1	73 19					.word xt_x28literalx29
>45b3	88 3f					.word xt_x2c
>45b5	88 3f					.word xt_x2c
>45b7	2f 17					.word xt_halt
.45b9					l_302:
.45b9					l_301:
>45b9	93 37					.word xt_x28branchx29
>45bb	6f 45					.word l_296
.45bd					l_297:
>45bd	49 16					.word xt_exit
.45bf					w_catch:
>45bf	05					.byte $05
>45c0	63 61 74 63 68				.text 'catch'
>45c5						.fill 11
>45d0	59 45					.word w_interpret
.45d2					xt_catch:
.45d2	4c 65 16	jmp $1665		jmp xt_enter
>45d5	1b 18					.word xt_spx40
>45d7	38 30					.word xt_x3er
>45d9	8c 3c					.word xt_handler
>45db	d7 30					.word xt_x40
>45dd	38 30					.word xt_x3er
>45df	d4 17					.word xt_rpx40
>45e1	8c 3c					.word xt_handler
>45e3	ab 30					.word xt_x21
>45e5	b3 39					.word xt_execute
>45e7	56 30					.word xt_rx3e
>45e9	8c 3c					.word xt_handler
>45eb	ab 30					.word xt_x21
>45ed	56 30					.word xt_rx3e
>45ef	52 2f					.word xt_drop
>45f1	df 18					.word xt_0
>45f3	49 16					.word xt_exit
.45f5					w_throw:
>45f5	05					.byte $05
>45f6	74 68 72 6f 77				.text 'throw'
>45fb						.fill 11
>4606	bf 45					.word w_catch
.4608					xt_throw:
.4608	4c 65 16	jmp $1665		jmp xt_enter
>460b	fa 3c					.word xt_x3fdup
>460d	b7 37					.word xt_x28branch0x29
>460f	29 46					.word l_286
>4611	8c 3c					.word xt_handler
>4613	d7 30					.word xt_x40
>4615	fb 17					.word xt_rpx21
>4617	56 30					.word xt_rx3e
>4619	8c 3c					.word xt_handler
>461b	ab 30					.word xt_x21
>461d	56 30					.word xt_rx3e
>461f	8a 2f					.word xt_swap
>4621	38 30					.word xt_x3er
>4623	3a 18					.word xt_spx21
>4625	52 2f					.word xt_drop
>4627	56 30					.word xt_rx3e
.4629					l_286:
>4629	49 16					.word xt_exit
.462b					w_quit:
>462b	04					.byte $04
>462c	71 75 69 74				.text 'quit'
>4630						.fill 12
>463c	f5 45					.word w_throw
.463e					xt_quit:
.463e	4c 65 16	jmp $1665		jmp xt_enter
>4641	05 3a					.word xt_forth
>4643	c8 3f					.word xt_definitions
>4645	df 18					.word xt_0
>4647	9c 3b					.word xt_state
>4649	ab 30					.word xt_x21
.464b					l_287:
>464b	c2 18					.word xt_cr
>464d	9c 3b					.word xt_state
>464f	d7 30					.word xt_x40
>4651	b3 36					.word xt_0x3d
>4653	b7 37					.word xt_x28branch0x29
>4655	63 46					.word l_289
>4657	c2 18					.word xt_cr
>4659	73 19					.word xt_x28literalx29
>465b	3e 00					.word 62
>465d	53 18					.word xt_emit
>465f	3c 3b					.word xt_bl
>4661	53 18					.word xt_emit
.4663					l_289:
>4663	5c 41					.word xt_query
>4665	c2 18					.word xt_cr
>4667	6c 45					.word xt_interpret
>4669	93 37					.word xt_x28branchx29
>466b	4b 46					.word l_287
.466d					l_288:
>466d	49 16					.word xt_exit
.466f					w_error:
>466f	05					.byte $05
>4670	65 72 72 6f 72				.text 'error'
>4675						.fill 11
>4680	2b 46					.word w_quit
.4682					xt_error:
.4682	4c 65 16	jmp $1665		jmp xt_enter
>4685	6a 2f					.word xt_dup
>4687	b3 36					.word xt_0x3d
>4689	6a 36					.word xt_not
>468b	b7 37					.word xt_x28branch0x29
>468d	a0 46					.word l_290
>468f	50 3f					.word xt_here
>4691	06 40					.word xt_count
>4693	26 40					.word xt_type
>4695	68 40					.word xt_x28x2ex22x29
>4697	06 3f 20 4d 53 47 23			.ptext "? MSG#"
>469e	a2 42					.word xt_x2e
.46a0					l_290:
>46a0	3e 46					.word xt_quit
>46a2	49 16					.word xt_exit
.46a4					w_x3fcsp:
>46a4	04					.byte $04
>46a5	3f 63 73 70				.text '?csp'
>46a9						.fill 12
>46b5	6f 46					.word w_error
.46b7					xt_x3fcsp:
.46b7	4c 65 16	jmp $1665		jmp xt_enter
>46ba	a4 3c					.word xt_csp
>46bc	d7 30					.word xt_x40
>46be	1b 18					.word xt_spx40
>46c0	9a 33					.word xt_x2d
>46c2	b7 37					.word xt_x28branch0x29
>46c4	d0 46					.word l_295
>46c6	df 18					.word xt_0
>46c8	73 19					.word xt_x28literalx29
>46ca	19 00					.word 25
>46cc	9a 33					.word xt_x2d
>46ce	82 46					.word xt_error
.46d0					l_295:
>46d0	49 16					.word xt_exit
.46d2					w_create:
>46d2	06					.byte $06
>46d3	63 72 65 61 74 65			.text 'create'
>46d9						.fill 10
>46e3	a4 46					.word w_x3fcsp
.46e5					xt_create:
.46e5	4c 65 16	jmp $1665		jmp xt_enter
>46e8	3c 3b					.word xt_bl
>46ea	bc 41					.word xt_word
>46ec	e8 3f					.word xt_latest
>46ee	88 3f					.word xt_x2c
>46f0	50 3f					.word xt_here
>46f2	cc 3b					.word xt_current
>46f4	d7 30					.word xt_x40
>46f6	ab 30					.word xt_x21
>46f8	49 16					.word xt_exit
.46fa					w_x3a:
>46fa	01					.byte $01
>46fb	3a					.text ':'
>46fc						.fill 15
>470b	d2 46					.word w_create
.470d					xt_x3a:
.470d	4c 65 16	jmp $1665		jmp xt_enter
>4710	1b 18					.word xt_spx40
>4712	a4 3c					.word xt_csp
>4714	ab 30					.word xt_x21
>4716	cc 3b					.word xt_current
>4718	d7 30					.word xt_x40
>471a	b4 3b					.word xt_context
>471c	ab 30					.word xt_x21
>471e	e5 46					.word xt_create
>4720	da 3c					.word xt_x5d
>4722	73 19					.word xt_x28literalx29
>4724	4c 00					.word 76
>4726	a8 3f					.word xt_cx2c
>4728	73 19					.word xt_x28literalx29
>472a	65 16					.word xt_enter
>472c	88 3f					.word xt_x2c
>472e	88 3f					.word xt_x2c
>4730	49 16					.word xt_exit
.4732					w_x3b:
>4732	c1					.byte $C1
>4733	3b					.text ';'
>4734						.fill 15
>4743	fa 46					.word w_x3a
.4745					xt_x3b:
.4745	4c 65 16	jmp $1665		jmp xt_enter
>4748	b7 46					.word xt_x3fcsp
>474a	73 19					.word xt_x28literalx29
>474c	49 16					.word xt_exit
>474e	88 3f					.word xt_x2c
>4750	bc 3c					.word xt_x5b
>4752	49 16					.word xt_exit
.4754					w_initrandom:
>4754	0a					.byte $0A
>4755	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>475d	6f 6d
>475f						.fill 6
>4765	32 47					.word w_x3b
.4767					xt_initrandom:
.4767	4c 65 16	jmp $1665		jmp xt_enter
>476a	fb 18					.word xt_1
>476c	73 19					.word xt_x28literalx29
>476e	a6 d6					.word 54950
>4770	ff 30					.word xt_cx21
>4772	49 16					.word xt_exit
.4774					w_random:
>4774	06					.byte $06
>4775	72 61 6e 64 6f 6d			.text 'random'
>477b						.fill 10
>4785	54 47					.word w_initrandom
.4787					xt_random:
.4787	4c 65 16	jmp $1665		jmp xt_enter
>478a	73 19					.word xt_x28literalx29
>478c	a4 d6					.word 54948
>478e	d7 30					.word xt_x40
>4790	49 16					.word xt_exit
.4792					w_iox2dpage:
>4792	07					.byte $07
>4793	69 6f 2d 70 61 67 65			.text 'io-page'
>479a						.fill 9
>47a3	74 47					.word w_random
.47a5					xt_iox2dpage:
.47a5	4c 30 37	jmp $3730		jmp xt_x28constantx29
>47a8	01 00					.word 0001
.47aa					w_setx2diox2dtext:
>47aa	0b					.byte $0B
>47ab	73 65 74 2d 69 6f 2d 74			.text 'set-io-text'
>47b3	65 78 74
>47b6						.fill 5
>47bb	92 47					.word w_iox2dpage
.47bd					xt_setx2diox2dtext:
.47bd	4c 65 16	jmp $1665		jmp xt_enter
>47c0	19 19					.word xt_2
>47c2	a5 47					.word xt_iox2dpage
>47c4	ff 30					.word xt_cx21
>47c6	49 16					.word xt_exit
.47c8					w_setx2diox2dcolor:
>47c8	0c					.byte $0C
>47c9	73 65 74 2d 69 6f 2d 63			.text 'set-io-color'
>47d1	6f 6c 6f 72
>47d5						.fill 4
>47d9	aa 47					.word w_setx2diox2dtext
.47db					xt_setx2diox2dcolor:
.47db	4c 65 16	jmp $1665		jmp xt_enter
>47de	73 19					.word xt_x28literalx29
>47e0	03 00					.word 3
>47e2	a5 47					.word xt_iox2dpage
>47e4	ff 30					.word xt_cx21
>47e6	49 16					.word xt_exit
.47e8					w_defx2dtextx2dfgx2dcolor:
>47e8	10					.byte $10
>47e9	64 65 66 2d 74 65 78 74			.text 'def-text-fg-colo'
>47f1	2d 66 67 2d 63 6f 6c 6f
>47f9						.fill 0
>47f9	c8 47					.word w_setx2diox2dcolor
.47fb					xt_defx2dtextx2dfgx2dcolor:
.47fb	4c 65 16	jmp $1665		jmp xt_enter
>47fe	73 19					.word xt_x28literalx29
>4800	0f 00					.word 15
>4802	fe 35					.word xt_and
>4804	a5 47					.word xt_iox2dpage
>4806	1d 31					.word xt_cx40
>4808	38 30					.word xt_x3er
>480a	df 18					.word xt_0
>480c	a5 47					.word xt_iox2dpage
>480e	ff 30					.word xt_cx21
>4810	73 19					.word xt_x28literalx29
>4812	04 00					.word 4
>4814	f7 33					.word xt_x2a
>4816	73 19					.word xt_x28literalx29
>4818	00 d8					.word 55296
>481a	0f 33					.word xt_x2b
>481c	6a 2f					.word xt_dup
>481e	73 19					.word xt_x28literalx29
>4820	03 00					.word 3
>4822	0f 33					.word xt_x2b
>4824	8a 2f					.word xt_swap
>4826	f4 37					.word xt_x28dox29
.4828					l_303:
>4828	46 39					.word xt_i
>482a	ff 30					.word xt_cx21
>482c	71 38					.word xt_x28loopx29
>482e	28 48					.word l_303
.4830					l_304:
>4830	56 30					.word xt_rx3e
>4832	a5 47					.word xt_iox2dpage
>4834	ff 30					.word xt_cx21
>4836	49 16					.word xt_exit
.4838					w_defx2dtextx2dbgx2dcolor:
>4838	10					.byte $10
>4839	64 65 66 2d 74 65 78 74			.text 'def-text-bg-colo'
>4841	2d 62 67 2d 63 6f 6c 6f
>4849						.fill 0
>4849	e8 47					.word w_defx2dtextx2dfgx2dcolor
.484b					xt_defx2dtextx2dbgx2dcolor:
.484b	4c 65 16	jmp $1665		jmp xt_enter
>484e	73 19					.word xt_x28literalx29
>4850	0f 00					.word 15
>4852	fe 35					.word xt_and
>4854	a5 47					.word xt_iox2dpage
>4856	1d 31					.word xt_cx40
>4858	38 30					.word xt_x3er
>485a	df 18					.word xt_0
>485c	a5 47					.word xt_iox2dpage
>485e	ff 30					.word xt_cx21
>4860	73 19					.word xt_x28literalx29
>4862	04 00					.word 4
>4864	f7 33					.word xt_x2a
>4866	73 19					.word xt_x28literalx29
>4868	40 d8					.word 55360
>486a	0f 33					.word xt_x2b
>486c	6a 2f					.word xt_dup
>486e	73 19					.word xt_x28literalx29
>4870	03 00					.word 3
>4872	0f 33					.word xt_x2b
>4874	8a 2f					.word xt_swap
>4876	f4 37					.word xt_x28dox29
.4878					l_305:
>4878	46 39					.word xt_i
>487a	ff 30					.word xt_cx21
>487c	71 38					.word xt_x28loopx29
>487e	78 48					.word l_305
.4880					l_306:
>4880	56 30					.word xt_rx3e
>4882	a5 47					.word xt_iox2dpage
>4884	ff 30					.word xt_cx21
>4886	49 16					.word xt_exit
.4888					w_setx2dborderx2dcolor:
>4888	10					.byte $10
>4889	73 65 74 2d 62 6f 72 64			.text 'set-border-color'
>4891	65 72 2d 63 6f 6c 6f 72
>4899						.fill 0
>4899	38 48					.word w_defx2dtextx2dbgx2dcolor
.489b					xt_setx2dborderx2dcolor:
.489b	4c 65 16	jmp $1665		jmp xt_enter
>489e	a5 47					.word xt_iox2dpage
>48a0	1d 31					.word xt_cx40
>48a2	38 30					.word xt_x3er
>48a4	df 18					.word xt_0
>48a6	a5 47					.word xt_iox2dpage
>48a8	ff 30					.word xt_cx21
>48aa	73 19					.word xt_x28literalx29
>48ac	05 d0					.word 53253
>48ae	ff 30					.word xt_cx21
>48b0	73 19					.word xt_x28literalx29
>48b2	06 d0					.word 53254
>48b4	ff 30					.word xt_cx21
>48b6	73 19					.word xt_x28literalx29
>48b8	07 d0					.word 53255
>48ba	ff 30					.word xt_cx21
>48bc	56 30					.word xt_rx3e
>48be	a5 47					.word xt_iox2dpage
>48c0	ff 30					.word xt_cx21
>48c2	49 16					.word xt_exit
.48c4					w_setx2dborderx2dsize:
>48c4	0f					.byte $0F
>48c5	73 65 74 2d 62 6f 72 64			.text 'set-border-size'
>48cd	65 72 2d 73 69 7a 65
>48d4						.fill 1
>48d5	88 48					.word w_setx2dborderx2dcolor
.48d7					xt_setx2dborderx2dsize:
.48d7	4c 65 16	jmp $1665		jmp xt_enter
>48da	a5 47					.word xt_iox2dpage
>48dc	1d 31					.word xt_cx40
>48de	38 30					.word xt_x3er
>48e0	df 18					.word xt_0
>48e2	a5 47					.word xt_iox2dpage
>48e4	ff 30					.word xt_cx21
>48e6	ee 2f					.word xt_over
>48e8	ee 2f					.word xt_over
>48ea	22 36					.word xt_or
>48ec	b7 37					.word xt_x28branch0x29
>48ee	1e 49					.word l_307
>48f0	73 19					.word xt_x28literalx29
>48f2	1f 00					.word 31
>48f4	fe 35					.word xt_and
>48f6	73 19					.word xt_x28literalx29
>48f8	09 d0					.word 53257
>48fa	ff 30					.word xt_cx21
>48fc	73 19					.word xt_x28literalx29
>48fe	1f 00					.word 31
>4900	fe 35					.word xt_and
>4902	73 19					.word xt_x28literalx29
>4904	08 d0					.word 53256
>4906	ff 30					.word xt_cx21
>4908	73 19					.word xt_x28literalx29
>490a	04 d0					.word 53252
>490c	1d 31					.word xt_cx40
>490e	73 19					.word xt_x28literalx29
>4910	01 00					.word 1
>4912	22 36					.word xt_or
>4914	73 19					.word xt_x28literalx29
>4916	04 d0					.word 53252
>4918	ff 30					.word xt_cx21
>491a	93 37					.word xt_x28branchx29
>491c	32 49					.word l_308
.491e					l_307:
>491e	73 19					.word xt_x28literalx29
>4920	04 d0					.word 53252
>4922	1d 31					.word xt_cx40
>4924	73 19					.word xt_x28literalx29
>4926	fe 00					.word 254
>4928	fe 35					.word xt_and
>492a	73 19					.word xt_x28literalx29
>492c	04 d0					.word 53252
>492e	ff 30					.word xt_cx21
>4930	56 3d					.word xt_2drop
.4932					l_308:
>4932	56 30					.word xt_rx3e
>4934	a5 47					.word xt_iox2dpage
>4936	ff 30					.word xt_cx21
>4938	49 16					.word xt_exit
.493a					w_maze:
>493a	04					.byte $04
>493b	6d 61 7a 65				.text 'maze'
>493f						.fill 12
>494b	c4 48					.word w_setx2dborderx2dsize
.494d					xt_maze:
.494d	4c 65 16	jmp $1665		jmp xt_enter
>4950	67 47					.word xt_initrandom
.4952					l_309:
>4952	87 47					.word xt_random
>4954	fb 18					.word xt_1
>4956	fe 35					.word xt_and
>4958	73 19					.word xt_x28literalx29
>495a	cd 00					.word 205
>495c	0f 33					.word xt_x2b
>495e	53 18					.word xt_emit
>4960	93 37					.word xt_x28branchx29
>4962	52 49					.word l_309
.4964					l_310:
>4964	49 16					.word xt_exit
.4966					w_cold:
>4966	04					.byte $04
>4967	63 6f 6c 64				.text 'cold'
>496b						.fill 12
>4977	3a 49					.word w_maze
.4979					xt_cold:
.4979	4c 65 16	jmp $1665		jmp xt_enter
>497c	05 3a					.word xt_forth
>497e	c8 3f					.word xt_definitions
>4980	54 3b					.word xt_s0
>4982	d7 30					.word xt_x40
>4984	3a 18					.word xt_spx21
>4986	6c 3b					.word xt_r0
>4988	d7 30					.word xt_x40
>498a	fb 17					.word xt_rpx21
>498c	df 18					.word xt_0
>498e	44 3c					.word xt_blk
>4990	ab 30					.word xt_x21
>4992	73 19					.word xt_x28literalx29
>4994	00 50					.word 20480
>4996	e4 3b					.word xt_dp
>4998	ab 30					.word xt_x21
>499a	73 19					.word xt_x28literalx29
>499c	00 bf					.word 48896
>499e	14 3c					.word xt_tib
>49a0	ab 30					.word xt_x21
>49a2	42 42					.word xt_decimal
>49a4	68 40					.word xt_x28x2ex22x29
>49a6	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>49ae	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>49be	30 2e 30 30 2e 30 30
>49c5	c2 18					.word xt_cr
>49c7	73 19					.word xt_x28literalx29
>49c9	ff 00					.word 255
>49cb	73 19					.word xt_x28literalx29
>49cd	ff 00					.word 255
>49cf	df 18					.word xt_0
>49d1	73 19					.word xt_x28literalx29
>49d3	0f 00					.word 15
>49d5	fb 47					.word xt_defx2dtextx2dfgx2dcolor
>49d7	73 19					.word xt_x28literalx29
>49d9	80 00					.word 128
>49db	73 19					.word xt_x28literalx29
>49dd	80 00					.word 128
>49df	df 18					.word xt_0
>49e1	9b 48					.word xt_setx2dborderx2dcolor
>49e3	73 19					.word xt_x28literalx29
>49e5	0a 00					.word 10
>49e7	73 19					.word xt_x28literalx29
>49e9	0a 00					.word 10
>49eb	d7 48					.word xt_setx2dborderx2dsize
>49ed	3e 46					.word xt_quit
>49ef	49 16					.word xt_exit

;******  Processing file: mf_post_65c02.asm

.49f1					endcode:

;******  Return to file: forth.asm


;******  End of listing
