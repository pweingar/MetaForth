
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Tue Nov 14 12:08:40 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$0100					rstack = $0100          ; Location of the "bottom" of the return stack
=$1000					USERAREA = $1000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: sections.asm


;******  Return to file: mf_pre_65c02.asm

>0020					ip      .word ?         ; Instruction pointer
>0022					wp      .word ?         ; Word pointer
>0024					up      .word ?         ; User pointer
>0026					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0028					test    .word ?         ; Pointer to the current test name
>002a					tmp     .fill 4
>002e					savex   .byte ?
>002f					counter .byte ?         ; A counter used for some code
>0030					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
.4000					coldstart:
.4000	20 4a 40	jsr $404a	        jsr ioinit
.4003	4c 22 40	jmp $4022	        jmp start
.4006					init_user:
>4006	6e 00				        .word $006e     ; Initial PSP (S0)
>4008	ff 00				        .word $00ff     ; Initial RSP (R0)
>400a	0a 00				        .word 10        ; Initial BASE
>400c	00 00				        .word 0         ; Initial STATE
>400e	00 00				        .word 0         ; Initial CONTEXT
>4010	00 00				        .word 0         ; Initial CURRENT
>4012	00 10				        .word $1000     ; Initial DP
>4014	00 00				        .word 0         ; Initial >IN
>4016	00 3f				        .word $3f00     ; Initial TIB
>4018	00 00				        .word 0         ; Initial SOURCE-ID
>401a	00 00				        .word 0         ; Initial BLK
>401c	ff ff				        .word $ffff     ; Initial DPL
>401e	00 00				        .word 0         ; Initial HLD
>4020	00 00				        .word 0         ; Initial HANDLER
.4022					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
=20					user_blk = 20
=22					user_dpl = 22
=24					user_hld = 24
=26					user_handler = 26
.4022	a2 6e		ldx #$6e	start   ldx #$6e        ; Initialize the PSP
.4024	a9 43		lda #$43	        lda #<vstart
.4026	85 20		sta $20		        sta ip
.4028	a9 40		lda #$40	        lda #>vstart
.402a	85 21		sta $21		        sta ip+1
.402c	a9 00		lda #$00	        lda #<USERAREA
.402e	85 24		sta $24		        sta up
.4030	a9 10		lda #$10	        lda #>USERAREA
.4032	85 25		sta $25		        sta up+1
.4034	a0 00		ldy #$00	        ldy #0
.4036					init_user_loop:
.4036	b9 06 40	lda $4006,y	        lda init_user,y
.4039	91 24		sta ($24),y	        sta (up),y
.403b	c8		iny		        iny
.403c	c0 1c		cpy #$1c	        cpy #(init_user_end - init_user)
.403e	d0 f6		bne $4036	        bne init_user_loop
.4040	4c c4 42	jmp $42c4	        jmp xt_next
>4043	89 7b				vstart  .word xt_cold
>4045	15 44				        .word xt_halt
.4047	6c 26 00	jmp ($0026)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep

;******  Processing file: io.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: io.asm


;******  Processing file: api.asm

>ff00					NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04					ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08					ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c					Yield       .fill   4   ; Give unused time to the kernel.
>ff10					Putch       .fill   4   ; deprecated
>ff14					RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18					RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c					            .fill   4   ; reserved
>ff20					List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24					GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28					GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c					Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30					Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34					Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38					Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c					List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40					GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44					MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48					CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c					Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50					Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54					ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58					WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c					Open        .fill   4   ; Open the given file for read, create, or append.
>ff60					Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64					Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68					Close       .fill   4   ; Close an open file.
>ff6c					Rename      .fill   4   ; Rename a closed file.
>ff70					Delete      .fill   4   ; Delete a closed file.
>ff74					Open        .fill   4   ; Open a directory for reading.
>ff78					Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c					Close       .fill   4   ; Close a directory once finished reading.
>ff80					MkDir       .fill   4
>ff84					RmDir       .fill   4
>ff88					            .fill   4   ; call gate
>ff8c					GetIP       .fill   4   ; Get the local IP address.
>ff90					SetIP       .fill   4   ; Set the local IP address.
>ff94					GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98					SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c					SendICMP    .fill   4
>ffa0					Match       .fill   4
>ffa4					Init        .fill   4
>ffa8					Send        .fill   4
>ffac					Recv        .fill   4
>ffb0					Open        .fill   4
>ffb4					Accept      .fill   4
>ffb8					Reject      .fill   4
>ffbc					Send        .fill   4
>ffc0					Recv        .fill   4
>ffc4					Close       .fill   4
>ffc8					Reset       .fill   4   ; Re-init the display
>ffcc					GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0					DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4					DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8					GetTime     .fill   4
>ffdc					SetTime     .fill   4
>ffe0					GetSysInfo  .fill   4
>ffe4					SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0					args
.00f0					events
>00f0					dest        .word       ?   ; GetNextEvent copies event data here
>00f2					pending     .byte       ?   ; Negative count of pending events
.00f3					end
.00f3					run
>00f3					block_id    .byte   ?
.00f3					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					fs
.00f3					format
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					mkfs
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					file
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					write
>00f3					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					close
>00f3					stream      .byte       ?
.00f3					rename
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.00f3					delete
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					directory
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					display
>00f3					x           .byte       ?   ; coordinate or size
>00f4					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.00f3					net
=$fb					socket      = args.buf
>00f3					src_port    .word       ?
>00f5					dest_port   .word       ?
>00f7					dest_ip     .fill       4
>00f3					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					args_t
.0000					events
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0003					run
>0003					block_id    .byte   ?
.0003					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					fs
.0003					format
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					mkfs
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					file
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					write
>0003					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					close
>0003					stream      .byte       ?
.0003					rename
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0003					delete
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					directory
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					close
>0003					stream      .byte       ?
.0003					display
>0003					x           .byte       ?   ; coordinate or size
>0004					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0003					net
=$fb					socket      = args.buf
>0003					src_port    .word       ?
>0005					dest_port   .word       ?
>0007					dest_ip     .fill       4
>0003					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					event_t
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0000					recv_t
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					run_t
>0000					block_id    .byte   ?
.0000					fs_t
.0000					format
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					mkfs
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					fs_mkfs_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					file_t
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					write
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					close
>0000					stream      .byte       ?
.0000					rename
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					delete
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					fs_open_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					fs_read_t
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					fs_write_t
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					fs_close_t
>0000					stream      .byte       ?
.0000					fs_rename_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					fs_delete_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fnane       = args.buf
=$fd					fname_len   = args.buflen
.0000					dir_t
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					close
>0000					stream      .byte       ?
.0000					dir_open_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					dir_read_t
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					dir_close_t
>0000					stream      .byte       ?
.0000					display_t
>0000					x           .byte       ?   ; coordinate or size
>0001					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0000					net_t
=$fb					socket      = args.buf
>0000					src_port    .word       ?
>0002					dest_port   .word       ?
>0004					dest_ip     .fill       4
>0000					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
>0000					            .word   ?   ; Reserved
>0002					            .word   ?   ; Deprecated
>0004					JOYSTICK    .word   ?   ; Game Controller changes.
>0006					DEVICE      .word   ?   ; Device added/removed.
>0008					PRESSED     .word   ?   ; Key pressed
>000a					RELEASED    .word   ?   ; Key released.
>000c					DELTA       .word   ?   ; Regular mouse move and button state
>000e					CLICKS      .word   ?   ; Click counts
>0010					NAME        .word   ?
>0012					SIZE        .word   ?
>0014					DATA        .word   ?   ; The read request has succeeded.
>0016					WROTE       .word   ?   ; The write request has completed.
>0018					FORMATTED   .word   ?   ; The low-level format has completed.
>001a					ERROR       .word   ?
>001c					SIZE        .word   ?
>001e					CREATED     .word   ?
>0020					CHECKED     .word   ?
>0022					DATA        .word   ?   ; The read request has succeeded.
>0024					WROTE       .word   ?   ; The write request has completed.
>0026					ERROR       .word   ?
>0028					NOT_FOUND   .word   ?   ; The file file was not found.
>002a					OPENED      .word   ?   ; The file was successfully opened.
>002c					DATA        .word   ?   ; The read request has succeeded.
>002e					WROTE       .word   ?   ; The write request has completed.
>0030					EOF         .word   ?   ; All file data has been read.
>0032					CLOSED      .word   ?   ; The close request has completed.
>0034					RENAMED     .word   ?   ; The rename request has completed.
>0036					DELETED     .word   ?   ; The delete request has completed.
>0038					ERROR       .word   ?   ; An error occured; close the file if opened.
>003a					OPENED      .word   ?   ; The directory open request succeeded.
>003c					VOLUME      .word   ?   ; A volume record was found.
>003e					FILE        .word   ?   ; A file record was found.
>0040					FREE        .word   ?   ; A file-system free-space record was found.
>0042					EOF         .word   ?   ; All data has been read.
>0044					CLOSED      .word   ?   ; The directory file has been closed.
>0046					ERROR       .word   ?   ; An error occured; user should close.
>0048					TCP         .word   ?
>004a					UDP         .word   ?
.0000					event_t
>0000					type        .byte   ?   ; Enum above
>0001					buf         .byte   ?   ; page id or zero
>0002					ext         .byte   ?   ; page id or zero
.0003					key
>0003					keyboard    .byte   ?   ; Keyboard ID
>0004					raw         .byte   ?   ; Raw key ID
>0005					ascii       .byte   ?   ; ASCII value
>0006					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0003					mouse
.0003					delta
>0003					x           .byte   ?
>0004					y           .byte   ?
>0005					z           .byte   ?
>0006					buttons     .byte   ?
.0003					clicks
>0003					inner       .byte   ?
>0004					middle      .byte   ?
>0005					outer       .byte   ?
.0003					joystick
>0003					joy0        .byte   ?
>0004					joy1        .byte   ?
.0003					udp
>0003					token       .byte   ?   ; TODO: break out into fields
.0003					tcp
>0003					len         .byte   ?   ; Raw packet length.
.0003					file
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					data
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					read        .byte   ?   ; Number of bytes actually read
.0005					wrote
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					wrote       .byte   ?   ; Number of bytes actually read
.0003					directory
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					volume
>0005					len         .byte   ?   ; Length of volname (in buf)
>0006					flags       .byte   ?   ; block size, text encoding
.0005					file
>0005					len         .byte   ?
>0006					flags       .byte   ?   ; block scale, text encoding, approx size
.0005					free
>0005					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					key_t
>0000					keyboard    .byte   ?   ; Keyboard ID
>0001					raw         .byte   ?   ; Raw key ID
>0002					ascii       .byte   ?   ; ASCII value
>0003					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0000					mouse_t
.0000					delta
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					clicks
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
.0000					m_delta_t
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					m_clicks_t
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
.0000					joystick_t
>0000					joy0        .byte   ?
>0001					joy1        .byte   ?
.0000					file_t
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					data
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					read        .byte   ?   ; Number of bytes actually read
.0002					wrote
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					wrote       .byte   ?   ; Number of bytes actually read
.0000					fs_data_t
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					read        .byte   ?   ; Number of bytes actually read
.0000					fs_wrote_t
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					wrote       .byte   ?   ; Number of bytes actually read
.0000					dir_t
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					volume
>0002					len         .byte   ?   ; Length of volname (in buf)
>0003					flags       .byte   ?   ; block size, text encoding
.0002					file
>0002					len         .byte   ?
>0003					flags       .byte   ?   ; block scale, text encoding, approx size
.0002					free
>0002					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_vol_t
>0000					len         .byte   ?   ; Length of volname (in buf)
>0001					flags       .byte   ?   ; block size, text encoding
.0000					dir_file_t
>0000					len         .byte   ?
>0001					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_free_t
>0000					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_ext_t
>0000					free        .fill   6   ; blocks used/free
.0000					udp_t
>0000					token       .byte   ?   ; TODO: break out into fields
.0000					tcp_t
>0000					len         .byte   ?   ; Raw packet length.

;******  Return to file: io.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
=$f4					DEF_COLOR = $f4                     ; Default color
>0031					cur_line    .word ?                 ; Address of the current line on the text screen
>0033					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0035					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
.0200					event
>0200					type        .byte   ?   ; Enum above
>0201					buf         .byte   ?   ; page id or zero
>0202					ext         .byte   ?   ; page id or zero
.0203					key
>0203					keyboard    .byte   ?   ; Keyboard ID
>0204					raw         .byte   ?   ; Raw key ID
>0205					ascii       .byte   ?   ; ASCII value
>0206					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0203					mouse
.0203					delta
>0203					x           .byte   ?
>0204					y           .byte   ?
>0205					z           .byte   ?
>0206					buttons     .byte   ?
.0203					clicks
>0203					inner       .byte   ?
>0204					middle      .byte   ?
>0205					outer       .byte   ?
.0203					joystick
>0203					joy0        .byte   ?
>0204					joy1        .byte   ?
.0203					udp
>0203					token       .byte   ?   ; TODO: break out into fields
.0203					tcp
>0203					len         .byte   ?   ; Raw packet length.
.0203					file
>0203					stream      .byte   ?
>0204					cookie      .byte   ?
.0205					data
>0205					requested   .byte   ?   ; Requested number of bytes to read
>0206					read        .byte   ?   ; Number of bytes actually read
.0205					wrote
>0205					requested   .byte   ?   ; Requested number of bytes to read
>0206					wrote       .byte   ?   ; Number of bytes actually read
.0203					directory
>0203					stream      .byte   ?
>0204					cookie      .byte   ?
.0205					volume
>0205					len         .byte   ?   ; Length of volname (in buf)
>0206					flags       .byte   ?   ; block size, text encoding
.0205					file
>0205					len         .byte   ?
>0206					flags       .byte   ?   ; block scale, text encoding, approx size
.0205					free
>0205					flags       .byte   ?   ; block scale, text encoding, approx size
>0207					curs_color  .byte ?                 ; Current color for printing
>0208					curs_x      .byte ?                 ; Current column for the text cursor
>0209					curs_y      .byte ?                 ; Current row for the text cursor
>020a					old_y       .byte ?                 ; Previous cursor row
>020b					curs_width  .byte ?                 ; Width  of the screen in text columns
>020c					curs_height .byte ?                 ; Height of the screen in text columns
.404a					ioinit:
.404a	a9 00		lda #$00	            lda #<event                     ; Point to our event record
.404c	85 f0		sta $f0				    sta kernel.args.events+0
.404e	a9 02		lda #$02			    lda #>event
.4050	85 f1		sta $f1				    sta kernel.args.events+1
.4052	20 6d 40	jsr $406d	            jsr initlut                     ; Initialize the CLUT
.4055	a9 f4		lda #$f4	            lda #DEF_COLOR                  ; Set the default color (will be defined with the LUT)
.4057	8d 07 02	sta $0207	            sta curs_color
.405a	a9 ff		lda #$ff	            lda #$ff                        ; Set old_y to something silly
.405c	8d 0a 02	sta $020a	            sta old_y
.405f	a9 50		lda #$50	            lda #80
.4061	8d 0b 02	sta $020b	            sta curs_width
.4064	a9 3c		lda #$3c	            lda #60
.4066	8d 0c 02	sta $020c	            sta curs_height
.4069	20 e2 40	jsr $40e2	            jsr consclr                     ; Clear the text screen and home the cursor
.406c	60		rts		            rts
.406d					initlut:
.406d	48		pha		            pha
.406e	5a		phy		            phy
.406f	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.4071	48		pha		            pha
.4072	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.4074	85 01		sta $01		            sta MMU_IO_CTRL
.4076	a0 00		ldy #$00	            ldy #0
.4078	b9 8c 40	lda $408c,y	loop:       lda text_lut,y              ; Get a color component
.407b	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.407e	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.4081	c8		iny		            iny
.4082	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.4084	d0 f2		bne $4078	            bne loop                    ; No: copy the next one
.4086	68		pla		            pla
.4087	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.4089	7a		ply		            ply
.408a	68		pla		            pla
.408b	60		rts		            rts
>408c	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>4090	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>4094	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>4098	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>409c	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>40a0	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>40a4	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>40a8	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>40ac	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>40b0	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>40b4	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>40b8	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>40bc	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>40c0	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>40c4	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>40c8	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.40cc					constat:
.40cc	a9 00		lda #$00	            lda #0
.40ce	60		rts		            rts
.40cf					conin:
.40cf	20 0c ff	jsr $ff0c				jsr kernel.Yield
.40d2	20 00 ff	jsr $ff00	            jsr kernel.NextEvent            ; Grab the event
.40d5	b0 f8		bcs $40cf	            bcs conin
.40d7	ad 00 02	lda $0200	            lda event.type                  ; Check the event type
.40da	c9 08		cmp #$08	            cmp #kernel.event.key.PRESSED
.40dc	d0 f1		bne $40cf	            bne conin
.40de	ad 05 02	lda $0205	            lda event.key.ascii             ; Get the ASCII code of the key pressed
.40e1	60		rts		            rts
.40e2					consclr:
.40e2	48		pha		            pha
.40e3	da		phx		            phx
.40e4	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.40e6	85 31		sta $31		            sta cur_line
.40e8	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.40ea	85 32		sta $32		            sta cur_line+1
.40ec	a0 00		ldy #$00	            ldy #0
.40ee	20 e9 41	jsr $41e9	loop:       jsr clrline             ; Clear the current line
.40f1	c8		iny		            iny                     ; Move to the next line
.40f2	cc 0c 02	cpy $020c	            cpy curs_height
.40f5	f0 10		beq $4107	            beq home                ; If we've done the last line, home the cursor
.40f7	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.40f8	a5 31		lda $31		            lda cur_line
.40fa	6d 0b 02	adc $020b	            adc curs_width
.40fd	85 31		sta $31		            sta cur_line
.40ff	a5 32		lda $32		            lda cur_line+1
.4101	69 00		adc #$00	            adc #0
.4103	85 32		sta $32		            sta cur_line+1
.4105	80 e7		bra $40ee	            bra loop                ; And go back to clear it too
.4107	9c 08 02	stz $0208	home:       stz curs_x              ; Set the cursor to (0, 0)
.410a	9c 09 02	stz $0209	            stz curs_y
.410d	20 13 41	jsr $4113	            jsr cursset
.4110	fa		plx		            plx
.4111	68		pla		            pla
.4112	60		rts		            rts
.4113					cursset:
.4113	48		pha		            pha
.4114	5a		phy		            phy
.4115	ad 08 02	lda $0208	            lda curs_x              ; Where is the cursor column pointing
.4118	cd 0b 02	cmp $020b	            cmp curs_width
.411b	90 06		bcc $4123	            blt chk_row             ; If on screen, let's check the row
.411d	9c 08 02	stz $0208	            stz curs_x              ; If not on screen, move it to the left and down
.4120	ee 09 02	inc $0209	            inc curs_y
.4123					chk_row:
.4123	ad 09 02	lda $0209	            lda curs_y              ; Where is the cursor row pointing
.4126	cd 0c 02	cmp $020c	            cmp curs_height
.4129	90 0a		bcc $4135	            blt set_hw              ; If on screen, set the hardware registers
.412b	ad 0c 02	lda $020c	            lda curs_height         ; Otherwise: Move the last visible row
.412e	3a		dec a		            dec a
.412f	8d 09 02	sta $0209	            sta curs_y
.4132	20 73 41	jsr $4173	            jsr consscroll          ; And we need to scroll the screen
.4135	ad 08 02	lda $0208	set_hw:     lda curs_x              ; Set the hardware cursor column
.4138	8d 14 d0	sta $d014	            sta VKY_CURS_X
.413b	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.413e	ad 09 02	lda $0209	            lda curs_y              ; Set the hardware cursor row
.4141	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.4144	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.4147	ad 0a 02	lda $020a	            lda old_y               ; Is old_y == curs_y
.414a	cd 09 02	cmp $0209	            cmp curs_y
.414d	f0 21		beq $4170	            beq done                ; Yes: we are done
.414f	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.4151	85 31		sta $31		            sta cur_line
.4153	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.4155	85 32		sta $32		            sta cur_line+1
.4157	ac 09 02	ldy $0209	            ldy curs_y              ; Get the desired row
.415a	8c 0a 02	sty $020a	            sty old_y               ; And mark that it will be our old row from now on
.415d	f0 11		beq $4170	            beq done                ; If it's zero, we are done
.415f	18		clc		loop:       clc                     ; Move cur_line to the next line
.4160	a5 31		lda $31		            lda cur_line
.4162	6d 0b 02	adc $020b	            adc curs_width
.4165	85 31		sta $31		            sta cur_line
.4167	a5 32		lda $32		            lda cur_line+1
.4169	69 00		adc #$00	            adc #0
.416b	85 32		sta $32		            sta cur_line+1
.416d	88		dey		            dey                     ; Decrement line counter
.416e	d0 ef		bne $415f	            bne loop                ; If not zero, keep moving down a line
.4170	7a		ply		done:       ply
.4171	68		pla		            pla
.4172	60		rts		            rts
.4173					consscroll:
.4173	48		pha		            pha
.4174	da		phx		            phx
.4175	a5 32		lda $32		            lda cur_line+1          ; Save the current line
.4177	48		pha		            pha
.4178	a5 31		lda $31		            lda cur_line
.417a	48		pha		            pha
.417b	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.417d	48		pha		            pha
.417e	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.4180	85 35		sta $35		            sta dst_ptr
.4182	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.4184	85 36		sta $36		            sta dst_ptr+1
.4186	18		clc		            clc                     ; src_ptr is the second line
.4187	a5 35		lda $35		            lda dst_ptr
.4189	6d 0b 02	adc $020b	            adc curs_width
.418c	85 33		sta $33		            sta src_ptr
.418e	a5 36		lda $36		            lda dst_ptr+1
.4190	69 00		adc #$00	            adc #0
.4192	85 34		sta $34		            sta src_ptr+1
.4194	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.4196	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.4198	85 01		sta $01		            sta MMU_IO_CTRL
.419a	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.419c	b1 33		lda ($33),y	loop1:      lda (src_ptr),y
.419e	91 35		sta ($35),y	            sta (dst_ptr),y
.41a0	c8		iny		            iny
.41a1	cc 0b 02	cpy $020b	            cpy curs_width
.41a4	d0 f6		bne $419c	            bne loop1
.41a6	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.41a8	85 01		sta $01		            sta MMU_IO_CTRL
.41aa	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.41ac	b1 33		lda ($33),y	loop2:      lda (src_ptr),y
.41ae	91 35		sta ($35),y	            sta (dst_ptr),y
.41b0	c8		iny		            iny
.41b1	cc 0b 02	cpy $020b	            cpy curs_width
.41b4	d0 f6		bne $41ac	            bne loop2
.41b6	a5 33		lda $33		            lda src_ptr             ; Move dst_ptr to the next line
.41b8	85 35		sta $35		            sta dst_ptr
.41ba	a5 34		lda $34		            lda src_ptr+1
.41bc	85 36		sta $36		            sta dst_ptr+1
.41be	18		clc		            clc                     ; Move src_ptr to the next line
.41bf	a5 33		lda $33		            lda src_ptr
.41c1	6d 0b 02	adc $020b	            adc curs_width
.41c4	85 33		sta $33		            sta src_ptr
.41c6	a5 34		lda $34		            lda src_ptr+1
.41c8	69 00		adc #$00	            adc #0
.41ca	85 34		sta $34		            sta src_ptr+1
.41cc	e8		inx		            inx                     ; Move src line number to the next row
.41cd	ec 0c 02	cpx $020c	            cpx curs_height         ; Have we copied the last row?
.41d0	d0 c4		bne $4196	            bne copy_text           ; No: copy the line
.41d2	a5 35		lda $35		            lda dst_ptr             ; Clear the destination line
.41d4	85 31		sta $31		            sta cur_line
.41d6	a5 36		lda $36		            lda dst_ptr+1
.41d8	85 32		sta $32		            sta cur_line+1
.41da	20 e9 41	jsr $41e9	            jsr clrline
.41dd	68		pla		            pla                     ; Restore the original I/O page
.41de	85 01		sta $01		            sta MMU_IO_CTRL
.41e0	68		pla		            pla                     ; Restore the current line
.41e1	85 31		sta $31		            sta cur_line
.41e3	68		pla		            pla
.41e4	85 32		sta $32		            sta cur_line+1
.41e6	fa		plx		            plx
.41e7	68		pla		            pla
.41e8	60		rts		            rts
.41e9					clrline:
.41e9	48		pha		            pha
.41ea	5a		phy		            phy
.41eb	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.41ed	48		pha		            pha
.41ee	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.41f0	85 01		sta $01		            sta MMU_IO_CTRL
.41f2	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.41f4	a9 20		lda #$20	            lda #' '
.41f6	91 31		sta ($31),y	loop1:      sta (cur_line),y
.41f8	c8		iny		            iny
.41f9	cc 0b 02	cpy $020b	            cpy curs_width
.41fc	d0 f8		bne $41f6	            bne loop1
.41fe	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.4200	85 01		sta $01		            sta MMU_IO_CTRL
.4202	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.4204	ad 07 02	lda $0207	            lda curs_color
.4207	91 31		sta ($31),y	loop2:      sta (cur_line),y
.4209	c8		iny		            iny
.420a	cc 0b 02	cpy $020b	            cpy curs_width
.420d	d0 f8		bne $4207	            bne loop2
.420f	68		pla		            pla                     ; Restore the original I/O page
.4210	85 01		sta $01		            sta MMU_IO_CTRL
.4212	7a		ply		            ply
.4213	68		pla		            pla
.4214	60		rts		            rts
.4215					conout:
.4215	5a		phy		            phy
.4216	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.4218	d0 0b		bne $4225	            bne not_cr
.421a	9c 08 02	stz $0208	            stz curs_x              ; Yes: Do a carriage return
.421d	ee 09 02	inc $0209	            inc curs_y
.4220	20 13 41	jsr $4113	            jsr cursset
.4223	80 44		bra $4269	            bra done
.4225	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.4227	d0 05		bne $422e	            bne not_ff
.4229	20 e2 40	jsr $40e2	            jsr consclr             ; Yes: clear the screen
.422c	80 3b		bra $4269	            bra done
.422e	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.4230	d0 15		bne $4247	            bne not_bs
.4232	ad 08 02	lda $0208	            lda curs_x              ; Yes: move the cursor back
.4235	f0 07		beq $423e	            beq bs_leftmost         ; Is it already on column 0?
.4237	3a		dec a		            dec a                   ; No: move it back one
.4238	8d 08 02	sta $0208	            sta curs_x
.423b	20 13 41	jsr $4113	            jsr cursset
.423e					bs_leftmost:
.423e	a9 20		lda #$20	            lda #' '                ; Clear the current character
.4240	ac 08 02	ldy $0208	            ldy curs_x              ; Get the index to the cursor
.4243	91 31		sta ($31),y	            sta (cur_line),y        ; Write the character to the screen
.4245	80 22		bra $4269	            bra done
.4247	85 2a		sta $2a		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.4249	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.424b	48		pha		            pha
.424c	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.424e	85 01		sta $01		            sta MMU_IO_CTRL
.4250	a5 2a		lda $2a		            lda tmp                 ; Get A back
.4252	ac 08 02	ldy $0208	            ldy curs_x              ; Get the index to the cursor
.4255	91 31		sta ($31),y	            sta (cur_line),y        ; Write the character to the screen
.4257	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.4259	85 01		sta $01		            sta MMU_IO_CTRL
.425b	ad 07 02	lda $0207	            lda curs_color          ; Get the current color
.425e	91 31		sta ($31),y	            sta (cur_line),y        ; And set it on the screen
.4260	68		pla		            pla                     ; Restore the I/O page
.4261	85 01		sta $01		            sta MMU_IO_CTRL
.4263	ee 08 02	inc $0208	            inc curs_x              ; Move to the next column
.4266	20 13 41	jsr $4113	            jsr cursset
.4269	7a		ply		done:       ply
.426a	60		rts		            rts
.426b					printah:
.426b	da		phx		            phx
.426c	48		pha		            pha
.426d	4a		lsr a		            lsr a
.426e	4a		lsr a		            lsr a
.426f	4a		lsr a		            lsr a
.4270	4a		lsr a		            lsr a
.4271	29 0f		and #$0f	            and #$0f
.4273	aa		tax		            tax                     ; Convert it to an index
.4274	bd 90 42	lda $4290,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.4277	20 15 42	jsr $4215	            jsr conout              ; And print it
.427a	68		pla		            pla
.427b	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.427d	aa		tax		            tax                     ; Convert it to an index
.427e	bd 90 42	lda $4290,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.4281	20 15 42	jsr $4215	            jsr conout              ; And print it
.4284	fa		plx		            plx
.4285	60		rts		            rts
.4286					printyah:
.4286	48		pha		            pha
.4287	98		tya		            tya
.4288	20 6b 42	jsr $426b	            jsr printah
.428b	68		pla		            pla
.428c	20 6b 42	jsr $426b	            jsr printah
.428f	60		rts		            rts
>4290	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>4298	38 39 41 42 43 44 45 46
.42a0					prints:
.42a0	48		pha		            pha
.42a1	5a		phy		            phy
.42a2	a0 00		ldy #$00	            ldy #0
.42a4	b1 33		lda ($33),y	loop:       lda (src_ptr),y
.42a6	f0 06		beq $42ae	            beq done
.42a8	20 15 42	jsr $4215	            jsr conout
.42ab	c8		iny		            iny
.42ac	d0 f6		bne $42a4	            bne loop
.42ae	7a		ply		done:       ply
.42af	68		pla		            pla
.42b0	60		rts		            rts

;******  Return to file: mf_pre_65c02.asm


;******  Return to file: forth.asm

.42b1					w_next:
>42b1	04					.byte $04
>42b2	6e 65 78 74				.text 'next'
>42b6	00 00 00 00 00 00 00 00			.fill 12,0
>42be	00 00 00 00
>42c2	00 00					.word 0
.42c4					xt_next:
.42c4	a0 01		ldy #$01		ldy #1          ; wp := (ip)
.42c6	b2 20		lda ($20)		lda (ip)
.42c8	85 22		sta $22			sta wp
.42ca	b1 20		lda ($20),y		lda (ip),y
.42cc	85 23		sta $23			sta wp+1
.42ce	18		clc			clc             ; ip := ip + 2
.42cf	a5 20		lda $20			lda ip
.42d1	69 02		adc #$02		adc #2
.42d3	85 20		sta $20			sta ip
.42d5	a5 21		lda $21			lda ip+1
.42d7	69 00		adc #$00		adc #0
.42d9	85 21		sta $21			sta ip+1
.42db	6c 22 00	jmp ($0022)		jmp (wp)        ; jmp (wp)
.42de					w_exit:
>42de	04					.byte $04
>42df	65 78 69 74				.text 'exit'
>42e3	00 00 00 00 00 00 00 00			.fill 12,0
>42eb	00 00 00 00
>42ef	b1 42					.word w_next
.42f1					xt_exit:
.42f1	68		pla			pla             ; ip := pop()
.42f2	85 20		sta $20			sta ip
.42f4	68		pla			pla
.42f5	85 21		sta $21			sta ip+1
.42f7	4c c4 42	jmp $42c4		jmp xt_next
.42fa					w_enter:
>42fa	05					.byte $05
>42fb	65 6e 74 65 72				.text 'enter'
>4300	00 00 00 00 00 00 00 00			.fill 11,0
>4308	00 00 00
>430b	de 42					.word w_exit
.430d					xt_enter:
.430d	a5 21		lda $21			lda ip+1        ; push(ip)
.430f	48		pha			pha
.4310	a5 20		lda $20			lda ip
.4312	48		pha			pha
.4313	18		clc			clc             ; ip := wp + 3
.4314	a5 22		lda $22			lda wp
.4316	69 03		adc #$03		adc #3
.4318	85 20		sta $20			sta ip
.431a	a5 23		lda $23			lda wp+1
.431c	69 00		adc #$00		adc #0
.431e	85 21		sta $21			sta ip+1
.4320	4c c4 42	jmp $42c4		jmp xt_next
.4323					w_dodoes:
>4323	06					.byte $06
>4324	64 6f 64 6f 65 73			.text 'dodoes'
>432a	00 00 00 00 00 00 00 00			.fill 10,0
>4332	00 00
>4334	fa 42					.word w_enter
.4336					xt_dodoes:
.4336	18		clc			clc             ; push PFA to parameter stack
.4337	a5 22		lda $22			lda wp
.4339	69 03		adc #$03		adc #3
.433b	95 00		sta $00,x		sta pstack,x
.433d	a5 23		lda $23			lda wp+1
.433f	69 00		adc #$00		adc #0
.4341	95 01		sta $01,x		sta pstack+1,x
.4343	ca		dex			dex
.4344	ca		dex			dex
.4345	18		clc			clc             ; Address of high level code into tmp
.4346	68		pla			pla
.4347	69 01		adc #$01		adc #1
.4349	85 2a		sta $2a			sta tmp
.434b	68		pla			pla
.434c	69 00		adc #$00		adc #0
.434e	85 2b		sta $2b			sta tmp+1
.4350	a5 21		lda $21			lda ip+1        ; push ip to return stack
.4352	48		pha			pha
.4353	a5 20		lda $20			lda ip
.4355	48		pha			pha
.4356	a5 2a		lda $2a			lda tmp         ; ip := tmp
.4358	85 20		sta $20			sta ip
.435a	a5 2b		lda $2b			lda tmp+1
.435c	85 21		sta $21			sta ip+1
.435e	4c c4 42	jmp $42c4		jmp xt_next
.4361					w_testname:
>4361	08					.byte $08
>4362	74 65 73 74 6e 61 6d 65			.text 'testname'
>436a	00 00 00 00 00 00 00 00			.fill 8,0
>4372	23 43					.word w_dodoes
.4374					xt_testname:
.4374	b5 02		lda $02,x		lda pstack+2,x
.4376	85 28		sta $28			sta test
.4378	b5 03		lda $03,x		lda pstack+3,x
.437a	85 29		sta $29			sta test+1
.437c	e8		inx			inx
.437d	e8		inx			inx
.437e	4c c4 42	jmp $42c4		jmp xt_next
.4381					w_assertx3d:
>4381	07					.byte $07
>4382	61 73 73 65 72 74 3d			.text 'assert='
>4389	00 00 00 00 00 00 00 00			.fill 9,0
>4391	00
>4392	61 43					.word w_testname
.4394					xt_assertx3d:
.4394	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.4396	d5 04		cmp $04,x		cmp pstack+4,x
.4398	d0 0e		bne $43a8		bne fail            ; If not, fail
.439a	b5 03		lda $03,x		lda pstack+3,x
.439c	d5 05		cmp $05,x		cmp pstack+5,x
.439e	d0 08		bne $43a8		bne fail
.43a0	8a		txa			txa                 ; If so, clean up the stack
.43a1	18		clc			clc
.43a2	69 04		adc #$04		adc #4
.43a4	aa		tax			tax
.43a5	4c c4 42	jmp $42c4		jmp xt_next            ; And continue
.43a8						fail:
.43a8	a9 e5		lda #$e5		lda #<leadin        ; Print the failure message
.43aa	85 33		sta $33			sta src_ptr
.43ac	a9 43		lda #$43		lda #>leadin
.43ae	85 34		sta $34			sta src_ptr+1
.43b0	20 a0 42	jsr $42a0		jsr prints
.43b3	a5 28		lda $28			lda test            ; Print the name of the test
.43b5	85 33		sta $33			sta src_ptr
.43b7	a5 29		lda $29			lda test+1
.43b9	85 34		sta $34			sta src_ptr+1
.43bb	20 a0 42	jsr $42a0		jsr prints
.43be	a9 f8		lda #$f8		lda #<actual        ; Print the "Actual" label
.43c0	85 33		sta $33			sta src_ptr
.43c2	a9 43		lda #$43		lda #>actual
.43c4	85 34		sta $34			sta src_ptr+1
.43c6	20 a0 42	jsr $42a0		jsr prints
.43c9	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.43cb	b5 04		lda $04,x		lda pstack+4,x
.43cd	20 86 42	jsr $4286		jsr printyah
.43d0	a9 ec		lda #$ec		lda #<expected      ; Print the "Expected" label
.43d2	85 33		sta $33			sta src_ptr
.43d4	a9 43		lda #$43		lda #>expected
.43d6	85 34		sta $34			sta src_ptr+1
.43d8	20 a0 42	jsr $42a0		jsr prints
.43db	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.43dd	b5 02		lda $02,x		lda pstack+2,x
.43df	20 86 42	jsr $4286		jsr printyah
.43e2						lock:
.43e2	ea		nop			nop                 ; Lock up
.43e3	80 fd		bra $43e2		bra lock
.43e5						leadin:
>43e5	46 41 49 4c 3a 20 00			.null "FAIL: "
.43ec						expected:
>43ec	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>43f4	44 3a 20 00
.43f8						actual:
>43f8	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>4400	20 00
.4402					w_halt:
>4402	04					.byte $04
>4403	68 61 6c 74				.text 'halt'
>4407	00 00 00 00 00 00 00 00			.fill 12,0
>440f	00 00 00 00
>4413	81 43					.word w_assertx3d
.4415					xt_halt:
.4415	a9 79		lda #$79		lda #<registers         ; Print register banner
.4417	85 33		sta $33			sta src_ptr
.4419	a9 44		lda #$44		lda #>registers
.441b	85 34		sta $34			sta src_ptr+1
.441d	20 a0 42	jsr $42a0		jsr prints
.4420	a4 21		ldy $21			ldy ip+1                ; Print the IP
.4422	a5 20		lda $20			lda ip
.4424	20 86 42	jsr $4286		jsr printyah
.4427	a9 20		lda #$20		lda #' '
.4429	20 15 42	jsr $4215		jsr conout
.442c	a4 23		ldy $23			ldy wp+1                ; Print the WP
.442e	a5 22		lda $22			lda wp
.4430	20 86 42	jsr $4286		jsr printyah
.4433	a9 20		lda #$20		lda #' '
.4435	20 15 42	jsr $4215		jsr conout
.4438	86 2e		stx $2e			stx savex               ; Print the return stack pointer
.443a	a0 01		ldy #$01		ldy #$01
.443c	ba		tsx			tsx
.443d	8a		txa			txa
.443e	20 86 42	jsr $4286		jsr printyah
.4441	a6 2e		ldx $2e			ldx savex
.4443	a9 20		lda #$20		lda #' '
.4445	20 15 42	jsr $4215		jsr conout
.4448	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.444a	8a		txa			txa
.444b	20 86 42	jsr $4286		jsr printyah
.444e	a9 0d		lda #$0d		lda #13
.4450	20 15 42	jsr $4215		jsr conout
.4453	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.4455	b0 1f		bcs $4476		bge lock
.4457	a9 44		lda #$44		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.4459	85 34		sta $34			sta src_ptr+1
.445b	a9 94		lda #$94		lda #<stackmsg
.445d	85 33		sta $33			sta src_ptr
.445f	20 a0 42	jsr $42a0		jsr prints
.4462						loop:
.4462	e0 6e		cpx #$6e		cpx #$6e
.4464	b0 10		bcs $4476		bge lock
.4466	b4 03		ldy $03,x		ldy pstack+3,x
.4468	b5 02		lda $02,x		lda pstack+2,x
.446a	e8		inx			inx
.446b	e8		inx			inx
.446c	20 86 42	jsr $4286		jsr printyah
.446f	a9 20		lda #$20		lda #' '
.4471	20 15 42	jsr $4215		jsr conout
.4474	80 ec		bra $4462		bra loop
.4476						lock:
.4476						wait:
.4476	ea		nop			nop
.4477	80 fd		bra $4476		bra wait
>4479	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>4481	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>4491	7c 20 00				.null "| "
>4494	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>449c	65 72 20 53 74 61 63 6b 3a 0d 00
.44a7					w_rpx40:
>44a7	03					.byte $03
>44a8	72 70 40				.text 'rp@'
>44ab	00 00 00 00 00 00 00 00			.fill 13,0
>44b3	00 00 00 00 00
>44b8	02 44					.word w_halt
.44ba					xt_rpx40:
.44ba	86 2e		stx $2e			stx savex           ; Save the parameter stack pointer
.44bc	ba		tsx			tsx                 ; Get the return stack pointer
.44bd	85 2a		sta $2a			sta tmp             ; Save it for later
.44bf	a6 2e		ldx $2e			ldx savex           ; Recover the parameter stack pointer
.44c1	a9 01		lda #$01		lda #$01            ; Get the high byte of the RSP
.44c3	95 01		sta $01,x		sta pstack+1,x      ; Save it to the parameter stack
.44c5	a5 2a		lda $2a			lda tmp             ; Get the low byte of the RSP
.44c7	95 00		sta $00,x		sta pstack,x        ; Save it to the parameter stack
.44c9	ca		dex			dex
.44ca	ca		dex			dex
.44cb	4c c4 42	jmp $42c4		jmp xt_next
.44ce					w_rpx21:
>44ce	03					.byte $03
>44cf	72 70 21				.text 'rp!'
>44d2	00 00 00 00 00 00 00 00			.fill 13,0
>44da	00 00 00 00 00
>44df	a7 44					.word w_rpx40
.44e1					xt_rpx21:
.44e1	86 2e		stx $2e			stx savex           ; Save the parameter stack pointer
.44e3	b5 02		lda $02,x		lda pstack+2,x      ; Get the new RSP from the parameter stack
.44e5	aa		tax			tax
.44e6	9a		txs			txs                 ; Set the RSP
.44e7	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.44e9	e8		inx			inx
.44ea	e8		inx			inx
.44eb	4c c4 42	jmp $42c4		jmp xt_next
.44ee					w_spx40:
>44ee	03					.byte $03
>44ef	73 70 40				.text 'sp@'
>44f2	00 00 00 00 00 00 00 00			.fill 13,0
>44fa	00 00 00 00 00
>44ff	ce 44					.word w_rpx21
.4501					xt_spx40:
.4501	a9 00		lda #$00		lda #>pstack        ; Get the high byte of the stack address
.4503	95 01		sta $01,x		sta pstack+1,x      ; And push it to the stack
.4505	8a		txa			txa                 ; Get the low byte of the stack address
.4506	95 00		sta $00,x		sta pstack,x        ; And push it to the stack
.4508	ca		dex			dex
.4509	ca		dex			dex
.450a	4c c4 42	jmp $42c4		jmp xt_next
.450d					w_spx21:
>450d	03					.byte $03
>450e	73 70 21				.text 'sp!'
>4511	00 00 00 00 00 00 00 00			.fill 13,0
>4519	00 00 00 00 00
>451e	ee 44					.word w_spx40
.4520					xt_spx21:
.4520	b5 02		lda $02,x		lda pstack+2,x      ; Get the address from the stack
.4522	aa		tax			tax                 ; And set the stack pointer
.4523	4c c4 42	jmp $42c4		jmp xt_next
.4526					w_emit:
>4526	04					.byte $04
>4527	65 6d 69 74				.text 'emit'
>452b	00 00 00 00 00 00 00 00			.fill 12,0
>4533	00 00 00 00
>4537	0d 45					.word w_spx21
.4539					xt_emit:
.4539	b5 02		lda $02,x		lda pstack+2,x
.453b	da		phx			phx
.453c	20 15 42	jsr $4215		jsr conout
.453f	fa		plx			plx
.4540	e8		inx			inx
.4541	e8		inx			inx
.4542	4c c4 42	jmp $42c4		jmp xt_next
.4545					w_keyx3f:
>4545	04					.byte $04
>4546	6b 65 79 3f				.text 'key?'
>454a	00 00 00 00 00 00 00 00			.fill 12,0
>4552	00 00 00 00
>4556	26 45					.word w_emit
.4558					xt_keyx3f:
.4558	20 cc 40	jsr $40cc		jsr constat
.455b	29 01		and #$01		and #1
.455d	f0 06		beq $4565		beq waiting
.455f	74 00		stz $00,x		stz pstack,x
.4561	74 01		stz $01,x		stz pstack+1,x
.4563	80 06		bra $456b		bra done
.4565						waiting:
.4565	a9 ff		lda #$ff		lda #$ff
.4567	95 00		sta $00,x		sta pstack,x
.4569	95 01		sta $01,x		sta pstack+1,x
.456b						done:
.456b	ca		dex			dex
.456c	ca		dex			dex
.456d	4c c4 42	jmp $42c4		jmp xt_next
.4570					w_key:
>4570	03					.byte $03
>4571	6b 65 79				.text 'key'
>4574	00 00 00 00 00 00 00 00			.fill 13,0
>457c	00 00 00 00 00
>4581	45 45					.word w_keyx3f
.4583					xt_key:
.4583	da		phx			phx
.4584						wait:
.4584	20 cf 40	jsr $40cf		jsr conin
.4587	c9 00		cmp #$00		cmp #0
.4589	f0 f9		beq $4584		beq wait
.458b	fa		plx			plx
.458c	95 00		sta $00,x		sta pstack,x
.458e	74 01		stz $01,x		stz pstack+1,x
.4590	ca		dex			dex
.4591	ca		dex			dex
.4592	4c c4 42	jmp $42c4		jmp xt_next
.4595					w_cr:
>4595	02					.byte $02
>4596	63 72					.text 'cr'
>4598	00 00 00 00 00 00 00 00			.fill 14,0
>45a0	00 00 00 00 00 00
>45a6	70 45					.word w_key
.45a8					xt_cr:
.45a8	da		phx			phx
.45a9	a9 0d		lda #$0d		lda #$0d
.45ab	20 15 42	jsr $4215		jsr conout
.45ae	fa		plx			plx
.45af	4c c4 42	jmp $42c4		jmp xt_next
.45b2					w_0:
>45b2	01					.byte $01
>45b3	30					.text '0'
>45b4	00 00 00 00 00 00 00 00			.fill 15,0
>45bc	00 00 00 00 00 00 00
>45c3	95 45					.word w_cr
.45c5					xt_0:
.45c5	74 01		stz $01,x		stz pstack+1,x
.45c7	74 00		stz $00,x		stz pstack,x
.45c9	ca		dex			dex
.45ca	ca		dex			dex
.45cb	4c c4 42	jmp $42c4		jmp xt_next
.45ce					w_1:
>45ce	01					.byte $01
>45cf	31					.text '1'
>45d0	00 00 00 00 00 00 00 00			.fill 15,0
>45d8	00 00 00 00 00 00 00
>45df	b2 45					.word w_0
.45e1					xt_1:
.45e1	74 01		stz $01,x		stz pstack+1,x
.45e3	a9 01		lda #$01		lda #1
.45e5	95 00		sta $00,x		sta pstack,x
.45e7	ca		dex			dex
.45e8	ca		dex			dex
.45e9	4c c4 42	jmp $42c4		jmp xt_next
.45ec					w_2:
>45ec	01					.byte $01
>45ed	32					.text '2'
>45ee	00 00 00 00 00 00 00 00			.fill 15,0
>45f6	00 00 00 00 00 00 00
>45fd	ce 45					.word w_1
.45ff					xt_2:
.45ff	74 01		stz $01,x		stz pstack+1,x
.4601	a9 02		lda #$02		lda #2
.4603	95 00		sta $00,x		sta pstack,x
.4605	ca		dex			dex
.4606	ca		dex			dex
.4607	4c c4 42	jmp $42c4		jmp xt_next
.460a					w_x2d1:
>460a	02					.byte $02
>460b	2d 31					.text '-1'
>460d	00 00 00 00 00 00 00 00			.fill 14,0
>4615	00 00 00 00 00 00
>461b	ec 45					.word w_2
.461d					xt_x2d1:
.461d	a9 ff		lda #$ff		lda #$ff
.461f	95 01		sta $01,x		sta pstack+1,x
.4621	95 00		sta $00,x		sta pstack,x
.4623	ca		dex			dex
.4624	ca		dex			dex
.4625	4c c4 42	jmp $42c4		jmp xt_next
.4628					w_x2d2:
>4628	02					.byte $02
>4629	2d 32					.text '-2'
>462b	00 00 00 00 00 00 00 00			.fill 14,0
>4633	00 00 00 00 00 00
>4639	0a 46					.word w_x2d1
.463b					xt_x2d2:
.463b	a9 fe		lda #$fe		lda #$fe
.463d	95 01		sta $01,x		sta pstack+1,x
.463f	95 00		sta $00,x		sta pstack,x
.4641	ca		dex			dex
.4642	ca		dex			dex
.4643	4c c4 42	jmp $42c4		jmp xt_next
.4646					w_x28literalx29:
>4646	09					.byte $09
>4647	28 6c 69 74 65 72 61 6c			.text '(literal)'
>464f	29
>4650	00 00 00 00 00 00 00			.fill 7,0
>4657	28 46					.word w_x2d2
.4659					xt_x28literalx29:
.4659	a0 01		ldy #$01		ldy #1
.465b	b2 20		lda ($20)		lda (ip)
.465d	95 00		sta $00,x		sta pstack,x
.465f	b1 20		lda ($20),y		lda (ip),y
.4661	95 01		sta $01,x		sta pstack+1,x
.4663	ca		dex			dex
.4664	ca		dex			dex
.4665	18		clc			clc
.4666	a5 20		lda $20			lda ip
.4668	69 02		adc #$02		adc #2
.466a	85 20		sta $20			sta ip
.466c	a5 21		lda $21			lda ip+1
.466e	69 00		adc #$00		adc #0
.4670	85 21		sta $21			sta ip+1
.4672	4c c4 42	jmp $42c4		jmp xt_next
.4675					w_x28dliteralx29:
>4675	0a					.byte $0A
>4676	28 64 6c 69 74 65 72 61			.text '(dliteral)'
>467e	6c 29
>4680	00 00 00 00 00 00			.fill 6,0
>4686	46 46					.word w_x28literalx29
.4688					xt_x28dliteralx29:
.4688	a0 01		ldy #$01		ldy #1
.468a	b2 20		lda ($20)		lda (ip)
.468c	95 00		sta $00,x		sta pstack,x
.468e	b1 20		lda ($20),y		lda (ip),y
.4690	95 01		sta $01,x		sta pstack+1,x
.4692	c8		iny			iny
.4693	95 02		sta $02,x		sta pstack+2,x
.4695	c8		iny			iny
.4696	95 03		sta $03,x		sta pstack+3,x
.4698	ca		dex			dex
.4699	ca		dex			dex
.469a	ca		dex			dex
.469b	ca		dex			dex
.469c	18		clc			clc
.469d	a5 20		lda $20			lda ip
.469f	69 02		adc #$02		adc #2
.46a1	85 20		sta $20			sta ip
.46a3	a5 21		lda $21			lda ip+1
.46a5	69 00		adc #$00		adc #0
.46a7	85 21		sta $21			sta ip+1
.46a9	4c c4 42	jmp $42c4		jmp xt_next
.46ac					w_depth:
>46ac	05					.byte $05
>46ad	64 65 70 74 68				.text 'depth'
>46b2	00 00 00 00 00 00 00 00			.fill 11,0
>46ba	00 00 00
>46bd	75 46					.word w_x28dliteralx29
.46bf					xt_depth:
.46bf	86 2a		stx $2a			stx tmp
.46c1	38		sec			sec
.46c2	a9 6e		lda #$6e		lda #$6e
.46c4	e5 2a		sbc $2a			sbc tmp
.46c6	4a		lsr a			lsr a
.46c7	74 01		stz $01,x		stz pstack+1,x
.46c9	95 00		sta $00,x		sta pstack,x
.46cb	ca		dex			dex
.46cc	ca		dex			dex
.46cd	4c c4 42	jmp $42c4		jmp xt_next
.46d0					w_unittest:
>46d0	08					.byte $08
>46d1	75 6e 69 74 74 65 73 74			.text 'unittest'
>46d9	00 00 00 00 00 00 00 00			.fill 8,0
>46e1	ac 46					.word w_depth
.46e3					xt_unittest:
.46e3	4c 0d 43	jmp $430d		jmp xt_enter
>46e6	59 46					.word xt_x28literalx29
>46e8	ee 46					.word l_2
>46ea	db 65					.word xt_x28branchx29
>46ec	fa 46					.word l_3
.46ee					l_2:
>46ee	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>46f6	3e 20 30 00
.46fa					l_3:
>46fa	74 43					.word xt_testname
>46fc	bf 46					.word xt_depth
>46fe	59 46					.word xt_x28literalx29
>4700	00 00					.word 0
>4702	94 43					.word xt_assertx3d
>4704	59 46					.word xt_x28literalx29
>4706	0c 47					.word l_4
>4708	db 65					.word xt_x28branchx29
>470a	1c 47					.word l_5
.470c					l_4:
>470c	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>4714	2d 2d 3e 20 30 20 31 00
.471c					l_5:
>471c	74 43					.word xt_testname
>471e	59 46					.word xt_x28literalx29
>4720	00 00					.word 0
>4722	bf 46					.word xt_depth
>4724	59 46					.word xt_x28literalx29
>4726	01 00					.word 1
>4728	94 43					.word xt_assertx3d
>472a	59 46					.word xt_x28literalx29
>472c	00 00					.word 0
>472e	94 43					.word xt_assertx3d
>4730	59 46					.word xt_x28literalx29
>4732	38 47					.word l_6
>4734	db 65					.word xt_x28branchx29
>4736	50 47					.word l_7
.4738					l_6:
>4738	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>4740	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.4750					l_7:
>4750	74 43					.word xt_testname
>4752	59 46					.word xt_x28literalx29
>4754	01 00					.word 1
>4756	59 46					.word xt_x28literalx29
>4758	01 00					.word 1
>475a	59 46					.word xt_x28literalx29
>475c	01 00					.word 1
>475e	bf 46					.word xt_depth
>4760	59 46					.word xt_x28literalx29
>4762	03 00					.word 3
>4764	94 43					.word xt_assertx3d
>4766	59 46					.word xt_x28literalx29
>4768	01 00					.word 1
>476a	94 43					.word xt_assertx3d
>476c	59 46					.word xt_x28literalx29
>476e	01 00					.word 1
>4770	94 43					.word xt_assertx3d
>4772	59 46					.word xt_x28literalx29
>4774	01 00					.word 1
>4776	94 43					.word xt_assertx3d
>4778	59 46					.word xt_x28literalx29
>477a	80 47					.word l_8
>477c	db 65					.word xt_x28branchx29
>477e	8f 47					.word l_9
.4780					l_8:
>4780	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>4788	20 2d 2d 3e 20 31 00
.478f					l_9:
>478f	74 43					.word xt_testname
>4791	59 46					.word xt_x28literalx29
>4793	01 00					.word 1
>4795	59 46					.word xt_x28literalx29
>4797	02 00					.word 2
>4799	78 5d					.word xt_drop
>479b	59 46					.word xt_x28literalx29
>479d	01 00					.word 1
>479f	94 43					.word xt_assertx3d
>47a1	59 46					.word xt_x28literalx29
>47a3	a9 47					.word l_10
>47a5	db 65					.word xt_x28branchx29
>47a7	bc 47					.word l_11
.47a9					l_10:
>47a9	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>47b1	6f 70 20 2d 2d 3e 20 31 20 32 00
.47bc					l_11:
>47bc	74 43					.word xt_testname
>47be	59 46					.word xt_x28literalx29
>47c0	01 00					.word 1
>47c2	59 46					.word xt_x28literalx29
>47c4	02 00					.word 2
>47c6	59 46					.word xt_x28literalx29
>47c8	03 00					.word 3
>47ca	78 5d					.word xt_drop
>47cc	59 46					.word xt_x28literalx29
>47ce	02 00					.word 2
>47d0	94 43					.word xt_assertx3d
>47d2	59 46					.word xt_x28literalx29
>47d4	01 00					.word 1
>47d6	94 43					.word xt_assertx3d
>47d8	59 46					.word xt_x28literalx29
>47da	e0 47					.word l_12
>47dc	db 65					.word xt_x28branchx29
>47de	ee 47					.word l_13
.47e0					l_12:
>47e0	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>47e8	3e 20 31 20 31 00
.47ee					l_13:
>47ee	74 43					.word xt_testname
>47f0	59 46					.word xt_x28literalx29
>47f2	01 00					.word 1
>47f4	90 5d					.word xt_dup
>47f6	59 46					.word xt_x28literalx29
>47f8	01 00					.word 1
>47fa	94 43					.word xt_assertx3d
>47fc	59 46					.word xt_x28literalx29
>47fe	01 00					.word 1
>4800	94 43					.word xt_assertx3d
>4802	59 46					.word xt_x28literalx29
>4804	0a 48					.word l_14
>4806	db 65					.word xt_x28branchx29
>4808	1c 48					.word l_15
.480a					l_14:
>480a	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>4812	2d 2d 3e 20 31 20 32 20 32 00
.481c					l_15:
>481c	74 43					.word xt_testname
>481e	59 46					.word xt_x28literalx29
>4820	01 00					.word 1
>4822	59 46					.word xt_x28literalx29
>4824	02 00					.word 2
>4826	90 5d					.word xt_dup
>4828	59 46					.word xt_x28literalx29
>482a	02 00					.word 2
>482c	94 43					.word xt_assertx3d
>482e	59 46					.word xt_x28literalx29
>4830	02 00					.word 2
>4832	94 43					.word xt_assertx3d
>4834	59 46					.word xt_x28literalx29
>4836	01 00					.word 1
>4838	94 43					.word xt_assertx3d
>483a	59 46					.word xt_x28literalx29
>483c	42 48					.word l_16
>483e	db 65					.word xt_x28branchx29
>4840	57 48					.word l_17
.4842					l_16:
>4842	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>484a	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.4857					l_17:
>4857	74 43					.word xt_testname
>4859	59 46					.word xt_x28literalx29
>485b	01 00					.word 1
>485d	59 46					.word xt_x28literalx29
>485f	02 00					.word 2
>4861	59 46					.word xt_x28literalx29
>4863	03 00					.word 3
>4865	b0 5d					.word xt_swap
>4867	59 46					.word xt_x28literalx29
>4869	02 00					.word 2
>486b	94 43					.word xt_assertx3d
>486d	59 46					.word xt_x28literalx29
>486f	03 00					.word 3
>4871	94 43					.word xt_assertx3d
>4873	59 46					.word xt_x28literalx29
>4875	01 00					.word 1
>4877	94 43					.word xt_assertx3d
>4879	59 46					.word xt_x28literalx29
>487b	81 48					.word l_18
>487d	db 65					.word xt_x28branchx29
>487f	9b 48					.word l_19
.4881					l_18:
>4881	31 20 32 20 33 20 34 20			.null "1 2 3 4 2swap --> 3 4 1 2"
>4889	32 73 77 61 70 20 2d 2d 3e 20 33 20 34 20 31 20
>4899	32 00
.489b					l_19:
>489b	74 43					.word xt_testname
>489d	59 46					.word xt_x28literalx29
>489f	01 00					.word 1
>48a1	59 46					.word xt_x28literalx29
>48a3	02 00					.word 2
>48a5	59 46					.word xt_x28literalx29
>48a7	03 00					.word 3
>48a9	59 46					.word xt_x28literalx29
>48ab	04 00					.word 4
>48ad	d6 5d					.word xt_2swap
>48af	59 46					.word xt_x28literalx29
>48b1	02 00					.word 2
>48b3	94 43					.word xt_assertx3d
>48b5	59 46					.word xt_x28literalx29
>48b7	01 00					.word 1
>48b9	94 43					.word xt_assertx3d
>48bb	59 46					.word xt_x28literalx29
>48bd	04 00					.word 4
>48bf	94 43					.word xt_assertx3d
>48c1	59 46					.word xt_x28literalx29
>48c3	03 00					.word 3
>48c5	94 43					.word xt_assertx3d
>48c7	59 46					.word xt_x28literalx29
>48c9	cf 48					.word l_20
>48cb	db 65					.word xt_x28branchx29
>48cd	e2 48					.word l_21
.48cf					l_20:
>48cf	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>48d7	20 2d 2d 3e 20 31 20 32 20 31 00
.48e2					l_21:
>48e2	74 43					.word xt_testname
>48e4	59 46					.word xt_x28literalx29
>48e6	01 00					.word 1
>48e8	59 46					.word xt_x28literalx29
>48ea	02 00					.word 2
>48ec	14 5e					.word xt_over
>48ee	59 46					.word xt_x28literalx29
>48f0	01 00					.word 1
>48f2	94 43					.word xt_assertx3d
>48f4	59 46					.word xt_x28literalx29
>48f6	02 00					.word 2
>48f8	94 43					.word xt_assertx3d
>48fa	59 46					.word xt_x28literalx29
>48fc	01 00					.word 1
>48fe	94 43					.word xt_assertx3d
>4900	59 46					.word xt_x28literalx29
>4902	08 49					.word l_22
>4904	db 65					.word xt_x28branchx29
>4906	26 49					.word l_23
.4908					l_22:
>4908	31 20 32 20 33 20 34 20			.null "1 2 3 4 2over --> 1 2 3 4 1 2"
>4910	32 6f 76 65 72 20 2d 2d 3e 20 31 20 32 20 33 20
>4920	34 20 31 20 32 00
.4926					l_23:
>4926	74 43					.word xt_testname
>4928	59 46					.word xt_x28literalx29
>492a	01 00					.word 1
>492c	59 46					.word xt_x28literalx29
>492e	02 00					.word 2
>4930	59 46					.word xt_x28literalx29
>4932	03 00					.word 3
>4934	59 46					.word xt_x28literalx29
>4936	04 00					.word 4
>4938	34 5e					.word xt_2over
>493a	59 46					.word xt_x28literalx29
>493c	02 00					.word 2
>493e	94 43					.word xt_assertx3d
>4940	59 46					.word xt_x28literalx29
>4942	01 00					.word 1
>4944	94 43					.word xt_assertx3d
>4946	59 46					.word xt_x28literalx29
>4948	04 00					.word 4
>494a	94 43					.word xt_assertx3d
>494c	59 46					.word xt_x28literalx29
>494e	03 00					.word 3
>4950	94 43					.word xt_assertx3d
>4952	59 46					.word xt_x28literalx29
>4954	02 00					.word 2
>4956	94 43					.word xt_assertx3d
>4958	59 46					.word xt_x28literalx29
>495a	01 00					.word 1
>495c	94 43					.word xt_assertx3d
>495e	59 46					.word xt_x28literalx29
>4960	66 49					.word l_24
>4962	db 65					.word xt_x28branchx29
>4964	86 49					.word l_25
.4966					l_24:
>4966	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>496e	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>497e	3e 20 35 35 35 35 68 00
.4986					l_25:
>4986	74 43					.word xt_testname
>4988	59 46					.word xt_x28literalx29
>498a	55 55					.word 21845
>498c	59 46					.word xt_x28literalx29
>498e	04 00					.word 4
>4990	d1 5e					.word xt_x21
>4992	59 46					.word xt_x28literalx29
>4994	04 00					.word 4
>4996	fd 5e					.word xt_x40
>4998	59 46					.word xt_x28literalx29
>499a	55 55					.word 21845
>499c	94 43					.word xt_assertx3d
>499e	59 46					.word xt_x28literalx29
>49a0	a6 49					.word l_26
>49a2	db 65					.word xt_x28branchx29
>49a4	c6 49					.word l_27
.49a6					l_26:
>49a6	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>49ae	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>49be	3e 20 61 61 61 61 68 00
.49c6					l_27:
>49c6	74 43					.word xt_testname
>49c8	59 46					.word xt_x28literalx29
>49ca	aa aa					.word 43690
>49cc	59 46					.word xt_x28literalx29
>49ce	04 00					.word 4
>49d0	d1 5e					.word xt_x21
>49d2	59 46					.word xt_x28literalx29
>49d4	04 00					.word 4
>49d6	fd 5e					.word xt_x40
>49d8	59 46					.word xt_x28literalx29
>49da	aa aa					.word 43690
>49dc	94 43					.word xt_assertx3d
>49de	59 46					.word xt_x28literalx29
>49e0	e6 49					.word l_28
>49e2	db 65					.word xt_x28branchx29
>49e4	04 4a					.word l_29
.49e6					l_28:
>49e6	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>49ee	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>49fe	3e 20 35 35 68 00
.4a04					l_29:
>4a04	74 43					.word xt_testname
>4a06	59 46					.word xt_x28literalx29
>4a08	55 00					.word 85
>4a0a	59 46					.word xt_x28literalx29
>4a0c	03 00					.word 3
>4a0e	25 5f					.word xt_cx21
>4a10	59 46					.word xt_x28literalx29
>4a12	03 00					.word 3
>4a14	43 5f					.word xt_cx40
>4a16	59 46					.word xt_x28literalx29
>4a18	55 00					.word 85
>4a1a	94 43					.word xt_assertx3d
>4a1c	59 46					.word xt_x28literalx29
>4a1e	24 4a					.word l_30
>4a20	db 65					.word xt_x28branchx29
>4a22	42 4a					.word l_31
.4a24					l_30:
>4a24	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>4a2c	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>4a3c	3e 20 61 61 68 00
.4a42					l_31:
>4a42	74 43					.word xt_testname
>4a44	59 46					.word xt_x28literalx29
>4a46	aa 00					.word 170
>4a48	59 46					.word xt_x28literalx29
>4a4a	03 00					.word 3
>4a4c	25 5f					.word xt_cx21
>4a4e	59 46					.word xt_x28literalx29
>4a50	03 00					.word 3
>4a52	43 5f					.word xt_cx40
>4a54	59 46					.word xt_x28literalx29
>4a56	aa 00					.word 170
>4a58	94 43					.word xt_assertx3d
>4a5a	59 46					.word xt_x28literalx29
>4a5c	62 4a					.word l_32
>4a5e	db 65					.word xt_x28branchx29
>4a60	6e 4a					.word l_33
.4a62					l_32:
>4a62	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>4a6a	3e 20 31 00
.4a6e					l_33:
>4a6e	74 43					.word xt_testname
>4a70	59 46					.word xt_x28literalx29
>4a72	01 00					.word 1
>4a74	59 46					.word xt_x28literalx29
>4a76	00 00					.word 0
>4a78	35 61					.word xt_x2b
>4a7a	59 46					.word xt_x28literalx29
>4a7c	01 00					.word 1
>4a7e	94 43					.word xt_assertx3d
>4a80	59 46					.word xt_x28literalx29
>4a82	88 4a					.word l_34
>4a84	db 65					.word xt_x28branchx29
>4a86	94 4a					.word l_35
.4a88					l_34:
>4a88	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>4a90	3e 20 32 00
.4a94					l_35:
>4a94	74 43					.word xt_testname
>4a96	59 46					.word xt_x28literalx29
>4a98	01 00					.word 1
>4a9a	59 46					.word xt_x28literalx29
>4a9c	01 00					.word 1
>4a9e	35 61					.word xt_x2b
>4aa0	59 46					.word xt_x28literalx29
>4aa2	02 00					.word 2
>4aa4	94 43					.word xt_assertx3d
>4aa6	59 46					.word xt_x28literalx29
>4aa8	ae 4a					.word l_36
>4aaa	db 65					.word xt_x28branchx29
>4aac	bc 4a					.word l_37
.4aae					l_36:
>4aae	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>4ab6	2d 3e 20 31 33 00
.4abc					l_37:
>4abc	74 43					.word xt_testname
>4abe	59 46					.word xt_x28literalx29
>4ac0	03 00					.word 3
>4ac2	59 46					.word xt_x28literalx29
>4ac4	0a 00					.word 10
>4ac6	35 61					.word xt_x2b
>4ac8	59 46					.word xt_x28literalx29
>4aca	0d 00					.word 13
>4acc	94 43					.word xt_assertx3d
>4ace	59 46					.word xt_x28literalx29
>4ad0	d6 4a					.word l_38
>4ad2	db 65					.word xt_x28branchx29
>4ad4	e6 4a					.word l_39
.4ad6					l_38:
>4ad6	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>4ade	2b 20 2d 2d 3e 20 34 00
.4ae6					l_39:
>4ae6	74 43					.word xt_testname
>4ae8	59 46					.word xt_x28literalx29
>4aea	ff ff					.word 65535
>4aec	59 46					.word xt_x28literalx29
>4aee	05 00					.word 5
>4af0	35 61					.word xt_x2b
>4af2	59 46					.word xt_x28literalx29
>4af4	04 00					.word 4
>4af6	94 43					.word xt_assertx3d
>4af8	59 46					.word xt_x28literalx29
>4afa	00 4b					.word l_40
>4afc	db 65					.word xt_x28branchx29
>4afe	2b 4b					.word l_41
.4b00					l_40:
>4b00	31 32 33 34 68 20 35 36			.null "1234h 5678h 1111h 1111h d+ --> 2345h 6789h"
>4b08	37 38 68 20 31 31 31 31 68 20 31 31 31 31 68 20
>4b18	64 2b 20 2d 2d 3e 20 32 33 34 35 68 20 36 37 38
>4b28	39 68 00
.4b2b					l_41:
>4b2b	74 43					.word xt_testname
>4b2d	59 46					.word xt_x28literalx29
>4b2f	34 12					.word 4660
>4b31	59 46					.word xt_x28literalx29
>4b33	78 56					.word 22136
>4b35	59 46					.word xt_x28literalx29
>4b37	11 11					.word 4369
>4b39	59 46					.word xt_x28literalx29
>4b3b	11 11					.word 4369
>4b3d	5a 61					.word xt_dx2b
>4b3f	59 46					.word xt_x28literalx29
>4b41	89 67					.word 26505
>4b43	94 43					.word xt_assertx3d
>4b45	59 46					.word xt_x28literalx29
>4b47	45 23					.word 9029
>4b49	94 43					.word xt_assertx3d
>4b4b	59 46					.word xt_x28literalx29
>4b4d	53 4b					.word l_42
>4b4f	db 65					.word xt_x28branchx29
>4b51	7e 4b					.word l_43
.4b53					l_42:
>4b53	30 30 30 30 68 20 31 31			.null "0000h 1111h 0000h eeefh d+ --> 0001h 0000h"
>4b5b	31 31 68 20 30 30 30 30 68 20 65 65 65 66 68 20
>4b6b	64 2b 20 2d 2d 3e 20 30 30 30 31 68 20 30 30 30
>4b7b	30 68 00
.4b7e					l_43:
>4b7e	74 43					.word xt_testname
>4b80	59 46					.word xt_x28literalx29
>4b82	00 00					.word 0
>4b84	59 46					.word xt_x28literalx29
>4b86	11 11					.word 4369
>4b88	59 46					.word xt_x28literalx29
>4b8a	00 00					.word 0
>4b8c	59 46					.word xt_x28literalx29
>4b8e	ef ee					.word 61167
>4b90	5a 61					.word xt_dx2b
>4b92	59 46					.word xt_x28literalx29
>4b94	00 00					.word 0
>4b96	94 43					.word xt_assertx3d
>4b98	59 46					.word xt_x28literalx29
>4b9a	01 00					.word 1
>4b9c	94 43					.word xt_assertx3d
>4b9e	59 46					.word xt_x28literalx29
>4ba0	a6 4b					.word l_44
>4ba2	db 65					.word xt_x28branchx29
>4ba4	b2 4b					.word l_45
.4ba6					l_44:
>4ba6	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>4bae	3e 20 31 00
.4bb2					l_45:
>4bb2	74 43					.word xt_testname
>4bb4	59 46					.word xt_x28literalx29
>4bb6	04 00					.word 4
>4bb8	59 46					.word xt_x28literalx29
>4bba	03 00					.word 3
>4bbc	c0 61					.word xt_x2d
>4bbe	59 46					.word xt_x28literalx29
>4bc0	01 00					.word 1
>4bc2	94 43					.word xt_assertx3d
>4bc4	59 46					.word xt_x28literalx29
>4bc6	cc 4b					.word l_46
>4bc8	db 65					.word xt_x28branchx29
>4bca	dc 4b					.word l_47
.4bcc					l_46:
>4bcc	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>4bd4	3e 20 66 66 66 66 68 00
.4bdc					l_47:
>4bdc	74 43					.word xt_testname
>4bde	59 46					.word xt_x28literalx29
>4be0	03 00					.word 3
>4be2	59 46					.word xt_x28literalx29
>4be4	04 00					.word 4
>4be6	c0 61					.word xt_x2d
>4be8	59 46					.word xt_x28literalx29
>4bea	ff ff					.word 65535
>4bec	94 43					.word xt_assertx3d
>4bee	59 46					.word xt_x28literalx29
>4bf0	f6 4b					.word l_48
>4bf2	db 65					.word xt_x28branchx29
>4bf4	03 4c					.word l_49
.4bf6					l_48:
>4bf6	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>4bfe	2d 3e 20 35 00
.4c03					l_49:
>4c03	74 43					.word xt_testname
>4c05	59 46					.word xt_x28literalx29
>4c07	0a 00					.word 10
>4c09	59 46					.word xt_x28literalx29
>4c0b	05 00					.word 5
>4c0d	c0 61					.word xt_x2d
>4c0f	59 46					.word xt_x28literalx29
>4c11	05 00					.word 5
>4c13	94 43					.word xt_assertx3d
>4c15	59 46					.word xt_x28literalx29
>4c17	1d 4c					.word l_50
>4c19	db 65					.word xt_x28branchx29
>4c1b	2a 4c					.word l_51
.4c1d					l_50:
>4c1d	32 20 33 20 75 2a 20 2d			.null "2 3 u* --> 6"
>4c25	2d 3e 20 36 00
.4c2a					l_51:
>4c2a	74 43					.word xt_testname
>4c2c	59 46					.word xt_x28literalx29
>4c2e	02 00					.word 2
>4c30	59 46					.word xt_x28literalx29
>4c32	03 00					.word 3
>4c34	e5 61					.word xt_ux2a
>4c36	59 46					.word xt_x28literalx29
>4c38	06 00					.word 6
>4c3a	94 43					.word xt_assertx3d
>4c3c	59 46					.word xt_x28literalx29
>4c3e	44 4c					.word l_52
>4c40	db 65					.word xt_x28branchx29
>4c42	53 4c					.word l_53
.4c44					l_52:
>4c44	31 30 20 34 20 75 2a 20			.null "10 4 u* --> 40"
>4c4c	2d 2d 3e 20 34 30 00
.4c53					l_53:
>4c53	74 43					.word xt_testname
>4c55	59 46					.word xt_x28literalx29
>4c57	0a 00					.word 10
>4c59	59 46					.word xt_x28literalx29
>4c5b	04 00					.word 4
>4c5d	e5 61					.word xt_ux2a
>4c5f	59 46					.word xt_x28literalx29
>4c61	28 00					.word 40
>4c63	94 43					.word xt_assertx3d
>4c65	59 46					.word xt_x28literalx29
>4c67	6d 4c					.word l_54
>4c69	db 65					.word xt_x28branchx29
>4c6b	79 4c					.word l_55
.4c6d					l_54:
>4c6d	32 20 33 20 2a 20 2d 2d			.null "2 3 * --> 6"
>4c75	3e 20 36 00
.4c79					l_55:
>4c79	74 43					.word xt_testname
>4c7b	59 46					.word xt_x28literalx29
>4c7d	02 00					.word 2
>4c7f	59 46					.word xt_x28literalx29
>4c81	03 00					.word 3
>4c83	1d 62					.word xt_x2a
>4c85	59 46					.word xt_x28literalx29
>4c87	06 00					.word 6
>4c89	94 43					.word xt_assertx3d
>4c8b	59 46					.word xt_x28literalx29
>4c8d	93 4c					.word l_56
>4c8f	db 65					.word xt_x28branchx29
>4c91	a1 4c					.word l_57
.4c93					l_56:
>4c93	31 30 20 34 20 2a 20 2d			.null "10 4 * --> 40"
>4c9b	2d 3e 20 34 30 00
.4ca1					l_57:
>4ca1	74 43					.word xt_testname
>4ca3	59 46					.word xt_x28literalx29
>4ca5	0a 00					.word 10
>4ca7	59 46					.word xt_x28literalx29
>4ca9	04 00					.word 4
>4cab	1d 62					.word xt_x2a
>4cad	59 46					.word xt_x28literalx29
>4caf	28 00					.word 40
>4cb1	94 43					.word xt_assertx3d
>4cb3	59 46					.word xt_x28literalx29
>4cb5	bb 4c					.word l_58
>4cb7	db 65					.word xt_x28branchx29
>4cb9	cf 4c					.word l_59
.4cbb					l_58:
>4cbb	66 66 66 65 68 20 33 20			.null "fffeh 3 * --> fffah"
>4cc3	2a 20 2d 2d 3e 20 66 66 66 61 68 00
.4ccf					l_59:
>4ccf	74 43					.word xt_testname
>4cd1	59 46					.word xt_x28literalx29
>4cd3	fe ff					.word 65534
>4cd5	59 46					.word xt_x28literalx29
>4cd7	03 00					.word 3
>4cd9	1d 62					.word xt_x2a
>4cdb	59 46					.word xt_x28literalx29
>4cdd	fa ff					.word 65530
>4cdf	94 43					.word xt_assertx3d
>4ce1	59 46					.word xt_x28literalx29
>4ce3	e9 4c					.word l_60
>4ce5	db 65					.word xt_x28branchx29
>4ce7	fe 4c					.word l_61
.4ce9					l_60:
>4ce9	30 20 31 20 33 20 75 6d			.null "0 1 3 um/mod --> 1 0"
>4cf1	2f 6d 6f 64 20 2d 2d 3e 20 31 20 30 00
.4cfe					l_61:
>4cfe	74 43					.word xt_testname
>4d00	59 46					.word xt_x28literalx29
>4d02	00 00					.word 0
>4d04	59 46					.word xt_x28literalx29
>4d06	01 00					.word 1
>4d08	59 46					.word xt_x28literalx29
>4d0a	03 00					.word 3
>4d0c	3c 63					.word xt_umx2fmod
>4d0e	59 46					.word xt_x28literalx29
>4d10	00 00					.word 0
>4d12	94 43					.word xt_assertx3d
>4d14	59 46					.word xt_x28literalx29
>4d16	01 00					.word 1
>4d18	94 43					.word xt_assertx3d
>4d1a	59 46					.word xt_x28literalx29
>4d1c	22 4d					.word l_62
>4d1e	db 65					.word xt_x28branchx29
>4d20	37 4d					.word l_63
.4d22					l_62:
>4d22	30 20 32 20 33 20 75 6d			.null "0 2 3 um/mod --> 2 0"
>4d2a	2f 6d 6f 64 20 2d 2d 3e 20 32 20 30 00
.4d37					l_63:
>4d37	74 43					.word xt_testname
>4d39	59 46					.word xt_x28literalx29
>4d3b	00 00					.word 0
>4d3d	59 46					.word xt_x28literalx29
>4d3f	02 00					.word 2
>4d41	59 46					.word xt_x28literalx29
>4d43	03 00					.word 3
>4d45	3c 63					.word xt_umx2fmod
>4d47	59 46					.word xt_x28literalx29
>4d49	00 00					.word 0
>4d4b	94 43					.word xt_assertx3d
>4d4d	59 46					.word xt_x28literalx29
>4d4f	02 00					.word 2
>4d51	94 43					.word xt_assertx3d
>4d53	59 46					.word xt_x28literalx29
>4d55	5b 4d					.word l_64
>4d57	db 65					.word xt_x28branchx29
>4d59	70 4d					.word l_65
.4d5b					l_64:
>4d5b	30 20 33 20 33 20 75 6d			.null "0 3 3 um/mod --> 0 1"
>4d63	2f 6d 6f 64 20 2d 2d 3e 20 30 20 31 00
.4d70					l_65:
>4d70	74 43					.word xt_testname
>4d72	59 46					.word xt_x28literalx29
>4d74	00 00					.word 0
>4d76	59 46					.word xt_x28literalx29
>4d78	03 00					.word 3
>4d7a	59 46					.word xt_x28literalx29
>4d7c	03 00					.word 3
>4d7e	3c 63					.word xt_umx2fmod
>4d80	59 46					.word xt_x28literalx29
>4d82	01 00					.word 1
>4d84	94 43					.word xt_assertx3d
>4d86	59 46					.word xt_x28literalx29
>4d88	00 00					.word 0
>4d8a	94 43					.word xt_assertx3d
>4d8c	59 46					.word xt_x28literalx29
>4d8e	94 4d					.word l_66
>4d90	db 65					.word xt_x28branchx29
>4d92	a9 4d					.word l_67
.4d94					l_66:
>4d94	30 20 34 20 33 20 75 6d			.null "0 4 3 um/mod --> 1 1"
>4d9c	2f 6d 6f 64 20 2d 2d 3e 20 31 20 31 00
.4da9					l_67:
>4da9	74 43					.word xt_testname
>4dab	59 46					.word xt_x28literalx29
>4dad	00 00					.word 0
>4daf	59 46					.word xt_x28literalx29
>4db1	04 00					.word 4
>4db3	59 46					.word xt_x28literalx29
>4db5	03 00					.word 3
>4db7	3c 63					.word xt_umx2fmod
>4db9	59 46					.word xt_x28literalx29
>4dbb	01 00					.word 1
>4dbd	94 43					.word xt_assertx3d
>4dbf	59 46					.word xt_x28literalx29
>4dc1	01 00					.word 1
>4dc3	94 43					.word xt_assertx3d
>4dc5	59 46					.word xt_x28literalx29
>4dc7	cd 4d					.word l_68
>4dc9	db 65					.word xt_x28branchx29
>4dcb	e2 4d					.word l_69
.4dcd					l_68:
>4dcd	30 20 36 20 33 20 75 6d			.null "0 6 3 um/mod --> 0 2"
>4dd5	2f 6d 6f 64 20 2d 2d 3e 20 30 20 32 00
.4de2					l_69:
>4de2	74 43					.word xt_testname
>4de4	59 46					.word xt_x28literalx29
>4de6	00 00					.word 0
>4de8	59 46					.word xt_x28literalx29
>4dea	06 00					.word 6
>4dec	59 46					.word xt_x28literalx29
>4dee	03 00					.word 3
>4df0	3c 63					.word xt_umx2fmod
>4df2	59 46					.word xt_x28literalx29
>4df4	02 00					.word 2
>4df6	94 43					.word xt_assertx3d
>4df8	59 46					.word xt_x28literalx29
>4dfa	00 00					.word 0
>4dfc	94 43					.word xt_assertx3d
>4dfe	59 46					.word xt_x28literalx29
>4e00	06 4e					.word l_70
>4e02	db 65					.word xt_x28branchx29
>4e04	20 4e					.word l_71
.4e06					l_70:
>4e06	31 32 33 34 68 20 73 3e			.null "1234h s>d --> 0000h 1234h"
>4e0e	64 20 2d 2d 3e 20 30 30 30 30 68 20 31 32 33 34
>4e1e	68 00
.4e20					l_71:
>4e20	74 43					.word xt_testname
>4e22	59 46					.word xt_x28literalx29
>4e24	34 12					.word 4660
>4e26	97 63					.word xt_sx3ed
>4e28	59 46					.word xt_x28literalx29
>4e2a	34 12					.word 4660
>4e2c	94 43					.word xt_assertx3d
>4e2e	59 46					.word xt_x28literalx29
>4e30	00 00					.word 0
>4e32	94 43					.word xt_assertx3d
>4e34	59 46					.word xt_x28literalx29
>4e36	3c 4e					.word l_72
>4e38	db 65					.word xt_x28branchx29
>4e3a	56 4e					.word l_73
.4e3c					l_72:
>4e3c	66 66 66 66 68 20 73 3e			.null "ffffh s>d --> ffffh ffffh"
>4e44	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 66
>4e54	68 00
.4e56					l_73:
>4e56	74 43					.word xt_testname
>4e58	59 46					.word xt_x28literalx29
>4e5a	ff ff					.word 65535
>4e5c	97 63					.word xt_sx3ed
>4e5e	59 46					.word xt_x28literalx29
>4e60	ff ff					.word 65535
>4e62	94 43					.word xt_assertx3d
>4e64	59 46					.word xt_x28literalx29
>4e66	ff ff					.word 65535
>4e68	94 43					.word xt_assertx3d
>4e6a	59 46					.word xt_x28literalx29
>4e6c	72 4e					.word l_74
>4e6e	db 65					.word xt_x28branchx29
>4e70	8c 4e					.word l_75
.4e72					l_74:
>4e72	66 66 66 65 68 20 73 3e			.null "fffeh s>d --> ffffh fffeh"
>4e7a	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 65
>4e8a	68 00
.4e8c					l_75:
>4e8c	74 43					.word xt_testname
>4e8e	59 46					.word xt_x28literalx29
>4e90	fe ff					.word 65534
>4e92	97 63					.word xt_sx3ed
>4e94	59 46					.word xt_x28literalx29
>4e96	fe ff					.word 65534
>4e98	94 43					.word xt_assertx3d
>4e9a	59 46					.word xt_x28literalx29
>4e9c	ff ff					.word 65535
>4e9e	94 43					.word xt_assertx3d
>4ea0	59 46					.word xt_x28literalx29
>4ea2	a8 4e					.word l_76
>4ea4	db 65					.word xt_x28branchx29
>4ea6	b3 4e					.word l_77
.4ea8					l_76:
>4ea8	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>4eb0	20 32 00
.4eb3					l_77:
>4eb3	74 43					.word xt_testname
>4eb5	59 46					.word xt_x28literalx29
>4eb7	01 00					.word 1
>4eb9	c6 63					.word xt_1x2b
>4ebb	59 46					.word xt_x28literalx29
>4ebd	02 00					.word 2
>4ebf	94 43					.word xt_assertx3d
>4ec1	59 46					.word xt_x28literalx29
>4ec3	c9 4e					.word l_78
>4ec5	db 65					.word xt_x28branchx29
>4ec7	d4 4e					.word l_79
.4ec9					l_78:
>4ec9	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>4ed1	20 31 00
.4ed4					l_79:
>4ed4	74 43					.word xt_testname
>4ed6	59 46					.word xt_x28literalx29
>4ed8	00 00					.word 0
>4eda	c6 63					.word xt_1x2b
>4edc	59 46					.word xt_x28literalx29
>4ede	01 00					.word 1
>4ee0	94 43					.word xt_assertx3d
>4ee2	59 46					.word xt_x28literalx29
>4ee4	ea 4e					.word l_80
>4ee6	db 65					.word xt_x28branchx29
>4ee8	f7 4e					.word l_81
.4eea					l_80:
>4eea	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>4ef2	3e 20 32 31 00
.4ef7					l_81:
>4ef7	74 43					.word xt_testname
>4ef9	59 46					.word xt_x28literalx29
>4efb	14 00					.word 20
>4efd	c6 63					.word xt_1x2b
>4eff	59 46					.word xt_x28literalx29
>4f01	15 00					.word 21
>4f03	94 43					.word xt_assertx3d
>4f05	59 46					.word xt_x28literalx29
>4f07	0d 4f					.word l_82
>4f09	db 65					.word xt_x28branchx29
>4f0b	1c 4f					.word l_83
.4f0d					l_82:
>4f0d	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>4f15	20 2d 2d 3e 20 30 00
.4f1c					l_83:
>4f1c	74 43					.word xt_testname
>4f1e	59 46					.word xt_x28literalx29
>4f20	ff ff					.word 65535
>4f22	c6 63					.word xt_1x2b
>4f24	59 46					.word xt_x28literalx29
>4f26	00 00					.word 0
>4f28	94 43					.word xt_assertx3d
>4f2a	59 46					.word xt_x28literalx29
>4f2c	32 4f					.word l_84
>4f2e	db 65					.word xt_x28branchx29
>4f30	3d 4f					.word l_85
.4f32					l_84:
>4f32	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>4f3a	20 33 00
.4f3d					l_85:
>4f3d	74 43					.word xt_testname
>4f3f	59 46					.word xt_x28literalx29
>4f41	01 00					.word 1
>4f43	e2 63					.word xt_2x2b
>4f45	59 46					.word xt_x28literalx29
>4f47	03 00					.word 3
>4f49	94 43					.word xt_assertx3d
>4f4b	59 46					.word xt_x28literalx29
>4f4d	53 4f					.word l_86
>4f4f	db 65					.word xt_x28branchx29
>4f51	5e 4f					.word l_87
.4f53					l_86:
>4f53	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>4f5b	20 32 00
.4f5e					l_87:
>4f5e	74 43					.word xt_testname
>4f60	59 46					.word xt_x28literalx29
>4f62	00 00					.word 0
>4f64	e2 63					.word xt_2x2b
>4f66	59 46					.word xt_x28literalx29
>4f68	02 00					.word 2
>4f6a	94 43					.word xt_assertx3d
>4f6c	59 46					.word xt_x28literalx29
>4f6e	74 4f					.word l_88
>4f70	db 65					.word xt_x28branchx29
>4f72	81 4f					.word l_89
.4f74					l_88:
>4f74	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>4f7c	3e 20 32 32 00
.4f81					l_89:
>4f81	74 43					.word xt_testname
>4f83	59 46					.word xt_x28literalx29
>4f85	14 00					.word 20
>4f87	e2 63					.word xt_2x2b
>4f89	59 46					.word xt_x28literalx29
>4f8b	16 00					.word 22
>4f8d	94 43					.word xt_assertx3d
>4f8f	59 46					.word xt_x28literalx29
>4f91	97 4f					.word l_90
>4f93	db 65					.word xt_x28branchx29
>4f95	a6 4f					.word l_91
.4f97					l_90:
>4f97	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>4f9f	20 2d 2d 3e 20 30 00
.4fa6					l_91:
>4fa6	74 43					.word xt_testname
>4fa8	59 46					.word xt_x28literalx29
>4faa	fe ff					.word 65534
>4fac	e2 63					.word xt_2x2b
>4fae	59 46					.word xt_x28literalx29
>4fb0	00 00					.word 0
>4fb2	94 43					.word xt_assertx3d
>4fb4	59 46					.word xt_x28literalx29
>4fb6	bc 4f					.word l_92
>4fb8	db 65					.word xt_x28branchx29
>4fba	c7 4f					.word l_93
.4fbc					l_92:
>4fbc	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>4fc4	20 30 00
.4fc7					l_93:
>4fc7	74 43					.word xt_testname
>4fc9	59 46					.word xt_x28literalx29
>4fcb	01 00					.word 1
>4fcd	05 64					.word xt_1x2d
>4fcf	59 46					.word xt_x28literalx29
>4fd1	00 00					.word 0
>4fd3	94 43					.word xt_assertx3d
>4fd5	59 46					.word xt_x28literalx29
>4fd7	dd 4f					.word l_94
>4fd9	db 65					.word xt_x28branchx29
>4fdb	ec 4f					.word l_95
.4fdd					l_94:
>4fdd	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>4fe5	20 66 66 66 66 68 00
.4fec					l_95:
>4fec	74 43					.word xt_testname
>4fee	59 46					.word xt_x28literalx29
>4ff0	00 00					.word 0
>4ff2	05 64					.word xt_1x2d
>4ff4	59 46					.word xt_x28literalx29
>4ff6	ff ff					.word 65535
>4ff8	94 43					.word xt_assertx3d
>4ffa	59 46					.word xt_x28literalx29
>4ffc	02 50					.word l_96
>4ffe	db 65					.word xt_x28branchx29
>5000	0f 50					.word l_97
.5002					l_96:
>5002	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>500a	3e 20 31 39 00
.500f					l_97:
>500f	74 43					.word xt_testname
>5011	59 46					.word xt_x28literalx29
>5013	14 00					.word 20
>5015	05 64					.word xt_1x2d
>5017	59 46					.word xt_x28literalx29
>5019	13 00					.word 19
>501b	94 43					.word xt_assertx3d
>501d	59 46					.word xt_x28literalx29
>501f	25 50					.word l_98
>5021	db 65					.word xt_x28branchx29
>5023	38 50					.word l_99
.5025					l_98:
>5025	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>502d	20 2d 2d 3e 20 66 66 66 65 68 00
.5038					l_99:
>5038	74 43					.word xt_testname
>503a	59 46					.word xt_x28literalx29
>503c	ff ff					.word 65535
>503e	05 64					.word xt_1x2d
>5040	59 46					.word xt_x28literalx29
>5042	fe ff					.word 65534
>5044	94 43					.word xt_assertx3d
>5046	59 46					.word xt_x28literalx29
>5048	4e 50					.word l_100
>504a	db 65					.word xt_x28branchx29
>504c	5d 50					.word l_101
.504e					l_100:
>504e	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>5056	20 66 66 66 66 68 00
.505d					l_101:
>505d	74 43					.word xt_testname
>505f	59 46					.word xt_x28literalx29
>5061	01 00					.word 1
>5063	23 64					.word xt_2x2d
>5065	59 46					.word xt_x28literalx29
>5067	ff ff					.word 65535
>5069	94 43					.word xt_assertx3d
>506b	59 46					.word xt_x28literalx29
>506d	73 50					.word l_102
>506f	db 65					.word xt_x28branchx29
>5071	82 50					.word l_103
.5073					l_102:
>5073	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>507b	20 66 66 66 65 68 00
.5082					l_103:
>5082	74 43					.word xt_testname
>5084	59 46					.word xt_x28literalx29
>5086	00 00					.word 0
>5088	23 64					.word xt_2x2d
>508a	59 46					.word xt_x28literalx29
>508c	fe ff					.word 65534
>508e	94 43					.word xt_assertx3d
>5090	59 46					.word xt_x28literalx29
>5092	98 50					.word l_104
>5094	db 65					.word xt_x28branchx29
>5096	a5 50					.word l_105
.5098					l_104:
>5098	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>50a0	3e 20 31 38 00
.50a5					l_105:
>50a5	74 43					.word xt_testname
>50a7	59 46					.word xt_x28literalx29
>50a9	14 00					.word 20
>50ab	23 64					.word xt_2x2d
>50ad	59 46					.word xt_x28literalx29
>50af	12 00					.word 18
>50b1	94 43					.word xt_assertx3d
>50b3	59 46					.word xt_x28literalx29
>50b5	bb 50					.word l_106
>50b7	db 65					.word xt_x28branchx29
>50b9	ce 50					.word l_107
.50bb					l_106:
>50bb	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>50c3	20 2d 2d 3e 20 66 66 66 64 68 00
.50ce					l_107:
>50ce	74 43					.word xt_testname
>50d0	59 46					.word xt_x28literalx29
>50d2	ff ff					.word 65535
>50d4	23 64					.word xt_2x2d
>50d6	59 46					.word xt_x28literalx29
>50d8	fd ff					.word 65533
>50da	94 43					.word xt_assertx3d
>50dc	59 46					.word xt_x28literalx29
>50de	e4 50					.word l_108
>50e0	db 65					.word xt_x28branchx29
>50e2	fe 50					.word l_109
.50e4					l_108:
>50e4	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>50ec	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>50fc	68 00
.50fe					l_109:
>50fe	74 43					.word xt_testname
>5100	59 46					.word xt_x28literalx29
>5102	00 00					.word 0
>5104	59 46					.word xt_x28literalx29
>5106	00 00					.word 0
>5108	46 64					.word xt_and
>510a	59 46					.word xt_x28literalx29
>510c	00 00					.word 0
>510e	94 43					.word xt_assertx3d
>5110	59 46					.word xt_x28literalx29
>5112	18 51					.word l_110
>5114	db 65					.word xt_x28branchx29
>5116	32 51					.word l_111
.5118					l_110:
>5118	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>5120	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>5130	68 00
.5132					l_111:
>5132	74 43					.word xt_testname
>5134	59 46					.word xt_x28literalx29
>5136	00 00					.word 0
>5138	59 46					.word xt_x28literalx29
>513a	ff ff					.word 65535
>513c	46 64					.word xt_and
>513e	59 46					.word xt_x28literalx29
>5140	00 00					.word 0
>5142	94 43					.word xt_assertx3d
>5144	59 46					.word xt_x28literalx29
>5146	4c 51					.word l_112
>5148	db 65					.word xt_x28branchx29
>514a	66 51					.word l_113
.514c					l_112:
>514c	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>5154	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>5164	68 00
.5166					l_113:
>5166	74 43					.word xt_testname
>5168	59 46					.word xt_x28literalx29
>516a	ff ff					.word 65535
>516c	59 46					.word xt_x28literalx29
>516e	00 00					.word 0
>5170	46 64					.word xt_and
>5172	59 46					.word xt_x28literalx29
>5174	00 00					.word 0
>5176	94 43					.word xt_assertx3d
>5178	59 46					.word xt_x28literalx29
>517a	80 51					.word l_114
>517c	db 65					.word xt_x28branchx29
>517e	9a 51					.word l_115
.5180					l_114:
>5180	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>5188	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>5198	68 00
.519a					l_115:
>519a	74 43					.word xt_testname
>519c	59 46					.word xt_x28literalx29
>519e	ff ff					.word 65535
>51a0	59 46					.word xt_x28literalx29
>51a2	ff ff					.word 65535
>51a4	46 64					.word xt_and
>51a6	59 46					.word xt_x28literalx29
>51a8	ff ff					.word 65535
>51aa	94 43					.word xt_assertx3d
>51ac	59 46					.word xt_x28literalx29
>51ae	b4 51					.word l_116
>51b0	db 65					.word xt_x28branchx29
>51b2	cd 51					.word l_117
.51b4					l_116:
>51b4	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>51bc	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>51cc	00
.51cd					l_117:
>51cd	74 43					.word xt_testname
>51cf	59 46					.word xt_x28literalx29
>51d1	00 00					.word 0
>51d3	59 46					.word xt_x28literalx29
>51d5	00 00					.word 0
>51d7	6a 64					.word xt_or
>51d9	59 46					.word xt_x28literalx29
>51db	00 00					.word 0
>51dd	94 43					.word xt_assertx3d
>51df	59 46					.word xt_x28literalx29
>51e1	e7 51					.word l_118
>51e3	db 65					.word xt_x28branchx29
>51e5	00 52					.word l_119
.51e7					l_118:
>51e7	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>51ef	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>51ff	00
.5200					l_119:
>5200	74 43					.word xt_testname
>5202	59 46					.word xt_x28literalx29
>5204	00 00					.word 0
>5206	59 46					.word xt_x28literalx29
>5208	ff ff					.word 65535
>520a	6a 64					.word xt_or
>520c	59 46					.word xt_x28literalx29
>520e	ff ff					.word 65535
>5210	94 43					.word xt_assertx3d
>5212	59 46					.word xt_x28literalx29
>5214	1a 52					.word l_120
>5216	db 65					.word xt_x28branchx29
>5218	33 52					.word l_121
.521a					l_120:
>521a	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>5222	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>5232	00
.5233					l_121:
>5233	74 43					.word xt_testname
>5235	59 46					.word xt_x28literalx29
>5237	ff ff					.word 65535
>5239	59 46					.word xt_x28literalx29
>523b	00 00					.word 0
>523d	6a 64					.word xt_or
>523f	59 46					.word xt_x28literalx29
>5241	ff ff					.word 65535
>5243	94 43					.word xt_assertx3d
>5245	59 46					.word xt_x28literalx29
>5247	4d 52					.word l_122
>5249	db 65					.word xt_x28branchx29
>524b	66 52					.word l_123
.524d					l_122:
>524d	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>5255	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>5265	00
.5266					l_123:
>5266	74 43					.word xt_testname
>5268	59 46					.word xt_x28literalx29
>526a	ff ff					.word 65535
>526c	59 46					.word xt_x28literalx29
>526e	ff ff					.word 65535
>5270	6a 64					.word xt_or
>5272	59 46					.word xt_x28literalx29
>5274	ff ff					.word 65535
>5276	94 43					.word xt_assertx3d
>5278	59 46					.word xt_x28literalx29
>527a	80 52					.word l_124
>527c	db 65					.word xt_x28branchx29
>527e	9a 52					.word l_125
.5280					l_124:
>5280	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>5288	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>5298	68 00
.529a					l_125:
>529a	74 43					.word xt_testname
>529c	59 46					.word xt_x28literalx29
>529e	00 00					.word 0
>52a0	59 46					.word xt_x28literalx29
>52a2	00 00					.word 0
>52a4	8e 64					.word xt_xor
>52a6	59 46					.word xt_x28literalx29
>52a8	00 00					.word 0
>52aa	94 43					.word xt_assertx3d
>52ac	59 46					.word xt_x28literalx29
>52ae	b4 52					.word l_126
>52b0	db 65					.word xt_x28branchx29
>52b2	ce 52					.word l_127
.52b4					l_126:
>52b4	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>52bc	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>52cc	68 00
.52ce					l_127:
>52ce	74 43					.word xt_testname
>52d0	59 46					.word xt_x28literalx29
>52d2	00 00					.word 0
>52d4	59 46					.word xt_x28literalx29
>52d6	ff ff					.word 65535
>52d8	8e 64					.word xt_xor
>52da	59 46					.word xt_x28literalx29
>52dc	ff ff					.word 65535
>52de	94 43					.word xt_assertx3d
>52e0	59 46					.word xt_x28literalx29
>52e2	e8 52					.word l_128
>52e4	db 65					.word xt_x28branchx29
>52e6	02 53					.word l_129
.52e8					l_128:
>52e8	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>52f0	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>5300	68 00
.5302					l_129:
>5302	74 43					.word xt_testname
>5304	59 46					.word xt_x28literalx29
>5306	ff ff					.word 65535
>5308	59 46					.word xt_x28literalx29
>530a	00 00					.word 0
>530c	8e 64					.word xt_xor
>530e	59 46					.word xt_x28literalx29
>5310	ff ff					.word 65535
>5312	94 43					.word xt_assertx3d
>5314	59 46					.word xt_x28literalx29
>5316	1c 53					.word l_130
>5318	db 65					.word xt_x28branchx29
>531a	36 53					.word l_131
.531c					l_130:
>531c	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>5324	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>5334	68 00
.5336					l_131:
>5336	74 43					.word xt_testname
>5338	59 46					.word xt_x28literalx29
>533a	ff ff					.word 65535
>533c	59 46					.word xt_x28literalx29
>533e	ff ff					.word 65535
>5340	8e 64					.word xt_xor
>5342	59 46					.word xt_x28literalx29
>5344	00 00					.word 0
>5346	94 43					.word xt_assertx3d
>5348	59 46					.word xt_x28literalx29
>534a	50 53					.word l_132
>534c	db 65					.word xt_x28branchx29
>534e	64 53					.word l_133
.5350					l_132:
>5350	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>5358	74 20 2d 2d 3e 20 66 66 66 66 68 00
.5364					l_133:
>5364	74 43					.word xt_testname
>5366	59 46					.word xt_x28literalx29
>5368	00 00					.word 0
>536a	b2 64					.word xt_not
>536c	59 46					.word xt_x28literalx29
>536e	ff ff					.word 65535
>5370	94 43					.word xt_assertx3d
>5372	59 46					.word xt_x28literalx29
>5374	7a 53					.word l_134
>5376	db 65					.word xt_x28branchx29
>5378	8e 53					.word l_135
.537a					l_134:
>537a	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>5382	74 20 2d 2d 3e 20 30 30 30 30 68 00
.538e					l_135:
>538e	74 43					.word xt_testname
>5390	59 46					.word xt_x28literalx29
>5392	ff ff					.word 65535
>5394	b2 64					.word xt_not
>5396	59 46					.word xt_x28literalx29
>5398	00 00					.word 0
>539a	94 43					.word xt_assertx3d
>539c	59 46					.word xt_x28literalx29
>539e	a4 53					.word l_136
>53a0	db 65					.word xt_x28branchx29
>53a2	b3 53					.word l_137
.53a4					l_136:
>53a4	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>53ac	20 30 30 30 30 68 00
.53b3					l_137:
>53b3	74 43					.word xt_testname
>53b5	59 46					.word xt_x28literalx29
>53b7	00 00					.word 0
>53b9	d4 64					.word xt_0x3c
>53bb	59 46					.word xt_x28literalx29
>53bd	00 00					.word 0
>53bf	94 43					.word xt_assertx3d
>53c1	59 46					.word xt_x28literalx29
>53c3	c9 53					.word l_138
>53c5	db 65					.word xt_x28branchx29
>53c7	d8 53					.word l_139
.53c9					l_138:
>53c9	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>53d1	20 30 30 30 30 68 00
.53d8					l_139:
>53d8	74 43					.word xt_testname
>53da	59 46					.word xt_x28literalx29
>53dc	03 00					.word 3
>53de	d4 64					.word xt_0x3c
>53e0	59 46					.word xt_x28literalx29
>53e2	00 00					.word 0
>53e4	94 43					.word xt_assertx3d
>53e6	59 46					.word xt_x28literalx29
>53e8	ee 53					.word l_140
>53ea	db 65					.word xt_x28branchx29
>53ec	01 54					.word l_141
.53ee					l_140:
>53ee	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>53f6	20 2d 2d 3e 20 66 66 66 66 68 00
.5401					l_141:
>5401	74 43					.word xt_testname
>5403	59 46					.word xt_x28literalx29
>5405	ff ff					.word 65535
>5407	d4 64					.word xt_0x3c
>5409	59 46					.word xt_x28literalx29
>540b	ff ff					.word 65535
>540d	94 43					.word xt_assertx3d
>540f	59 46					.word xt_x28literalx29
>5411	17 54					.word l_142
>5413	db 65					.word xt_x28branchx29
>5415	26 54					.word l_143
.5417					l_142:
>5417	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>541f	20 66 66 66 66 68 00
.5426					l_143:
>5426	74 43					.word xt_testname
>5428	59 46					.word xt_x28literalx29
>542a	00 00					.word 0
>542c	fb 64					.word xt_0x3d
>542e	59 46					.word xt_x28literalx29
>5430	ff ff					.word 65535
>5432	94 43					.word xt_assertx3d
>5434	59 46					.word xt_x28literalx29
>5436	3c 54					.word l_144
>5438	db 65					.word xt_x28branchx29
>543a	4b 54					.word l_145
.543c					l_144:
>543c	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>5444	20 30 30 30 30 68 00
.544b					l_145:
>544b	74 43					.word xt_testname
>544d	59 46					.word xt_x28literalx29
>544f	03 00					.word 3
>5451	fb 64					.word xt_0x3d
>5453	59 46					.word xt_x28literalx29
>5455	00 00					.word 0
>5457	94 43					.word xt_assertx3d
>5459	59 46					.word xt_x28literalx29
>545b	61 54					.word l_146
>545d	db 65					.word xt_x28branchx29
>545f	74 54					.word l_147
.5461					l_146:
>5461	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>5469	20 2d 2d 3e 20 30 30 30 30 68 00
.5474					l_147:
>5474	74 43					.word xt_testname
>5476	59 46					.word xt_x28literalx29
>5478	ff ff					.word 65535
>547a	fb 64					.word xt_0x3d
>547c	59 46					.word xt_x28literalx29
>547e	00 00					.word 0
>5480	94 43					.word xt_assertx3d
>5482	59 46					.word xt_x28literalx29
>5484	8a 54					.word l_148
>5486	db 65					.word xt_x28branchx29
>5488	99 54					.word l_149
.548a					l_148:
>548a	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>5492	20 30 30 30 30 68 00
.5499					l_149:
>5499	74 43					.word xt_testname
>549b	59 46					.word xt_x28literalx29
>549d	00 00					.word 0
>549f	26 65					.word xt_0x3e
>54a1	59 46					.word xt_x28literalx29
>54a3	00 00					.word 0
>54a5	94 43					.word xt_assertx3d
>54a7	59 46					.word xt_x28literalx29
>54a9	af 54					.word l_150
>54ab	db 65					.word xt_x28branchx29
>54ad	be 54					.word l_151
.54af					l_150:
>54af	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>54b7	20 66 66 66 66 68 00
.54be					l_151:
>54be	74 43					.word xt_testname
>54c0	59 46					.word xt_x28literalx29
>54c2	03 00					.word 3
>54c4	26 65					.word xt_0x3e
>54c6	59 46					.word xt_x28literalx29
>54c8	ff ff					.word 65535
>54ca	94 43					.word xt_assertx3d
>54cc	59 46					.word xt_x28literalx29
>54ce	d4 54					.word l_152
>54d0	db 65					.word xt_x28branchx29
>54d2	e7 54					.word l_153
.54d4					l_152:
>54d4	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>54dc	20 2d 2d 3e 20 30 30 30 30 68 00
.54e7					l_153:
>54e7	74 43					.word xt_testname
>54e9	59 46					.word xt_x28literalx29
>54eb	ff ff					.word 65535
>54ed	26 65					.word xt_0x3e
>54ef	59 46					.word xt_x28literalx29
>54f1	00 00					.word 0
>54f3	94 43					.word xt_assertx3d
>54f5	59 46					.word xt_x28literalx29
>54f7	fd 54					.word l_154
>54f9	db 65					.word xt_x28branchx29
>54fb	14 55					.word l_155
.54fd					l_154:
>54fd	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>5505	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.5514					l_155:
>5514	74 43					.word xt_testname
>5516	9b 65					.word xt_cells
>5518	59 46					.word xt_x28literalx29
>551a	02 00					.word 2
>551c	c0 61					.word xt_x2d
>551e	fb 64					.word xt_0x3d
>5520	59 46					.word xt_x28literalx29
>5522	ff ff					.word 65535
>5524	94 43					.word xt_assertx3d
>5526	59 46					.word xt_x28literalx29
>5528	2e 55					.word l_156
>552a	db 65					.word xt_x28branchx29
>552c	40 55					.word l_157
.552e					l_156:
>552e	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>5536	75 74 65 20 2d 2d 3e 20 31 00
.5540					l_157:
>5540	74 43					.word xt_testname
>5542	59 46					.word xt_x28literalx29
>5544	e1 45					.word xt_1
>5546	fb 67					.word xt_execute
>5548	59 46					.word xt_x28literalx29
>554a	01 00					.word 1
>554c	94 43					.word xt_assertx3d
>554e	59 46					.word xt_x28literalx29
>5550	56 55					.word l_158
>5552	db 65					.word xt_x28branchx29
>5554	6c 55					.word l_159
.5556					l_158:
>5556	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>555e	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.556c					l_159:
>556c	74 43					.word xt_testname
>556e	59 46					.word xt_x28literalx29
>5570	01 00					.word 1
>5572	59 46					.word xt_x28literalx29
>5574	02 00					.word 2
>5576	59 46					.word xt_x28literalx29
>5578	35 61					.word xt_x2b
>557a	fb 67					.word xt_execute
>557c	59 46					.word xt_x28literalx29
>557e	03 00					.word 3
>5580	94 43					.word xt_assertx3d
>5582	59 46					.word xt_x28literalx29
>5584	8a 55					.word l_160
>5586	db 65					.word xt_x28branchx29
>5588	a3 55					.word l_161
.558a					l_160:
>558a	33 30 68 20 31 30 20 64			.null "30h 10 digit --> 0 ffffh"
>5592	69 67 69 74 20 2d 2d 3e 20 30 20 66 66 66 66 68
>55a2	00
.55a3					l_161:
>55a3	74 43					.word xt_testname
>55a5	59 46					.word xt_x28literalx29
>55a7	30 00					.word 48
>55a9	59 46					.word xt_x28literalx29
>55ab	0a 00					.word 10
>55ad	e4 68					.word xt_digit
>55af	59 46					.word xt_x28literalx29
>55b1	ff ff					.word 65535
>55b3	94 43					.word xt_assertx3d
>55b5	59 46					.word xt_x28literalx29
>55b7	00 00					.word 0
>55b9	94 43					.word xt_assertx3d
>55bb	59 46					.word xt_x28literalx29
>55bd	c3 55					.word l_162
>55bf	db 65					.word xt_x28branchx29
>55c1	dc 55					.word l_163
.55c3					l_162:
>55c3	33 31 68 20 31 30 20 64			.null "31h 10 digit --> 1 ffffh"
>55cb	69 67 69 74 20 2d 2d 3e 20 31 20 66 66 66 66 68
>55db	00
.55dc					l_163:
>55dc	74 43					.word xt_testname
>55de	59 46					.word xt_x28literalx29
>55e0	31 00					.word 49
>55e2	59 46					.word xt_x28literalx29
>55e4	0a 00					.word 10
>55e6	e4 68					.word xt_digit
>55e8	59 46					.word xt_x28literalx29
>55ea	ff ff					.word 65535
>55ec	94 43					.word xt_assertx3d
>55ee	59 46					.word xt_x28literalx29
>55f0	01 00					.word 1
>55f2	94 43					.word xt_assertx3d
>55f4	59 46					.word xt_x28literalx29
>55f6	fc 55					.word l_164
>55f8	db 65					.word xt_x28branchx29
>55fa	15 56					.word l_165
.55fc					l_164:
>55fc	33 39 68 20 31 30 20 64			.null "39h 10 digit --> 9 ffffh"
>5604	69 67 69 74 20 2d 2d 3e 20 39 20 66 66 66 66 68
>5614	00
.5615					l_165:
>5615	74 43					.word xt_testname
>5617	59 46					.word xt_x28literalx29
>5619	39 00					.word 57
>561b	59 46					.word xt_x28literalx29
>561d	0a 00					.word 10
>561f	e4 68					.word xt_digit
>5621	59 46					.word xt_x28literalx29
>5623	ff ff					.word 65535
>5625	94 43					.word xt_assertx3d
>5627	59 46					.word xt_x28literalx29
>5629	09 00					.word 9
>562b	94 43					.word xt_assertx3d
>562d	59 46					.word xt_x28literalx29
>562f	35 56					.word l_166
>5631	db 65					.word xt_x28branchx29
>5633	48 56					.word l_167
.5635					l_166:
>5635	34 31 68 20 31 30 20 64			.null "41h 10 digit --> 0"
>563d	69 67 69 74 20 2d 2d 3e 20 30 00
.5648					l_167:
>5648	74 43					.word xt_testname
>564a	59 46					.word xt_x28literalx29
>564c	41 00					.word 65
>564e	59 46					.word xt_x28literalx29
>5650	0a 00					.word 10
>5652	e4 68					.word xt_digit
>5654	59 46					.word xt_x28literalx29
>5656	00 00					.word 0
>5658	94 43					.word xt_assertx3d
>565a	59 46					.word xt_x28literalx29
>565c	62 56					.word l_168
>565e	db 65					.word xt_x28branchx29
>5660	75 56					.word l_169
.5662					l_168:
>5662	36 31 68 20 31 30 20 64			.null "61h 10 digit --> 0"
>566a	69 67 69 74 20 2d 2d 3e 20 30 00
.5675					l_169:
>5675	74 43					.word xt_testname
>5677	59 46					.word xt_x28literalx29
>5679	61 00					.word 97
>567b	59 46					.word xt_x28literalx29
>567d	0a 00					.word 10
>567f	e4 68					.word xt_digit
>5681	59 46					.word xt_x28literalx29
>5683	00 00					.word 0
>5685	94 43					.word xt_assertx3d
>5687	59 46					.word xt_x28literalx29
>5689	8f 56					.word l_170
>568b	db 65					.word xt_x28branchx29
>568d	a9 56					.word l_171
.568f					l_170:
>568f	34 31 68 20 31 36 20 64			.null "41h 16 digit --> 10 ffffh"
>5697	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>56a7	68 00
.56a9					l_171:
>56a9	74 43					.word xt_testname
>56ab	59 46					.word xt_x28literalx29
>56ad	41 00					.word 65
>56af	59 46					.word xt_x28literalx29
>56b1	10 00					.word 16
>56b3	e4 68					.word xt_digit
>56b5	59 46					.word xt_x28literalx29
>56b7	ff ff					.word 65535
>56b9	94 43					.word xt_assertx3d
>56bb	59 46					.word xt_x28literalx29
>56bd	0a 00					.word 10
>56bf	94 43					.word xt_assertx3d
>56c1	59 46					.word xt_x28literalx29
>56c3	c9 56					.word l_172
>56c5	db 65					.word xt_x28branchx29
>56c7	e3 56					.word l_173
.56c9					l_172:
>56c9	36 31 68 20 31 36 20 64			.null "61h 16 digit --> 10 ffffh"
>56d1	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>56e1	68 00
.56e3					l_173:
>56e3	74 43					.word xt_testname
>56e5	59 46					.word xt_x28literalx29
>56e7	61 00					.word 97
>56e9	59 46					.word xt_x28literalx29
>56eb	10 00					.word 16
>56ed	e4 68					.word xt_digit
>56ef	59 46					.word xt_x28literalx29
>56f1	ff ff					.word 65535
>56f3	94 43					.word xt_assertx3d
>56f5	59 46					.word xt_x28literalx29
>56f7	0a 00					.word 10
>56f9	94 43					.word xt_assertx3d
>56fb	59 46					.word xt_x28literalx29
>56fd	03 57					.word l_174
>56ff	db 65					.word xt_x28branchx29
>5701	1d 57					.word l_175
.5703					l_174:
>5703	34 36 68 20 31 36 20 64			.null "46h 16 digit --> fh ffffh"
>570b	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>571b	68 00
.571d					l_175:
>571d	74 43					.word xt_testname
>571f	59 46					.word xt_x28literalx29
>5721	46 00					.word 70
>5723	59 46					.word xt_x28literalx29
>5725	10 00					.word 16
>5727	e4 68					.word xt_digit
>5729	59 46					.word xt_x28literalx29
>572b	ff ff					.word 65535
>572d	94 43					.word xt_assertx3d
>572f	59 46					.word xt_x28literalx29
>5731	0f 00					.word 15
>5733	94 43					.word xt_assertx3d
>5735	59 46					.word xt_x28literalx29
>5737	3d 57					.word l_176
>5739	db 65					.word xt_x28branchx29
>573b	57 57					.word l_177
.573d					l_176:
>573d	36 36 68 20 31 36 20 64			.null "66h 16 digit --> fh ffffh"
>5745	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>5755	68 00
.5757					l_177:
>5757	74 43					.word xt_testname
>5759	59 46					.word xt_x28literalx29
>575b	66 00					.word 102
>575d	59 46					.word xt_x28literalx29
>575f	10 00					.word 16
>5761	e4 68					.word xt_digit
>5763	59 46					.word xt_x28literalx29
>5765	ff ff					.word 65535
>5767	94 43					.word xt_assertx3d
>5769	59 46					.word xt_x28literalx29
>576b	0f 00					.word 15
>576d	94 43					.word xt_assertx3d
>576f	59 46					.word xt_x28literalx29
>5771	77 57					.word l_179
>5773	db 65					.word xt_x28branchx29
>5775	84 57					.word l_180
.5777					l_179:
>5777	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>577f	2d 3e 20 30 00
.5784					l_180:
>5784	74 43					.word xt_testname
>5786	59 46					.word xt_x28literalx29
>5788	00 00					.word 0
>578a	80 6b					.word xt_x3fdup
>578c	59 46					.word xt_x28literalx29
>578e	00 00					.word 0
>5790	94 43					.word xt_assertx3d
>5792	59 46					.word xt_x28literalx29
>5794	9a 57					.word l_181
>5796	db 65					.word xt_x28branchx29
>5798	a9 57					.word l_182
.579a					l_181:
>579a	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>57a2	2d 3e 20 31 20 31 00
.57a9					l_182:
>57a9	74 43					.word xt_testname
>57ab	59 46					.word xt_x28literalx29
>57ad	01 00					.word 1
>57af	80 6b					.word xt_x3fdup
>57b1	59 46					.word xt_x28literalx29
>57b3	01 00					.word 1
>57b5	94 43					.word xt_assertx3d
>57b7	59 46					.word xt_x28literalx29
>57b9	01 00					.word 1
>57bb	94 43					.word xt_assertx3d
>57bd	59 46					.word xt_x28literalx29
>57bf	c5 57					.word l_183
>57c1	db 65					.word xt_x28branchx29
>57c3	d9 57					.word l_184
.57c5					l_183:
>57c5	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>57cd	74 20 2d 2d 3e 20 32 20 33 20 31 00
.57d9					l_184:
>57d9	74 43					.word xt_testname
>57db	59 46					.word xt_x28literalx29
>57dd	01 00					.word 1
>57df	59 46					.word xt_x28literalx29
>57e1	02 00					.word 2
>57e3	59 46					.word xt_x28literalx29
>57e5	03 00					.word 3
>57e7	a0 6b					.word xt_rot
>57e9	59 46					.word xt_x28literalx29
>57eb	01 00					.word 1
>57ed	94 43					.word xt_assertx3d
>57ef	59 46					.word xt_x28literalx29
>57f1	03 00					.word 3
>57f3	94 43					.word xt_assertx3d
>57f5	59 46					.word xt_x28literalx29
>57f7	02 00					.word 2
>57f9	94 43					.word xt_assertx3d
>57fb	59 46					.word xt_x28literalx29
>57fd	03 58					.word l_185
>57ff	db 65					.word xt_x28branchx29
>5801	18 58					.word l_186
.5803					l_185:
>5803	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>580b	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.5818					l_186:
>5818	74 43					.word xt_testname
>581a	59 46					.word xt_x28literalx29
>581c	01 00					.word 1
>581e	59 46					.word xt_x28literalx29
>5820	02 00					.word 2
>5822	c0 6b					.word xt_2dup
>5824	59 46					.word xt_x28literalx29
>5826	02 00					.word 2
>5828	94 43					.word xt_assertx3d
>582a	59 46					.word xt_x28literalx29
>582c	01 00					.word 1
>582e	94 43					.word xt_assertx3d
>5830	59 46					.word xt_x28literalx29
>5832	02 00					.word 2
>5834	94 43					.word xt_assertx3d
>5836	59 46					.word xt_x28literalx29
>5838	01 00					.word 1
>583a	94 43					.word xt_assertx3d
>583c	59 46					.word xt_x28literalx29
>583e	44 58					.word l_187
>5840	db 65					.word xt_x28branchx29
>5842	5a 58					.word l_188
.5844					l_187:
>5844	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>584c	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.585a					l_188:
>585a	74 43					.word xt_testname
>585c	59 46					.word xt_x28literalx29
>585e	01 00					.word 1
>5860	59 46					.word xt_x28literalx29
>5862	02 00					.word 2
>5864	59 46					.word xt_x28literalx29
>5866	03 00					.word 3
>5868	59 46					.word xt_x28literalx29
>586a	04 00					.word 4
>586c	dc 6b					.word xt_2drop
>586e	59 46					.word xt_x28literalx29
>5870	02 00					.word 2
>5872	94 43					.word xt_assertx3d
>5874	59 46					.word xt_x28literalx29
>5876	01 00					.word 1
>5878	94 43					.word xt_assertx3d
>587a	59 46					.word xt_x28literalx29
>587c	82 58					.word l_189
>587e	db 65					.word xt_x28branchx29
>5880	92 58					.word l_190
.5882					l_189:
>5882	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>588a	3e 20 66 66 66 66 68 00
.5892					l_190:
>5892	74 43					.word xt_testname
>5894	59 46					.word xt_x28literalx29
>5896	01 00					.word 1
>5898	59 46					.word xt_x28literalx29
>589a	02 00					.word 2
>589c	f8 6b					.word xt_x3c
>589e	59 46					.word xt_x28literalx29
>58a0	ff ff					.word 65535
>58a2	94 43					.word xt_assertx3d
>58a4	59 46					.word xt_x28literalx29
>58a6	ac 58					.word l_191
>58a8	db 65					.word xt_x28branchx29
>58aa	bc 58					.word l_192
.58ac					l_191:
>58ac	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>58b4	3e 20 30 30 30 30 68 00
.58bc					l_192:
>58bc	74 43					.word xt_testname
>58be	59 46					.word xt_x28literalx29
>58c0	02 00					.word 2
>58c2	59 46					.word xt_x28literalx29
>58c4	01 00					.word 1
>58c6	f8 6b					.word xt_x3c
>58c8	59 46					.word xt_x28literalx29
>58ca	00 00					.word 0
>58cc	94 43					.word xt_assertx3d
>58ce	59 46					.word xt_x28literalx29
>58d0	d6 58					.word l_193
>58d2	db 65					.word xt_x28branchx29
>58d4	ea 58					.word l_194
.58d6					l_193:
>58d6	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>58de	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.58ea					l_194:
>58ea	74 43					.word xt_testname
>58ec	59 46					.word xt_x28literalx29
>58ee	00 00					.word 0
>58f0	59 46					.word xt_x28literalx29
>58f2	ff ff					.word 65535
>58f4	f8 6b					.word xt_x3c
>58f6	59 46					.word xt_x28literalx29
>58f8	00 00					.word 0
>58fa	94 43					.word xt_assertx3d
>58fc	59 46					.word xt_x28literalx29
>58fe	04 59					.word l_195
>5900	db 65					.word xt_x28branchx29
>5902	18 59					.word l_196
.5904					l_195:
>5904	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>590c	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.5918					l_196:
>5918	74 43					.word xt_testname
>591a	59 46					.word xt_x28literalx29
>591c	ff ff					.word 65535
>591e	59 46					.word xt_x28literalx29
>5920	00 00					.word 0
>5922	f8 6b					.word xt_x3c
>5924	59 46					.word xt_x28literalx29
>5926	ff ff					.word 65535
>5928	94 43					.word xt_assertx3d
>592a	59 46					.word xt_x28literalx29
>592c	32 59					.word l_197
>592e	db 65					.word xt_x28branchx29
>5930	42 59					.word l_198
.5932					l_197:
>5932	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>593a	3e 20 30 30 30 30 68 00
.5942					l_198:
>5942	74 43					.word xt_testname
>5944	59 46					.word xt_x28literalx29
>5946	01 00					.word 1
>5948	59 46					.word xt_x28literalx29
>594a	02 00					.word 2
>594c	14 6c					.word xt_x3e
>594e	59 46					.word xt_x28literalx29
>5950	00 00					.word 0
>5952	94 43					.word xt_assertx3d
>5954	59 46					.word xt_x28literalx29
>5956	5c 59					.word l_199
>5958	db 65					.word xt_x28branchx29
>595a	6c 59					.word l_200
.595c					l_199:
>595c	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>5964	3e 20 66 66 66 66 68 00
.596c					l_200:
>596c	74 43					.word xt_testname
>596e	59 46					.word xt_x28literalx29
>5970	02 00					.word 2
>5972	59 46					.word xt_x28literalx29
>5974	01 00					.word 1
>5976	14 6c					.word xt_x3e
>5978	59 46					.word xt_x28literalx29
>597a	ff ff					.word 65535
>597c	94 43					.word xt_assertx3d
>597e	59 46					.word xt_x28literalx29
>5980	86 59					.word l_201
>5982	db 65					.word xt_x28branchx29
>5984	9a 59					.word l_202
.5986					l_201:
>5986	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>598e	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.599a					l_202:
>599a	74 43					.word xt_testname
>599c	59 46					.word xt_x28literalx29
>599e	00 00					.word 0
>59a0	59 46					.word xt_x28literalx29
>59a2	ff ff					.word 65535
>59a4	14 6c					.word xt_x3e
>59a6	59 46					.word xt_x28literalx29
>59a8	ff ff					.word 65535
>59aa	94 43					.word xt_assertx3d
>59ac	59 46					.word xt_x28literalx29
>59ae	b4 59					.word l_203
>59b0	db 65					.word xt_x28branchx29
>59b2	c8 59					.word l_204
.59b4					l_203:
>59b4	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>59bc	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.59c8					l_204:
>59c8	74 43					.word xt_testname
>59ca	59 46					.word xt_x28literalx29
>59cc	ff ff					.word 65535
>59ce	59 46					.word xt_x28literalx29
>59d0	00 00					.word 0
>59d2	14 6c					.word xt_x3e
>59d4	59 46					.word xt_x28literalx29
>59d6	00 00					.word 0
>59d8	94 43					.word xt_assertx3d
>59da	59 46					.word xt_x28literalx29
>59dc	e2 59					.word l_205
>59de	db 65					.word xt_x28branchx29
>59e0	f2 59					.word l_206
.59e2					l_205:
>59e2	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>59ea	3e 20 30 30 30 30 68 00
.59f2					l_206:
>59f2	74 43					.word xt_testname
>59f4	59 46					.word xt_x28literalx29
>59f6	01 00					.word 1
>59f8	59 46					.word xt_x28literalx29
>59fa	00 00					.word 0
>59fc	30 6c					.word xt_x3d
>59fe	59 46					.word xt_x28literalx29
>5a00	00 00					.word 0
>5a02	94 43					.word xt_assertx3d
>5a04	59 46					.word xt_x28literalx29
>5a06	0c 5a					.word l_207
>5a08	db 65					.word xt_x28branchx29
>5a0a	1c 5a					.word l_208
.5a0c					l_207:
>5a0c	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>5a14	3e 20 66 66 66 66 68 00
.5a1c					l_208:
>5a1c	74 43					.word xt_testname
>5a1e	59 46					.word xt_x28literalx29
>5a20	01 00					.word 1
>5a22	59 46					.word xt_x28literalx29
>5a24	01 00					.word 1
>5a26	30 6c					.word xt_x3d
>5a28	59 46					.word xt_x28literalx29
>5a2a	ff ff					.word 65535
>5a2c	94 43					.word xt_assertx3d
>5a2e	59 46					.word xt_x28literalx29
>5a30	36 5a					.word l_209
>5a32	db 65					.word xt_x28branchx29
>5a34	4a 5a					.word l_210
.5a36					l_209:
>5a36	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>5a3e	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.5a4a					l_210:
>5a4a	74 43					.word xt_testname
>5a4c	59 46					.word xt_x28literalx29
>5a4e	ff ff					.word 65535
>5a50	59 46					.word xt_x28literalx29
>5a52	00 00					.word 0
>5a54	30 6c					.word xt_x3d
>5a56	59 46					.word xt_x28literalx29
>5a58	00 00					.word 0
>5a5a	94 43					.word xt_assertx3d
>5a5c	59 46					.word xt_x28literalx29
>5a5e	64 5a					.word l_211
>5a60	db 65					.word xt_x28branchx29
>5a62	7c 5a					.word l_212
.5a64					l_211:
>5a64	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>5a6c	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.5a7c					l_212:
>5a7c	74 43					.word xt_testname
>5a7e	59 46					.word xt_x28literalx29
>5a80	ff ff					.word 65535
>5a82	59 46					.word xt_x28literalx29
>5a84	ff ff					.word 65535
>5a86	30 6c					.word xt_x3d
>5a88	59 46					.word xt_x28literalx29
>5a8a	ff ff					.word 65535
>5a8c	94 43					.word xt_assertx3d
>5a8e	59 46					.word xt_x28literalx29
>5a90	96 5a					.word l_213
>5a92	db 65					.word xt_x28branchx29
>5a94	a6 5a					.word l_214
.5a96					l_213:
>5a96	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>5a9e	3e 20 66 66 66 66 68 00
.5aa6					l_214:
>5aa6	74 43					.word xt_testname
>5aa8	59 46					.word xt_x28literalx29
>5aaa	00 00					.word 0
>5aac	59 46					.word xt_x28literalx29
>5aae	00 00					.word 0
>5ab0	30 6c					.word xt_x3d
>5ab2	59 46					.word xt_x28literalx29
>5ab4	ff ff					.word 65535
>5ab6	94 43					.word xt_assertx3d
>5ab8	59 46					.word xt_x28literalx29
>5aba	c0 5a					.word l_216
>5abc	db 65					.word xt_x28branchx29
>5abe	cc 5a					.word l_217
.5ac0					l_216:
>5ac0	31 20 61 62 73 20 2d 2d			.null "1 abs --> 1"
>5ac8	3e 20 31 00
.5acc					l_217:
>5acc	74 43					.word xt_testname
>5ace	59 46					.word xt_x28literalx29
>5ad0	01 00					.word 1
>5ad2	6a 6c					.word xt_abs
>5ad4	59 46					.word xt_x28literalx29
>5ad6	01 00					.word 1
>5ad8	94 43					.word xt_assertx3d
>5ada	59 46					.word xt_x28literalx29
>5adc	e2 5a					.word l_218
>5ade	db 65					.word xt_x28branchx29
>5ae0	f2 5a					.word l_219
.5ae2					l_218:
>5ae2	66 66 66 66 68 20 61 62			.null "ffffh abs --> 1"
>5aea	73 20 2d 2d 3e 20 31 00
.5af2					l_219:
>5af2	74 43					.word xt_testname
>5af4	59 46					.word xt_x28literalx29
>5af6	ff ff					.word 65535
>5af8	6a 6c					.word xt_abs
>5afa	59 46					.word xt_x28literalx29
>5afc	01 00					.word 1
>5afe	94 43					.word xt_assertx3d
>5b00	59 46					.word xt_x28literalx29
>5b02	08 5b					.word l_220
>5b04	db 65					.word xt_x28branchx29
>5b06	14 5b					.word l_221
.5b08					l_220:
>5b08	30 20 61 62 73 20 2d 2d			.null "0 abs --> 0"
>5b10	3e 20 30 00
.5b14					l_221:
>5b14	74 43					.word xt_testname
>5b16	59 46					.word xt_x28literalx29
>5b18	00 00					.word 0
>5b1a	6a 6c					.word xt_abs
>5b1c	59 46					.word xt_x28literalx29
>5b1e	00 00					.word 0
>5b20	94 43					.word xt_assertx3d
>5b22	59 46					.word xt_x28literalx29
>5b24	2a 5b					.word l_223
>5b26	db 65					.word xt_x28branchx29
>5b28	3b 5b					.word l_224
.5b2a					l_223:
>5b2a	31 20 32 20 64 61 62 73			.null "1 2 dabs --> 1 2"
>5b32	20 2d 2d 3e 20 31 20 32 00
.5b3b					l_224:
>5b3b	74 43					.word xt_testname
>5b3d	59 46					.word xt_x28literalx29
>5b3f	01 00					.word 1
>5b41	59 46					.word xt_x28literalx29
>5b43	02 00					.word 2
>5b45	92 6c					.word xt_dabs
>5b47	59 46					.word xt_x28literalx29
>5b49	02 00					.word 2
>5b4b	94 43					.word xt_assertx3d
>5b4d	59 46					.word xt_x28literalx29
>5b4f	01 00					.word 1
>5b51	94 43					.word xt_assertx3d
>5b53	59 46					.word xt_x28literalx29
>5b55	5b 5b					.word l_225
>5b57	db 65					.word xt_x28branchx29
>5b59	74 5b					.word l_226
.5b5b					l_225:
>5b5b	66 66 66 66 68 20 66 66			.null "ffffh ffffh dabs --> 0 1"
>5b63	66 66 68 20 64 61 62 73 20 2d 2d 3e 20 30 20 31
>5b73	00
.5b74					l_226:
>5b74	74 43					.word xt_testname
>5b76	59 46					.word xt_x28literalx29
>5b78	ff ff					.word 65535
>5b7a	59 46					.word xt_x28literalx29
>5b7c	ff ff					.word 65535
>5b7e	92 6c					.word xt_dabs
>5b80	59 46					.word xt_x28literalx29
>5b82	01 00					.word 1
>5b84	94 43					.word xt_assertx3d
>5b86	59 46					.word xt_x28literalx29
>5b88	00 00					.word 0
>5b8a	94 43					.word xt_assertx3d
>5b8c	59 46					.word xt_x28literalx29
>5b8e	94 5b					.word l_227
>5b90	db 65					.word xt_x28branchx29
>5b92	a5 5b					.word l_228
.5b94					l_227:
>5b94	30 20 30 20 64 61 62 73			.null "0 0 dabs --> 0 0"
>5b9c	20 2d 2d 3e 20 30 20 30 00
.5ba5					l_228:
>5ba5	74 43					.word xt_testname
>5ba7	59 46					.word xt_x28literalx29
>5ba9	00 00					.word 0
>5bab	59 46					.word xt_x28literalx29
>5bad	00 00					.word 0
>5baf	92 6c					.word xt_dabs
>5bb1	59 46					.word xt_x28literalx29
>5bb3	00 00					.word 0
>5bb5	94 43					.word xt_assertx3d
>5bb7	59 46					.word xt_x28literalx29
>5bb9	00 00					.word 0
>5bbb	94 43					.word xt_assertx3d
>5bbd	59 46					.word xt_x28literalx29
>5bbf	c5 5b					.word l_229
>5bc1	db 65					.word xt_x28branchx29
>5bc3	d1 5b					.word l_230
.5bc5					l_229:
>5bc5	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>5bcd	3e 20 32 00
.5bd1					l_230:
>5bd1	74 43					.word xt_testname
>5bd3	59 46					.word xt_x28literalx29
>5bd5	06 00					.word 6
>5bd7	59 46					.word xt_x28literalx29
>5bd9	03 00					.word 3
>5bdb	be 6c					.word xt_x2f
>5bdd	59 46					.word xt_x28literalx29
>5bdf	02 00					.word 2
>5be1	94 43					.word xt_assertx3d
>5be3	59 46					.word xt_x28literalx29
>5be5	eb 5b					.word l_231
>5be7	db 65					.word xt_x28branchx29
>5be9	f8 5b					.word l_232
.5beb					l_231:
>5beb	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>5bf3	2d 3e 20 33 00
.5bf8					l_232:
>5bf8	74 43					.word xt_testname
>5bfa	59 46					.word xt_x28literalx29
>5bfc	0a 00					.word 10
>5bfe	59 46					.word xt_x28literalx29
>5c00	03 00					.word 3
>5c02	be 6c					.word xt_x2f
>5c04	59 46					.word xt_x28literalx29
>5c06	03 00					.word 3
>5c08	94 43					.word xt_assertx3d
>5c0a	59 46					.word xt_x28literalx29
>5c0c	12 5c					.word l_233
>5c0e	db 65					.word xt_x28branchx29
>5c10	20 5c					.word l_234
.5c12					l_233:
>5c12	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>5c1a	2d 2d 3e 20 30 00
.5c20					l_234:
>5c20	74 43					.word xt_testname
>5c22	59 46					.word xt_x28literalx29
>5c24	06 00					.word 6
>5c26	59 46					.word xt_x28literalx29
>5c28	03 00					.word 3
>5c2a	dc 6c					.word xt_mod
>5c2c	59 46					.word xt_x28literalx29
>5c2e	00 00					.word 0
>5c30	94 43					.word xt_assertx3d
>5c32	59 46					.word xt_x28literalx29
>5c34	3a 5c					.word l_235
>5c36	db 65					.word xt_x28branchx29
>5c38	49 5c					.word l_236
.5c3a					l_235:
>5c3a	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>5c42	20 2d 2d 3e 20 31 00
.5c49					l_236:
>5c49	74 43					.word xt_testname
>5c4b	59 46					.word xt_x28literalx29
>5c4d	0a 00					.word 10
>5c4f	59 46					.word xt_x28literalx29
>5c51	03 00					.word 3
>5c53	dc 6c					.word xt_mod
>5c55	59 46					.word xt_x28literalx29
>5c57	01 00					.word 1
>5c59	94 43					.word xt_assertx3d
>5c5b	59 46					.word xt_x28literalx29
>5c5d	63 5c					.word l_239
>5c5f	db 65					.word xt_x28branchx29
>5c61	71 5c					.word l_240
.5c63					l_239:
>5c63	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>5c6b	2d 2d 3e 20 32 00
.5c71					l_240:
>5c71	74 43					.word xt_testname
>5c73	59 46					.word xt_x28literalx29
>5c75	01 00					.word 1
>5c77	59 46					.word xt_x28literalx29
>5c79	02 00					.word 2
>5c7b	f8 6c					.word xt_max
>5c7d	59 46					.word xt_x28literalx29
>5c7f	02 00					.word 2
>5c81	94 43					.word xt_assertx3d
>5c83	59 46					.word xt_x28literalx29
>5c85	8b 5c					.word l_241
>5c87	db 65					.word xt_x28branchx29
>5c89	99 5c					.word l_242
.5c8b					l_241:
>5c8b	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>5c93	2d 2d 3e 20 33 00
.5c99					l_242:
>5c99	74 43					.word xt_testname
>5c9b	59 46					.word xt_x28literalx29
>5c9d	03 00					.word 3
>5c9f	59 46					.word xt_x28literalx29
>5ca1	00 00					.word 0
>5ca3	f8 6c					.word xt_max
>5ca5	59 46					.word xt_x28literalx29
>5ca7	03 00					.word 3
>5ca9	94 43					.word xt_assertx3d
>5cab	59 46					.word xt_x28literalx29
>5cad	b3 5c					.word l_243
>5caf	db 65					.word xt_x28branchx29
>5cb1	cd 5c					.word l_244
.5cb3					l_243:
>5cb3	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>5cbb	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>5ccb	68 00
.5ccd					l_244:
>5ccd	74 43					.word xt_testname
>5ccf	59 46					.word xt_x28literalx29
>5cd1	fe ff					.word 65534
>5cd3	59 46					.word xt_x28literalx29
>5cd5	ff ff					.word 65535
>5cd7	f8 6c					.word xt_max
>5cd9	59 46					.word xt_x28literalx29
>5cdb	ff ff					.word 65535
>5cdd	94 43					.word xt_assertx3d
>5cdf	59 46					.word xt_x28literalx29
>5ce1	e7 5c					.word l_247
>5ce3	db 65					.word xt_x28branchx29
>5ce5	f5 5c					.word l_248
.5ce7					l_247:
>5ce7	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>5cef	2d 2d 3e 20 31 00
.5cf5					l_248:
>5cf5	74 43					.word xt_testname
>5cf7	59 46					.word xt_x28literalx29
>5cf9	01 00					.word 1
>5cfb	59 46					.word xt_x28literalx29
>5cfd	02 00					.word 2
>5cff	22 6d					.word xt_min
>5d01	59 46					.word xt_x28literalx29
>5d03	01 00					.word 1
>5d05	94 43					.word xt_assertx3d
>5d07	59 46					.word xt_x28literalx29
>5d09	0f 5d					.word l_249
>5d0b	db 65					.word xt_x28branchx29
>5d0d	1d 5d					.word l_250
.5d0f					l_249:
>5d0f	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>5d17	2d 2d 3e 20 30 00
.5d1d					l_250:
>5d1d	74 43					.word xt_testname
>5d1f	59 46					.word xt_x28literalx29
>5d21	03 00					.word 3
>5d23	59 46					.word xt_x28literalx29
>5d25	00 00					.word 0
>5d27	22 6d					.word xt_min
>5d29	59 46					.word xt_x28literalx29
>5d2b	00 00					.word 0
>5d2d	94 43					.word xt_assertx3d
>5d2f	59 46					.word xt_x28literalx29
>5d31	37 5d					.word l_251
>5d33	db 65					.word xt_x28branchx29
>5d35	51 5d					.word l_252
.5d37					l_251:
>5d37	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>5d3f	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>5d4f	68 00
.5d51					l_252:
>5d51	74 43					.word xt_testname
>5d53	59 46					.word xt_x28literalx29
>5d55	fe ff					.word 65534
>5d57	59 46					.word xt_x28literalx29
>5d59	ff ff					.word 65535
>5d5b	22 6d					.word xt_min
>5d5d	59 46					.word xt_x28literalx29
>5d5f	fe ff					.word 65534
>5d61	94 43					.word xt_assertx3d
>5d63	f1 42					.word xt_exit
.5d65					w_drop:
>5d65	04					.byte $04
>5d66	64 72 6f 70				.text 'drop'
>5d6a	00 00 00 00 00 00 00 00			.fill 12,0
>5d72	00 00 00 00
>5d76	d0 46					.word w_unittest
.5d78					xt_drop:
.5d78	e8		inx			inx
.5d79	e8		inx			inx
.5d7a	4c c4 42	jmp $42c4		jmp xt_next
.5d7d					w_dup:
>5d7d	03					.byte $03
>5d7e	64 75 70				.text 'dup'
>5d81	00 00 00 00 00 00 00 00			.fill 13,0
>5d89	00 00 00 00 00
>5d8e	65 5d					.word w_drop
.5d90					xt_dup:
.5d90	b5 02		lda $02,x		lda pstack+2,x
.5d92	95 00		sta $00,x		sta pstack,x
.5d94	b5 03		lda $03,x		lda pstack+3,x
.5d96	95 01		sta $01,x		sta pstack+1,x
.5d98	ca		dex			dex
.5d99	ca		dex			dex
.5d9a	4c c4 42	jmp $42c4		jmp xt_next
.5d9d					w_swap:
>5d9d	04					.byte $04
>5d9e	73 77 61 70				.text 'swap'
>5da2	00 00 00 00 00 00 00 00			.fill 12,0
>5daa	00 00 00 00
>5dae	7d 5d					.word w_dup
.5db0					xt_swap:
.5db0	b5 02		lda $02,x		lda pstack+2,x
.5db2	b4 04		ldy $04,x		ldy pstack+4,x
.5db4	94 02		sty $02,x		sty pstack+2,x
.5db6	95 04		sta $04,x		sta pstack+4,x
.5db8	b5 03		lda $03,x		lda pstack+3,x
.5dba	b4 05		ldy $05,x		ldy pstack+5,x
.5dbc	94 03		sty $03,x		sty pstack+3,x
.5dbe	95 05		sta $05,x		sta pstack+5,x
.5dc0	4c c4 42	jmp $42c4		jmp xt_next
.5dc3					w_2swap:
>5dc3	05					.byte $05
>5dc4	32 73 77 61 70				.text '2swap'
>5dc9	00 00 00 00 00 00 00 00			.fill 11,0
>5dd1	00 00 00
>5dd4	9d 5d					.word w_swap
.5dd6					xt_2swap:
.5dd6	b5 05		lda $05,x		lda pstack+5,x
.5dd8	48		pha			pha
.5dd9	b5 04		lda $04,x		lda pstack+4,x
.5ddb	48		pha			pha
.5ddc	b5 03		lda $03,x		lda pstack+3,x
.5dde	48		pha			pha
.5ddf	b5 02		lda $02,x		lda pstack+2,x
.5de1	48		pha			pha
.5de2	b5 09		lda $09,x		lda pstack+9,x
.5de4	95 05		sta $05,x		sta pstack+5,x
.5de6	b5 08		lda $08,x		lda pstack+8,x
.5de8	95 04		sta $04,x		sta pstack+4,x
.5dea	b5 07		lda $07,x		lda pstack+7,x
.5dec	95 03		sta $03,x		sta pstack+3,x
.5dee	b5 06		lda $06,x		lda pstack+6,x
.5df0	95 02		sta $02,x		sta pstack+2,x
.5df2	68		pla			pla
.5df3	95 06		sta $06,x		sta pstack+6,x
.5df5	68		pla			pla
.5df6	95 07		sta $07,x		sta pstack+7,x
.5df8	68		pla			pla
.5df9	95 08		sta $08,x		sta pstack+8,x
.5dfb	68		pla			pla
.5dfc	95 09		sta $09,x		sta pstack+9,x
.5dfe	4c c4 42	jmp $42c4		jmp xt_next
.5e01					w_over:
>5e01	04					.byte $04
>5e02	6f 76 65 72				.text 'over'
>5e06	00 00 00 00 00 00 00 00			.fill 12,0
>5e0e	00 00 00 00
>5e12	c3 5d					.word w_2swap
.5e14					xt_over:
.5e14	b5 04		lda $04,x		lda pstack+4,x
.5e16	95 00		sta $00,x		sta pstack,x
.5e18	b5 05		lda $05,x		lda pstack+5,x
.5e1a	95 01		sta $01,x		sta pstack+1,x
.5e1c	ca		dex			dex
.5e1d	ca		dex			dex
.5e1e	4c c4 42	jmp $42c4		jmp xt_next
.5e21					w_2over:
>5e21	05					.byte $05
>5e22	32 6f 76 65 72				.text '2over'
>5e27	00 00 00 00 00 00 00 00			.fill 11,0
>5e2f	00 00 00
>5e32	01 5e					.word w_over
.5e34					xt_2over:
.5e34	ca		dex			dex
.5e35	ca		dex			dex
.5e36	ca		dex			dex
.5e37	ca		dex			dex
.5e38	b5 0d		lda $0d,x		lda pstack+13,x
.5e3a	95 05		sta $05,x		sta pstack+5,x
.5e3c	b5 0c		lda $0c,x		lda pstack+12,x
.5e3e	95 04		sta $04,x		sta pstack+4,x
.5e40	b5 0b		lda $0b,x		lda pstack+11,x
.5e42	95 03		sta $03,x		sta pstack+3,x
.5e44	b5 0a		lda $0a,x		lda pstack+10,x
.5e46	95 02		sta $02,x		sta pstack+2,x
.5e48	4c c4 42	jmp $42c4		jmp xt_next
.5e4b					w_x3er:
>5e4b	02					.byte $02
>5e4c	3e 72					.text '>r'
>5e4e	00 00 00 00 00 00 00 00			.fill 14,0
>5e56	00 00 00 00 00 00
>5e5c	21 5e					.word w_2over
.5e5e					xt_x3er:
.5e5e	b5 03		lda $03,x		lda pstack+3,x
.5e60	48		pha			pha
.5e61	b5 02		lda $02,x		lda pstack+2,x
.5e63	48		pha			pha
.5e64	e8		inx			inx
.5e65	e8		inx			inx
.5e66	4c c4 42	jmp $42c4		jmp xt_next
.5e69					w_rx3e:
>5e69	02					.byte $02
>5e6a	72 3e					.text 'r>'
>5e6c	00 00 00 00 00 00 00 00			.fill 14,0
>5e74	00 00 00 00 00 00
>5e7a	4b 5e					.word w_x3er
.5e7c					xt_rx3e:
.5e7c	68		pla			pla
.5e7d	95 00		sta $00,x		sta pstack,x
.5e7f	68		pla			pla
.5e80	95 01		sta $01,x		sta pstack+1,x
.5e82	ca		dex			dex
.5e83	ca		dex			dex
.5e84	4c c4 42	jmp $42c4		jmp xt_next
.5e87					w_r:
>5e87	01					.byte $01
>5e88	72					.text 'r'
>5e89	00 00 00 00 00 00 00 00			.fill 15,0
>5e91	00 00 00 00 00 00 00
>5e98	69 5e					.word w_rx3e
.5e9a					xt_r:
.5e9a	68		pla			pla
.5e9b	95 00		sta $00,x		sta pstack,x
.5e9d	68		pla			pla
.5e9e	95 01		sta $01,x		sta pstack+1,x
.5ea0	48		pha			pha
.5ea1	b5 00		lda $00,x		lda pstack,x
.5ea3	48		pha			pha
.5ea4	ca		dex			dex
.5ea5	ca		dex			dex
.5ea6	4c c4 42	jmp $42c4		jmp xt_next
.5ea9					w_rdrop:
>5ea9	05					.byte $05
>5eaa	72 64 72 6f 70				.text 'rdrop'
>5eaf	00 00 00 00 00 00 00 00			.fill 11,0
>5eb7	00 00 00
>5eba	87 5e					.word w_r
.5ebc					xt_rdrop:
.5ebc	68		pla			pla
.5ebd	68		pla			pla
.5ebe					w_x21:
>5ebe	01					.byte $01
>5ebf	21					.text '!'
>5ec0	00 00 00 00 00 00 00 00			.fill 15,0
>5ec8	00 00 00 00 00 00 00
>5ecf	a9 5e					.word w_rdrop
.5ed1					xt_x21:
.5ed1	b5 02		lda $02,x		lda pstack+2,x
.5ed3	85 2a		sta $2a			sta tmp
.5ed5	b5 03		lda $03,x		lda pstack+3,x
.5ed7	85 2b		sta $2b			sta tmp+1
.5ed9	a0 01		ldy #$01		ldy #1
.5edb	b5 04		lda $04,x		lda pstack+4,x
.5edd	92 2a		sta ($2a)		sta (tmp)
.5edf	b5 05		lda $05,x		lda pstack+5,x
.5ee1	91 2a		sta ($2a),y		sta (tmp),y
.5ee3	e8		inx			inx
.5ee4	e8		inx			inx
.5ee5	e8		inx			inx
.5ee6	e8		inx			inx
.5ee7	4c c4 42	jmp $42c4		jmp xt_next
.5eea					w_x40:
>5eea	01					.byte $01
>5eeb	40					.text '@'
>5eec	00 00 00 00 00 00 00 00			.fill 15,0
>5ef4	00 00 00 00 00 00 00
>5efb	be 5e					.word w_x21
.5efd					xt_x40:
.5efd	b5 02		lda $02,x		lda pstack+2,x
.5eff	85 2a		sta $2a			sta tmp
.5f01	b5 03		lda $03,x		lda pstack+3,x
.5f03	85 2b		sta $2b			sta tmp+1
.5f05	a0 01		ldy #$01		ldy #1
.5f07	b2 2a		lda ($2a)		lda (tmp)
.5f09	95 02		sta $02,x		sta pstack+2,x
.5f0b	b1 2a		lda ($2a),y		lda (tmp),y
.5f0d	95 03		sta $03,x		sta pstack+3,x
.5f0f	4c c4 42	jmp $42c4		jmp xt_next
.5f12					w_cx21:
>5f12	02					.byte $02
>5f13	63 21					.text 'c!'
>5f15	00 00 00 00 00 00 00 00			.fill 14,0
>5f1d	00 00 00 00 00 00
>5f23	ea 5e					.word w_x40
.5f25					xt_cx21:
.5f25	b5 04		lda $04,x		lda pstack+4,x
.5f27	81 02		sta ($02,x)		sta (pstack+2,x)
.5f29	e8		inx			inx
.5f2a	e8		inx			inx
.5f2b	e8		inx			inx
.5f2c	e8		inx			inx
.5f2d	4c c4 42	jmp $42c4		jmp xt_next
.5f30					w_cx40:
>5f30	02					.byte $02
>5f31	63 40					.text 'c@'
>5f33	00 00 00 00 00 00 00 00			.fill 14,0
>5f3b	00 00 00 00 00 00
>5f41	12 5f					.word w_cx21
.5f43					xt_cx40:
.5f43	a1 02		lda ($02,x)		lda (pstack+2,x)
.5f45	95 02		sta $02,x		sta pstack+2,x
.5f47	74 03		stz $03,x		stz pstack+3,x
.5f49	4c c4 42	jmp $42c4		jmp xt_next
.5f4c					w_fill:
>5f4c	04					.byte $04
>5f4d	66 69 6c 6c				.text 'fill'
>5f51	00 00 00 00 00 00 00 00			.fill 12,0
>5f59	00 00 00 00
>5f5d	30 5f					.word w_cx40
.5f5f					xt_fill:
.5f5f						loop:
.5f5f	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.5f61	d0 04		bne $5f67		bne do_write
.5f63	b5 04		lda $04,x		lda pstack+4,x
.5f65	f0 19		beq $5f80		beq done                ; Yes: we're done...
.5f67						do_write:
.5f67	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.5f69	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.5f6b	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.5f6d	d0 02		bne $5f71		bne deccount
.5f6f	f6 06		inc $06,x		inc pstack+6,x
.5f71						deccount:
.5f71	38		sec			sec                     ; Decrement the count
.5f72	b5 03		lda $03,x		lda pstack+3,x
.5f74	e9 01		sbc #$01		sbc #1
.5f76	95 03		sta $03,x		sta pstack+3,x
.5f78	b5 04		lda $04,x		lda pstack+4,x
.5f7a	e9 00		sbc #$00		sbc #0
.5f7c	95 04		sta $04,x		sta pstack+4,x
.5f7e	80 df		bra $5f5f		bra loop                ; And check again
.5f80						done:
.5f80	8a		txa			txa                     ; Clean up the parameter stack
.5f81	69 06		adc #$06		adc #6
.5f83	aa		tax			tax
.5f84	4c c4 42	jmp $42c4		jmp xt_next
.5f87					w_x2bx21:
>5f87	02					.byte $02
>5f88	2b 21					.text '+!'
>5f8a	00 00 00 00 00 00 00 00			.fill 14,0
>5f92	00 00 00 00 00 00
>5f98	4c 5f					.word w_fill
.5f9a					xt_x2bx21:
.5f9a	b5 03		lda $03,x		lda pstack+3,x
.5f9c	85 2b		sta $2b			sta tmp+1
.5f9e	b5 02		lda $02,x		lda pstack+2,x
.5fa0	85 2a		sta $2a			sta tmp
.5fa2	18		clc			clc
.5fa3	a0 01		ldy #$01		ldy #1
.5fa5	b2 2a		lda ($2a)		lda (tmp)
.5fa7	75 04		adc $04,x		adc pstack+4,x
.5fa9	92 2a		sta ($2a)		sta (tmp)
.5fab	b1 2a		lda ($2a),y		lda (tmp),y
.5fad	75 05		adc $05,x		adc pstack+5,x
.5faf	91 2a		sta ($2a),y		sta (tmp),y
.5fb1						done:
.5fb1	e8		inx			inx                     ; Clean up the stack
.5fb2	e8		inx			inx
.5fb3	e8		inx			inx
.5fb4	e8		inx			inx
.5fb5	4c c4 42	jmp $42c4		jmp xt_next
.5fb8					w_enclose:
>5fb8	07					.byte $07
>5fb9	65 6e 63 6c 6f 73 65			.text 'enclose'
>5fc0	00 00 00 00 00 00 00 00			.fill 9,0
>5fc8	00
>5fc9	87 5f					.word w_x2bx21
.5fcb					xt_enclose:
.5fcb	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.5fcd	85 34		sta $34			sta src_ptr+1
.5fcf	b5 04		lda $04,x		lda pstack+4,x
.5fd1	85 33		sta $33			sta src_ptr
.5fd3	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.5fd5	85 2a		sta $2a			sta tmp
.5fd7	8a		txa			txa
.5fd8	38		sec			sec
.5fd9	e9 04		sbc #$04		sbc #4
.5fdb	aa		tax			tax
.5fdc	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.5fde	74 06		stz $06,x		stz pstack+6,x
.5fe0	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.5fe2	74 04		stz $04,x		stz pstack+4,x
.5fe4	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.5fe6	74 02		stz $02,x		stz pstack+2,x
.5fe8	a0 00		ldy #$00		ldy #0
.5fea						loop1:
.5fea	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character
.5fec	d0 03		bne $5ff1		bne chk_delim1          ; NUL? No:; check it against the delimiter
.5fee						none:
.5fee	4c c4 42	jmp $42c4		jmp xt_next                ; Yes: we want to return 0s
.5ff1						chk_delim1:
.5ff1	c5 2a		cmp $2a			cmp tmp                 ; Is it the delimiter?
.5ff3	f0 13		beq $6008		beq skip2               ; Yes: skip the character
.5ff5	a5 2a		lda $2a			lda tmp                 ; Check the delimiter
.5ff7	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.5ff9	d0 0b		bne $6006		bne found               ; No: ok, we've found the first character;
.5ffb	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character back
.5ffd	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.5fff	d0 05		bne $6006		bne found               ; No: we found the first character
.6001	c8		iny			iny                     ; Move to the next character
.6002	f0 ea		beq $5fee		beq none                ; If we've rolled over, we found nothing
.6004	80 e4		bra $5fea		bra loop1               ; Otherwise: check the next character
.6006						found:
.6006	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.6008						skip2:
.6008	c8		iny			iny                     ; Go to the next character
.6009	f0 1c		beq $6027		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.600b						loop2:
.600b	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character
.600d	f0 18		beq $6027		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.600f	c5 2a		cmp $2a			cmp tmp                 ; Check it against the delimiter
.6011	f0 0c		beq $601f		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.6013	a5 2a		lda $2a			lda tmp                 ; Get the delimiter
.6015	c9 20		cmp #$20		cmp #' '                ; Is it space?
.6017	d0 ef		bne $6008		bne skip2               ; No: go to the next character
.6019	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character again
.601b	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.601d	d0 e9		bne $6008		bne skip2               ; No: go to the next character
.601f						found_delim:
.601f	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.6021	c8		iny			iny
.6022	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.6024	4c c4 42	jmp $42c4		jmp xt_next                ; And we're done
.6027						found_nul:
.6027	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.6029	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.602b	4c c4 42	jmp $42c4		jmp xt_next                ; And we're done
.602e					w_cmove:
>602e	05					.byte $05
>602f	63 6d 6f 76 65				.text 'cmove'
>6034	00 00 00 00 00 00 00 00			.fill 11,0
>603c	00 00 00
>603f	b8 5f					.word w_enclose
.6041					xt_cmove:
.6041	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.6043	85 2b		sta $2b			sta tmp+1
.6045	b5 02		lda $02,x		lda pstack+2,x
.6047	85 2a		sta $2a			sta tmp
.6049	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.604b	85 36		sta $36			sta dst_ptr+1
.604d	b5 04		lda $04,x		lda pstack+4,x
.604f	85 35		sta $35			sta dst_ptr
.6051	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.6053	85 34		sta $34			sta src_ptr+1
.6055	b5 06		lda $06,x		lda pstack+6,x
.6057	85 33		sta $33			sta src_ptr
.6059	8a		txa			txa                     ; Clean up the stack
.605a	18		clc			clc
.605b	69 06		adc #$06		adc #6
.605d	85 2e		sta $2e			sta savex               ; And save it for later restoration
.605f	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.6061	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.6063						loop:
.6063	e4 2b		cpx $2b			cpx tmp+1               ; is tmp == X:Y?
.6065	d0 04		bne $606b		bne copy
.6067	c4 2a		cpy $2a			cpy tmp
.6069	f0 0e		beq $6079		beq done                ; Yes: we're done
.606b						copy:
.606b	b1 33		lda ($33),y		lda (src_ptr),y         ; Copy the byte
.606d	91 35		sta ($35),y		sta (dst_ptr),y
.606f	c8		iny			iny                     ; Move to the next byte
.6070	d0 f1		bne $6063		bne loop                ; Repeat for 256 bytes
.6072	e8		inx			inx                     ; Move to the next block of 256
.6073	e6 34		inc $34			inc src_ptr+1
.6075	e6 36		inc $36			inc dst_ptr+1
.6077	80 ea		bra $6063		bra loop                ; And continue the loop
.6079						done:
.6079	a6 2e		ldx $2e			ldx savex
.607b	4c c4 42	jmp $42c4		jmp xt_next
.607e					w_move:
>607e	04					.byte $04
>607f	6d 6f 76 65				.text 'move'
>6083	00 00 00 00 00 00 00 00			.fill 12,0
>608b	00 00 00 00
>608f	2e 60					.word w_cmove
.6091					xt_move:
.6091	38		sec			sec                     ; Compare addr1 and addr2
.6092	b5 06		lda $06,x		lda pstack+6,x
.6094	f5 04		sbc $04,x		sbc pstack+4,x
.6096	85 2a		sta $2a			sta tmp
.6098	b5 07		lda $07,x		lda pstack+7,x
.609a	f5 05		sbc $05,x		sbc pstack+5,x
.609c	85 2b		sta $2b			sta tmp+1
.609e	30 24		bmi $60c4		bmi a1less
.60a0	f0 72		beq $6114		beq chklo
.60a2						a1greater:
.60a2	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.60a4	d0 50		bne $60f6		bne docopy1
.60a6	b5 03		lda $03,x		lda pstack+3,x
.60a8	f0 72		beq $611c		beq done                ; Yes: we're done;
.60aa	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.60ac	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.60ae	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.60b0	d0 02		bne $60b4		bne inc2
.60b2	f6 07		inc $07,x		inc pstack+7,x
.60b4						inc2:
.60b4	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.60b6	d0 02		bne $60ba		bne dec_count
.60b8	f6 03		inc $03,x		inc pstack+3,x
.60ba						dec_count:
.60ba	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.60bc	d0 02		bne $60c0		bne l1
.60be	d6 03		dec $03,x		dec pstack+3,x
.60c0						l1:
.60c0	d6 02		dec $02,x		dec pstack+2,x
.60c2	80 de		bra $60a2		bra a1greater
.60c4						a1less:
.60c4	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.60c6	d0 02		bne $60ca		bne l2
.60c8	d6 05		dec $05,x		dec pstack+5,x
.60ca						l2:
.60ca	d6 04		dec $04,x		dec pstack+4,x
.60cc	18		clc			clc                     ; addr2 := addr2 + u
.60cd	b5 04		lda $04,x		lda pstack+4,x
.60cf	75 02		adc $02,x		adc pstack+2,x
.60d1	95 04		sta $04,x		sta pstack+4,x
.60d3	b5 05		lda $05,x		lda pstack+5,x
.60d5	75 03		adc $03,x		adc pstack+3,x
.60d7	95 05		sta $05,x		sta pstack+5,x
.60d9	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.60db	d0 02		bne $60df		bne l3
.60dd	d6 07		dec $07,x		dec pstack+7,x
.60df						l3:
.60df	d6 06		dec $06,x		dec pstack+6,x
.60e1	18		clc			clc                     ; addr1 := addr1 + u
.60e2	b5 06		lda $06,x		lda pstack+6,x
.60e4	75 02		adc $02,x		adc pstack+2,x
.60e6	95 06		sta $06,x		sta pstack+6,x
.60e8	b5 07		lda $07,x		lda pstack+7,x
.60ea	75 03		adc $03,x		adc pstack+3,x
.60ec	95 07		sta $07,x		sta pstack+7,x
.60ee						loop2:
.60ee	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.60f0	d0 04		bne $60f6		bne docopy1
.60f2	b5 03		lda $03,x		lda pstack+3,x
.60f4	f0 26		beq $611c		beq done                ; Yes: we're done;
.60f6						docopy1:
.60f6	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.60f8	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.60fa	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.60fc	d0 02		bne $6100		bne l4
.60fe	d6 07		dec $07,x		dec pstack+7,x
.6100						l4:
.6100	d6 06		dec $06,x		dec pstack+6,x
.6102	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.6104	d0 02		bne $6108		bne l5
.6106	d6 05		dec $05,x		dec pstack+5,x
.6108						l5:
.6108	d6 04		dec $04,x		dec pstack+4,x
.610a	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.610c	d0 02		bne $6110		bne l6
.610e	d6 03		dec $03,x		dec pstack+3,x
.6110						l6:
.6110	d6 02		dec $02,x		dec pstack+2,x
.6112	80 da		bra $60ee		bra loop2
.6114						chklo:
.6114	a5 2a		lda $2a			lda tmp                 ; High bytes are equal: check the low byte
.6116	30 ac		bmi $60c4		bmi a1less
.6118	f0 02		beq $611c		beq done                ; If equal, we don't need to move the data
.611a	80 86		bra $60a2		bra a1greater
.611c						done:
.611c	8a		txa			txa
.611d	18		clc			clc
.611e	69 06		adc #$06		adc #6
.6120	aa		tax			tax
.6121	60		rts			rts
.6122					w_x2b:
>6122	01					.byte $01
>6123	2b					.text '+'
>6124	00 00 00 00 00 00 00 00			.fill 15,0
>612c	00 00 00 00 00 00 00
>6133	7e 60					.word w_move
.6135					xt_x2b:
.6135	18		clc			clc
.6136	b5 04		lda $04,x		lda pstack+4,x
.6138	75 02		adc $02,x		adc pstack+2,x
.613a	95 04		sta $04,x		sta pstack+4,x
.613c	b5 05		lda $05,x		lda pstack+5,x
.613e	75 03		adc $03,x		adc pstack+3,x
.6140	95 05		sta $05,x		sta pstack+5,x
.6142	e8		inx			inx
.6143	e8		inx			inx
.6144	4c c4 42	jmp $42c4		jmp xt_next
.6147					w_dx2b:
>6147	02					.byte $02
>6148	64 2b					.text 'd+'
>614a	00 00 00 00 00 00 00 00			.fill 14,0
>6152	00 00 00 00 00 00
>6158	22 61					.word w_x2b
.615a					xt_dx2b:
.615a	18		clc			clc
.615b	b5 06		lda $06,x		lda pstack+6,x
.615d	75 02		adc $02,x		adc pstack+2,x
.615f	95 06		sta $06,x		sta pstack+6,x
.6161	b5 07		lda $07,x		lda pstack+7,x
.6163	75 03		adc $03,x		adc pstack+3,x
.6165	95 07		sta $07,x		sta pstack+7,x
.6167	b5 08		lda $08,x		lda pstack+8,x
.6169	75 04		adc $04,x		adc pstack+4,x
.616b	95 08		sta $08,x		sta pstack+8,x
.616d	b5 09		lda $09,x		lda pstack+9,x
.616f	75 05		adc $05,x		adc pstack+5,x
.6171	95 09		sta $09,x		sta pstack+9,x
.6173	e8		inx			inx
.6174	e8		inx			inx
.6175	e8		inx			inx
.6176	e8		inx			inx
.6177	4c c4 42	jmp $42c4		jmp xt_next
.617a					w_dx2d:
>617a	02					.byte $02
>617b	64 2d					.text 'd-'
>617d	00 00 00 00 00 00 00 00			.fill 14,0
>6185	00 00 00 00 00 00
>618b	47 61					.word w_dx2b
.618d					xt_dx2d:
.618d	38		sec			sec
.618e	b5 06		lda $06,x		lda pstack+6,x
.6190	f5 02		sbc $02,x		sbc pstack+2,x
.6192	95 06		sta $06,x		sta pstack+6,x
.6194	b5 07		lda $07,x		lda pstack+7,x
.6196	f5 03		sbc $03,x		sbc pstack+3,x
.6198	95 07		sta $07,x		sta pstack+7,x
.619a	b5 08		lda $08,x		lda pstack+8,x
.619c	f5 04		sbc $04,x		sbc pstack+4,x
.619e	95 08		sta $08,x		sta pstack+8,x
.61a0	b5 09		lda $09,x		lda pstack+9,x
.61a2	f5 05		sbc $05,x		sbc pstack+5,x
.61a4	95 09		sta $09,x		sta pstack+9,x
.61a6	e8		inx			inx
.61a7	e8		inx			inx
.61a8	e8		inx			inx
.61a9	e8		inx			inx
.61aa	4c c4 42	jmp $42c4		jmp xt_next
.61ad					w_x2d:
>61ad	01					.byte $01
>61ae	2d					.text '-'
>61af	00 00 00 00 00 00 00 00			.fill 15,0
>61b7	00 00 00 00 00 00 00
>61be	7a 61					.word w_dx2d
.61c0					xt_x2d:
.61c0	38		sec			sec
.61c1	b5 04		lda $04,x		lda pstack+4,x
.61c3	f5 02		sbc $02,x		sbc pstack+2,x
.61c5	95 04		sta $04,x		sta pstack+4,x
.61c7	b5 05		lda $05,x		lda pstack+5,x
.61c9	f5 03		sbc $03,x		sbc pstack+3,x
.61cb	95 05		sta $05,x		sta pstack+5,x
.61cd	e8		inx			inx
.61ce	e8		inx			inx
.61cf	4c c4 42	jmp $42c4		jmp xt_next
.61d2					w_ux2a:
>61d2	02					.byte $02
>61d3	75 2a					.text 'u*'
>61d5	00 00 00 00 00 00 00 00			.fill 14,0
>61dd	00 00 00 00 00 00
>61e3	ad 61					.word w_x2d
.61e5					xt_ux2a:
.61e5	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.61e7	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.61e9	8d 01 de	sta $de01		sta $de01
.61ec	b5 04		lda $04,x		lda pstack+4,x
.61ee	8d 00 de	sta $de00		sta $de00
.61f1	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.61f3	8d 03 de	sta $de03		sta $de03
.61f6	b5 02		lda $02,x		lda pstack+2,x
.61f8	8d 02 de	sta $de02		sta $de02
.61fb	e8		inx			inx
.61fc	e8		inx			inx
.61fd	ad 11 de	lda $de11		lda $de11       ; Read the coprocessor unsigned multiplication result
.6200	95 03		sta $03,x		sta pstack+3,x
.6202	ad 10 de	lda $de10		lda $de10
.6205	95 02		sta $02,x		sta pstack+2,x
.6207	4c c4 42	jmp $42c4		jmp xt_next
.620a					w_x2a:
>620a	01					.byte $01
>620b	2a					.text '*'
>620c	00 00 00 00 00 00 00 00			.fill 15,0
>6214	00 00 00 00 00 00 00
>621b	d2 61					.word w_ux2a
.621d					xt_x2a:
.621d	4c 0d 43	jmp $430d		jmp xt_enter
>6220	e5 61					.word xt_ux2a
>6222	f1 42					.word xt_exit
.6224					w_ux2ax2dsoft:
>6224	07					.byte $07
>6225	75 2a 2d 73 6f 66 74			.text 'u*-soft'
>622c	00 00 00 00 00 00 00 00			.fill 9,0
>6234	00
>6235	0a 62					.word w_x2a
.6237					xt_ux2ax2dsoft:
.6237	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.6239	85 2c		sta $2c			sta tmp+2
.623b	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.623d						l1:
.623d	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.623f	76 02		ror $02,x		ror pstack+2,x
.6241	90 0b		bcc $624e		bcc l2          ; 0 or 1?
.6243	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.6244	18		clc			clc
.6245	b5 04		lda $04,x		lda pstack+4,x
.6247	65 2c		adc $2c			adc tmp+2
.6249	85 2c		sta $2c			sta tmp+2
.624b	98		tya			tya
.624c	75 05		adc $05,x		adc pstack+5,x
.624e						l2:
.624e	6a		ror a			ror A
.624f	66 2c		ror $2c			ror tmp+2
.6251	66 2b		ror $2b			ror tmp+1
.6253	66 2a		ror $2a			ror tmp
.6255	3a		dec a			dec a
.6256	d0 e5		bne $623d		bne l1
.6258	85 2d		sta $2d			sta tmp+3
.625a	a5 2a		lda $2a			lda tmp         ; Save result to parameter stack
.625c	95 04		sta $04,x		sta pstack+4,x
.625e	a5 2b		lda $2b			lda tmp+1
.6260	95 05		sta $05,x		sta pstack+5,x
.6262	e8		inx			inx             ; Clean up parameter stack
.6263	e8		inx			inx
.6264	4c c4 42	jmp $42c4		jmp xt_next
.6267					w_x2ax2dsoft:
>6267	06					.byte $06
>6268	2a 2d 73 6f 66 74			.text '*-soft'
>626e	00 00 00 00 00 00 00 00			.fill 10,0
>6276	00 00
>6278	24 62					.word w_ux2ax2dsoft
.627a					xt_x2ax2dsoft:
.627a	64 30		stz $30			stz sign
.627c	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.627e	10 11		bpl $6291		bpl chk_n2
.6280	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.6282	85 30		sta $30			sta sign
.6284	38		sec			sec             ; Negate n1
.6285	a9 00		lda #$00		lda #0
.6287	f5 04		sbc $04,x		sbc pstack+4,x
.6289	95 04		sta $04,x		sta pstack+4,x
.628b	a9 00		lda #$00		lda #0
.628d	f5 05		sbc $05,x		sbc pstack+5,x
.628f	95 05		sta $05,x		sta pstack+5,x
.6291						chk_n2:
.6291	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.6293	10 13		bpl $62a8		bpl init_tmp
.6295	a5 30		lda $30			lda sign        ; Flip the sign bit, if so
.6297	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.6299	85 30		sta $30			sta sign
.629b	38		sec			sec             ; Negate n2
.629c	a9 00		lda #$00		lda #0
.629e	f5 02		sbc $02,x		sbc pstack+2,x
.62a0	95 02		sta $02,x		sta pstack+2,x
.62a2	a9 00		lda #$00		lda #0
.62a4	f5 03		sbc $03,x		sbc pstack+3,x
.62a6	95 03		sta $03,x		sta pstack+3,x
.62a8						init_tmp:
.62a8	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.62aa	85 2c		sta $2c			sta tmp+2
.62ac	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.62ae						l1:
.62ae	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.62b0	76 02		ror $02,x		ror pstack+2,x
.62b2	90 0b		bcc $62bf		bcc l2          ; 0 or 1?
.62b4	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.62b5	18		clc			clc
.62b6	b5 04		lda $04,x		lda pstack+4,x
.62b8	65 2c		adc $2c			adc tmp+2
.62ba	85 2c		sta $2c			sta tmp+2
.62bc	98		tya			tya
.62bd	75 05		adc $05,x		adc pstack+5,x
.62bf						l2:
.62bf	6a		ror a			ror A
.62c0	66 2c		ror $2c			ror tmp+2
.62c2	66 2b		ror $2b			ror tmp+1
.62c4	66 2a		ror $2a			ror tmp
.62c6	3a		dec a			dec a
.62c7	d0 e5		bne $62ae		bne l1
.62c9	85 2d		sta $2d			sta tmp+3
.62cb	a5 2a		lda $2a			lda tmp         ; Save result to parameter stack
.62cd	95 04		sta $04,x		sta pstack+4,x
.62cf	a5 2b		lda $2b			lda tmp+1
.62d1	95 05		sta $05,x		sta pstack+5,x
.62d3	e8		inx			inx             ; Clean up parameter stack
.62d4	e8		inx			inx
.62d5	a5 30		lda $30			lda sign        ; Check the sign
.62d7	10 0d		bpl $62e6		bpl done
.62d9	38		sec			sec             ; If negative, negate result
.62da	a9 00		lda #$00		lda #0
.62dc	f5 02		sbc $02,x		sbc pstack+2,x
.62de	95 02		sta $02,x		sta pstack+2,x
.62e0	a9 00		lda #$00		lda #0
.62e2	f5 03		sbc $03,x		sbc pstack+3,x
.62e4	95 03		sta $03,x		sta pstack+3,x
.62e6						done:
.62e6	4c c4 42	jmp $42c4		jmp xt_next
.62e9					w_x2fmod:
>62e9	04					.byte $04
>62ea	2f 6d 6f 64				.text '/mod'
>62ee	00 00 00 00 00 00 00 00			.fill 12,0
>62f6	00 00 00 00
>62fa	67 62					.word w_x2ax2dsoft
.62fc					xt_x2fmod:
.62fc	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.62fe	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor signed numerator
.6300	8d 07 de	sta $de07		sta $de07
.6303	b5 04		lda $04,x		lda pstack+4,x
.6305	8d 06 de	sta $de06		sta $de06
.6308	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor signed denominator
.630a	8d 05 de	sta $de05		sta $de05
.630d	b5 02		lda $02,x		lda pstack+2,x
.630f	8d 04 de	sta $de04		sta $de04
.6312	ad 17 de	lda $de17		lda $de17		; Set the remainder
.6315	95 05		sta $05,x		sta pstack+5,x
.6317	ad 16 de	lda $de16		lda $de16
.631a	95 04		sta $04,x		sta pstack+4,x
.631c	ad 15 de	lda $de15		lda $de15		; Set the quotient
.631f	95 03		sta $03,x		sta pstack+3,x
.6321	ad 14 de	lda $de14		lda $de14
.6324	95 02		sta $02,x		sta pstack+2,x
.6326	4c c4 42	jmp $42c4		jmp xt_next
.6329					w_umx2fmod:
>6329	06					.byte $06
>632a	75 6d 2f 6d 6f 64			.text 'um/mod'
>6330	00 00 00 00 00 00 00 00			.fill 10,0
>6338	00 00
>633a	e9 62					.word w_x2fmod
.633c					xt_umx2fmod:
.633c	38		sec			sec
.633d	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract hi cell of dividend by
.633f	f5 02		sbc $02,x		sbc     pstack+2,x          ; divisor to see if there's an overflow condition.
.6341	b5 07		lda $07,x		lda     pstack+7,x
.6343	f5 03		sbc $03,x		sbc     pstack+3,x
.6345	b0 2e		bcs $6375		bcs     overflow            ; Branch if /0 or overflow.
.6347	a9 11		lda #$11		lda     #$11                ; Loop 17x.
.6349	85 2a		sta $2a			sta     tmp                 ; Use tmp for loop counter.
.634b						loop:
.634b	36 04		rol $04,x		rol     pstack+4,x          ; Rotate dividend lo cell left one bit.
.634d	36 05		rol $05,x		rol     pstack+5,x
.634f	c6 2a		dec $2a			dec     tmp                 ; Decrement loop counter.
.6351	f0 2c		beq $637f		beq     done                ; If we're done, then branch to end.
.6353	36 06		rol $06,x		rol     pstack+6,x          ; Otherwise rotate dividend hi cell left one bit.
.6355	36 07		rol $07,x		rol     pstack+7,x
.6357	64 2b		stz $2b			stz     tmp+1
.6359	26 2b		rol $2b			rol     tmp+1               ; Rotate the bit carried out of above into tmp+1.
.635b	38		sec			sec
.635c	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract dividend hi cell minus divisor.
.635e	f5 02		sbc $02,x		sbc     pstack+2,x
.6360	85 2c		sta $2c			sta     tmp+2               ; Put result temporarily in tmp+2 (lo byte)
.6362	b5 07		lda $07,x		lda     pstack+7,x
.6364	f5 03		sbc $03,x		sbc     pstack+3,x
.6366	a8		tay			tay                         ; and Y (hi byte).
.6367	a5 2b		lda $2b			lda     tmp+1               ; Remember now to bring in the bit carried out above.
.6369	e9 00		sbc #$00		sbc     #0
.636b	90 de		bcc $634b		bcc     loop
.636d	a5 2c		lda $2c			lda     tmp+2               ; If that didn't cause a borrow,
.636f	95 06		sta $06,x		sta     pstack+6,x          ; make the result from above to
.6371	94 07		sty $07,x		sty     pstack+7,x          ; be the new dividend hi cell
.6373	80 d6		bra $634b		bra     loop                ; and then brach up.  (NMOS 6502 can use BCS here.)
.6375						overflow:
.6375	a9 ff		lda #$ff		lda     #$ff                ; If overflow or /0 condition found,
.6377	95 06		sta $06,x		sta     pstack+6,x          ; just put FFFF in both the remainder
.6379	95 07		sta $07,x		sta     pstack+7,x
.637b	95 04		sta $04,x		sta     pstack+4,x          ; and the quotient.
.637d	95 05		sta $05,x		sta     pstack+5,x
.637f						done:
.637f	e8		inx			inx
.6380	e8		inx			inx
.6381	4c c4 42	jmp $42c4		jmp xt_next
.6384					w_sx3ed:
>6384	03					.byte $03
>6385	73 3e 64				.text 's>d'
>6388	00 00 00 00 00 00 00 00			.fill 13,0
>6390	00 00 00 00 00
>6395	29 63					.word w_umx2fmod
.6397					xt_sx3ed:
.6397	ca		dex			dex
.6398	ca		dex			dex
.6399	b5 04		lda $04,x		lda pstack+4,x
.639b	95 02		sta $02,x		sta pstack+2,x
.639d	b5 05		lda $05,x		lda pstack+5,x
.639f	95 03		sta $03,x		sta pstack+3,x
.63a1	30 07		bmi $63aa		bmi is_neg
.63a3	74 04		stz $04,x		stz pstack+4,x
.63a5	74 05		stz $05,x		stz pstack+5,x
.63a7	4c c4 42	jmp $42c4		jmp xt_next
.63aa						is_neg:
.63aa	a9 ff		lda #$ff		lda #$ff
.63ac	95 04		sta $04,x		sta pstack+4,x
.63ae	95 05		sta $05,x		sta pstack+5,x
.63b0	4c c4 42	jmp $42c4		jmp xt_next
.63b3					w_1x2b:
>63b3	02					.byte $02
>63b4	31 2b					.text '1+'
>63b6	00 00 00 00 00 00 00 00			.fill 14,0
>63be	00 00 00 00 00 00
>63c4	84 63					.word w_sx3ed
.63c6					xt_1x2b:
.63c6	f6 02		inc $02,x		inc pstack+2,x
.63c8	d0 02		bne $63cc		bne skip
.63ca	f6 03		inc $03,x		inc pstack+3,x
.63cc						skip:
.63cc	4c c4 42	jmp $42c4		jmp xt_next
.63cf					w_2x2b:
>63cf	02					.byte $02
>63d0	32 2b					.text '2+'
>63d2	00 00 00 00 00 00 00 00			.fill 14,0
>63da	00 00 00 00 00 00
>63e0	b3 63					.word w_1x2b
.63e2					xt_2x2b:
.63e2	18		clc			clc
.63e3	b5 02		lda $02,x		lda pstack+2,x
.63e5	69 02		adc #$02		adc #2
.63e7	95 02		sta $02,x		sta pstack+2,x
.63e9	b5 03		lda $03,x		lda pstack+3,x
.63eb	69 00		adc #$00		adc #0
.63ed	95 03		sta $03,x		sta pstack+3,x
.63ef	4c c4 42	jmp $42c4		jmp xt_next
.63f2					w_1x2d:
>63f2	02					.byte $02
>63f3	31 2d					.text '1-'
>63f5	00 00 00 00 00 00 00 00			.fill 14,0
>63fd	00 00 00 00 00 00
>6403	cf 63					.word w_2x2b
.6405					xt_1x2d:
.6405	b5 02		lda $02,x		lda pstack+2,x
.6407	d0 02		bne $640b		bne l1
.6409	d6 03		dec $03,x		dec pstack+3,x
.640b						l1:
.640b	d6 02		dec $02,x		dec pstack+2,x
.640d	4c c4 42	jmp $42c4		jmp xt_next
.6410					w_2x2d:
>6410	02					.byte $02
>6411	32 2d					.text '2-'
>6413	00 00 00 00 00 00 00 00			.fill 14,0
>641b	00 00 00 00 00 00
>6421	f2 63					.word w_1x2d
.6423					xt_2x2d:
.6423	38		sec			sec
.6424	b5 02		lda $02,x		lda pstack+2,x
.6426	e9 02		sbc #$02		sbc #2
.6428	95 02		sta $02,x		sta pstack+2,x
.642a	b5 03		lda $03,x		lda pstack+3,x
.642c	e9 00		sbc #$00		sbc #0
.642e	95 03		sta $03,x		sta pstack+3,x
.6430	4c c4 42	jmp $42c4		jmp xt_next
.6433					w_and:
>6433	03					.byte $03
>6434	61 6e 64				.text 'and'
>6437	00 00 00 00 00 00 00 00			.fill 13,0
>643f	00 00 00 00 00
>6444	10 64					.word w_2x2d
.6446					xt_and:
.6446	b5 02		lda $02,x		lda pstack+2,x
.6448	35 04		and $04,x		and pstack+4,x
.644a	95 04		sta $04,x		sta pstack+4,x
.644c	b5 03		lda $03,x		lda pstack+3,x
.644e	35 05		and $05,x		and pstack+5,x
.6450	95 05		sta $05,x		sta pstack+5,x
.6452	e8		inx			inx
.6453	e8		inx			inx
.6454	4c c4 42	jmp $42c4		jmp xt_next
.6457					w_or:
>6457	02					.byte $02
>6458	6f 72					.text 'or'
>645a	00 00 00 00 00 00 00 00			.fill 14,0
>6462	00 00 00 00 00 00
>6468	33 64					.word w_and
.646a					xt_or:
.646a	b5 02		lda $02,x		lda pstack+2,x
.646c	15 04		ora $04,x		ora pstack+4,x
.646e	95 04		sta $04,x		sta pstack+4,x
.6470	b5 03		lda $03,x		lda pstack+3,x
.6472	15 05		ora $05,x		ora pstack+5,x
.6474	95 05		sta $05,x		sta pstack+5,x
.6476	e8		inx			inx
.6477	e8		inx			inx
.6478	4c c4 42	jmp $42c4		jmp xt_next
.647b					w_xor:
>647b	03					.byte $03
>647c	78 6f 72				.text 'xor'
>647f	00 00 00 00 00 00 00 00			.fill 13,0
>6487	00 00 00 00 00
>648c	57 64					.word w_or
.648e					xt_xor:
.648e	b5 02		lda $02,x		lda pstack+2,x
.6490	55 04		eor $04,x		eor pstack+4,x
.6492	95 04		sta $04,x		sta pstack+4,x
.6494	b5 03		lda $03,x		lda pstack+3,x
.6496	55 05		eor $05,x		eor pstack+5,x
.6498	95 05		sta $05,x		sta pstack+5,x
.649a	e8		inx			inx
.649b	e8		inx			inx
.649c	4c c4 42	jmp $42c4		jmp xt_next
.649f					w_not:
>649f	03					.byte $03
>64a0	6e 6f 74				.text 'not'
>64a3	00 00 00 00 00 00 00 00			.fill 13,0
>64ab	00 00 00 00 00
>64b0	7b 64					.word w_xor
.64b2					xt_not:
.64b2	b5 02		lda $02,x		lda pstack+2,x
.64b4	49 ff		eor #$ff		eor #$ff
.64b6	95 02		sta $02,x		sta pstack+2,x
.64b8	b5 03		lda $03,x		lda pstack+3,x
.64ba	49 ff		eor #$ff		eor #$ff
.64bc	95 03		sta $03,x		sta pstack+3,x
.64be	4c c4 42	jmp $42c4		jmp xt_next
.64c1					w_0x3c:
>64c1	02					.byte $02
>64c2	30 3c					.text '0<'
>64c4	00 00 00 00 00 00 00 00			.fill 14,0
>64cc	00 00 00 00 00 00
>64d2	9f 64					.word w_not
.64d4					xt_0x3c:
.64d4	b5 03		lda $03,x		lda pstack+3,x
.64d6	30 07		bmi $64df		bmi istrue
.64d8	74 02		stz $02,x		stz pstack+2,x
.64da	74 03		stz $03,x		stz pstack+3,x
.64dc	4c c4 42	jmp $42c4		jmp xt_next
.64df						istrue:
.64df	a9 ff		lda #$ff		lda #$ff
.64e1	95 02		sta $02,x		sta pstack+2,x
.64e3	95 03		sta $03,x		sta pstack+3,x
.64e5	4c c4 42	jmp $42c4		jmp xt_next
.64e8					w_0x3d:
>64e8	02					.byte $02
>64e9	30 3d					.text '0='
>64eb	00 00 00 00 00 00 00 00			.fill 14,0
>64f3	00 00 00 00 00 00
>64f9	c1 64					.word w_0x3c
.64fb					xt_0x3d:
.64fb	b5 02		lda $02,x		lda pstack+2,x
.64fd	d0 0d		bne $650c		bne isfalse
.64ff	b5 03		lda $03,x		lda pstack+3,x
.6501	d0 09		bne $650c		bne isfalse
.6503	a9 ff		lda #$ff		lda #$ff
.6505	95 02		sta $02,x		sta pstack+2,x
.6507	95 03		sta $03,x		sta pstack+3,x
.6509	4c c4 42	jmp $42c4		jmp xt_next
.650c						isfalse:
.650c	74 02		stz $02,x		stz pstack+2,x
.650e	74 03		stz $03,x		stz pstack+3,x
.6510	4c c4 42	jmp $42c4		jmp xt_next
.6513					w_0x3e:
>6513	02					.byte $02
>6514	30 3e					.text '0>'
>6516	00 00 00 00 00 00 00 00			.fill 14,0
>651e	00 00 00 00 00 00
>6524	e8 64					.word w_0x3d
.6526					xt_0x3e:
.6526	b5 03		lda $03,x		lda pstack+3,x
.6528	30 0f		bmi $6539		bmi isfalse
.652a	d0 04		bne $6530		bne istrue
.652c	b5 02		lda $02,x		lda pstack+2,x
.652e	f0 09		beq $6539		beq isfalse
.6530						istrue:
.6530	a9 ff		lda #$ff		lda #$ff
.6532	95 02		sta $02,x		sta pstack+2,x
.6534	95 03		sta $03,x		sta pstack+3,x
.6536	4c c4 42	jmp $42c4		jmp xt_next
.6539						isfalse:
.6539	74 02		stz $02,x		stz pstack+2,x
.653b	74 03		stz $03,x		stz pstack+3,x
.653d	4c c4 42	jmp $42c4		jmp xt_next
.6540					w_x28variablex29:
>6540	0a					.byte $0A
>6541	28 76 61 72 69 61 62 6c			.text '(variable)'
>6549	65 29
>654b	00 00 00 00 00 00			.fill 6,0
>6551	13 65					.word w_0x3e
.6553					xt_x28variablex29:
.6553	18		clc			clc                     ; push(wp + 3)
.6554	a5 22		lda $22			lda wp
.6556	69 03		adc #$03		adc #3
.6558	95 00		sta $00,x		sta pstack,x
.655a	a5 23		lda $23			lda wp+1
.655c	69 00		adc #$00		adc #0
.655e	95 01		sta $01,x		sta pstack+1,x
.6560	ca		dex			dex
.6561	ca		dex			dex
.6562	4c c4 42	jmp $42c4		jmp xt_next
.6565					w_x28constantx29:
>6565	0a					.byte $0A
>6566	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>656e	74 29
>6570	00 00 00 00 00 00			.fill 6,0
>6576	40 65					.word w_x28variablex29
.6578					xt_x28constantx29:
.6578	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.657a	b1 22		lda ($22),y		lda (wp),y
.657c	95 00		sta $00,x		sta pstack,x
.657e	c8		iny			iny
.657f	b1 22		lda ($22),y		lda (wp),y
.6581	95 01		sta $01,x		sta pstack+1,x
.6583	ca		dex			dex
.6584	ca		dex			dex
.6585	4c c4 42	jmp $42c4		jmp xt_next
.6588					w_cells:
>6588	05					.byte $05
>6589	63 65 6c 6c 73				.text 'cells'
>658e	00 00 00 00 00 00 00 00			.fill 11,0
>6596	00 00 00
>6599	65 65					.word w_x28constantx29
.659b					xt_cells:
.659b	4c 78 65	jmp $6578		jmp xt_x28constantx29
>659e	02 00					.word 2
.65a0					w_x28userx29:
>65a0	06					.byte $06
>65a1	28 75 73 65 72 29			.text '(user)'
>65a7	00 00 00 00 00 00 00 00			.fill 10,0
>65af	00 00
>65b1	88 65					.word w_cells
.65b3					xt_x28userx29:
.65b3	18		clc			clc                     ; push(up + memory(wp + 3))
.65b4	a0 03		ldy #$03		ldy #3
.65b6	a5 24		lda $24			lda up
.65b8	71 22		adc ($22),y		adc (wp),y
.65ba	95 00		sta $00,x		sta pstack,x
.65bc	c8		iny			iny
.65bd	a5 25		lda $25			lda up+1
.65bf	71 22		adc ($22),y		adc (wp),y
.65c1	95 01		sta $01,x		sta pstack+1,x
.65c3	ca		dex			dex
.65c4	ca		dex			dex
.65c5	4c c4 42	jmp $42c4		jmp xt_next
.65c8					w_x28branchx29:
>65c8	08					.byte $08
>65c9	28 62 72 61 6e 63 68 29			.text '(branch)'
>65d1	00 00 00 00 00 00 00 00			.fill 8,0
>65d9	a0 65					.word w_x28userx29
.65db					xt_x28branchx29:
.65db	a0 01		ldy #$01		ldy #1              ; ip := branch address
.65dd	b2 20		lda ($20)		lda (ip)
.65df	85 2a		sta $2a			sta tmp
.65e1	b1 20		lda ($20),y		lda (ip),y
.65e3	85 21		sta $21			sta ip+1
.65e5	a5 2a		lda $2a			lda tmp
.65e7	85 20		sta $20			sta ip
.65e9	4c c4 42	jmp $42c4		jmp xt_next
.65ec					w_x28branch0x29:
>65ec	09					.byte $09
>65ed	28 62 72 61 6e 63 68 30			.text '(branch0)'
>65f5	29
>65f6	00 00 00 00 00 00 00			.fill 7,0
>65fd	c8 65					.word w_x28branchx29
.65ff					xt_x28branch0x29:
.65ff	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.6601	d0 04		bne $6607		bne nobranch        ; No: skip over the branch address
.6603	b5 03		lda $03,x		lda pstack+3,x
.6605	f0 0f		beq $6616		beq dobranch        ; Yes: take the branch
.6607						nobranch:
.6607	18		clc			clc                 ; No: skip over the branch address
.6608	a5 20		lda $20			lda ip
.660a	69 02		adc #$02		adc #2
.660c	85 20		sta $20			sta ip
.660e	a5 21		lda $21			lda ip+1
.6610	69 00		adc #$00		adc #0
.6612	85 21		sta $21			sta ip+1
.6614	80 0e		bra $6624		bra done
.6616						dobranch:
.6616	a0 01		ldy #$01		ldy #1              ; ip := branch address
.6618	b2 20		lda ($20)		lda (ip)
.661a	85 2a		sta $2a			sta tmp
.661c	b1 20		lda ($20),y		lda (ip),y
.661e	85 21		sta $21			sta ip+1
.6620	a5 2a		lda $2a			lda tmp
.6622	85 20		sta $20			sta ip
.6624						done:
.6624	e8		inx			inx                 ; clean up the parameter stack
.6625	e8		inx			inx
.6626	4c c4 42	jmp $42c4		jmp xt_next
.6629					w_x28dox29:
>6629	04					.byte $04
>662a	28 64 6f 29				.text '(do)'
>662e	00 00 00 00 00 00 00 00			.fill 12,0
>6636	00 00 00 00
>663a	ec 65					.word w_x28branch0x29
.663c					xt_x28dox29:
.663c	b5 03		lda $03,x		lda pstack+3,x
.663e	48		pha			pha
.663f	b5 02		lda $02,x		lda pstack+2,x
.6641	48		pha			pha
.6642	b5 05		lda $05,x		lda pstack+5,x
.6644	48		pha			pha
.6645	b5 04		lda $04,x		lda pstack+4,x
.6647	48		pha			pha
.6648	18		clc			clc
.6649	8a		txa			txa
.664a	69 04		adc #$04		adc #4
.664c	aa		tax			tax
.664d	4c c4 42	jmp $42c4		jmp xt_next
.6650					w_x3ei:
>6650	02					.byte $02
>6651	3e 69					.text '>i'
>6653	00 00 00 00 00 00 00 00			.fill 14,0
>665b	00 00 00 00 00 00
>6661	29 66					.word w_x28dox29
.6663					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.6663	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.6665	85 2b		sta $2b			sta tmp+1
.6667	b5 02		lda $02,x		lda pstack+2,x
.6669	85 2a		sta $2a			sta tmp
.666b	e8		inx			inx
.666c	e8		inx			inx
.666d	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.666f	ba		tsx			tsx
.6670	a5 2b		lda $2b			lda tmp+1           ; current := tmp = n
.6672	9d 04 01	sta $0104,x		sta current+1
.6675	a5 2a		lda $2a			lda tmp
.6677	9d 03 01	sta $0103,x		sta current
.667a	a6 2e		ldx $2e			ldx savex
.667c	4c c4 42	jmp $42c4		jmp xt_next
.667f					w_leave:
>667f	05					.byte $05
>6680	6c 65 61 76 65				.text 'leave'
>6685	00 00 00 00 00 00 00 00			.fill 11,0
>668d	00 00 00
>6690	50 66					.word w_x3ei
.6692					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.6692	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.6694	ba		tsx			tsx
.6695	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.6698	9d 02 01	sta $0102,x		sta limit+1
.669b	bd 03 01	lda $0103,x		lda current
.669e	9d 01 01	sta $0101,x		sta limit
.66a1	a6 2e		ldx $2e			ldx savex
.66a3	4c c4 42	jmp $42c4		jmp xt_next
.66a6					w_x28loopx29:
>66a6	06					.byte $06
>66a7	28 6c 6f 6f 70 29			.text '(loop)'
>66ad	00 00 00 00 00 00 00 00			.fill 10,0
>66b5	00 00
>66b7	7f 66					.word w_leave
.66b9					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.66b9	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.66bb	ba		tsx			tsx
.66bc	fe 03 01	inc $0103,x		inc current         ; Increment current
.66bf	d0 03		bne $66c4		bne chk_current
.66c1	fe 04 01	inc $0104,x		inc current+1
.66c4						chk_current:
.66c4	38		sec			sec
.66c5	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.66c8	fd 02 01	sbc $0102,x		sbc limit+1
.66cb	50 02		bvc $66cf		bvc label1          ; the equality comparison is in the Z flag here
.66cd	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.66cf						label1:
.66cf	30 23		bmi $66f4		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.66d1	50 02		bvc $66d5		bvc label2          ; the Z flag was affected only if V is 1
.66d3	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc NUM2H
.66d5						label2:
.66d5	d0 08		bne $66df		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.66d7	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.66da	fd 01 01	sbc $0101,x		sbc limit
.66dd	90 15		bcc $66f4		bcc dobranch        ; if current < limit then current < limit
.66df						nobranch:
.66df	8a		txa			txa                 ; Yes: Remove the context from the return stack
.66e0	18		clc			clc
.66e1	69 04		adc #$04		adc #4
.66e3	aa		tax			tax
.66e4	9a		txs			txs
.66e5	18		clc			clc                 ; And skip over the branch address
.66e6	a5 20		lda $20			lda ip
.66e8	69 02		adc #$02		adc #2
.66ea	85 20		sta $20			sta ip
.66ec	a5 21		lda $21			lda ip+1
.66ee	69 00		adc #$00		adc #0
.66f0	85 21		sta $21			sta ip+1
.66f2	80 0e		bra $6702		bra done
.66f4						dobranch:
.66f4	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.66f6	b2 20		lda ($20)		lda (ip)
.66f8	85 2a		sta $2a			sta tmp
.66fa	b1 20		lda ($20),y		lda (ip),y
.66fc	85 21		sta $21			sta ip+1
.66fe	a5 2a		lda $2a			lda tmp
.6700	85 20		sta $20			sta ip
.6702						done:
.6702	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.6704	4c c4 42	jmp $42c4		jmp xt_next
.6707					w_x28x2bloopx29:
>6707	07					.byte $07
>6708	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>670f	00 00 00 00 00 00 00 00			.fill 9,0
>6717	00
>6718	a6 66					.word w_x28loopx29
.671a					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.671a	b5 03		lda $03,x		lda pstack+3,x      ; Pop n from the stack
.671c	85 2b		sta $2b			sta tmp+1
.671e	b5 02		lda $02,x		lda pstack+2,x
.6720	85 2a		sta $2a			sta tmp
.6722	e8		inx			inx
.6723	e8		inx			inx
.6724	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.6726	ba		tsx			tsx
.6727	18		clc			clc                 ; Increment current by n
.6728	bd 03 01	lda $0103,x		lda current
.672b	65 2a		adc $2a			adc tmp
.672d	9d 03 01	sta $0103,x		sta current
.6730	bd 04 01	lda $0104,x		lda current+1
.6733	65 2b		adc $2b			adc tmp+1
.6735	9d 04 01	sta $0104,x		sta current+1
.6738						chk_current:
.6738	38		sec			sec
.6739	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.673c	fd 02 01	sbc $0102,x		sbc limit+1
.673f	50 02		bvc $6743		bvc label1          ; the equality comparison is in the Z flag here
.6741	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.6743						label1:
.6743	30 23		bmi $6768		bmi dobranch        ; if current+1 < limit+1 then current < limit
.6745	50 02		bvc $6749		bvc label2          ; the Z flag was affected only if V is 1
.6747	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc current+1
.6749						label2:
.6749	d0 08		bne $6753		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.674b	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.674e	fd 01 01	sbc $0101,x		sbc limit
.6751	90 15		bcc $6768		bcc dobranch        ; if current < limit then current < limit
.6753						nobranch:
.6753	8a		txa			txa                 ; Yes: Remove the context from the return stack
.6754	18		clc			clc
.6755	69 04		adc #$04		adc #4
.6757	aa		tax			tax
.6758	9a		txs			txs
.6759	18		clc			clc                 ; And skip over the branch address
.675a	a5 20		lda $20			lda ip
.675c	69 02		adc #$02		adc #2
.675e	85 20		sta $20			sta ip
.6760	a5 21		lda $21			lda ip+1
.6762	69 00		adc #$00		adc #0
.6764	85 21		sta $21			sta ip+1
.6766	80 0e		bra $6776		bra done
.6768						dobranch:
.6768	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.676a	b2 20		lda ($20)		lda (ip)
.676c	85 2a		sta $2a			sta tmp
.676e	b1 20		lda ($20),y		lda (ip),y
.6770	85 21		sta $21			sta ip+1
.6772	a5 2a		lda $2a			lda tmp
.6774	85 20		sta $20			sta ip
.6776						done:
.6776	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.6778	4c c4 42	jmp $42c4		jmp xt_next
.677b					w_i:
>677b	01					.byte $01
>677c	69					.text 'i'
>677d	00 00 00 00 00 00 00 00			.fill 15,0
>6785	00 00 00 00 00 00 00
>678c	07 67					.word w_x28x2bloopx29
.678e					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.678e	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.6790	ba		tsx			tsx
.6791	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.6794	bd 03 01	lda $0103,x		lda current
.6797	a6 2e		ldx $2e			ldx savex           ; Restore the PSP
.6799	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.679b	95 00		sta $00,x		sta pstack,x
.679d	ca		dex			dex
.679e	ca		dex			dex
.679f	4c c4 42	jmp $42c4		jmp xt_next
.67a2					w_x28ofx29:
>67a2	04					.byte $04
>67a3	28 6f 66 29				.text '(of)'
>67a7	00 00 00 00 00 00 00 00			.fill 12,0
>67af	00 00 00 00
>67b3	7b 67					.word w_i
.67b5					xt_x28ofx29:
.67b5	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.67b7	d5 04		cmp $04,x		cmp pstack+4,x
.67b9	d0 1a		bne $67d5		bne not_eq
.67bb	b5 03		lda $03,x		lda pstack+3,x
.67bd	d5 05		cmp $05,x		cmp pstack+5,x
.67bf	d0 14		bne $67d5		bne not_eq
.67c1	e8		inx			inx
.67c2	e8		inx			inx
.67c3	e8		inx			inx
.67c4	e8		inx			inx
.67c5	18		clc			clc                 ; Skip over the branch target
.67c6	a5 20		lda $20			lda ip
.67c8	69 02		adc #$02		adc #2
.67ca	85 20		sta $20			sta ip
.67cc	a5 21		lda $21			lda ip+1
.67ce	69 00		adc #$00		adc #0
.67d0	85 21		sta $21			sta ip+1
.67d2	4c c4 42	jmp $42c4		jmp xt_next
.67d5						not_eq:
.67d5	e8		inx			inx                 ; Remove n2 from stack
.67d6	e8		inx			inx
.67d7	a0 01		ldy #$01		ldy #1              ; Take the branch target
.67d9	b2 20		lda ($20)		lda (ip)
.67db	85 2a		sta $2a			sta tmp
.67dd	b1 20		lda ($20),y		lda (ip),y
.67df	85 21		sta $21			sta ip+1
.67e1	a5 2a		lda $2a			lda tmp
.67e3	85 20		sta $20			sta ip
.67e5	4c c4 42	jmp $42c4		jmp xt_next
.67e8					w_execute:
>67e8	07					.byte $07
>67e9	65 78 65 63 75 74 65			.text 'execute'
>67f0	00 00 00 00 00 00 00 00			.fill 9,0
>67f8	00
>67f9	a2 67					.word w_x28ofx29
.67fb					xt_execute:
.67fb	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.67fd	85 22		sta $22			sta wp
.67ff	b5 03		lda $03,x		lda pstack+3,x
.6801	85 23		sta $23			sta wp+1
.6803	e8		inx			inx                 ; Clean up stack
.6804	e8		inx			inx
.6805	6c 22 00	jmp ($0022)		jmp (wp)            ; jmp xt
.6808					w_x28vocabularyx29:
>6808	0c					.byte $0C
>6809	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>6811	61 72 79 29
>6815	00 00 00 00				.fill 4,0
>6819	e8 67					.word w_execute
.681b					xt_x28vocabularyx29:
.681b	18		clc			clc                 ; tmp := up + user_context
.681c	a5 24		lda $24			lda up
.681e	69 08		adc #$08		adc #user_context
.6820	85 2a		sta $2a			sta tmp
.6822	a5 25		lda $25			lda up+1
.6824	69 00		adc #$00		adc #0
.6826	85 2b		sta $2b			sta tmp+1
.6828	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.682a	18		clc			clc
.682b	a5 22		lda $22			lda wp
.682d	69 03		adc #$03		adc #3
.682f	92 2a		sta ($2a)		sta (tmp)
.6831	a5 23		lda $23			lda wp+1
.6833	69 00		adc #$00		adc #0
.6835	91 2a		sta ($2a),y		sta (tmp),y
.6837	4c c4 42	jmp $42c4		jmp xt_next
.683a					w_forth:
>683a	05					.byte $05
>683b	66 6f 72 74 68				.text 'forth'
>6840	00 00 00 00 00 00 00 00			.fill 11,0
>6848	00 00 00
>684b	08 68					.word w_x28vocabularyx29
.684d					xt_forth:
.684d	4c 1b 68	jmp $681b		jmp xt_x28vocabularyx29
>6850	76 7b					.word <>w_cold
.6852					w_x28findx29:
>6852	06					.byte $06
>6853	28 66 69 6e 64 29			.text '(find)'
>6859	00 00 00 00 00 00 00 00			.fill 10,0
>6861	00 00
>6863	3a 68					.word w_forth
.6865					xt_x28findx29:
.6865	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.6867	85 34		sta $34			sta src_ptr+1
.6869	b5 02		lda $02,x		lda pstack+2,x
.686b	85 33		sta $33			sta src_ptr
.686d	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.686f	85 36		sta $36			sta dst_ptr+1
.6871	b5 04		lda $04,x		lda pstack+4,x
.6873	85 35		sta $35			sta dst_ptr
.6875						loop:
.6875	a5 33		lda $33			lda src_ptr             ; Check to see if src_ptr = NULL
.6877	d0 0d		bne $6886		bne not_eod
.6879	a5 34		lda $34			lda src_ptr+1
.687b	d0 09		bne $6886		bne not_eod
.687d	e8		inx			inx                     ; Clean up the stack
.687e	e8		inx			inx
.687f	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.6881	74 02		stz $02,x		stz pstack+2,x
.6883	4c c4 42	jmp $42c4		jmp xt_next
.6886						not_eod:
.6886	b2 33		lda ($33)		lda (src_ptr)           ; Get the size of the word in the dictionary
.6888	29 3f		and #$3f		and #$3f                ; Filter out the flags
.688a	d2 35		cmp ($35)		cmp (dst_ptr)           ; Check it against the word to search
.688c	f0 1b		beq $68a9		beq chk_chars           ; If they match, check the characters
.688e						next_word:
.688e	18		clc			clc                     ; Move src_ptr to the link field
.688f	a5 33		lda $33			lda src_ptr
.6891	69 11		adc #$11		adc #17
.6893	85 33		sta $33			sta src_ptr
.6895	a5 34		lda $34			lda src_ptr+1
.6897	69 00		adc #$00		adc #0
.6899	85 34		sta $34			sta src_ptr+1
.689b	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.689d	b2 33		lda ($33)		lda (src_ptr)
.689f	48		pha			pha
.68a0	b1 33		lda ($33),y		lda (src_ptr),y
.68a2	85 34		sta $34			sta src_ptr+1
.68a4	68		pla			pla
.68a5	85 33		sta $33			sta src_ptr
.68a7	80 cc		bra $6875		bra loop                ; And check that word
.68a9						chk_chars:
.68a9	a8		tay			tay                     ; y := index to character to check
.68aa						char_loop:
.68aa	b1 33		lda ($33),y		lda (src_ptr),y         ; Check the yth character
.68ac	d1 35		cmp ($35),y		cmp (dst_ptr),y
.68ae	d0 de		bne $688e		bne next_word           ; If they are not equal, go to the next word in the dictionary
.68b0	88		dey			dey                     ; Move to the previous character in the words
.68b1	d0 f7		bne $68aa		bne char_loop           ; Are we back at the size? No: keep checking
.68b3	ca		dex			dex                     ; Make room for all the return values
.68b4	ca		dex			dex
.68b5	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.68b7	74 03		stz $03,x		stz pstack+3,x
.68b9	95 02		sta $02,x		sta pstack+2,x
.68bb	b2 33		lda ($33)		lda (src_ptr)           ; Then the length of the word
.68bd	74 05		stz $05,x		stz pstack+5,x
.68bf	95 04		sta $04,x		sta pstack+4,x
.68c1	18		clc			clc                     ; Then the pfa pointer
.68c2	a5 33		lda $33			lda src_ptr
.68c4	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.68c6	95 06		sta $06,x		sta pstack+6,x
.68c8	a5 34		lda $34			lda src_ptr+1
.68ca	69 00		adc #$00		adc #0
.68cc	95 07		sta $07,x		sta pstack+7,x
.68ce	4c c4 42	jmp $42c4		jmp xt_next
.68d1					w_digit:
>68d1	05					.byte $05
>68d2	64 69 67 69 74				.text 'digit'
>68d7	00 00 00 00 00 00 00 00			.fill 11,0
>68df	00 00 00
>68e2	52 68					.word w_x28findx29
.68e4					xt_digit:
.68e4	b5 04		lda $04,x		lda pstack+4,x          ; Get the character in A
.68e6	c9 61		cmp #$61		cmp #'a'
.68e8	90 06		bcc $68f0		blt get_base
.68ea	c9 7b		cmp #$7b		cmp #'z'+1
.68ec	b0 02		bcs $68f0		bge get_base
.68ee	29 df		and #$df		and #$df               ; Turn off the case bit
.68f0						get_base:
.68f0	b4 02		ldy $02,x		ldy pstack+2,x          ; Get the base into Y
.68f2	88		dey			dey
.68f3						loop:
.68f3	d9 13 69	cmp $6913,y		cmp digits,y            ; Check to see if we have a match
.68f6	f0 0e		beq $6906		beq found               ; If so: return the number
.68f8	88		dey			dey                     ; Move to the previous digit
.68f9	c0 ff		cpy #$ff		cpy #$ff                ; Have we checked the first digit?
.68fb	d0 f6		bne $68f3		bne loop                ; No: check against this digit
.68fd						not_found:
.68fd	e8		inx			inx                     ; Clean up the stack
.68fe	e8		inx			inx
.68ff	74 03		stz $03,x		stz pstack+3,x          ; Return false
.6901	74 02		stz $02,x		stz pstack+2,x
.6903	4c c4 42	jmp $42c4		jmp xt_next
.6906						found:
.6906	74 05		stz $05,x		stz pstack+5,x          ; Return the value of the digit
.6908	94 04		sty $04,x		sty pstack+4,x
.690a	a9 ff		lda #$ff		lda #$ff                ; And the true flag
.690c	95 03		sta $03,x		sta pstack+3,x
.690e	95 02		sta $02,x		sta pstack+2,x
.6910	4c c4 42	jmp $42c4		jmp xt_next
.6913						digits:
>6913	30 31 32 33 34 35 36 37			.text "0123456789ABCDEF"
>691b	38 39 41 42 43 44 45 46
.6923					w_jumpx2dinstruction:
>6923	10					.byte $10
>6924	6a 75 6d 70 2d 69 6e 73			.text 'jump-instruction'
>692c	74 72 75 63 74 69 6f 6e
>6934						.fill 0,0
>6934	d1 68					.word w_digit
.6936					xt_jumpx2dinstruction:
.6936	4c 0d 43	jmp $430d		jmp xt_enter
>6939	59 46					.word xt_x28literalx29
>693b	4c 00					.word 76
>693d	f1 42					.word xt_exit
.693f					w_callx2dinstruction:
>693f	10					.byte $10
>6940	63 61 6c 6c 2d 69 6e 73			.text 'call-instruction'
>6948	74 72 75 63 74 69 6f 6e
>6950						.fill 0,0
>6950	23 69					.word w_jumpx2dinstruction
.6952					xt_callx2dinstruction:
.6952	4c 0d 43	jmp $430d		jmp xt_enter
>6955	59 46					.word xt_x28literalx29
>6957	20 00					.word 32
>6959	f1 42					.word xt_exit
.695b					w_bs:
>695b	02					.byte $02
>695c	62 73					.text 'bs'
>695e	00 00 00 00 00 00 00 00			.fill 14,0
>6966	00 00 00 00 00 00
>696c	3f 69					.word w_callx2dinstruction
.696e					xt_bs:
.696e	4c 78 65	jmp $6578		jmp xt_x28constantx29
>6971	08 00					.word 8
.6973					w_nl:
>6973	02					.byte $02
>6974	6e 6c					.text 'nl'
>6976	00 00 00 00 00 00 00 00			.fill 14,0
>697e	00 00 00 00 00 00
>6984	5b 69					.word w_bs
.6986					xt_nl:
.6986	4c 78 65	jmp $6578		jmp xt_x28constantx29
>6989	0d 00					.word 13
.698b					w_bl:
>698b	02					.byte $02
>698c	62 6c					.text 'bl'
>698e	00 00 00 00 00 00 00 00			.fill 14,0
>6996	00 00 00 00 00 00
>699c	73 69					.word w_nl
.699e					xt_bl:
.699e	4c 78 65	jmp $6578		jmp xt_x28constantx29
>69a1	20 00					.word 32
.69a3					w_s0:
>69a3	02					.byte $02
>69a4	73 30					.text 's0'
>69a6	00 00 00 00 00 00 00 00			.fill 14,0
>69ae	00 00 00 00 00 00
>69b4	8b 69					.word w_bl
.69b6					xt_s0:
.69b6	4c b3 65	jmp $65b3		jmp xt_x28userx29
>69b9	00 00					.word 0
.69bb					w_r0:
>69bb	02					.byte $02
>69bc	72 30					.text 'r0'
>69be	00 00 00 00 00 00 00 00			.fill 14,0
>69c6	00 00 00 00 00 00
>69cc	a3 69					.word w_s0
.69ce					xt_r0:
.69ce	4c b3 65	jmp $65b3		jmp xt_x28userx29
>69d1	02 00					.word 2
.69d3					w_base:
>69d3	04					.byte $04
>69d4	62 61 73 65				.text 'base'
>69d8	00 00 00 00 00 00 00 00			.fill 12,0
>69e0	00 00 00 00
>69e4	bb 69					.word w_r0
.69e6					xt_base:
.69e6	4c b3 65	jmp $65b3		jmp xt_x28userx29
>69e9	04 00					.word 4
.69eb					w_state:
>69eb	05					.byte $05
>69ec	73 74 61 74 65				.text 'state'
>69f1	00 00 00 00 00 00 00 00			.fill 11,0
>69f9	00 00 00
>69fc	d3 69					.word w_base
.69fe					xt_state:
.69fe	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a01	06 00					.word 6
.6a03					w_context:
>6a03	07					.byte $07
>6a04	63 6f 6e 74 65 78 74			.text 'context'
>6a0b	00 00 00 00 00 00 00 00			.fill 9,0
>6a13	00
>6a14	eb 69					.word w_state
.6a16					xt_context:
.6a16	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a19	08 00					.word 8
.6a1b					w_current:
>6a1b	07					.byte $07
>6a1c	63 75 72 72 65 6e 74			.text 'current'
>6a23	00 00 00 00 00 00 00 00			.fill 9,0
>6a2b	00
>6a2c	03 6a					.word w_context
.6a2e					xt_current:
.6a2e	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a31	0a 00					.word 10
.6a33					w_dp:
>6a33	02					.byte $02
>6a34	64 70					.text 'dp'
>6a36	00 00 00 00 00 00 00 00			.fill 14,0
>6a3e	00 00 00 00 00 00
>6a44	1b 6a					.word w_current
.6a46					xt_dp:
.6a46	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a49	0c 00					.word 12
.6a4b					w_x3ein:
>6a4b	03					.byte $03
>6a4c	3e 69 6e				.text '>in'
>6a4f	00 00 00 00 00 00 00 00			.fill 13,0
>6a57	00 00 00 00 00
>6a5c	33 6a					.word w_dp
.6a5e					xt_x3ein:
.6a5e	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a61	0e 00					.word 14
.6a63					w_tib:
>6a63	03					.byte $03
>6a64	74 69 62				.text 'tib'
>6a67	00 00 00 00 00 00 00 00			.fill 13,0
>6a6f	00 00 00 00 00
>6a74	4b 6a					.word w_x3ein
.6a76					xt_tib:
.6a76	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a79	10 00					.word 16
.6a7b					w_sourcex2did:
>6a7b	09					.byte $09
>6a7c	73 6f 75 72 63 65 2d 69			.text 'source-id'
>6a84	64
>6a85	00 00 00 00 00 00 00			.fill 7,0
>6a8c	63 6a					.word w_tib
.6a8e					xt_sourcex2did:
.6a8e	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6a91	12 00					.word 18
.6a93					w_blk:
>6a93	03					.byte $03
>6a94	62 6c 6b				.text 'blk'
>6a97	00 00 00 00 00 00 00 00			.fill 13,0
>6a9f	00 00 00 00 00
>6aa4	7b 6a					.word w_sourcex2did
.6aa6					xt_blk:
.6aa6	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6aa9	14 00					.word 20
.6aab					w_dpl:
>6aab	03					.byte $03
>6aac	64 70 6c				.text 'dpl'
>6aaf	00 00 00 00 00 00 00 00			.fill 13,0
>6ab7	00 00 00 00 00
>6abc	93 6a					.word w_blk
.6abe					xt_dpl:
.6abe	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6ac1	16 00					.word 22
.6ac3					w_hld:
>6ac3	03					.byte $03
>6ac4	68 6c 64				.text 'hld'
>6ac7	00 00 00 00 00 00 00 00			.fill 13,0
>6acf	00 00 00 00 00
>6ad4	ab 6a					.word w_dpl
.6ad6					xt_hld:
.6ad6	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6ad9	18 00					.word 24
.6adb					w_handler:
>6adb	07					.byte $07
>6adc	68 61 6e 64 6c 65 72			.text 'handler'
>6ae3	00 00 00 00 00 00 00 00			.fill 9,0
>6aeb	00
>6aec	c3 6a					.word w_hld
.6aee					xt_handler:
.6aee	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6af1	1a 00					.word 26
.6af3					w_csp:
>6af3	03					.byte $03
>6af4	63 73 70				.text 'csp'
>6af7	00 00 00 00 00 00 00 00			.fill 13,0
>6aff	00 00 00 00 00
>6b04	db 6a					.word w_handler
.6b06					xt_csp:
.6b06	4c b3 65	jmp $65b3		jmp xt_x28userx29
>6b09	1c 00					.word 28
.6b0b					w_pad:
>6b0b	03					.byte $03
>6b0c	70 61 64				.text 'pad'
>6b0f	00 00 00 00 00 00 00 00			.fill 13,0
>6b17	00 00 00 00 00
>6b1c	f3 6a					.word w_csp
.6b1e					xt_pad:
.6b1e	4c 0d 43	jmp $430d		jmp xt_enter
>6b21	46 6a					.word xt_dp
>6b23	fd 5e					.word xt_x40
>6b25	59 46					.word xt_x28literalx29
>6b27	00 01					.word 256
>6b29	35 61					.word xt_x2b
>6b2b	f1 42					.word xt_exit
.6b2d					w_x5b:
>6b2d	c1					.byte $C1
>6b2e	5b					.text '['
>6b2f	00 00 00 00 00 00 00 00			.fill 15,0
>6b37	00 00 00 00 00 00 00
>6b3e	0b 6b					.word w_pad
.6b40					xt_x5b:
.6b40	4c 0d 43	jmp $430d		jmp xt_enter
>6b43	59 46					.word xt_x28literalx29
>6b45	00 00					.word 0
>6b47	fe 69					.word xt_state
>6b49	d1 5e					.word xt_x21
>6b4b	f1 42					.word xt_exit
.6b4d					w_x5d:
>6b4d	c1					.byte $C1
>6b4e	5d					.text ']'
>6b4f	00 00 00 00 00 00 00 00			.fill 15,0
>6b57	00 00 00 00 00 00 00
>6b5e	2d 6b					.word w_x5b
.6b60					xt_x5d:
.6b60	4c 0d 43	jmp $430d		jmp xt_enter
>6b63	59 46					.word xt_x28literalx29
>6b65	c0 00					.word 192
>6b67	fe 69					.word xt_state
>6b69	d1 5e					.word xt_x21
>6b6b	f1 42					.word xt_exit
.6b6d					w_x3fdup:
>6b6d	04					.byte $04
>6b6e	3f 64 75 70				.text '?dup'
>6b72	00 00 00 00 00 00 00 00			.fill 12,0
>6b7a	00 00 00 00
>6b7e	4d 6b					.word w_x5d
.6b80					xt_x3fdup:
.6b80	4c 0d 43	jmp $430d		jmp xt_enter
>6b83	90 5d					.word xt_dup
>6b85	ff 65					.word xt_x28branch0x29
>6b87	8b 6b					.word l_178
>6b89	90 5d					.word xt_dup
.6b8b					l_178:
>6b8b	f1 42					.word xt_exit
.6b8d					w_rot:
>6b8d	03					.byte $03
>6b8e	72 6f 74				.text 'rot'
>6b91	00 00 00 00 00 00 00 00			.fill 13,0
>6b99	00 00 00 00 00
>6b9e	6d 6b					.word w_x3fdup
.6ba0					xt_rot:
.6ba0	4c 0d 43	jmp $430d		jmp xt_enter
>6ba3	5e 5e					.word xt_x3er
>6ba5	b0 5d					.word xt_swap
>6ba7	7c 5e					.word xt_rx3e
>6ba9	b0 5d					.word xt_swap
>6bab	f1 42					.word xt_exit
.6bad					w_2dup:
>6bad	04					.byte $04
>6bae	32 64 75 70				.text '2dup'
>6bb2	00 00 00 00 00 00 00 00			.fill 12,0
>6bba	00 00 00 00
>6bbe	8d 6b					.word w_rot
.6bc0					xt_2dup:
.6bc0	4c 0d 43	jmp $430d		jmp xt_enter
>6bc3	14 5e					.word xt_over
>6bc5	14 5e					.word xt_over
>6bc7	f1 42					.word xt_exit
.6bc9					w_2drop:
>6bc9	05					.byte $05
>6bca	32 64 72 6f 70				.text '2drop'
>6bcf	00 00 00 00 00 00 00 00			.fill 11,0
>6bd7	00 00 00
>6bda	ad 6b					.word w_2dup
.6bdc					xt_2drop:
.6bdc	4c 0d 43	jmp $430d		jmp xt_enter
>6bdf	78 5d					.word xt_drop
>6be1	78 5d					.word xt_drop
>6be3	f1 42					.word xt_exit
.6be5					w_x3c:
>6be5	01					.byte $01
>6be6	3c					.text '<'
>6be7	00 00 00 00 00 00 00 00			.fill 15,0
>6bef	00 00 00 00 00 00 00
>6bf6	c9 6b					.word w_2drop
.6bf8					xt_x3c:
.6bf8	4c 0d 43	jmp $430d		jmp xt_enter
>6bfb	c0 61					.word xt_x2d
>6bfd	d4 64					.word xt_0x3c
>6bff	f1 42					.word xt_exit
.6c01					w_x3e:
>6c01	01					.byte $01
>6c02	3e					.text '>'
>6c03	00 00 00 00 00 00 00 00			.fill 15,0
>6c0b	00 00 00 00 00 00 00
>6c12	e5 6b					.word w_x3c
.6c14					xt_x3e:
.6c14	4c 0d 43	jmp $430d		jmp xt_enter
>6c17	c0 61					.word xt_x2d
>6c19	26 65					.word xt_0x3e
>6c1b	f1 42					.word xt_exit
.6c1d					w_x3d:
>6c1d	01					.byte $01
>6c1e	3d					.text '='
>6c1f	00 00 00 00 00 00 00 00			.fill 15,0
>6c27	00 00 00 00 00 00 00
>6c2e	01 6c					.word w_x3e
.6c30					xt_x3d:
.6c30	4c 0d 43	jmp $430d		jmp xt_enter
>6c33	c0 61					.word xt_x2d
>6c35	fb 64					.word xt_0x3d
>6c37	f1 42					.word xt_exit
.6c39					w_dx3c:
>6c39	02					.byte $02
>6c3a	64 3c					.text 'd<'
>6c3c	00 00 00 00 00 00 00 00			.fill 14,0
>6c44	00 00 00 00 00 00
>6c4a	1d 6c					.word w_x3d
.6c4c					xt_dx3c:
.6c4c	4c 0d 43	jmp $430d		jmp xt_enter
>6c4f	8d 61					.word xt_dx2d
>6c51	78 5d					.word xt_drop
>6c53	d4 64					.word xt_0x3c
>6c55	f1 42					.word xt_exit
.6c57					w_abs:
>6c57	03					.byte $03
>6c58	61 62 73				.text 'abs'
>6c5b	00 00 00 00 00 00 00 00			.fill 13,0
>6c63	00 00 00 00 00
>6c68	39 6c					.word w_dx3c
.6c6a					xt_abs:
.6c6a	4c 0d 43	jmp $430d		jmp xt_enter
>6c6d	90 5d					.word xt_dup
>6c6f	d4 64					.word xt_0x3c
>6c71	ff 65					.word xt_x28branch0x29
>6c73	7d 6c					.word l_215
>6c75	59 46					.word xt_x28literalx29
>6c77	00 00					.word 0
>6c79	b0 5d					.word xt_swap
>6c7b	c0 61					.word xt_x2d
.6c7d					l_215:
>6c7d	f1 42					.word xt_exit
.6c7f					w_dabs:
>6c7f	04					.byte $04
>6c80	64 61 62 73				.text 'dabs'
>6c84	00 00 00 00 00 00 00 00			.fill 12,0
>6c8c	00 00 00 00
>6c90	57 6c					.word w_abs
.6c92					xt_dabs:
.6c92	4c 0d 43	jmp $430d		jmp xt_enter
>6c95	14 5e					.word xt_over
>6c97	d4 64					.word xt_0x3c
>6c99	ff 65					.word xt_x28branch0x29
>6c9b	a9 6c					.word l_222
>6c9d	59 46					.word xt_x28literalx29
>6c9f	00 00					.word 0
>6ca1	59 46					.word xt_x28literalx29
>6ca3	00 00					.word 0
>6ca5	d6 5d					.word xt_2swap
>6ca7	8d 61					.word xt_dx2d
.6ca9					l_222:
>6ca9	f1 42					.word xt_exit
.6cab					w_x2f:
>6cab	01					.byte $01
>6cac	2f					.text '/'
>6cad	00 00 00 00 00 00 00 00			.fill 15,0
>6cb5	00 00 00 00 00 00 00
>6cbc	7f 6c					.word w_dabs
.6cbe					xt_x2f:
.6cbe	4c 0d 43	jmp $430d		jmp xt_enter
>6cc1	fc 62					.word xt_x2fmod
>6cc3	b0 5d					.word xt_swap
>6cc5	78 5d					.word xt_drop
>6cc7	f1 42					.word xt_exit
.6cc9					w_mod:
>6cc9	03					.byte $03
>6cca	6d 6f 64				.text 'mod'
>6ccd	00 00 00 00 00 00 00 00			.fill 13,0
>6cd5	00 00 00 00 00
>6cda	ab 6c					.word w_x2f
.6cdc					xt_mod:
.6cdc	4c 0d 43	jmp $430d		jmp xt_enter
>6cdf	fc 62					.word xt_x2fmod
>6ce1	78 5d					.word xt_drop
>6ce3	f1 42					.word xt_exit
.6ce5					w_max:
>6ce5	03					.byte $03
>6ce6	6d 61 78				.text 'max'
>6ce9	00 00 00 00 00 00 00 00			.fill 13,0
>6cf1	00 00 00 00 00
>6cf6	c9 6c					.word w_mod
.6cf8					xt_max:
.6cf8	4c 0d 43	jmp $430d		jmp xt_enter
>6cfb	c0 6b					.word xt_2dup
>6cfd	f8 6b					.word xt_x3c
>6cff	ff 65					.word xt_x28branch0x29
>6d01	0b 6d					.word l_237
>6d03	14 5e					.word xt_over
>6d05	78 5d					.word xt_drop
>6d07	db 65					.word xt_x28branchx29
>6d09	0d 6d					.word l_238
.6d0b					l_237:
>6d0b	78 5d					.word xt_drop
.6d0d					l_238:
>6d0d	f1 42					.word xt_exit
.6d0f					w_min:
>6d0f	03					.byte $03
>6d10	6d 69 6e				.text 'min'
>6d13	00 00 00 00 00 00 00 00			.fill 13,0
>6d1b	00 00 00 00 00
>6d20	e5 6c					.word w_max
.6d22					xt_min:
.6d22	4c 0d 43	jmp $430d		jmp xt_enter
>6d25	c0 6b					.word xt_2dup
>6d27	14 6c					.word xt_x3e
>6d29	ff 65					.word xt_x28branch0x29
>6d2b	35 6d					.word l_245
>6d2d	14 5e					.word xt_over
>6d2f	78 5d					.word xt_drop
>6d31	db 65					.word xt_x28branchx29
>6d33	37 6d					.word l_246
.6d35					l_245:
>6d35	78 5d					.word xt_drop
.6d37					l_246:
>6d37	f1 42					.word xt_exit
.6d39					w_lfa:
>6d39	03					.byte $03
>6d3a	6c 66 61				.text 'lfa'
>6d3d	00 00 00 00 00 00 00 00			.fill 13,0
>6d45	00 00 00 00 00
>6d4a	0f 6d					.word w_min
.6d4c					xt_lfa:
.6d4c	4c 0d 43	jmp $430d		jmp xt_enter
>6d4f	59 46					.word xt_x28literalx29
>6d51	05 00					.word 5
>6d53	c0 61					.word xt_x2d
>6d55	f1 42					.word xt_exit
.6d57					w_cfa:
>6d57	03					.byte $03
>6d58	63 66 61				.text 'cfa'
>6d5b	00 00 00 00 00 00 00 00			.fill 13,0
>6d63	00 00 00 00 00
>6d68	39 6d					.word w_lfa
.6d6a					xt_cfa:
.6d6a	4c 0d 43	jmp $430d		jmp xt_enter
>6d6d	59 46					.word xt_x28literalx29
>6d6f	03 00					.word 3
>6d71	c0 61					.word xt_x2d
>6d73	f1 42					.word xt_exit
.6d75					w_nfa:
>6d75	03					.byte $03
>6d76	6e 66 61				.text 'nfa'
>6d79	00 00 00 00 00 00 00 00			.fill 13,0
>6d81	00 00 00 00 00
>6d86	57 6d					.word w_cfa
.6d88					xt_nfa:
.6d88	4c 0d 43	jmp $430d		jmp xt_enter
>6d8b	59 46					.word xt_x28literalx29
>6d8d	17 00					.word 23
>6d8f	c0 61					.word xt_x2d
>6d91	f1 42					.word xt_exit
.6d93					w_pfa:
>6d93	03					.byte $03
>6d94	70 66 61				.text 'pfa'
>6d97	00 00 00 00 00 00 00 00			.fill 13,0
>6d9f	00 00 00 00 00
>6da4	75 6d					.word w_nfa
.6da6					xt_pfa:
.6da6	4c 0d 43	jmp $430d		jmp xt_enter
>6da9	59 46					.word xt_x28literalx29
>6dab	17 00					.word 23
>6dad	35 61					.word xt_x2b
>6daf	f1 42					.word xt_exit
.6db1					w_nfax3ecfa:
>6db1	07					.byte $07
>6db2	6e 66 61 3e 63 66 61			.text 'nfa>cfa'
>6db9	00 00 00 00 00 00 00 00			.fill 9,0
>6dc1	00
>6dc2	93 6d					.word w_pfa
.6dc4					xt_nfax3ecfa:
.6dc4	4c 0d 43	jmp $430d		jmp xt_enter
>6dc7	59 46					.word xt_x28literalx29
>6dc9	13 00					.word 19
>6dcb	35 61					.word xt_x2b
>6dcd	f1 42					.word xt_exit
.6dcf					w_here:
>6dcf	04					.byte $04
>6dd0	68 65 72 65				.text 'here'
>6dd4	00 00 00 00 00 00 00 00			.fill 12,0
>6ddc	00 00 00 00
>6de0	b1 6d					.word w_nfax3ecfa
.6de2					xt_here:
.6de2	4c 0d 43	jmp $430d		jmp xt_enter
>6de5	46 6a					.word xt_dp
>6de7	fd 5e					.word xt_x40
>6de9	f1 42					.word xt_exit
.6deb					w_allot:
>6deb	05					.byte $05
>6dec	61 6c 6c 6f 74				.text 'allot'
>6df1	00 00 00 00 00 00 00 00			.fill 11,0
>6df9	00 00 00
>6dfc	cf 6d					.word w_here
.6dfe					xt_allot:
.6dfe	4c 0d 43	jmp $430d		jmp xt_enter
>6e01	46 6a					.word xt_dp
>6e03	9a 5f					.word xt_x2bx21
>6e05	f1 42					.word xt_exit
.6e07					w_x2c:
>6e07	01					.byte $01
>6e08	2c					.text ','
>6e09	00 00 00 00 00 00 00 00			.fill 15,0
>6e11	00 00 00 00 00 00 00
>6e18	eb 6d					.word w_allot
.6e1a					xt_x2c:
.6e1a	4c 0d 43	jmp $430d		jmp xt_enter
>6e1d	e2 6d					.word xt_here
>6e1f	d1 5e					.word xt_x21
>6e21	59 46					.word xt_x28literalx29
>6e23	02 00					.word 2
>6e25	fe 6d					.word xt_allot
>6e27	f1 42					.word xt_exit
.6e29					w_cx2c:
>6e29	02					.byte $02
>6e2a	63 2c					.text 'c,'
>6e2c	00 00 00 00 00 00 00 00			.fill 14,0
>6e34	00 00 00 00 00 00
>6e3a	07 6e					.word w_x2c
.6e3c					xt_cx2c:
.6e3c	4c 0d 43	jmp $430d		jmp xt_enter
>6e3f	e2 6d					.word xt_here
>6e41	25 5f					.word xt_cx21
>6e43	59 46					.word xt_x28literalx29
>6e45	01 00					.word 1
>6e47	fe 6d					.word xt_allot
>6e49	f1 42					.word xt_exit
.6e4b					w_definitions:
>6e4b	0b					.byte $0B
>6e4c	64 65 66 69 6e 69 74 69			.text 'definitions'
>6e54	6f 6e 73
>6e57	00 00 00 00 00				.fill 5,0
>6e5c	29 6e					.word w_cx2c
.6e5e					xt_definitions:
.6e5e	4c 0d 43	jmp $430d		jmp xt_enter
>6e61	16 6a					.word xt_context
>6e63	fd 5e					.word xt_x40
>6e65	2e 6a					.word xt_current
>6e67	d1 5e					.word xt_x21
>6e69	f1 42					.word xt_exit
.6e6b					w_latest:
>6e6b	06					.byte $06
>6e6c	6c 61 74 65 73 74			.text 'latest'
>6e72	00 00 00 00 00 00 00 00			.fill 10,0
>6e7a	00 00
>6e7c	4b 6e					.word w_definitions
.6e7e					xt_latest:
.6e7e	4c 0d 43	jmp $430d		jmp xt_enter
>6e81	2e 6a					.word xt_current
>6e83	fd 5e					.word xt_x40
>6e85	fd 5e					.word xt_x40
>6e87	f1 42					.word xt_exit
.6e89					w_count:
>6e89	05					.byte $05
>6e8a	63 6f 75 6e 74				.text 'count'
>6e8f	00 00 00 00 00 00 00 00			.fill 11,0
>6e97	00 00 00
>6e9a	6b 6e					.word w_latest
.6e9c					xt_count:
.6e9c	4c 0d 43	jmp $430d		jmp xt_enter
>6e9f	90 5d					.word xt_dup
>6ea1	c6 63					.word xt_1x2b
>6ea3	b0 5d					.word xt_swap
>6ea5	43 5f					.word xt_cx40
>6ea7	f1 42					.word xt_exit
.6ea9					w_type:
>6ea9	04					.byte $04
>6eaa	74 79 70 65				.text 'type'
>6eae	00 00 00 00 00 00 00 00			.fill 12,0
>6eb6	00 00 00 00
>6eba	89 6e					.word w_count
.6ebc					xt_type:
.6ebc	4c 0d 43	jmp $430d		jmp xt_enter
>6ebf	80 6b					.word xt_x3fdup
>6ec1	ff 65					.word xt_x28branch0x29
>6ec3	e7 6e					.word l_253
>6ec5	14 5e					.word xt_over
>6ec7	35 61					.word xt_x2b
>6ec9	b0 5d					.word xt_swap
>6ecb	3c 66					.word xt_x28dox29
.6ecd					l_254:
>6ecd	8e 67					.word xt_i
>6ecf	43 5f					.word xt_cx40
>6ed1	80 6b					.word xt_x3fdup
>6ed3	ff 65					.word xt_x28branch0x29
>6ed5	dd 6e					.word l_256
>6ed7	39 45					.word xt_emit
>6ed9	db 65					.word xt_x28branchx29
>6edb	df 6e					.word l_257
.6edd					l_256:
>6edd	92 66					.word xt_leave
.6edf					l_257:
>6edf	b9 66					.word xt_x28loopx29
>6ee1	cd 6e					.word l_254
.6ee3					l_255:
>6ee3	db 65					.word xt_x28branchx29
>6ee5	e9 6e					.word l_258
.6ee7					l_253:
>6ee7	78 5d					.word xt_drop
.6ee9					l_258:
>6ee9	f1 42					.word xt_exit
.6eeb					w_x28x2ex22x29:
>6eeb	04					.byte $04
>6eec	28 2e 22 29				.text '(.")'
>6ef0	00 00 00 00 00 00 00 00			.fill 12,0
>6ef8	00 00 00 00
>6efc	a9 6e					.word w_type
.6efe					xt_x28x2ex22x29:
.6efe	4c 0d 43	jmp $430d		jmp xt_enter
>6f01	9a 5e					.word xt_r
>6f03	9c 6e					.word xt_count
>6f05	90 5d					.word xt_dup
>6f07	c6 63					.word xt_1x2b
>6f09	7c 5e					.word xt_rx3e
>6f0b	35 61					.word xt_x2b
>6f0d	5e 5e					.word xt_x3er
>6f0f	bc 6e					.word xt_type
>6f11	f1 42					.word xt_exit
.6f13					w_space:
>6f13	05					.byte $05
>6f14	73 70 61 63 65				.text 'space'
>6f19	00 00 00 00 00 00 00 00			.fill 11,0
>6f21	00 00 00
>6f24	eb 6e					.word w_x28x2ex22x29
.6f26					xt_space:
.6f26	4c 0d 43	jmp $430d		jmp xt_enter
>6f29	59 46					.word xt_x28literalx29
>6f2b	20 00					.word 32
>6f2d	39 45					.word xt_emit
>6f2f	f1 42					.word xt_exit
.6f31					w_spaces:
>6f31	06					.byte $06
>6f32	73 70 61 63 65 73			.text 'spaces'
>6f38	00 00 00 00 00 00 00 00			.fill 10,0
>6f40	00 00
>6f42	13 6f					.word w_space
.6f44					xt_spaces:
.6f44	4c 0d 43	jmp $430d		jmp xt_enter
>6f47	90 5d					.word xt_dup
>6f49	26 65					.word xt_0x3e
>6f4b	ff 65					.word xt_x28branch0x29
>6f4d	5f 6f					.word l_259
>6f4f	59 46					.word xt_x28literalx29
>6f51	00 00					.word 0
>6f53	3c 66					.word xt_x28dox29
.6f55					l_260:
>6f55	26 6f					.word xt_space
>6f57	b9 66					.word xt_x28loopx29
>6f59	55 6f					.word l_260
.6f5b					l_261:
>6f5b	db 65					.word xt_x28branchx29
>6f5d	61 6f					.word l_262
.6f5f					l_259:
>6f5f	78 5d					.word xt_drop
.6f61					l_262:
>6f61	f1 42					.word xt_exit
.6f63					w_expect:
>6f63	06					.byte $06
>6f64	65 78 70 65 63 74			.text 'expect'
>6f6a	00 00 00 00 00 00 00 00			.fill 10,0
>6f72	00 00
>6f74	31 6f					.word w_spaces
.6f76					xt_expect:
.6f76	4c 0d 43	jmp $430d		jmp xt_enter
>6f79	14 5e					.word xt_over
>6f7b	35 61					.word xt_x2b
>6f7d	14 5e					.word xt_over
>6f7f	3c 66					.word xt_x28dox29
.6f81					l_263:
>6f81	83 45					.word xt_key
>6f83	6e 69					.word xt_bs
>6f85	b5 67					.word xt_x28ofx29
>6f87	b5 6f					.word l_266
>6f89	90 5d					.word xt_dup
>6f8b	8e 67					.word xt_i
>6f8d	30 6c					.word xt_x3d
>6f8f	b2 64					.word xt_not
>6f91	ff 65					.word xt_x28branch0x29
>6f93	b1 6f					.word l_267
>6f95	6e 69					.word xt_bs
>6f97	39 45					.word xt_emit
>6f99	9e 69					.word xt_bl
>6f9b	39 45					.word xt_emit
>6f9d	6e 69					.word xt_bs
>6f9f	39 45					.word xt_emit
>6fa1	59 46					.word xt_x28literalx29
>6fa3	00 00					.word 0
>6fa5	8e 67					.word xt_i
>6fa7	05 64					.word xt_1x2d
>6fa9	25 5f					.word xt_cx21
>6fab	8e 67					.word xt_i
>6fad	23 64					.word xt_2x2d
>6faf	63 66					.word xt_x3ei
.6fb1					l_267:
>6fb1	db 65					.word xt_x28branchx29
>6fb3	df 6f					.word l_265
.6fb5					l_266:
>6fb5	86 69					.word xt_nl
>6fb7	b5 67					.word xt_x28ofx29
>6fb9	c9 6f					.word l_268
>6fbb	59 46					.word xt_x28literalx29
>6fbd	00 00					.word 0
>6fbf	8e 67					.word xt_i
>6fc1	25 5f					.word xt_cx21
>6fc3	92 66					.word xt_leave
>6fc5	db 65					.word xt_x28branchx29
>6fc7	df 6f					.word l_265
.6fc9					l_268:
>6fc9	90 5d					.word xt_dup
>6fcb	90 5d					.word xt_dup
>6fcd	8e 67					.word xt_i
>6fcf	25 5f					.word xt_cx21
>6fd1	59 46					.word xt_x28literalx29
>6fd3	00 00					.word 0
>6fd5	8e 67					.word xt_i
>6fd7	c6 63					.word xt_1x2b
>6fd9	25 5f					.word xt_cx21
>6fdb	39 45					.word xt_emit
>6fdd	78 5d					.word xt_drop
.6fdf					l_265:
>6fdf	b9 66					.word xt_x28loopx29
>6fe1	81 6f					.word l_263
.6fe3					l_264:
>6fe3	78 5d					.word xt_drop
>6fe5	f1 42					.word xt_exit
.6fe7					w_query:
>6fe7	05					.byte $05
>6fe8	71 75 65 72 79				.text 'query'
>6fed	00 00 00 00 00 00 00 00			.fill 11,0
>6ff5	00 00 00
>6ff8	63 6f					.word w_expect
.6ffa					xt_query:
.6ffa	4c 0d 43	jmp $430d		jmp xt_enter
>6ffd	76 6a					.word xt_tib
>6fff	fd 5e					.word xt_x40
>7001	59 46					.word xt_x28literalx29
>7003	50 00					.word 80
>7005	76 6f					.word xt_expect
>7007	59 46					.word xt_x28literalx29
>7009	00 00					.word 0
>700b	5e 6a					.word xt_x3ein
>700d	d1 5e					.word xt_x21
>700f	f1 42					.word xt_exit
.7011					w_erase:
>7011	05					.byte $05
>7012	65 72 61 73 65				.text 'erase'
>7017	00 00 00 00 00 00 00 00			.fill 11,0
>701f	00 00 00
>7022	e7 6f					.word w_query
.7024					xt_erase:
.7024	4c 0d 43	jmp $430d		jmp xt_enter
>7027	59 46					.word xt_x28literalx29
>7029	00 00					.word 0
>702b	5f 5f					.word xt_fill
>702d	f1 42					.word xt_exit
.702f					w_blanks:
>702f	06					.byte $06
>7030	62 6c 61 6e 6b 73			.text 'blanks'
>7036	00 00 00 00 00 00 00 00			.fill 10,0
>703e	00 00
>7040	11 70					.word w_erase
.7042					xt_blanks:
.7042	4c 0d 43	jmp $430d		jmp xt_enter
>7045	9e 69					.word xt_bl
>7047	5f 5f					.word xt_fill
>7049	f1 42					.word xt_exit
.704b					w_word:
>704b	04					.byte $04
>704c	77 6f 72 64				.text 'word'
>7050	00 00 00 00 00 00 00 00			.fill 12,0
>7058	00 00 00 00
>705c	2f 70					.word w_blanks
.705e					xt_word:
.705e	4c 0d 43	jmp $430d		jmp xt_enter
>7061	76 6a					.word xt_tib
>7063	fd 5e					.word xt_x40
>7065	5e 6a					.word xt_x3ein
>7067	fd 5e					.word xt_x40
>7069	35 61					.word xt_x2b
>706b	b0 5d					.word xt_swap
>706d	cb 5f					.word xt_enclose
>706f	59 46					.word xt_x28literalx29
>7071	00 00					.word 0
>7073	e2 6d					.word xt_here
>7075	d1 5e					.word xt_x21
>7077	5e 6a					.word xt_x3ein
>7079	9a 5f					.word xt_x2bx21
>707b	14 5e					.word xt_over
>707d	c0 61					.word xt_x2d
>707f	5e 5e					.word xt_x3er
>7081	9a 5e					.word xt_r
>7083	e2 6d					.word xt_here
>7085	25 5f					.word xt_cx21
>7087	35 61					.word xt_x2b
>7089	e2 6d					.word xt_here
>708b	c6 63					.word xt_1x2b
>708d	7c 5e					.word xt_rx3e
>708f	41 60					.word xt_cmove
>7091	9e 69					.word xt_bl
>7093	e2 6d					.word xt_here
>7095	9c 6e					.word xt_count
>7097	35 61					.word xt_x2b
>7099	25 5f					.word xt_cx21
>709b	f1 42					.word xt_exit
.709d					w_x2dfind:
>709d	05					.byte $05
>709e	2d 66 69 6e 64				.text '-find'
>70a3	00 00 00 00 00 00 00 00			.fill 11,0
>70ab	00 00 00
>70ae	4b 70					.word w_word
.70b0					xt_x2dfind:
.70b0	4c 0d 43	jmp $430d		jmp xt_enter
>70b3	9e 69					.word xt_bl
>70b5	5e 70					.word xt_word
>70b7	e2 6d					.word xt_here
>70b9	16 6a					.word xt_context
>70bb	fd 5e					.word xt_x40
>70bd	fd 5e					.word xt_x40
>70bf	65 68					.word xt_x28findx29
>70c1	90 5d					.word xt_dup
>70c3	fb 64					.word xt_0x3d
>70c5	ff 65					.word xt_x28branch0x29
>70c7	d1 70					.word l_269
>70c9	78 5d					.word xt_drop
>70cb	e2 6d					.word xt_here
>70cd	7e 6e					.word xt_latest
>70cf	65 68					.word xt_x28findx29
.70d1					l_269:
>70d1	f1 42					.word xt_exit
.70d3					w_decimal:
>70d3	07					.byte $07
>70d4	64 65 63 69 6d 61 6c			.text 'decimal'
>70db	00 00 00 00 00 00 00 00			.fill 9,0
>70e3	00
>70e4	9d 70					.word w_x2dfind
.70e6					xt_decimal:
.70e6	4c 0d 43	jmp $430d		jmp xt_enter
>70e9	59 46					.word xt_x28literalx29
>70eb	0a 00					.word 10
>70ed	e6 69					.word xt_base
>70ef	d1 5e					.word xt_x21
>70f1	f1 42					.word xt_exit
.70f3					w_hex:
>70f3	03					.byte $03
>70f4	68 65 78				.text 'hex'
>70f7	00 00 00 00 00 00 00 00			.fill 13,0
>70ff	00 00 00 00 00
>7104	d3 70					.word w_decimal
.7106					xt_hex:
.7106	4c 0d 43	jmp $430d		jmp xt_enter
>7109	59 46					.word xt_x28literalx29
>710b	10 00					.word 16
>710d	e6 69					.word xt_base
>710f	d1 5e					.word xt_x21
>7111	f1 42					.word xt_exit
.7113					w_octal:
>7113	05					.byte $05
>7114	6f 63 74 61 6c				.text 'octal'
>7119	00 00 00 00 00 00 00 00			.fill 11,0
>7121	00 00 00
>7124	f3 70					.word w_hex
.7126					xt_octal:
.7126	4c 0d 43	jmp $430d		jmp xt_enter
>7129	59 46					.word xt_x28literalx29
>712b	08 00					.word 8
>712d	e6 69					.word xt_base
>712f	d1 5e					.word xt_x21
>7131	f1 42					.word xt_exit
.7133					w_x28numberx29:
>7133	08					.byte $08
>7134	28 6e 75 6d 62 65 72 29			.text '(number)'
>713c	00 00 00 00 00 00 00 00			.fill 8,0
>7144	13 71					.word w_octal
.7146					xt_x28numberx29:
.7146	4c 0d 43	jmp $430d		jmp xt_enter
.7149					l_270:
>7149	90 5d					.word xt_dup
>714b	5e 5e					.word xt_x3er
>714d	43 5f					.word xt_cx40
>714f	e6 69					.word xt_base
>7151	fd 5e					.word xt_x40
>7153	e4 68					.word xt_digit
>7155	ff 65					.word xt_x28branch0x29
>7157	6f 71					.word l_271
>7159	5e 5e					.word xt_x3er
>715b	e6 69					.word xt_base
>715d	fd 5e					.word xt_x40
>715f	e5 61					.word xt_ux2a
>7161	7c 5e					.word xt_rx3e
>7163	97 63					.word xt_sx3ed
>7165	5a 61					.word xt_dx2b
>7167	7c 5e					.word xt_rx3e
>7169	c6 63					.word xt_1x2b
>716b	db 65					.word xt_x28branchx29
>716d	49 71					.word l_270
.716f					l_271:
>716f	7c 5e					.word xt_rx3e
>7171	f1 42					.word xt_exit
.7173					w_number:
>7173	06					.byte $06
>7174	6e 75 6d 62 65 72			.text 'number'
>717a	00 00 00 00 00 00 00 00			.fill 10,0
>7182	00 00
>7184	33 71					.word w_x28numberx29
.7186					xt_number:
.7186	4c 0d 43	jmp $430d		jmp xt_enter
>7189	59 46					.word xt_x28literalx29
>718b	00 00					.word 0
>718d	59 46					.word xt_x28literalx29
>718f	00 00					.word 0
>7191	a0 6b					.word xt_rot
>7193	90 5d					.word xt_dup
>7195	43 5f					.word xt_cx40
>7197	59 46					.word xt_x28literalx29
>7199	2d 00					.word 45
>719b	30 6c					.word xt_x3d
>719d	ff 65					.word xt_x28branch0x29
>719f	ab 71					.word l_272
>71a1	59 46					.word xt_x28literalx29
>71a3	01 00					.word 1
>71a5	5e 5e					.word xt_x3er
>71a7	db 65					.word xt_x28branchx29
>71a9	b7 71					.word l_273
.71ab					l_272:
>71ab	59 46					.word xt_x28literalx29
>71ad	00 00					.word 0
>71af	5e 5e					.word xt_x3er
>71b1	59 46					.word xt_x28literalx29
>71b3	01 00					.word 1
>71b5	35 61					.word xt_x2b
.71b7					l_273:
>71b7	59 46					.word xt_x28literalx29
>71b9	ff ff					.sint -1
.71bb					l_274:
>71bb	be 6a					.word xt_dpl
>71bd	d1 5e					.word xt_x21
>71bf	46 71					.word xt_x28numberx29
>71c1	90 5d					.word xt_dup
>71c3	43 5f					.word xt_cx40
>71c5	9e 69					.word xt_bl
>71c7	c0 61					.word xt_x2d
>71c9	ff 65					.word xt_x28branch0x29
>71cb	e9 71					.word l_275
>71cd	90 5d					.word xt_dup
>71cf	43 5f					.word xt_cx40
>71d1	59 46					.word xt_x28literalx29
>71d3	2e 00					.word 46
>71d5	c0 61					.word xt_x2d
>71d7	ff 65					.word xt_x28branch0x29
>71d9	e1 71					.word l_276
>71db	59 46					.word xt_x28literalx29
>71dd	f3 ff					.word 65523
>71df	65 76					.word xt_x3ferror
.71e1					l_276:
>71e1	59 46					.word xt_x28literalx29
>71e3	00 00					.word 0
>71e5	db 65					.word xt_x28branchx29
>71e7	bb 71					.word l_274
.71e9					l_275:
>71e9	78 5d					.word xt_drop
>71eb	7c 5e					.word xt_rx3e
>71ed	ff 65					.word xt_x28branch0x29
>71ef	fd 71					.word l_277
>71f1	59 46					.word xt_x28literalx29
>71f3	00 00					.word 0
>71f5	59 46					.word xt_x28literalx29
>71f7	00 00					.word 0
>71f9	d6 5d					.word xt_2swap
>71fb	8d 61					.word xt_dx2d
.71fd					l_277:
>71fd	f1 42					.word xt_exit
.71ff					w_x3cx23:
>71ff	02					.byte $02
>7200	3c 23					.text '<#'
>7202	00 00 00 00 00 00 00 00			.fill 14,0
>720a	00 00 00 00 00 00
>7210	73 71					.word w_number
.7212					xt_x3cx23:
.7212	4c 0d 43	jmp $430d		jmp xt_enter
>7215	1e 6b					.word xt_pad
>7217	d6 6a					.word xt_hld
>7219	d1 5e					.word xt_x21
>721b	f1 42					.word xt_exit
.721d					w_hold:
>721d	04					.byte $04
>721e	68 6f 6c 64				.text 'hold'
>7222	00 00 00 00 00 00 00 00			.fill 12,0
>722a	00 00 00 00
>722e	ff 71					.word w_x3cx23
.7230					xt_hold:
.7230	4c 0d 43	jmp $430d		jmp xt_enter
>7233	59 46					.word xt_x28literalx29
>7235	ff ff					.sint -1
>7237	d6 6a					.word xt_hld
>7239	9a 5f					.word xt_x2bx21
>723b	d6 6a					.word xt_hld
>723d	fd 5e					.word xt_x40
>723f	25 5f					.word xt_cx21
>7241	f1 42					.word xt_exit
.7243					w_x23:
>7243	01					.byte $01
>7244	23					.text '#'
>7245	00 00 00 00 00 00 00 00			.fill 15,0
>724d	00 00 00 00 00 00 00
>7254	1d 72					.word w_hold
.7256					xt_x23:
.7256	4c 0d 43	jmp $430d		jmp xt_enter
>7259	e6 69					.word xt_base
>725b	fd 5e					.word xt_x40
>725d	3c 63					.word xt_umx2fmod
>725f	97 63					.word xt_sx3ed
>7261	a0 6b					.word xt_rot
>7263	59 46					.word xt_x28literalx29
>7265	09 00					.word 9
>7267	14 5e					.word xt_over
>7269	f8 6b					.word xt_x3c
>726b	ff 65					.word xt_x28branch0x29
>726d	75 72					.word l_278
>726f	59 46					.word xt_x28literalx29
>7271	07 00					.word 7
>7273	35 61					.word xt_x2b
.7275					l_278:
>7275	59 46					.word xt_x28literalx29
>7277	30 00					.word 48
>7279	35 61					.word xt_x2b
>727b	30 72					.word xt_hold
>727d	f1 42					.word xt_exit
.727f					w_x23s:
>727f	02					.byte $02
>7280	23 73					.text '#s'
>7282	00 00 00 00 00 00 00 00			.fill 14,0
>728a	00 00 00 00 00 00
>7290	43 72					.word w_x23
.7292					xt_x23s:
.7292	4c 0d 43	jmp $430d		jmp xt_enter
.7295					l_279:
>7295	56 72					.word xt_x23
>7297	14 5e					.word xt_over
>7299	14 5e					.word xt_over
>729b	6a 64					.word xt_or
>729d	fb 64					.word xt_0x3d
>729f	ff 65					.word xt_x28branch0x29
>72a1	95 72					.word l_279
.72a3					l_280:
>72a3	f1 42					.word xt_exit
.72a5					w_sign:
>72a5	04					.byte $04
>72a6	73 69 67 6e				.text 'sign'
>72aa	00 00 00 00 00 00 00 00			.fill 12,0
>72b2	00 00 00 00
>72b6	7f 72					.word w_x23s
.72b8					xt_sign:
.72b8	4c 0d 43	jmp $430d		jmp xt_enter
>72bb	a0 6b					.word xt_rot
>72bd	d4 64					.word xt_0x3c
>72bf	ff 65					.word xt_x28branch0x29
>72c1	c9 72					.word l_281
>72c3	59 46					.word xt_x28literalx29
>72c5	2d 00					.word 45
>72c7	30 72					.word xt_hold
.72c9					l_281:
>72c9	f1 42					.word xt_exit
.72cb					w_x23x3e:
>72cb	02					.byte $02
>72cc	23 3e					.text '#>'
>72ce	00 00 00 00 00 00 00 00			.fill 14,0
>72d6	00 00 00 00 00 00
>72dc	a5 72					.word w_sign
.72de					xt_x23x3e:
.72de	4c 0d 43	jmp $430d		jmp xt_enter
>72e1	dc 6b					.word xt_2drop
>72e3	d6 6a					.word xt_hld
>72e5	fd 5e					.word xt_x40
>72e7	1e 6b					.word xt_pad
>72e9	14 5e					.word xt_over
>72eb	c0 61					.word xt_x2d
>72ed	f1 42					.word xt_exit
.72ef					w_dx2er:
>72ef	03					.byte $03
>72f0	64 2e 72				.text 'd.r'
>72f3	00 00 00 00 00 00 00 00			.fill 13,0
>72fb	00 00 00 00 00
>7300	cb 72					.word w_x23x3e
.7302					xt_dx2er:
.7302	4c 0d 43	jmp $430d		jmp xt_enter
>7305	5e 5e					.word xt_x3er
>7307	14 5e					.word xt_over
>7309	b0 5d					.word xt_swap
>730b	92 6c					.word xt_dabs
>730d	12 72					.word xt_x3cx23
>730f	92 72					.word xt_x23s
>7311	b8 72					.word xt_sign
>7313	de 72					.word xt_x23x3e
>7315	7c 5e					.word xt_rx3e
>7317	14 5e					.word xt_over
>7319	c0 61					.word xt_x2d
>731b	44 6f					.word xt_spaces
>731d	bc 6e					.word xt_type
>731f	f1 42					.word xt_exit
.7321					w_dx2e:
>7321	02					.byte $02
>7322	64 2e					.text 'd.'
>7324	00 00 00 00 00 00 00 00			.fill 14,0
>732c	00 00 00 00 00 00
>7332	ef 72					.word w_dx2er
.7334					xt_dx2e:
.7334	4c 0d 43	jmp $430d		jmp xt_enter
>7337	59 46					.word xt_x28literalx29
>7339	00 00					.word 0
>733b	02 73					.word xt_dx2er
>733d	f1 42					.word xt_exit
.733f					w_x2e:
>733f	01					.byte $01
>7340	2e					.text '.'
>7341	00 00 00 00 00 00 00 00			.fill 15,0
>7349	00 00 00 00 00 00 00
>7350	21 73					.word w_dx2e
.7352					xt_x2e:
.7352	4c 0d 43	jmp $430d		jmp xt_enter
>7355	97 63					.word xt_sx3ed
>7357	34 73					.word xt_dx2e
>7359	f1 42					.word xt_exit
.735b					w_x2er:
>735b	02					.byte $02
>735c	2e 72					.text '.r'
>735e	00 00 00 00 00 00 00 00			.fill 14,0
>7366	00 00 00 00 00 00
>736c	3f 73					.word w_x2e
.736e					xt_x2er:
.736e	4c 0d 43	jmp $430d		jmp xt_enter
>7371	5e 5e					.word xt_x3er
>7373	97 63					.word xt_sx3ed
>7375	7c 5e					.word xt_rx3e
>7377	02 73					.word xt_dx2er
>7379	f1 42					.word xt_exit
.737b					w_x3f:
>737b	01					.byte $01
>737c	3f					.text '?'
>737d	00 00 00 00 00 00 00 00			.fill 15,0
>7385	00 00 00 00 00 00 00
>738c	5b 73					.word w_x2er
.738e					xt_x3f:
.738e	4c 0d 43	jmp $430d		jmp xt_enter
>7391	fd 5e					.word xt_x40
>7393	52 73					.word xt_x2e
>7395	f1 42					.word xt_exit
.7397					w_dump:
>7397	04					.byte $04
>7398	64 75 6d 70				.text 'dump'
>739c	00 00 00 00 00 00 00 00			.fill 12,0
>73a4	00 00 00 00
>73a8	7b 73					.word w_x3f
.73aa					xt_dump:
.73aa	4c 0d 43	jmp $430d		jmp xt_enter
>73ad	59 46					.word xt_x28literalx29
>73af	00 00					.word 0
>73b1	3c 66					.word xt_x28dox29
.73b3					l_282:
>73b3	a8 45					.word xt_cr
>73b5	90 5d					.word xt_dup
>73b7	59 46					.word xt_x28literalx29
>73b9	00 00					.word 0
>73bb	b0 5d					.word xt_swap
>73bd	59 46					.word xt_x28literalx29
>73bf	05 00					.word 5
>73c1	02 73					.word xt_dx2er
>73c3	59 46					.word xt_x28literalx29
>73c5	3a 00					.word 58
>73c7	39 45					.word xt_emit
>73c9	59 46					.word xt_x28literalx29
>73cb	08 00					.word 8
>73cd	59 46					.word xt_x28literalx29
>73cf	00 00					.word 0
>73d1	3c 66					.word xt_x28dox29
.73d3					l_284:
>73d3	90 5d					.word xt_dup
>73d5	fd 5e					.word xt_x40
>73d7	59 46					.word xt_x28literalx29
>73d9	00 00					.word 0
>73db	b0 5d					.word xt_swap
>73dd	59 46					.word xt_x28literalx29
>73df	05 00					.word 5
>73e1	02 73					.word xt_dx2er
>73e3	e2 63					.word xt_2x2b
>73e5	b9 66					.word xt_x28loopx29
>73e7	d3 73					.word l_284
.73e9					l_285:
>73e9	59 46					.word xt_x28literalx29
>73eb	08 00					.word 8
>73ed	1a 67					.word xt_x28x2bloopx29
>73ef	b3 73					.word l_282
.73f1					l_283:
>73f1	78 5d					.word xt_drop
>73f3	f1 42					.word xt_exit
.73f5					w_between:
>73f5	07					.byte $07
>73f6	62 65 74 77 65 65 6e			.text 'between'
>73fd	00 00 00 00 00 00 00 00			.fill 9,0
>7405	00
>7406	97 73					.word w_dump
.7408					xt_between:
.7408	4c 0d 43	jmp $430d		jmp xt_enter
>740b	5e 5e					.word xt_x3er
>740d	14 5e					.word xt_over
>740f	5e 5e					.word xt_x3er
>7411	f8 6b					.word xt_x3c
>7413	ff 65					.word xt_x28branch0x29
>7415	27 74					.word l_286
>7417	7c 5e					.word xt_rx3e
>7419	78 5d					.word xt_drop
>741b	7c 5e					.word xt_rx3e
>741d	78 5d					.word xt_drop
>741f	59 46					.word xt_x28literalx29
>7421	00 00					.word 0
>7423	db 65					.word xt_x28branchx29
>7425	2f 74					.word l_287
.7427					l_286:
>7427	7c 5e					.word xt_rx3e
>7429	7c 5e					.word xt_rx3e
>742b	14 6c					.word xt_x3e
>742d	b2 64					.word xt_not
.742f					l_287:
>742f	f1 42					.word xt_exit
.7431					w_isprint:
>7431	07					.byte $07
>7432	69 73 70 72 69 6e 74			.text 'isprint'
>7439	00 00 00 00 00 00 00 00			.fill 9,0
>7441	00
>7442	f5 73					.word w_between
.7444					xt_isprint:
.7444	4c 0d 43	jmp $430d		jmp xt_enter
>7447	90 5d					.word xt_dup
>7449	59 46					.word xt_x28literalx29
>744b	20 00					.word 32
>744d	59 46					.word xt_x28literalx29
>744f	7e 00					.word 126
>7451	08 74					.word xt_between
>7453	ff 65					.word xt_x28branch0x29
>7455	61 74					.word l_288
>7457	78 5d					.word xt_drop
>7459	59 46					.word xt_x28literalx29
>745b	ff ff					.word 65535
>745d	db 65					.word xt_x28branchx29
>745f	6b 74					.word l_289
.7461					l_288:
>7461	59 46					.word xt_x28literalx29
>7463	a0 00					.word 160
>7465	59 46					.word xt_x28literalx29
>7467	ff 00					.word 255
>7469	08 74					.word xt_between
.746b					l_289:
>746b	f1 42					.word xt_exit
.746d					w_cprint:
>746d	06					.byte $06
>746e	63 70 72 69 6e 74			.text 'cprint'
>7474	00 00 00 00 00 00 00 00			.fill 10,0
>747c	00 00
>747e	31 74					.word w_isprint
.7480					xt_cprint:
.7480	4c 0d 43	jmp $430d		jmp xt_enter
>7483	90 5d					.word xt_dup
>7485	44 74					.word xt_isprint
>7487	ff 65					.word xt_x28branch0x29
>7489	91 74					.word l_290
>748b	39 45					.word xt_emit
>748d	db 65					.word xt_x28branchx29
>748f	99 74					.word l_291
.7491					l_290:
>7491	78 5d					.word xt_drop
>7493	59 46					.word xt_x28literalx29
>7495	2e 00					.word 46
>7497	39 45					.word xt_emit
.7499					l_291:
>7499	f1 42					.word xt_exit
.749b					w_cdump:
>749b	05					.byte $05
>749c	63 64 75 6d 70				.text 'cdump'
>74a1	00 00 00 00 00 00 00 00			.fill 11,0
>74a9	00 00 00
>74ac	6d 74					.word w_cprint
.74ae					xt_cdump:
.74ae	4c 0d 43	jmp $430d		jmp xt_enter
>74b1	14 5e					.word xt_over
>74b3	35 61					.word xt_x2b
>74b5	14 5e					.word xt_over
>74b7	3c 66					.word xt_x28dox29
.74b9					l_292:
>74b9	a8 45					.word xt_cr
>74bb	8e 67					.word xt_i
>74bd	97 63					.word xt_sx3ed
>74bf	59 46					.word xt_x28literalx29
>74c1	05 00					.word 5
>74c3	02 73					.word xt_dx2er
>74c5	59 46					.word xt_x28literalx29
>74c7	3a 00					.word 58
>74c9	39 45					.word xt_emit
>74cb	26 6f					.word xt_space
>74cd	8e 67					.word xt_i
>74cf	59 46					.word xt_x28literalx29
>74d1	08 00					.word 8
>74d3	59 46					.word xt_x28literalx29
>74d5	00 00					.word 0
>74d7	3c 66					.word xt_x28dox29
.74d9					l_294:
>74d9	90 5d					.word xt_dup
>74db	8e 67					.word xt_i
>74dd	35 61					.word xt_x2b
>74df	43 5f					.word xt_cx40
>74e1	97 63					.word xt_sx3ed
>74e3	59 46					.word xt_x28literalx29
>74e5	02 00					.word 2
>74e7	02 73					.word xt_dx2er
>74e9	59 46					.word xt_x28literalx29
>74eb	20 00					.word 32
>74ed	39 45					.word xt_emit
>74ef	b9 66					.word xt_x28loopx29
>74f1	d9 74					.word l_294
.74f3					l_295:
>74f3	59 46					.word xt_x28literalx29
>74f5	02 00					.word 2
>74f7	44 6f					.word xt_spaces
>74f9	59 46					.word xt_x28literalx29
>74fb	08 00					.word 8
>74fd	59 46					.word xt_x28literalx29
>74ff	00 00					.word 0
>7501	3c 66					.word xt_x28dox29
.7503					l_296:
>7503	90 5d					.word xt_dup
>7505	8e 67					.word xt_i
>7507	35 61					.word xt_x2b
>7509	43 5f					.word xt_cx40
>750b	80 74					.word xt_cprint
>750d	b9 66					.word xt_x28loopx29
>750f	03 75					.word l_296
.7511					l_297:
>7511	78 5d					.word xt_drop
>7513	59 46					.word xt_x28literalx29
>7515	08 00					.word 8
>7517	1a 67					.word xt_x28x2bloopx29
>7519	b9 74					.word l_292
.751b					l_293:
>751b	78 5d					.word xt_drop
>751d	f1 42					.word xt_exit
.751f					w_x2ex22:
>751f	c2					.byte $C2
>7520	2e 22					.text '."'
>7522	00 00 00 00 00 00 00 00			.fill 14,0
>752a	00 00 00 00 00 00
>7530	9b 74					.word w_cdump
.7532					xt_x2ex22:
.7532	4c 0d 43	jmp $430d		jmp xt_enter
>7535	59 46					.word xt_x28literalx29
>7537	fe 6e					.word xt_x28x2ex22x29
>7539	1a 6e					.word xt_x2c
>753b	59 46					.word xt_x28literalx29
>753d	22 00					.word 34
>753f	5e 70					.word xt_word
>7541	e2 6d					.word xt_here
>7543	43 5f					.word xt_cx40
>7545	c6 63					.word xt_1x2b
>7547	fe 6d					.word xt_allot
>7549	f1 42					.word xt_exit
.754b					w_x28:
>754b	c1					.byte $C1
>754c	28					.text '('
>754d	00 00 00 00 00 00 00 00			.fill 15,0
>7555	00 00 00 00 00 00 00
>755c	1f 75					.word w_x2ex22
.755e					xt_x28:
.755e	4c 0d 43	jmp $430d		jmp xt_enter
>7561	59 46					.word xt_x28literalx29
>7563	29 00					.word 41
>7565	5e 70					.word xt_word
>7567	f1 42					.word xt_exit
.7569					w_catch:
>7569	05					.byte $05
>756a	63 61 74 63 68				.text 'catch'
>756f	00 00 00 00 00 00 00 00			.fill 11,0
>7577	00 00 00
>757a	4b 75					.word w_x28
.757c					xt_catch:
.757c	4c 0d 43	jmp $430d		jmp xt_enter
>757f	01 45					.word xt_spx40
>7581	5e 5e					.word xt_x3er
>7583	ee 6a					.word xt_handler
>7585	fd 5e					.word xt_x40
>7587	5e 5e					.word xt_x3er
>7589	ba 44					.word xt_rpx40
>758b	ee 6a					.word xt_handler
>758d	d1 5e					.word xt_x21
>758f	fb 67					.word xt_execute
>7591	7c 5e					.word xt_rx3e
>7593	ee 6a					.word xt_handler
>7595	d1 5e					.word xt_x21
>7597	7c 5e					.word xt_rx3e
>7599	78 5d					.word xt_drop
>759b	59 46					.word xt_x28literalx29
>759d	00 00					.word 0
>759f	f1 42					.word xt_exit
.75a1					w_throw:
>75a1	05					.byte $05
>75a2	74 68 72 6f 77				.text 'throw'
>75a7	00 00 00 00 00 00 00 00			.fill 11,0
>75af	00 00 00
>75b2	69 75					.word w_catch
.75b4					xt_throw:
.75b4	4c 0d 43	jmp $430d		jmp xt_enter
>75b7	80 6b					.word xt_x3fdup
>75b9	ff 65					.word xt_x28branch0x29
>75bb	d5 75					.word l_298
>75bd	ee 6a					.word xt_handler
>75bf	fd 5e					.word xt_x40
>75c1	e1 44					.word xt_rpx21
>75c3	7c 5e					.word xt_rx3e
>75c5	ee 6a					.word xt_handler
>75c7	d1 5e					.word xt_x21
>75c9	7c 5e					.word xt_rx3e
>75cb	b0 5d					.word xt_swap
>75cd	5e 5e					.word xt_x3er
>75cf	20 45					.word xt_spx21
>75d1	78 5d					.word xt_drop
>75d3	7c 5e					.word xt_rx3e
.75d5					l_298:
>75d5	f1 42					.word xt_exit
.75d7					w_quit:
>75d7	04					.byte $04
>75d8	71 75 69 74				.text 'quit'
>75dc	00 00 00 00 00 00 00 00			.fill 12,0
>75e4	00 00 00 00
>75e8	a1 75					.word w_throw
.75ea					xt_quit:
.75ea	4c 0d 43	jmp $430d		jmp xt_enter
>75ed	4d 68					.word xt_forth
>75ef	5e 6e					.word xt_definitions
>75f1	59 46					.word xt_x28literalx29
>75f3	00 00					.word 0
>75f5	fe 69					.word xt_state
>75f7	d1 5e					.word xt_x21
.75f9					l_299:
>75f9	a8 45					.word xt_cr
>75fb	fe 69					.word xt_state
>75fd	fd 5e					.word xt_x40
>75ff	fb 64					.word xt_0x3d
>7601	ff 65					.word xt_x28branch0x29
>7603	11 76					.word l_301
>7605	a8 45					.word xt_cr
>7607	59 46					.word xt_x28literalx29
>7609	3e 00					.word 62
>760b	39 45					.word xt_emit
>760d	9e 69					.word xt_bl
>760f	39 45					.word xt_emit
.7611					l_301:
>7611	fa 6f					.word xt_query
>7613	a8 45					.word xt_cr
>7615	bb 76					.word xt_interpret
>7617	db 65					.word xt_x28branchx29
>7619	f9 75					.word l_299
.761b					l_300:
>761b	f1 42					.word xt_exit
.761d					w_error:
>761d	05					.byte $05
>761e	65 72 72 6f 72				.text 'error'
>7623	00 00 00 00 00 00 00 00			.fill 11,0
>762b	00 00 00
>762e	d7 75					.word w_quit
.7630					xt_error:
.7630	4c 0d 43	jmp $430d		jmp xt_enter
>7633	90 5d					.word xt_dup
>7635	fb 64					.word xt_0x3d
>7637	b2 64					.word xt_not
>7639	ff 65					.word xt_x28branch0x29
>763b	4e 76					.word l_302
>763d	e2 6d					.word xt_here
>763f	9c 6e					.word xt_count
>7641	bc 6e					.word xt_type
>7643	fe 6e					.word xt_x28x2ex22x29
>7645	06 3f 20 4d 53 47 23			.ptext "? MSG#"
>764c	52 73					.word xt_x2e
.764e					l_302:
>764e	ea 75					.word xt_quit
>7650	f1 42					.word xt_exit
.7652					w_x3ferror:
>7652	06					.byte $06
>7653	3f 65 72 72 6f 72			.text '?error'
>7659	00 00 00 00 00 00 00 00			.fill 10,0
>7661	00 00
>7663	1d 76					.word w_error
.7665					xt_x3ferror:
.7665	4c 0d 43	jmp $430d		jmp xt_enter
>7668	b0 5d					.word xt_swap
>766a	ff 65					.word xt_x28branch0x29
>766c	74 76					.word l_305
>766e	30 76					.word xt_error
>7670	db 65					.word xt_x28branchx29
>7672	76 76					.word l_306
.7674					l_305:
>7674	78 5d					.word xt_drop
.7676					l_306:
>7676	f1 42					.word xt_exit
.7678					w_x3fcsp:
>7678	04					.byte $04
>7679	3f 63 73 70				.text '?csp'
>767d	00 00 00 00 00 00 00 00			.fill 12,0
>7685	00 00 00 00
>7689	52 76					.word w_x3ferror
.768b					xt_x3fcsp:
.768b	4c 0d 43	jmp $430d		jmp xt_enter
>768e	06 6b					.word xt_csp
>7690	fd 5e					.word xt_x40
>7692	01 45					.word xt_spx40
>7694	c0 61					.word xt_x2d
>7696	ff 65					.word xt_x28branch0x29
>7698	a6 76					.word l_307
>769a	59 46					.word xt_x28literalx29
>769c	00 00					.word 0
>769e	59 46					.word xt_x28literalx29
>76a0	19 00					.word 25
>76a2	c0 61					.word xt_x2d
>76a4	30 76					.word xt_error
.76a6					l_307:
>76a6	f1 42					.word xt_exit
.76a8					w_interpret:
>76a8	09					.byte $09
>76a9	69 6e 74 65 72 70 72 65			.text 'interpret'
>76b1	74
>76b2	00 00 00 00 00 00 00			.fill 7,0
>76b9	78 76					.word w_x3fcsp
.76bb					xt_interpret:
.76bb	4c 0d 43	jmp $430d		jmp xt_enter
.76be					l_308:
>76be	76 6a					.word xt_tib
>76c0	fd 5e					.word xt_x40
>76c2	5e 6a					.word xt_x3ein
>76c4	fd 5e					.word xt_x40
>76c6	35 61					.word xt_x2b
>76c8	43 5f					.word xt_cx40
>76ca	ff 65					.word xt_x28branch0x29
>76cc	0a 77					.word l_309
>76ce	b0 70					.word xt_x2dfind
>76d0	ff 65					.word xt_x28branch0x29
>76d2	ee 76					.word l_310
>76d4	fe 69					.word xt_state
>76d6	fd 5e					.word xt_x40
>76d8	f8 6b					.word xt_x3c
>76da	ff 65					.word xt_x28branch0x29
>76dc	e6 76					.word l_311
>76de	6a 6d					.word xt_cfa
>76e0	1a 6e					.word xt_x2c
>76e2	db 65					.word xt_x28branchx29
>76e4	ea 76					.word l_312
.76e6					l_311:
>76e6	6a 6d					.word xt_cfa
>76e8	fb 67					.word xt_execute
.76ea					l_312:
>76ea	db 65					.word xt_x28branchx29
>76ec	06 77					.word l_313
.76ee					l_310:
>76ee	e2 6d					.word xt_here
>76f0	86 71					.word xt_number
>76f2	b0 5d					.word xt_swap
>76f4	78 5d					.word xt_drop
>76f6	fe 69					.word xt_state
>76f8	fd 5e					.word xt_x40
>76fa	ff 65					.word xt_x28branch0x29
>76fc	06 77					.word l_314
>76fe	59 46					.word xt_x28literalx29
>7700	59 46					.word xt_x28literalx29
>7702	1a 6e					.word xt_x2c
>7704	1a 6e					.word xt_x2c
.7706					l_314:
.7706					l_313:
>7706	db 65					.word xt_x28branchx29
>7708	be 76					.word l_308
.770a					l_309:
>770a	f1 42					.word xt_exit
.770c					w_x3fcontrol:
>770c	08					.byte $08
>770d	3f 63 6f 6e 74 72 6f 6c			.text '?control'
>7715	00 00 00 00 00 00 00 00			.fill 8,0
>771d	a8 76					.word w_interpret
.771f					xt_x3fcontrol:
.771f	4c 0d 43	jmp $430d		jmp xt_enter
>7722	c0 61					.word xt_x2d
>7724	59 46					.word xt_x28literalx29
>7726	00 00					.word 0
>7728	59 46					.word xt_x28literalx29
>772a	16 00					.word 22
>772c	c0 61					.word xt_x2d
>772e	65 76					.word xt_x3ferror
>7730	f1 42					.word xt_exit
.7732					w_begin:
>7732	c5					.byte $C5
>7733	62 65 67 69 6e				.text 'begin'
>7738	00 00 00 00 00 00 00 00			.fill 11,0
>7740	00 00 00
>7743	0c 77					.word w_x3fcontrol
.7745					xt_begin:
.7745	4c 0d 43	jmp $430d		jmp xt_enter
>7748	e2 6d					.word xt_here
>774a	59 46					.word xt_x28literalx29
>774c	01 00					.word 1
>774e	f1 42					.word xt_exit
.7750					w_again:
>7750	c5					.byte $C5
>7751	61 67 61 69 6e				.text 'again'
>7756	00 00 00 00 00 00 00 00			.fill 11,0
>775e	00 00 00
>7761	32 77					.word w_begin
.7763					xt_again:
.7763	4c 0d 43	jmp $430d		jmp xt_enter
>7766	59 46					.word xt_x28literalx29
>7768	01 00					.word 1
>776a	1f 77					.word xt_x3fcontrol
>776c	59 46					.word xt_x28literalx29
>776e	db 65					.word xt_x28branchx29
>7770	1a 6e					.word xt_x2c
>7772	1a 6e					.word xt_x2c
>7774	f1 42					.word xt_exit
.7776					w_until:
>7776	c5					.byte $C5
>7777	75 6e 74 69 6c				.text 'until'
>777c	00 00 00 00 00 00 00 00			.fill 11,0
>7784	00 00 00
>7787	50 77					.word w_again
.7789					xt_until:
.7789	4c 0d 43	jmp $430d		jmp xt_enter
>778c	59 46					.word xt_x28literalx29
>778e	01 00					.word 1
>7790	1f 77					.word xt_x3fcontrol
>7792	59 46					.word xt_x28literalx29
>7794	ff 65					.word xt_x28branch0x29
>7796	1a 6e					.word xt_x2c
>7798	1a 6e					.word xt_x2c
>779a	f1 42					.word xt_exit
.779c					w_if:
>779c	c2					.byte $C2
>779d	69 66					.text 'if'
>779f	00 00 00 00 00 00 00 00			.fill 14,0
>77a7	00 00 00 00 00 00
>77ad	76 77					.word w_until
.77af					xt_if:
.77af	4c 0d 43	jmp $430d		jmp xt_enter
>77b2	59 46					.word xt_x28literalx29
>77b4	ff 65					.word xt_x28branch0x29
>77b6	1a 6e					.word xt_x2c
>77b8	e2 6d					.word xt_here
>77ba	59 46					.word xt_x28literalx29
>77bc	00 00					.word 0
>77be	1a 6e					.word xt_x2c
>77c0	59 46					.word xt_x28literalx29
>77c2	02 00					.word 2
>77c4	f1 42					.word xt_exit
.77c6					w_else:
>77c6	c4					.byte $C4
>77c7	65 6c 73 65				.text 'else'
>77cb	00 00 00 00 00 00 00 00			.fill 12,0
>77d3	00 00 00 00
>77d7	9c 77					.word w_if
.77d9					xt_else:
.77d9	4c 0d 43	jmp $430d		jmp xt_enter
>77dc	59 46					.word xt_x28literalx29
>77de	02 00					.word 2
>77e0	1f 77					.word xt_x3fcontrol
>77e2	59 46					.word xt_x28literalx29
>77e4	db 65					.word xt_x28branchx29
>77e6	1a 6e					.word xt_x2c
>77e8	e2 6d					.word xt_here
>77ea	b0 5d					.word xt_swap
>77ec	59 46					.word xt_x28literalx29
>77ee	00 00					.word 0
>77f0	1a 6e					.word xt_x2c
>77f2	e2 6d					.word xt_here
>77f4	b0 5d					.word xt_swap
>77f6	d1 5e					.word xt_x21
>77f8	59 46					.word xt_x28literalx29
>77fa	02 00					.word 2
>77fc	f1 42					.word xt_exit
.77fe					w_then:
>77fe	c4					.byte $C4
>77ff	74 68 65 6e				.text 'then'
>7803	00 00 00 00 00 00 00 00			.fill 12,0
>780b	00 00 00 00
>780f	c6 77					.word w_else
.7811					xt_then:
.7811	4c 0d 43	jmp $430d		jmp xt_enter
>7814	59 46					.word xt_x28literalx29
>7816	02 00					.word 2
>7818	1f 77					.word xt_x3fcontrol
>781a	e2 6d					.word xt_here
>781c	b0 5d					.word xt_swap
>781e	d1 5e					.word xt_x21
>7820	f1 42					.word xt_exit
.7822					w_create:
>7822	06					.byte $06
>7823	63 72 65 61 74 65			.text 'create'
>7829	00 00 00 00 00 00 00 00			.fill 10,0
>7831	00 00
>7833	fe 77					.word w_then
.7835					xt_create:
.7835	4c 0d 43	jmp $430d		jmp xt_enter
>7838	e2 6d					.word xt_here
>783a	9e 69					.word xt_bl
>783c	5e 70					.word xt_word
>783e	59 46					.word xt_x28literalx29
>7840	11 00					.word 17
>7842	fe 6d					.word xt_allot
>7844	7e 6e					.word xt_latest
>7846	1a 6e					.word xt_x2c
>7848	2e 6a					.word xt_current
>784a	fd 5e					.word xt_x40
>784c	d1 5e					.word xt_x21
>784e	36 69					.word xt_jumpx2dinstruction
>7850	3c 6e					.word xt_cx2c
>7852	59 46					.word xt_x28literalx29
>7854	0d 43					.word xt_enter
>7856	1a 6e					.word xt_x2c
>7858	f1 42					.word xt_exit
.785a					w_x3a:
>785a	01					.byte $01
>785b	3a					.text ':'
>785c	00 00 00 00 00 00 00 00			.fill 15,0
>7864	00 00 00 00 00 00 00
>786b	22 78					.word w_create
.786d					xt_x3a:
.786d	4c 0d 43	jmp $430d		jmp xt_enter
>7870	2e 6a					.word xt_current
>7872	fd 5e					.word xt_x40
>7874	16 6a					.word xt_context
>7876	d1 5e					.word xt_x21
>7878	35 78					.word xt_create
>787a	60 6b					.word xt_x5d
>787c	f1 42					.word xt_exit
.787e					w_x28x3bcodex29:
>787e	07					.byte $07
>787f	28 3b 63 6f 64 65 29			.text '(;code)'
>7886	00 00 00 00 00 00 00 00			.fill 9,0
>788e	00
>788f	5a 78					.word w_x3a
.7891					xt_x28x3bcodex29:
.7891	4c 0d 43	jmp $430d		jmp xt_enter
>7894	7e 6e					.word xt_latest
>7896	c4 6d					.word xt_nfax3ecfa
>7898	90 5d					.word xt_dup
>789a	36 69					.word xt_jumpx2dinstruction
>789c	b0 5d					.word xt_swap
>789e	25 5f					.word xt_cx21
>78a0	c6 63					.word xt_1x2b
>78a2	7c 5e					.word xt_rx3e
>78a4	b0 5d					.word xt_swap
>78a6	d1 5e					.word xt_x21
>78a8	f1 42					.word xt_exit
.78aa					w_x3bcode:
>78aa	c5					.byte $C5
>78ab	3b 63 6f 64 65				.text ';code'
>78b0	00 00 00 00 00 00 00 00			.fill 11,0
>78b8	00 00 00
>78bb	7e 78					.word w_x28x3bcodex29
.78bd					xt_x3bcode:
.78bd	4c 0d 43	jmp $430d		jmp xt_enter
>78c0	59 46					.word xt_x28literalx29
>78c2	91 78					.word xt_x28x3bcodex29
>78c4	1a 6e					.word xt_x2c
>78c6	40 6b					.word xt_x5b
>78c8	f1 42					.word xt_exit
.78ca					w_doesx3e:
>78ca	c5					.byte $C5
>78cb	64 6f 65 73 3e				.text 'does>'
>78d0	00 00 00 00 00 00 00 00			.fill 11,0
>78d8	00 00 00
>78db	aa 78					.word w_x3bcode
.78dd					xt_doesx3e:
.78dd	4c 0d 43	jmp $430d		jmp xt_enter
>78e0	59 46					.word xt_x28literalx29
>78e2	91 78					.word xt_x28x3bcodex29
>78e4	1a 6e					.word xt_x2c
>78e6	52 69					.word xt_callx2dinstruction
>78e8	3c 6e					.word xt_cx2c
>78ea	59 46					.word xt_x28literalx29
>78ec	36 43					.word xt_dodoes
>78ee	1a 6e					.word xt_x2c
>78f0	f1 42					.word xt_exit
.78f2					w_x3b:
>78f2	c1					.byte $C1
>78f3	3b					.text ';'
>78f4	00 00 00 00 00 00 00 00			.fill 15,0
>78fc	00 00 00 00 00 00 00
>7903	ca 78					.word w_doesx3e
.7905					xt_x3b:
.7905	4c 0d 43	jmp $430d		jmp xt_enter
>7908	59 46					.word xt_x28literalx29
>790a	f1 42					.word xt_exit
>790c	1a 6e					.word xt_x2c
>790e	40 6b					.word xt_x5b
>7910	f1 42					.word xt_exit
.7912					w_endx2dcode:
>7912	08					.byte $08
>7913	65 6e 64 2d 63 6f 64 65			.text 'end-code'
>791b	00 00 00 00 00 00 00 00			.fill 8,0
>7923	f2 78					.word w_x3b
.7925					xt_endx2dcode:
.7925	4c 0d 43	jmp $430d		jmp xt_enter
>7928	36 69					.word xt_jumpx2dinstruction
>792a	3c 6e					.word xt_cx2c
>792c	59 46					.word xt_x28literalx29
>792e	c4 42					.word xt_next
>7930	1a 6e					.word xt_x2c
>7932	f1 42					.word xt_exit
.7934					w_greeting:
>7934	08					.byte $08
>7935	67 72 65 65 74 69 6e 67			.text 'greeting'
>793d	00 00 00 00 00 00 00 00			.fill 8,0
>7945	12 79					.word w_endx2dcode
.7947					xt_greeting:
.7947	4c 0d 43	jmp $430d		jmp xt_enter
>794a	fe 6e					.word xt_x28x2ex22x29
>794c	05 68 65 6c 6c 6f			.ptext "hello"
>7952	a8 45					.word xt_cr
>7954	f1 42					.word xt_exit
.7956					w_initrandom:
>7956	0a					.byte $0A
>7957	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>795f	6f 6d
>7961	00 00 00 00 00 00			.fill 6,0
>7967	34 79					.word w_greeting
.7969					xt_initrandom:
.7969	4c 0d 43	jmp $430d		jmp xt_enter
>796c	59 46					.word xt_x28literalx29
>796e	01 00					.word 1
>7970	59 46					.word xt_x28literalx29
>7972	a6 d6					.word 54950
>7974	25 5f					.word xt_cx21
>7976	f1 42					.word xt_exit
.7978					w_random:
>7978	06					.byte $06
>7979	72 61 6e 64 6f 6d			.text 'random'
>797f	00 00 00 00 00 00 00 00			.fill 10,0
>7987	00 00
>7989	56 79					.word w_initrandom
.798b					xt_random:
.798b	4c 0d 43	jmp $430d		jmp xt_enter
>798e	59 46					.word xt_x28literalx29
>7990	a4 d6					.word 54948
>7992	fd 5e					.word xt_x40
>7994	f1 42					.word xt_exit
.7996					w_iox2dpage:
>7996	07					.byte $07
>7997	69 6f 2d 70 61 67 65			.text 'io-page'
>799e	00 00 00 00 00 00 00 00			.fill 9,0
>79a6	00
>79a7	78 79					.word w_random
.79a9					xt_iox2dpage:
.79a9	4c 78 65	jmp $6578		jmp xt_x28constantx29
>79ac	01 00					.word 0001
.79ae					w_setx2diox2dtext:
>79ae	0b					.byte $0B
>79af	73 65 74 2d 69 6f 2d 74			.text 'set-io-text'
>79b7	65 78 74
>79ba	00 00 00 00 00				.fill 5,0
>79bf	96 79					.word w_iox2dpage
.79c1					xt_setx2diox2dtext:
.79c1	4c 0d 43	jmp $430d		jmp xt_enter
>79c4	59 46					.word xt_x28literalx29
>79c6	02 00					.word 2
>79c8	a9 79					.word xt_iox2dpage
>79ca	25 5f					.word xt_cx21
>79cc	f1 42					.word xt_exit
.79ce					w_setx2diox2dcolor:
>79ce	0c					.byte $0C
>79cf	73 65 74 2d 69 6f 2d 63			.text 'set-io-color'
>79d7	6f 6c 6f 72
>79db	00 00 00 00				.fill 4,0
>79df	ae 79					.word w_setx2diox2dtext
.79e1					xt_setx2diox2dcolor:
.79e1	4c 0d 43	jmp $430d		jmp xt_enter
>79e4	59 46					.word xt_x28literalx29
>79e6	03 00					.word 3
>79e8	a9 79					.word xt_iox2dpage
>79ea	25 5f					.word xt_cx21
>79ec	f1 42					.word xt_exit
.79ee					w_defx2dtextx2dfgx2dcolor:
>79ee	10					.byte $10
>79ef	64 65 66 2d 74 65 78 74			.text 'def-text-fg-colo'
>79f7	2d 66 67 2d 63 6f 6c 6f
>79ff						.fill 0,0
>79ff	ce 79					.word w_setx2diox2dcolor
.7a01					xt_defx2dtextx2dfgx2dcolor:
.7a01	4c 0d 43	jmp $430d		jmp xt_enter
>7a04	59 46					.word xt_x28literalx29
>7a06	0f 00					.word 15
>7a08	46 64					.word xt_and
>7a0a	a9 79					.word xt_iox2dpage
>7a0c	43 5f					.word xt_cx40
>7a0e	5e 5e					.word xt_x3er
>7a10	59 46					.word xt_x28literalx29
>7a12	00 00					.word 0
>7a14	a9 79					.word xt_iox2dpage
>7a16	25 5f					.word xt_cx21
>7a18	59 46					.word xt_x28literalx29
>7a1a	04 00					.word 4
>7a1c	1d 62					.word xt_x2a
>7a1e	59 46					.word xt_x28literalx29
>7a20	00 d8					.word 55296
>7a22	35 61					.word xt_x2b
>7a24	90 5d					.word xt_dup
>7a26	59 46					.word xt_x28literalx29
>7a28	03 00					.word 3
>7a2a	35 61					.word xt_x2b
>7a2c	b0 5d					.word xt_swap
>7a2e	3c 66					.word xt_x28dox29
.7a30					l_317:
>7a30	8e 67					.word xt_i
>7a32	25 5f					.word xt_cx21
>7a34	b9 66					.word xt_x28loopx29
>7a36	30 7a					.word l_317
.7a38					l_318:
>7a38	7c 5e					.word xt_rx3e
>7a3a	a9 79					.word xt_iox2dpage
>7a3c	25 5f					.word xt_cx21
>7a3e	f1 42					.word xt_exit
.7a40					w_defx2dtextx2dbgx2dcolor:
>7a40	10					.byte $10
>7a41	64 65 66 2d 74 65 78 74			.text 'def-text-bg-colo'
>7a49	2d 62 67 2d 63 6f 6c 6f
>7a51						.fill 0,0
>7a51	ee 79					.word w_defx2dtextx2dfgx2dcolor
.7a53					xt_defx2dtextx2dbgx2dcolor:
.7a53	4c 0d 43	jmp $430d		jmp xt_enter
>7a56	59 46					.word xt_x28literalx29
>7a58	0f 00					.word 15
>7a5a	46 64					.word xt_and
>7a5c	a9 79					.word xt_iox2dpage
>7a5e	43 5f					.word xt_cx40
>7a60	5e 5e					.word xt_x3er
>7a62	59 46					.word xt_x28literalx29
>7a64	00 00					.word 0
>7a66	a9 79					.word xt_iox2dpage
>7a68	25 5f					.word xt_cx21
>7a6a	59 46					.word xt_x28literalx29
>7a6c	04 00					.word 4
>7a6e	1d 62					.word xt_x2a
>7a70	59 46					.word xt_x28literalx29
>7a72	40 d8					.word 55360
>7a74	35 61					.word xt_x2b
>7a76	90 5d					.word xt_dup
>7a78	59 46					.word xt_x28literalx29
>7a7a	03 00					.word 3
>7a7c	35 61					.word xt_x2b
>7a7e	b0 5d					.word xt_swap
>7a80	3c 66					.word xt_x28dox29
.7a82					l_319:
>7a82	8e 67					.word xt_i
>7a84	25 5f					.word xt_cx21
>7a86	b9 66					.word xt_x28loopx29
>7a88	82 7a					.word l_319
.7a8a					l_320:
>7a8a	7c 5e					.word xt_rx3e
>7a8c	a9 79					.word xt_iox2dpage
>7a8e	25 5f					.word xt_cx21
>7a90	f1 42					.word xt_exit
.7a92					w_setx2dborderx2dcolor:
>7a92	10					.byte $10
>7a93	73 65 74 2d 62 6f 72 64			.text 'set-border-color'
>7a9b	65 72 2d 63 6f 6c 6f 72
>7aa3						.fill 0,0
>7aa3	40 7a					.word w_defx2dtextx2dbgx2dcolor
.7aa5					xt_setx2dborderx2dcolor:
.7aa5	4c 0d 43	jmp $430d		jmp xt_enter
>7aa8	a9 79					.word xt_iox2dpage
>7aaa	43 5f					.word xt_cx40
>7aac	5e 5e					.word xt_x3er
>7aae	59 46					.word xt_x28literalx29
>7ab0	00 00					.word 0
>7ab2	a9 79					.word xt_iox2dpage
>7ab4	25 5f					.word xt_cx21
>7ab6	59 46					.word xt_x28literalx29
>7ab8	05 d0					.word 53253
>7aba	25 5f					.word xt_cx21
>7abc	59 46					.word xt_x28literalx29
>7abe	06 d0					.word 53254
>7ac0	25 5f					.word xt_cx21
>7ac2	59 46					.word xt_x28literalx29
>7ac4	07 d0					.word 53255
>7ac6	25 5f					.word xt_cx21
>7ac8	7c 5e					.word xt_rx3e
>7aca	a9 79					.word xt_iox2dpage
>7acc	25 5f					.word xt_cx21
>7ace	f1 42					.word xt_exit
.7ad0					w_setx2dborderx2dsize:
>7ad0	0f					.byte $0F
>7ad1	73 65 74 2d 62 6f 72 64			.text 'set-border-size'
>7ad9	65 72 2d 73 69 7a 65
>7ae0	00					.fill 1,0
>7ae1	92 7a					.word w_setx2dborderx2dcolor
.7ae3					xt_setx2dborderx2dsize:
.7ae3	4c 0d 43	jmp $430d		jmp xt_enter
>7ae6	a9 79					.word xt_iox2dpage
>7ae8	43 5f					.word xt_cx40
>7aea	5e 5e					.word xt_x3er
>7aec	59 46					.word xt_x28literalx29
>7aee	00 00					.word 0
>7af0	a9 79					.word xt_iox2dpage
>7af2	25 5f					.word xt_cx21
>7af4	14 5e					.word xt_over
>7af6	14 5e					.word xt_over
>7af8	6a 64					.word xt_or
>7afa	ff 65					.word xt_x28branch0x29
>7afc	2c 7b					.word l_321
>7afe	59 46					.word xt_x28literalx29
>7b00	1f 00					.word 31
>7b02	46 64					.word xt_and
>7b04	59 46					.word xt_x28literalx29
>7b06	09 d0					.word 53257
>7b08	25 5f					.word xt_cx21
>7b0a	59 46					.word xt_x28literalx29
>7b0c	1f 00					.word 31
>7b0e	46 64					.word xt_and
>7b10	59 46					.word xt_x28literalx29
>7b12	08 d0					.word 53256
>7b14	25 5f					.word xt_cx21
>7b16	59 46					.word xt_x28literalx29
>7b18	04 d0					.word 53252
>7b1a	43 5f					.word xt_cx40
>7b1c	59 46					.word xt_x28literalx29
>7b1e	01 00					.word 1
>7b20	6a 64					.word xt_or
>7b22	59 46					.word xt_x28literalx29
>7b24	04 d0					.word 53252
>7b26	25 5f					.word xt_cx21
>7b28	db 65					.word xt_x28branchx29
>7b2a	40 7b					.word l_322
.7b2c					l_321:
>7b2c	59 46					.word xt_x28literalx29
>7b2e	04 d0					.word 53252
>7b30	43 5f					.word xt_cx40
>7b32	59 46					.word xt_x28literalx29
>7b34	fe 00					.word 254
>7b36	46 64					.word xt_and
>7b38	59 46					.word xt_x28literalx29
>7b3a	04 d0					.word 53252
>7b3c	25 5f					.word xt_cx21
>7b3e	dc 6b					.word xt_2drop
.7b40					l_322:
>7b40	7c 5e					.word xt_rx3e
>7b42	a9 79					.word xt_iox2dpage
>7b44	25 5f					.word xt_cx21
>7b46	f1 42					.word xt_exit
.7b48					w_maze:
>7b48	04					.byte $04
>7b49	6d 61 7a 65				.text 'maze'
>7b4d	00 00 00 00 00 00 00 00			.fill 12,0
>7b55	00 00 00 00
>7b59	d0 7a					.word w_setx2dborderx2dsize
.7b5b					xt_maze:
.7b5b	4c 0d 43	jmp $430d		jmp xt_enter
>7b5e	69 79					.word xt_initrandom
.7b60					l_323:
>7b60	8b 79					.word xt_random
>7b62	59 46					.word xt_x28literalx29
>7b64	01 00					.word 1
>7b66	46 64					.word xt_and
>7b68	59 46					.word xt_x28literalx29
>7b6a	ba 00					.word 186
>7b6c	35 61					.word xt_x2b
>7b6e	39 45					.word xt_emit
>7b70	db 65					.word xt_x28branchx29
>7b72	60 7b					.word l_323
.7b74					l_324:
>7b74	f1 42					.word xt_exit
.7b76					w_cold:
>7b76	04					.byte $04
>7b77	63 6f 6c 64				.text 'cold'
>7b7b	00 00 00 00 00 00 00 00			.fill 12,0
>7b83	00 00 00 00
>7b87	48 7b					.word w_maze
.7b89					xt_cold:
.7b89	4c 0d 43	jmp $430d		jmp xt_enter
>7b8c	4d 68					.word xt_forth
>7b8e	5e 6e					.word xt_definitions
>7b90	b6 69					.word xt_s0
>7b92	fd 5e					.word xt_x40
>7b94	20 45					.word xt_spx21
>7b96	ce 69					.word xt_r0
>7b98	fd 5e					.word xt_x40
>7b9a	e1 44					.word xt_rpx21
>7b9c	59 46					.word xt_x28literalx29
>7b9e	00 00					.word 0
>7ba0	a6 6a					.word xt_blk
>7ba2	d1 5e					.word xt_x21
>7ba4	59 46					.word xt_x28literalx29
>7ba6	00 08					.word 2048
>7ba8	46 6a					.word xt_dp
>7baa	d1 5e					.word xt_x21
>7bac	e6 70					.word xt_decimal
>7bae	fe 6e					.word xt_x28x2ex22x29
>7bb0	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>7bb8	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>7bc8	30 2e 30 30 2e 30 30
>7bcf	a8 45					.word xt_cr
>7bd1	e3 46					.word xt_unittest
>7bd3	fe 6e					.word xt_x28x2ex22x29
>7bd5	16 41 6c 6c 20 75 6e 69			.ptext "All unit tests PASSED!"
>7bdd	74 20 74 65 73 74 73 20 50 41 53 53 45 44 21
>7bec	a8 45					.word xt_cr
>7bee	ea 75					.word xt_quit
>7bf0	f1 42					.word xt_exit

;******  Processing file: mf_post_65c02.asm

.7bf2					endcode:

;******  Return to file: forth.asm


;******  End of listing
