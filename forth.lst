
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Fri Mar 03 21:53:03 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$5000					USERAREA = $5000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: sections.asm


;******  Return to file: mf_pre_65c02.asm

>0020					ip      .word ?         ; Instruction pointer
>0022					wp      .word ?         ; Word pointer
>0024					up      .word ?         ; User pointer
>0026					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0028					test    .word ?         ; Pointer to the current test name
>002a					tmp     .fill 4
>002e					savex   .byte ?
>002f					counter .byte ?         ; A counter used for some code
>0030					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
.4000					coldstart:
.4000	20 64 40	jsr $4064	        jsr ioinit
.4003	4c 22 40	jmp $4022	        jmp start
.4006					init_user:
>4006	6e 00				        .word $006e     ; Initial PSP (S0)
>4008	ff 00				        .word $00ff     ; Initial RSP (R0)
>400a	0a 00				        .word 10        ; Initial BASE
>400c	00 00				        .word 0         ; Initial STATE
>400e	00 00				        .word 0         ; Initial CONTEXT
>4010	00 00				        .word 0         ; Initial CURRENT
>4012	00 08				        .word $0800     ; Initial DP
>4014	00 00				        .word 0         ; Initial >IN
>4016	00 3f				        .word $3f00     ; Initial TIB
>4018	00 00				        .word 0         ; Initial SOURCE-ID
>401a	00 00				        .word 0         ; Initial BLK
>401c	ff ff				        .word $ffff     ; Initial DPL
>401e	00 00				        .word 0         ; Initial HLD
>4020	00 00				        .word 0         ; Initial HANDLER
.4022					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
=20					user_blk = 20
=22					user_dpl = 22
=24					user_hld = 24
=26					user_handler = 26
.4022	a2 6e		ldx #$6e	start   ldx #$6e        ; Initialize the PSP
.4024	a9 43		lda #$43	        lda #<vstart
.4026	85 20		sta $20		        sta ip
.4028	a9 40		lda #$40	        lda #>vstart
.402a	85 21		sta $21		        sta ip+1
.402c	a9 00		lda #$00	        lda #<USERAREA
.402e	85 24		sta $24		        sta up
.4030	a9 50		lda #$50	        lda #>USERAREA
.4032	85 25		sta $25		        sta up+1
.4034	a0 00		ldy #$00	        ldy #0
.4036					init_user_loop:
.4036	b9 06 40	lda $4006,y	        lda init_user,y
.4039	91 24		sta ($24),y	        sta (up),y
.403b	c8		iny		        iny
.403c	c0 1c		cpy #$1c	        cpy #(init_user_end - init_user)
.403e	d0 f6		bne $4036	        bne init_user_loop
.4040	4c 4a 40	jmp $404a	        jmp next
>4043	0f 76				vstart  .word xt_cold
>4045	c1 43				        .word xt_halt
.4047	6c 26 00	jmp ($0026)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.404a	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.404c	b2 20		lda ($20)	        lda (ip)
.404e	85 22		sta $22		        sta wp
.4050	b1 20		lda ($20),y	        lda (ip),y
.4052	85 23		sta $23		        sta wp+1
.4054	18		clc		        clc             ; ip := ip + 2
.4055	a5 20		lda $20		        lda ip
.4057	69 02		adc #$02	        adc #2
.4059	85 20		sta $20		        sta ip
.405b	a5 21		lda $21		        lda ip+1
.405d	69 00		adc #$00	        adc #0
.405f	85 21		sta $21		        sta ip+1
.4061	6c 22 00	jmp ($0022)	        jmp (wp)        ; jmp (wp)

;******  Processing file: io.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: io.asm


;******  Processing file: api.asm

>ff00					NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04					ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08					ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c					Yield       .fill   4   ; Give unused time to the kernel.
>ff10					Putch       .fill   4   ; deprecated
>ff14					RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18					RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c					            .fill   4   ; reserved
>ff20					List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24					GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28					GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c					Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30					Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34					Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38					Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c					List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40					GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44					MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48					CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c					Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50					Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54					ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58					WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c					Open        .fill   4   ; Open the given file for read, create, or append.
>ff60					Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64					Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68					Close       .fill   4   ; Close an open file.
>ff6c					Rename      .fill   4   ; Rename a closed file.
>ff70					Delete      .fill   4   ; Delete a closed file.
>ff74					Open        .fill   4   ; Open a directory for reading.
>ff78					Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c					Close       .fill   4   ; Close a directory once finished reading.
>ff80					MkDir       .fill   4
>ff84					RmDir       .fill   4
>ff88					            .fill   4   ; call gate
>ff8c					GetIP       .fill   4   ; Get the local IP address.
>ff90					SetIP       .fill   4   ; Set the local IP address.
>ff94					GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98					SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c					SendICMP    .fill   4
>ffa0					Match       .fill   4
>ffa4					Init        .fill   4
>ffa8					Send        .fill   4
>ffac					Recv        .fill   4
>ffb0					Open        .fill   4
>ffb4					Accept      .fill   4
>ffb8					Reject      .fill   4
>ffbc					Send        .fill   4
>ffc0					Recv        .fill   4
>ffc4					Close       .fill   4
>ffc8					Reset       .fill   4   ; Re-init the display
>ffcc					GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0					DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4					DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8					GetTime     .fill   4
>ffdc					SetTime     .fill   4
>ffe0					GetSysInfo  .fill   4
>ffe4					SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0					args
.00f0					events
>00f0					dest        .word       ?   ; GetNextEvent copies event data here
>00f2					pending     .byte       ?   ; Negative count of pending events
.00f3					end
.00f3					run
>00f3					block_id    .byte   ?
.00f3					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					fs
.00f3					format
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					mkfs
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					file
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					write
>00f3					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					close
>00f3					stream      .byte       ?
.00f3					rename
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.00f3					delete
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					directory
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					display
>00f3					x           .byte       ?   ; coordinate or size
>00f4					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.00f3					net
=$fb					socket      = args.buf
>00f3					src_port    .word       ?
>00f5					dest_port   .word       ?
>00f7					dest_ip     .fill       4
>00f3					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					args_t
.0000					events
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0003					run
>0003					block_id    .byte   ?
.0003					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					fs
.0003					format
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					mkfs
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					file
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					write
>0003					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					close
>0003					stream      .byte       ?
.0003					rename
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0003					delete
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					directory
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					close
>0003					stream      .byte       ?
.0003					display
>0003					x           .byte       ?   ; coordinate or size
>0004					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0003					net
=$fb					socket      = args.buf
>0003					src_port    .word       ?
>0005					dest_port   .word       ?
>0007					dest_ip     .fill       4
>0003					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					event_t
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0000					recv_t
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					run_t
>0000					block_id    .byte   ?
.0000					fs_t
.0000					format
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					mkfs
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					fs_mkfs_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					file_t
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					write
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					close
>0000					stream      .byte       ?
.0000					rename
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					delete
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					fs_open_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					fs_read_t
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					fs_write_t
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					fs_close_t
>0000					stream      .byte       ?
.0000					fs_rename_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					fs_delete_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fnane       = args.buf
=$fd					fname_len   = args.buflen
.0000					dir_t
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					close
>0000					stream      .byte       ?
.0000					dir_open_t
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					dir_read_t
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					dir_close_t
>0000					stream      .byte       ?
.0000					display_t
>0000					x           .byte       ?   ; coordinate or size
>0001					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0000					net_t
=$fb					socket      = args.buf
>0000					src_port    .word       ?
>0002					dest_port   .word       ?
>0004					dest_ip     .fill       4
>0000					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
>0000					            .word   ?   ; Reserved
>0002					            .word   ?   ; Deprecated
>0004					JOYSTICK    .word   ?   ; Game Controller changes.
>0006					DEVICE      .word   ?   ; Device added/removed.
>0008					PRESSED     .word   ?   ; Key pressed
>000a					RELEASED    .word   ?   ; Key released.
>000c					DELTA       .word   ?   ; Regular mouse move and button state
>000e					CLICKS      .word   ?   ; Click counts
>0010					NAME        .word   ?
>0012					SIZE        .word   ?
>0014					DATA        .word   ?   ; The read request has succeeded.
>0016					WROTE       .word   ?   ; The write request has completed.
>0018					FORMATTED   .word   ?   ; The low-level format has completed.
>001a					ERROR       .word   ?
>001c					SIZE        .word   ?
>001e					CREATED     .word   ?
>0020					CHECKED     .word   ?
>0022					DATA        .word   ?   ; The read request has succeeded.
>0024					WROTE       .word   ?   ; The write request has completed.
>0026					ERROR       .word   ?
>0028					NOT_FOUND   .word   ?   ; The file file was not found.
>002a					OPENED      .word   ?   ; The file was successfully opened.
>002c					DATA        .word   ?   ; The read request has succeeded.
>002e					WROTE       .word   ?   ; The write request has completed.
>0030					EOF         .word   ?   ; All file data has been read.
>0032					CLOSED      .word   ?   ; The close request has completed.
>0034					RENAMED     .word   ?   ; The rename request has completed.
>0036					DELETED     .word   ?   ; The delete request has completed.
>0038					ERROR       .word   ?   ; An error occured; close the file if opened.
>003a					OPENED      .word   ?   ; The directory open request succeeded.
>003c					VOLUME      .word   ?   ; A volume record was found.
>003e					FILE        .word   ?   ; A file record was found.
>0040					FREE        .word   ?   ; A file-system free-space record was found.
>0042					EOF         .word   ?   ; All data has been read.
>0044					CLOSED      .word   ?   ; The directory file has been closed.
>0046					ERROR       .word   ?   ; An error occured; user should close.
>0048					TCP         .word   ?
>004a					UDP         .word   ?
.0000					event_t
>0000					type        .byte   ?   ; Enum above
>0001					buf         .byte   ?   ; page id or zero
>0002					ext         .byte   ?   ; page id or zero
.0003					key
>0003					keyboard    .byte   ?   ; Keyboard ID
>0004					raw         .byte   ?   ; Raw key ID
>0005					ascii       .byte   ?   ; ASCII value
>0006					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0003					mouse
.0003					delta
>0003					x           .byte   ?
>0004					y           .byte   ?
>0005					z           .byte   ?
>0006					buttons     .byte   ?
.0003					clicks
>0003					inner       .byte   ?
>0004					middle      .byte   ?
>0005					outer       .byte   ?
.0003					joystick
>0003					joy0        .byte   ?
>0004					joy1        .byte   ?
.0003					udp
>0003					token       .byte   ?   ; TODO: break out into fields
.0003					tcp
>0003					len         .byte   ?   ; Raw packet length.
.0003					file
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					data
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					read        .byte   ?   ; Number of bytes actually read
.0005					wrote
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					wrote       .byte   ?   ; Number of bytes actually read
.0003					directory
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					volume
>0005					len         .byte   ?   ; Length of volname (in buf)
>0006					flags       .byte   ?   ; block size, text encoding
.0005					file
>0005					len         .byte   ?
>0006					flags       .byte   ?   ; block scale, text encoding, approx size
.0005					free
>0005					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					key_t
>0000					keyboard    .byte   ?   ; Keyboard ID
>0001					raw         .byte   ?   ; Raw key ID
>0002					ascii       .byte   ?   ; ASCII value
>0003					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0000					mouse_t
.0000					delta
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					clicks
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
.0000					m_delta_t
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					m_clicks_t
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
.0000					joystick_t
>0000					joy0        .byte   ?
>0001					joy1        .byte   ?
.0000					file_t
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					data
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					read        .byte   ?   ; Number of bytes actually read
.0002					wrote
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					wrote       .byte   ?   ; Number of bytes actually read
.0000					fs_data_t
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					read        .byte   ?   ; Number of bytes actually read
.0000					fs_wrote_t
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					wrote       .byte   ?   ; Number of bytes actually read
.0000					dir_t
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					volume
>0002					len         .byte   ?   ; Length of volname (in buf)
>0003					flags       .byte   ?   ; block size, text encoding
.0002					file
>0002					len         .byte   ?
>0003					flags       .byte   ?   ; block scale, text encoding, approx size
.0002					free
>0002					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_vol_t
>0000					len         .byte   ?   ; Length of volname (in buf)
>0001					flags       .byte   ?   ; block size, text encoding
.0000					dir_file_t
>0000					len         .byte   ?
>0001					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_free_t
>0000					flags       .byte   ?   ; block scale, text encoding, approx size
.0000					dir_ext_t
>0000					free        .fill   6   ; blocks used/free
.0000					udp_t
>0000					token       .byte   ?   ; TODO: break out into fields
.0000					tcp_t
>0000					len         .byte   ?   ; Raw packet length.

;******  Return to file: io.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
=$f4					DEF_COLOR = $f4                     ; Default color
>0031					cur_line    .word ?                 ; Address of the current line on the text screen
>0033					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0035					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
.0200					event
>0200					type        .byte   ?   ; Enum above
>0201					buf         .byte   ?   ; page id or zero
>0202					ext         .byte   ?   ; page id or zero
.0203					key
>0203					keyboard    .byte   ?   ; Keyboard ID
>0204					raw         .byte   ?   ; Raw key ID
>0205					ascii       .byte   ?   ; ASCII value
>0206					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0203					mouse
.0203					delta
>0203					x           .byte   ?
>0204					y           .byte   ?
>0205					z           .byte   ?
>0206					buttons     .byte   ?
.0203					clicks
>0203					inner       .byte   ?
>0204					middle      .byte   ?
>0205					outer       .byte   ?
.0203					joystick
>0203					joy0        .byte   ?
>0204					joy1        .byte   ?
.0203					udp
>0203					token       .byte   ?   ; TODO: break out into fields
.0203					tcp
>0203					len         .byte   ?   ; Raw packet length.
.0203					file
>0203					stream      .byte   ?
>0204					cookie      .byte   ?
.0205					data
>0205					requested   .byte   ?   ; Requested number of bytes to read
>0206					read        .byte   ?   ; Number of bytes actually read
.0205					wrote
>0205					requested   .byte   ?   ; Requested number of bytes to read
>0206					wrote       .byte   ?   ; Number of bytes actually read
.0203					directory
>0203					stream      .byte   ?
>0204					cookie      .byte   ?
.0205					volume
>0205					len         .byte   ?   ; Length of volname (in buf)
>0206					flags       .byte   ?   ; block size, text encoding
.0205					file
>0205					len         .byte   ?
>0206					flags       .byte   ?   ; block scale, text encoding, approx size
.0205					free
>0205					flags       .byte   ?   ; block scale, text encoding, approx size
>0207					curs_color  .byte ?                 ; Current color for printing
>0208					curs_x      .byte ?                 ; Current column for the text cursor
>0209					curs_y      .byte ?                 ; Current row for the text cursor
>020a					old_y       .byte ?                 ; Previous cursor row
>020b					curs_width  .byte ?                 ; Width of the screen in text columns
>020c					curs_height .byte ?                 ; Height of the screen in text columns
.4064					ioinit:
.4064	a9 00		lda #$00	            lda #<event                     ; Point to our event record
.4066	85 f0		sta $f0				    sta kernel.args.events+0
.4068	a9 02		lda #$02			    lda #>event
.406a	85 f1		sta $f1				    sta kernel.args.events+1
.406c	20 87 40	jsr $4087	            jsr initlut                     ; Initialize the CLUT
.406f	a9 f4		lda #$f4	            lda #DEF_COLOR                  ; Set the default color (will be defined with the LUT)
.4071	8d 07 02	sta $0207	            sta curs_color
.4074	a9 ff		lda #$ff	            lda #$ff                        ; Set old_y to something silly
.4076	8d 0a 02	sta $020a	            sta old_y
.4079	a9 50		lda #$50	            lda #80
.407b	8d 0b 02	sta $020b	            sta curs_width
.407e	a9 3c		lda #$3c	            lda #60
.4080	8d 0c 02	sta $020c	            sta curs_height
.4083	20 f9 40	jsr $40f9	            jsr consclr                     ; Clear the text screen and home the cursor
.4086	60		rts		            rts
.4087					initlut:
.4087	48		pha		            pha
.4088	5a		phy		            phy
.4089	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.408b	48		pha		            pha
.408c	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.408e	85 01		sta $01		            sta MMU_IO_CTRL
.4090	a0 00		ldy #$00	            ldy #0
.4092	b9 a6 40	lda $40a6,y	loop:       lda text_lut,y              ; Get a color component
.4095	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.4098	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.409b	c8		iny		            iny
.409c	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.409e	d0 f2		bne $4092	            bne loop                    ; No: copy the next one
.40a0	68		pla		            pla
.40a1	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.40a3	7a		ply		            ply
.40a4	68		pla		            pla
.40a5	60		rts		            rts
>40a6	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>40aa	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>40ae	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>40b2	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>40b6	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>40ba	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>40be	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>40c2	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>40c6	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>40ca	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>40ce	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>40d2	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>40d6	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>40da	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>40de	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>40e2	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.40e6					constat:
.40e6	a9 00		lda #$00	            lda #0
.40e8	60		rts		            rts
.40e9					conin:
.40e9	20 00 ff	jsr $ff00	            jsr kernel.NextEvent            ; Grab the event
.40ec	b0 fb		bcs $40e9	            bcs conin
.40ee	ad 00 02	lda $0200	            lda event.type                  ; Check the event type
.40f1	c9 08		cmp #$08	            cmp #kernel.event.key.PRESSED
.40f3	d0 f4		bne $40e9	            bne conin
.40f5	ad 05 02	lda $0205	            lda event.key.ascii             ; Get the ASCII code of the key pressed
.40f8	60		rts		            rts
.40f9					consclr:
.40f9	48		pha		            pha
.40fa	da		phx		            phx
.40fb	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.40fd	85 31		sta $31		            sta cur_line
.40ff	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.4101	85 32		sta $32		            sta cur_line+1
.4103	a0 00		ldy #$00	            ldy #0
.4105	20 00 42	jsr $4200	loop:       jsr clrline             ; Clear the current line
.4108	c8		iny		            iny                     ; Move to the next line
.4109	cc 0c 02	cpy $020c	            cpy curs_height
.410c	f0 10		beq $411e	            beq home                ; If we've done the last line, home the cursor
.410e	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.410f	a5 31		lda $31		            lda cur_line
.4111	6d 0b 02	adc $020b	            adc curs_width
.4114	85 31		sta $31		            sta cur_line
.4116	a5 32		lda $32		            lda cur_line+1
.4118	69 00		adc #$00	            adc #0
.411a	85 32		sta $32		            sta cur_line+1
.411c	80 e7		bra $4105	            bra loop                ; And go back to clear it too
.411e	9c 08 02	stz $0208	home:       stz curs_x              ; Set the cursor to (0, 0)
.4121	9c 09 02	stz $0209	            stz curs_y
.4124	20 2a 41	jsr $412a	            jsr cursset
.4127	fa		plx		            plx
.4128	68		pla		            pla
.4129	60		rts		            rts
.412a					cursset:
.412a	48		pha		            pha
.412b	5a		phy		            phy
.412c	ad 08 02	lda $0208	            lda curs_x              ; Where is the cursor column pointing
.412f	cd 0b 02	cmp $020b	            cmp curs_width
.4132	90 06		bcc $413a	            blt chk_row             ; If on screen, let's check the row
.4134	9c 08 02	stz $0208	            stz curs_x              ; If not on screen, move it to the left and down
.4137	ee 09 02	inc $0209	            inc curs_y
.413a					chk_row:
.413a	ad 09 02	lda $0209	            lda curs_y              ; Where is the cursor row pointing
.413d	cd 0c 02	cmp $020c	            cmp curs_height
.4140	90 0a		bcc $414c	            blt set_hw              ; If on screen, set the hardware registers
.4142	ad 0c 02	lda $020c	            lda curs_height         ; Otherwise: Move the last visible row
.4145	3a		dec a		            dec a
.4146	8d 09 02	sta $0209	            sta curs_y
.4149	20 8a 41	jsr $418a	            jsr consscroll          ; And we need to scroll the screen
.414c	ad 08 02	lda $0208	set_hw:     lda curs_x              ; Set the hardware cursor column
.414f	8d 14 d0	sta $d014	            sta VKY_CURS_X
.4152	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.4155	ad 09 02	lda $0209	            lda curs_y              ; Set the hardware cursor row
.4158	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.415b	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.415e	ad 0a 02	lda $020a	            lda old_y               ; Is old_y == curs_y
.4161	cd 09 02	cmp $0209	            cmp curs_y
.4164	f0 21		beq $4187	            beq done                ; Yes: we are done
.4166	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.4168	85 31		sta $31		            sta cur_line
.416a	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.416c	85 32		sta $32		            sta cur_line+1
.416e	ac 09 02	ldy $0209	            ldy curs_y              ; Get the desired row
.4171	8c 0a 02	sty $020a	            sty old_y               ; And mark that it will be our old row from now on
.4174	f0 11		beq $4187	            beq done                ; If it's zero, we are done
.4176	18		clc		loop:       clc                     ; Move cur_line to the next line
.4177	a5 31		lda $31		            lda cur_line
.4179	6d 0b 02	adc $020b	            adc curs_width
.417c	85 31		sta $31		            sta cur_line
.417e	a5 32		lda $32		            lda cur_line+1
.4180	69 00		adc #$00	            adc #0
.4182	85 32		sta $32		            sta cur_line+1
.4184	88		dey		            dey                     ; Decrement line counter
.4185	d0 ef		bne $4176	            bne loop                ; If not zero, keep moving down a line
.4187	7a		ply		done:       ply
.4188	68		pla		            pla
.4189	60		rts		            rts
.418a					consscroll:
.418a	48		pha		            pha
.418b	da		phx		            phx
.418c	a5 32		lda $32		            lda cur_line+1          ; Save the current line
.418e	48		pha		            pha
.418f	a5 31		lda $31		            lda cur_line
.4191	48		pha		            pha
.4192	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.4194	48		pha		            pha
.4195	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.4197	85 35		sta $35		            sta dst_ptr
.4199	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.419b	85 36		sta $36		            sta dst_ptr+1
.419d	18		clc		            clc                     ; src_ptr is the second line
.419e	a5 35		lda $35		            lda dst_ptr
.41a0	6d 0b 02	adc $020b	            adc curs_width
.41a3	85 33		sta $33		            sta src_ptr
.41a5	a5 36		lda $36		            lda dst_ptr+1
.41a7	69 00		adc #$00	            adc #0
.41a9	85 34		sta $34		            sta src_ptr+1
.41ab	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.41ad	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.41af	85 01		sta $01		            sta MMU_IO_CTRL
.41b1	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.41b3	b1 33		lda ($33),y	loop1:      lda (src_ptr),y
.41b5	91 35		sta ($35),y	            sta (dst_ptr),y
.41b7	c8		iny		            iny
.41b8	cc 0b 02	cpy $020b	            cpy curs_width
.41bb	d0 f6		bne $41b3	            bne loop1
.41bd	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.41bf	85 01		sta $01		            sta MMU_IO_CTRL
.41c1	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.41c3	b1 33		lda ($33),y	loop2:      lda (src_ptr),y
.41c5	91 35		sta ($35),y	            sta (dst_ptr),y
.41c7	c8		iny		            iny
.41c8	cc 0b 02	cpy $020b	            cpy curs_width
.41cb	d0 f6		bne $41c3	            bne loop2
.41cd	a5 33		lda $33		            lda src_ptr             ; Move dst_ptr to the next line
.41cf	85 35		sta $35		            sta dst_ptr
.41d1	a5 34		lda $34		            lda src_ptr+1
.41d3	85 36		sta $36		            sta dst_ptr+1
.41d5	18		clc		            clc                     ; Move src_ptr to the next line
.41d6	a5 33		lda $33		            lda src_ptr
.41d8	6d 0b 02	adc $020b	            adc curs_width
.41db	85 33		sta $33		            sta src_ptr
.41dd	a5 34		lda $34		            lda src_ptr+1
.41df	69 00		adc #$00	            adc #0
.41e1	85 34		sta $34		            sta src_ptr+1
.41e3	e8		inx		            inx                     ; Move src line number to the next row
.41e4	ec 0c 02	cpx $020c	            cpx curs_height         ; Have we copied the last row?
.41e7	d0 c4		bne $41ad	            bne copy_text           ; No: copy the line
.41e9	a5 35		lda $35		            lda dst_ptr             ; Clear the destination line
.41eb	85 31		sta $31		            sta cur_line
.41ed	a5 36		lda $36		            lda dst_ptr+1
.41ef	85 31		sta $31		            sta cur_line
.41f1	20 00 42	jsr $4200	            jsr clrline
.41f4	68		pla		            pla                     ; Restore the original I/O page
.41f5	85 01		sta $01		            sta MMU_IO_CTRL
.41f7	68		pla		            pla                     ; Restore the current line
.41f8	85 31		sta $31		            sta cur_line
.41fa	68		pla		            pla
.41fb	85 32		sta $32		            sta cur_line+1
.41fd	fa		plx		            plx
.41fe	68		pla		            pla
.41ff	60		rts		            rts
.4200					clrline:
.4200	48		pha		            pha
.4201	5a		phy		            phy
.4202	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.4204	48		pha		            pha
.4205	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.4207	85 01		sta $01		            sta MMU_IO_CTRL
.4209	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.420b	a9 20		lda #$20	            lda #' '
.420d	91 31		sta ($31),y	loop1:      sta (cur_line),y
.420f	c8		iny		            iny
.4210	cc 0b 02	cpy $020b	            cpy curs_width
.4213	d0 f8		bne $420d	            bne loop1
.4215	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.4217	85 01		sta $01		            sta MMU_IO_CTRL
.4219	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.421b	ad 07 02	lda $0207	            lda curs_color
.421e	91 31		sta ($31),y	loop2:      sta (cur_line),y
.4220	c8		iny		            iny
.4221	cc 0b 02	cpy $020b	            cpy curs_width
.4224	d0 f8		bne $421e	            bne loop2
.4226	68		pla		            pla                     ; Restore the original I/O page
.4227	85 01		sta $01		            sta MMU_IO_CTRL
.4229	7a		ply		            ply
.422a	68		pla		            pla
.422b	60		rts		            rts
.422c					conout:
.422c	5a		phy		            phy
.422d	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.422f	d0 0b		bne $423c	            bne not_cr
.4231	9c 08 02	stz $0208	            stz curs_x              ; Yes: Do a carriage return
.4234	ee 09 02	inc $0209	            inc curs_y
.4237	20 2a 41	jsr $412a	            jsr cursset
.423a	80 44		bra $4280	            bra done
.423c	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.423e	d0 05		bne $4245	            bne not_ff
.4240	20 f9 40	jsr $40f9	            jsr consclr             ; Yes: clear the screen
.4243	80 3b		bra $4280	            bra done
.4245	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.4247	d0 15		bne $425e	            bne not_bs
.4249	ad 08 02	lda $0208	            lda curs_x              ; Yes: move the cursor back
.424c	f0 07		beq $4255	            beq bs_leftmost         ; Is it already on column 0?
.424e	3a		dec a		            dec a                   ; No: move it back one
.424f	8d 08 02	sta $0208	            sta curs_x
.4252	20 2a 41	jsr $412a	            jsr cursset
.4255					bs_leftmost:
.4255	a9 20		lda #$20	            lda #' '                ; Clear the current character
.4257	ac 08 02	ldy $0208	            ldy curs_x              ; Get the index to the cursor
.425a	91 31		sta ($31),y	            sta (cur_line),y        ; Write the character to the screen
.425c	80 22		bra $4280	            bra done
.425e	85 2a		sta $2a		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.4260	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.4262	48		pha		            pha
.4263	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.4265	85 01		sta $01		            sta MMU_IO_CTRL
.4267	a5 2a		lda $2a		            lda tmp                 ; Get A back
.4269	ac 08 02	ldy $0208	            ldy curs_x              ; Get the index to the cursor
.426c	91 31		sta ($31),y	            sta (cur_line),y        ; Write the character to the screen
.426e	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.4270	85 01		sta $01		            sta MMU_IO_CTRL
.4272	ad 07 02	lda $0207	            lda curs_color          ; Get the current color
.4275	91 31		sta ($31),y	            sta (cur_line),y        ; And set it on the screen
.4277	68		pla		            pla                     ; Restore the I/O page
.4278	85 01		sta $01		            sta MMU_IO_CTRL
.427a	ee 08 02	inc $0208	            inc curs_x              ; Move to the next column
.427d	20 2a 41	jsr $412a	            jsr cursset
.4280	7a		ply		done:       ply
.4281	60		rts		            rts
.4282					printah:
.4282	da		phx		            phx
.4283	48		pha		            pha
.4284	4a		lsr a		            lsr a
.4285	4a		lsr a		            lsr a
.4286	4a		lsr a		            lsr a
.4287	4a		lsr a		            lsr a
.4288	29 0f		and #$0f	            and #$0f
.428a	aa		tax		            tax                     ; Convert it to an index
.428b	bd a7 42	lda $42a7,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.428e	20 2c 42	jsr $422c	            jsr conout              ; And print it
.4291	68		pla		            pla
.4292	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.4294	aa		tax		            tax                     ; Convert it to an index
.4295	bd a7 42	lda $42a7,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.4298	20 2c 42	jsr $422c	            jsr conout              ; And print it
.429b	fa		plx		            plx
.429c	60		rts		            rts
.429d					printyah:
.429d	48		pha		            pha
.429e	98		tya		            tya
.429f	20 82 42	jsr $4282	            jsr printah
.42a2	68		pla		            pla
.42a3	20 82 42	jsr $4282	            jsr printah
.42a6	60		rts		            rts
>42a7	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>42af	38 39 41 42 43 44 45 46
.42b7					prints:
.42b7	48		pha		            pha
.42b8	5a		phy		            phy
.42b9	a0 00		ldy #$00	            ldy #0
.42bb	b1 33		lda ($33),y	loop:       lda (src_ptr),y
.42bd	f0 06		beq $42c5	            beq done
.42bf	20 2c 42	jsr $422c	            jsr conout
.42c2	c8		iny		            iny
.42c3	d0 f6		bne $42bb	            bne loop
.42c5	7a		ply		done:       ply
.42c6	68		pla		            pla
.42c7	60		rts		            rts

;******  Return to file: mf_pre_65c02.asm


;******  Return to file: forth.asm

.42c8					w_exit:
>42c8	04					.byte $04
>42c9	65 78 69 74				.text 'exit'
>42cd						.fill 12
>42d9	00 00					.word 0
.42db					xt_exit:
.42db	68		pla			pla             ; ip := pop()
.42dc	85 20		sta $20			sta ip
.42de	68		pla			pla
.42df	85 21		sta $21			sta ip+1
.42e1	4c 4a 40	jmp $404a		jmp next        ; jmp next
.42e4					w_enter:
>42e4	05					.byte $05
>42e5	65 6e 74 65 72				.text 'enter'
>42ea						.fill 11
>42f5	c8 42					.word w_exit
.42f7					xt_enter:
.42f7	a5 21		lda $21			lda ip+1        ; push(ip)
.42f9	48		pha			pha
.42fa	a5 20		lda $20			lda ip
.42fc	48		pha			pha
.42fd	18		clc			clc             ; ip := wp + 3
.42fe	a5 22		lda $22			lda wp
.4300	69 03		adc #$03		adc #3
.4302	85 20		sta $20			sta ip
.4304	a5 23		lda $23			lda wp+1
.4306	69 00		adc #$00		adc #0
.4308	85 21		sta $21			sta ip+1
.430a	4c 4a 40	jmp $404a		jmp next
.430d					w_testname:
>430d	08					.byte $08
>430e	74 65 73 74 6e 61 6d 65			.text 'testname'
>4316						.fill 8
>431e	e4 42					.word w_enter
.4320					xt_testname:
.4320	b5 02		lda $02,x		lda pstack+2,x
.4322	85 28		sta $28			sta test
.4324	b5 03		lda $03,x		lda pstack+3,x
.4326	85 29		sta $29			sta test+1
.4328	e8		inx			inx
.4329	e8		inx			inx
.432a	4c 4a 40	jmp $404a		jmp next
.432d					w_assertx3d:
>432d	07					.byte $07
>432e	61 73 73 65 72 74 3d			.text 'assert='
>4335						.fill 9
>433e	0d 43					.word w_testname
.4340					xt_assertx3d:
.4340	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.4342	d5 04		cmp $04,x		cmp pstack+4,x
.4344	d0 0e		bne $4354		bne fail            ; If not, fail
.4346	b5 03		lda $03,x		lda pstack+3,x
.4348	d5 05		cmp $05,x		cmp pstack+5,x
.434a	d0 08		bne $4354		bne fail
.434c	8a		txa			txa                 ; If so, clean up the stack
.434d	18		clc			clc
.434e	69 04		adc #$04		adc #4
.4350	aa		tax			tax
.4351	4c 4a 40	jmp $404a		jmp next            ; And continue
.4354						fail:
.4354	a9 91		lda #$91		lda #<leadin        ; Print the failure message
.4356	85 33		sta $33			sta src_ptr
.4358	a9 43		lda #$43		lda #>leadin
.435a	85 34		sta $34			sta src_ptr+1
.435c	20 b7 42	jsr $42b7		jsr prints
.435f	a5 28		lda $28			lda test            ; Print the name of the test
.4361	85 33		sta $33			sta src_ptr
.4363	a5 29		lda $29			lda test+1
.4365	85 34		sta $34			sta src_ptr+1
.4367	20 b7 42	jsr $42b7		jsr prints
.436a	a9 a4		lda #$a4		lda #<actual        ; Print the "Actual" label
.436c	85 33		sta $33			sta src_ptr
.436e	a9 43		lda #$43		lda #>actual
.4370	85 34		sta $34			sta src_ptr+1
.4372	20 b7 42	jsr $42b7		jsr prints
.4375	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.4377	b5 04		lda $04,x		lda pstack+4,x
.4379	20 9d 42	jsr $429d		jsr printyah
.437c	a9 98		lda #$98		lda #<expected      ; Print the "Expected" label
.437e	85 33		sta $33			sta src_ptr
.4380	a9 43		lda #$43		lda #>expected
.4382	85 34		sta $34			sta src_ptr+1
.4384	20 b7 42	jsr $42b7		jsr prints
.4387	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.4389	b5 02		lda $02,x		lda pstack+2,x
.438b	20 9d 42	jsr $429d		jsr printyah
.438e						lock:
.438e	ea		nop			nop                 ; Lock up
.438f	80 fd		bra $438e		bra lock
.4391						leadin:
>4391	46 41 49 4c 3a 20 00			.null "FAIL: "
.4398						expected:
>4398	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>43a0	44 3a 20 00
.43a4						actual:
>43a4	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>43ac	20 00
.43ae					w_halt:
>43ae	04					.byte $04
>43af	68 61 6c 74				.text 'halt'
>43b3						.fill 12
>43bf	2d 43					.word w_assertx3d
.43c1					xt_halt:
.43c1	a9 25		lda #$25		lda #<registers         ; Print register banner
.43c3	85 33		sta $33			sta src_ptr
.43c5	a9 44		lda #$44		lda #>registers
.43c7	85 34		sta $34			sta src_ptr+1
.43c9	20 b7 42	jsr $42b7		jsr prints
.43cc	a4 21		ldy $21			ldy ip+1                ; Print the IP
.43ce	a5 20		lda $20			lda ip
.43d0	20 9d 42	jsr $429d		jsr printyah
.43d3	a9 20		lda #$20		lda #' '
.43d5	20 2c 42	jsr $422c		jsr conout
.43d8	a4 23		ldy $23			ldy wp+1                ; Print the WP
.43da	a5 22		lda $22			lda wp
.43dc	20 9d 42	jsr $429d		jsr printyah
.43df	a9 20		lda #$20		lda #' '
.43e1	20 2c 42	jsr $422c		jsr conout
.43e4	86 2e		stx $2e			stx savex               ; Print the return stack pointer
.43e6	a0 01		ldy #$01		ldy #$01
.43e8	ba		tsx			tsx
.43e9	8a		txa			txa
.43ea	20 9d 42	jsr $429d		jsr printyah
.43ed	a6 2e		ldx $2e			ldx savex
.43ef	a9 20		lda #$20		lda #' '
.43f1	20 2c 42	jsr $422c		jsr conout
.43f4	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.43f6	8a		txa			txa
.43f7	20 9d 42	jsr $429d		jsr printyah
.43fa	a9 0d		lda #$0d		lda #13
.43fc	20 2c 42	jsr $422c		jsr conout
.43ff	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.4401	b0 1f		bcs $4422		bge lock
.4403	a9 44		lda #$44		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.4405	85 34		sta $34			sta src_ptr+1
.4407	a9 40		lda #$40		lda #<stackmsg
.4409	85 33		sta $33			sta src_ptr
.440b	20 b7 42	jsr $42b7		jsr prints
.440e						loop:
.440e	e0 6e		cpx #$6e		cpx #$6e
.4410	b0 10		bcs $4422		bge lock
.4412	b4 03		ldy $03,x		ldy pstack+3,x
.4414	b5 02		lda $02,x		lda pstack+2,x
.4416	e8		inx			inx
.4417	e8		inx			inx
.4418	20 9d 42	jsr $429d		jsr printyah
.441b	a9 20		lda #$20		lda #' '
.441d	20 2c 42	jsr $422c		jsr conout
.4420	80 ec		bra $440e		bra loop
.4422						lock:
.4422						wait:
.4422	ea		nop			nop
.4423	80 fd		bra $4422		bra wait
>4425	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>442d	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>443d	7c 20 00				.null "| "
>4440	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>4448	65 72 20 53 74 61 63 6b 3a 0d 00
.4453					w_rpx40:
>4453	03					.byte $03
>4454	72 70 40				.text 'rp@'
>4457						.fill 13
>4464	ae 43					.word w_halt
.4466					xt_rpx40:
.4466	86 2e		stx $2e			stx savex           ; Save the parameter stack pointer
.4468	ba		tsx			tsx                 ; Get the return stack pointer
.4469	85 2a		sta $2a			sta tmp             ; Save it for later
.446b	a6 2e		ldx $2e			ldx savex           ; Recover the parameter stack pointer
.446d	a9 01		lda #$01		lda #$01            ; Get the high byte of the RSP
.446f	95 01		sta $01,x		sta pstack+1,x      ; Save it to the parameter stack
.4471	a5 2a		lda $2a			lda tmp             ; Get the low byte of the RSP
.4473	95 00		sta $00,x		sta pstack,x        ; Save it to the parameter stack
.4475	ca		dex			dex
.4476	ca		dex			dex
.4477	4c 4a 40	jmp $404a		jmp next
.447a					w_rpx21:
>447a	03					.byte $03
>447b	72 70 21				.text 'rp!'
>447e						.fill 13
>448b	53 44					.word w_rpx40
.448d					xt_rpx21:
.448d	86 2e		stx $2e			stx savex           ; Save the parameter stack pointer
.448f	b5 02		lda $02,x		lda pstack+2,x      ; Get the new RSP from the parameter stack
.4491	aa		tax			tax
.4492	9a		txs			txs                 ; Set the RSP
.4493	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.4495	e8		inx			inx
.4496	e8		inx			inx
.4497	4c 4a 40	jmp $404a		jmp next
.449a					w_spx40:
>449a	03					.byte $03
>449b	73 70 40				.text 'sp@'
>449e						.fill 13
>44ab	7a 44					.word w_rpx21
.44ad					xt_spx40:
.44ad	a9 00		lda #$00		lda #>pstack        ; Get the high byte of the stack address
.44af	95 01		sta $01,x		sta pstack+1,x      ; And push it to the stack
.44b1	8a		txa			txa                 ; Get the low byte of the stack address
.44b2	95 00		sta $00,x		sta pstack,x        ; And push it to the stack
.44b4	ca		dex			dex
.44b5	ca		dex			dex
.44b6	4c 4a 40	jmp $404a		jmp next
.44b9					w_spx21:
>44b9	03					.byte $03
>44ba	73 70 21				.text 'sp!'
>44bd						.fill 13
>44ca	9a 44					.word w_spx40
.44cc					xt_spx21:
.44cc	b5 02		lda $02,x		lda pstack+2,x      ; Get the address from the stack
.44ce	aa		tax			tax                 ; And set the stack pointer
.44cf	4c 4a 40	jmp $404a		jmp next
.44d2					w_emit:
>44d2	04					.byte $04
>44d3	65 6d 69 74				.text 'emit'
>44d7						.fill 12
>44e3	b9 44					.word w_spx21
.44e5					xt_emit:
.44e5	b5 02		lda $02,x		lda pstack+2,x
.44e7	da		phx			phx
.44e8	20 2c 42	jsr $422c		jsr conout
.44eb	fa		plx			plx
.44ec	e8		inx			inx
.44ed	e8		inx			inx
.44ee	4c 4a 40	jmp $404a		jmp next
.44f1					w_keyx3f:
>44f1	04					.byte $04
>44f2	6b 65 79 3f				.text 'key?'
>44f6						.fill 12
>4502	d2 44					.word w_emit
.4504					xt_keyx3f:
.4504	20 e6 40	jsr $40e6		jsr constat
.4507	29 01		and #$01		and #1
.4509	f0 06		beq $4511		beq waiting
.450b	74 00		stz $00,x		stz pstack,x
.450d	74 01		stz $01,x		stz pstack+1,x
.450f	80 06		bra $4517		bra done
.4511						waiting:
.4511	a9 ff		lda #$ff		lda #$ff
.4513	95 00		sta $00,x		sta pstack,x
.4515	95 01		sta $01,x		sta pstack+1,x
.4517						done:
.4517	ca		dex			dex
.4518	ca		dex			dex
.4519	4c 4a 40	jmp $404a		jmp next
.451c					w_key:
>451c	03					.byte $03
>451d	6b 65 79				.text 'key'
>4520						.fill 13
>452d	f1 44					.word w_keyx3f
.452f					xt_key:
.452f	da		phx			phx
.4530						wait:
.4530	20 e9 40	jsr $40e9		jsr conin
.4533	c9 00		cmp #$00		cmp #0
.4535	f0 f9		beq $4530		beq wait
.4537	fa		plx			plx
.4538	95 00		sta $00,x		sta pstack,x
.453a	74 01		stz $01,x		stz pstack+1,x
.453c	ca		dex			dex
.453d	ca		dex			dex
.453e	4c 4a 40	jmp $404a		jmp next
.4541					w_cr:
>4541	02					.byte $02
>4542	63 72					.text 'cr'
>4544						.fill 14
>4552	1c 45					.word w_key
.4554					xt_cr:
.4554	da		phx			phx
.4555	a9 0d		lda #$0d		lda #$0d
.4557	20 2c 42	jsr $422c		jsr conout
.455a	fa		plx			plx
.455b	4c 4a 40	jmp $404a		jmp next
.455e					w_0:
>455e	01					.byte $01
>455f	30					.text '0'
>4560						.fill 15
>456f	41 45					.word w_cr
.4571					xt_0:
.4571	74 01		stz $01,x		stz pstack+1,x
.4573	74 00		stz $00,x		stz pstack,x
.4575	ca		dex			dex
.4576	ca		dex			dex
.4577	4c 4a 40	jmp $404a		jmp next
.457a					w_1:
>457a	01					.byte $01
>457b	31					.text '1'
>457c						.fill 15
>458b	5e 45					.word w_0
.458d					xt_1:
.458d	74 01		stz $01,x		stz pstack+1,x
.458f	a9 01		lda #$01		lda #1
.4591	95 00		sta $00,x		sta pstack,x
.4593	ca		dex			dex
.4594	ca		dex			dex
.4595	4c 4a 40	jmp $404a		jmp next
.4598					w_2:
>4598	01					.byte $01
>4599	32					.text '2'
>459a						.fill 15
>45a9	7a 45					.word w_1
.45ab					xt_2:
.45ab	74 01		stz $01,x		stz pstack+1,x
.45ad	a9 02		lda #$02		lda #2
.45af	95 00		sta $00,x		sta pstack,x
.45b1	ca		dex			dex
.45b2	ca		dex			dex
.45b3	4c 4a 40	jmp $404a		jmp next
.45b6					w_x2d1:
>45b6	02					.byte $02
>45b7	2d 31					.text '-1'
>45b9						.fill 14
>45c7	98 45					.word w_2
.45c9					xt_x2d1:
.45c9	a9 ff		lda #$ff		lda #$ff
.45cb	95 01		sta $01,x		sta pstack+1,x
.45cd	95 00		sta $00,x		sta pstack,x
.45cf	ca		dex			dex
.45d0	ca		dex			dex
.45d1	4c 4a 40	jmp $404a		jmp next
.45d4					w_x2d2:
>45d4	02					.byte $02
>45d5	2d 32					.text '-2'
>45d7						.fill 14
>45e5	b6 45					.word w_x2d1
.45e7					xt_x2d2:
.45e7	a9 fe		lda #$fe		lda #$fe
.45e9	95 01		sta $01,x		sta pstack+1,x
.45eb	95 00		sta $00,x		sta pstack,x
.45ed	ca		dex			dex
.45ee	ca		dex			dex
.45ef	4c 4a 40	jmp $404a		jmp next
.45f2					w_x28literalx29:
>45f2	09					.byte $09
>45f3	28 6c 69 74 65 72 61 6c			.text '(literal)'
>45fb	29
>45fc						.fill 7
>4603	d4 45					.word w_x2d2
.4605					xt_x28literalx29:
.4605	a0 01		ldy #$01		ldy #1
.4607	b2 20		lda ($20)		lda (ip)
.4609	95 00		sta $00,x		sta pstack,x
.460b	b1 20		lda ($20),y		lda (ip),y
.460d	95 01		sta $01,x		sta pstack+1,x
.460f	ca		dex			dex
.4610	ca		dex			dex
.4611	18		clc			clc
.4612	a5 20		lda $20			lda ip
.4614	69 02		adc #$02		adc #2
.4616	85 20		sta $20			sta ip
.4618	a5 21		lda $21			lda ip+1
.461a	69 00		adc #$00		adc #0
.461c	85 21		sta $21			sta ip+1
.461e	4c 4a 40	jmp $404a		jmp next
.4621					w_x28dliteralx29:
>4621	0a					.byte $0A
>4622	28 64 6c 69 74 65 72 61			.text '(dliteral)'
>462a	6c 29
>462c						.fill 6
>4632	f2 45					.word w_x28literalx29
.4634					xt_x28dliteralx29:
.4634	a0 01		ldy #$01		ldy #1
.4636	b2 20		lda ($20)		lda (ip)
.4638	95 00		sta $00,x		sta pstack,x
.463a	b1 20		lda ($20),y		lda (ip),y
.463c	95 01		sta $01,x		sta pstack+1,x
.463e	c8		iny			iny
.463f	95 02		sta $02,x		sta pstack+2,x
.4641	c8		iny			iny
.4642	95 03		sta $03,x		sta pstack+3,x
.4644	ca		dex			dex
.4645	ca		dex			dex
.4646	ca		dex			dex
.4647	ca		dex			dex
.4648	18		clc			clc
.4649	a5 20		lda $20			lda ip
.464b	69 02		adc #$02		adc #2
.464d	85 20		sta $20			sta ip
.464f	a5 21		lda $21			lda ip+1
.4651	69 00		adc #$00		adc #0
.4653	85 21		sta $21			sta ip+1
.4655	4c 4a 40	jmp $404a		jmp next
.4658					w_depth:
>4658	05					.byte $05
>4659	64 65 70 74 68				.text 'depth'
>465e						.fill 11
>4669	21 46					.word w_x28dliteralx29
.466b					xt_depth:
.466b	86 2a		stx $2a			stx tmp
.466d	38		sec			sec
.466e	a9 6e		lda #$6e		lda #$6e
.4670	e5 2a		sbc $2a			sbc tmp
.4672	4a		lsr a			lsr a
.4673	74 01		stz $01,x		stz pstack+1,x
.4675	95 00		sta $00,x		sta pstack,x
.4677	ca		dex			dex
.4678	ca		dex			dex
.4679	4c 4a 40	jmp $404a		jmp next
.467c					w_unittest:
>467c	08					.byte $08
>467d	75 6e 69 74 74 65 73 74			.text 'unittest'
>4685						.fill 8
>468d	58 46					.word w_depth
.468f					xt_unittest:
.468f	4c f7 42	jmp $42f7		jmp xt_enter
>4692	05 46					.word xt_x28literalx29
>4694	9a 46					.word l_2
>4696	25 64					.word xt_x28branchx29
>4698	a6 46					.word l_3
.469a					l_2:
>469a	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>46a2	3e 20 30 00
.46a6					l_3:
>46a6	20 43					.word xt_testname
>46a8	6b 46					.word xt_depth
>46aa	71 45					.word xt_0
>46ac	40 43					.word xt_assertx3d
>46ae	05 46					.word xt_x28literalx29
>46b0	b6 46					.word l_4
>46b2	25 64					.word xt_x28branchx29
>46b4	c6 46					.word l_5
.46b6					l_4:
>46b6	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>46be	2d 2d 3e 20 30 20 31 00
.46c6					l_5:
>46c6	20 43					.word xt_testname
>46c8	71 45					.word xt_0
>46ca	6b 46					.word xt_depth
>46cc	8d 45					.word xt_1
>46ce	40 43					.word xt_assertx3d
>46d0	71 45					.word xt_0
>46d2	40 43					.word xt_assertx3d
>46d4	05 46					.word xt_x28literalx29
>46d6	dc 46					.word l_6
>46d8	25 64					.word xt_x28branchx29
>46da	f4 46					.word l_7
.46dc					l_6:
>46dc	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>46e4	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.46f4					l_7:
>46f4	20 43					.word xt_testname
>46f6	8d 45					.word xt_1
>46f8	8d 45					.word xt_1
>46fa	8d 45					.word xt_1
>46fc	6b 46					.word xt_depth
>46fe	05 46					.word xt_x28literalx29
>4700	03 00					.word 3
>4702	40 43					.word xt_assertx3d
>4704	8d 45					.word xt_1
>4706	40 43					.word xt_assertx3d
>4708	8d 45					.word xt_1
>470a	40 43					.word xt_assertx3d
>470c	8d 45					.word xt_1
>470e	40 43					.word xt_assertx3d
>4710	05 46					.word xt_x28literalx29
>4712	18 47					.word l_8
>4714	25 64					.word xt_x28branchx29
>4716	27 47					.word l_9
.4718					l_8:
>4718	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>4720	20 2d 2d 3e 20 31 00
.4727					l_9:
>4727	20 43					.word xt_testname
>4729	8d 45					.word xt_1
>472b	ab 45					.word xt_2
>472d	e4 5b					.word xt_drop
>472f	8d 45					.word xt_1
>4731	40 43					.word xt_assertx3d
>4733	05 46					.word xt_x28literalx29
>4735	3b 47					.word l_10
>4737	25 64					.word xt_x28branchx29
>4739	4e 47					.word l_11
.473b					l_10:
>473b	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>4743	6f 70 20 2d 2d 3e 20 31 20 32 00
.474e					l_11:
>474e	20 43					.word xt_testname
>4750	8d 45					.word xt_1
>4752	ab 45					.word xt_2
>4754	05 46					.word xt_x28literalx29
>4756	03 00					.word 3
>4758	e4 5b					.word xt_drop
>475a	ab 45					.word xt_2
>475c	40 43					.word xt_assertx3d
>475e	8d 45					.word xt_1
>4760	40 43					.word xt_assertx3d
>4762	05 46					.word xt_x28literalx29
>4764	6a 47					.word l_12
>4766	25 64					.word xt_x28branchx29
>4768	78 47					.word l_13
.476a					l_12:
>476a	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>4772	3e 20 31 20 31 00
.4778					l_13:
>4778	20 43					.word xt_testname
>477a	8d 45					.word xt_1
>477c	fc 5b					.word xt_dup
>477e	8d 45					.word xt_1
>4780	40 43					.word xt_assertx3d
>4782	8d 45					.word xt_1
>4784	40 43					.word xt_assertx3d
>4786	05 46					.word xt_x28literalx29
>4788	8e 47					.word l_14
>478a	25 64					.word xt_x28branchx29
>478c	a0 47					.word l_15
.478e					l_14:
>478e	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>4796	2d 2d 3e 20 31 20 32 20 32 00
.47a0					l_15:
>47a0	20 43					.word xt_testname
>47a2	8d 45					.word xt_1
>47a4	ab 45					.word xt_2
>47a6	fc 5b					.word xt_dup
>47a8	ab 45					.word xt_2
>47aa	40 43					.word xt_assertx3d
>47ac	ab 45					.word xt_2
>47ae	40 43					.word xt_assertx3d
>47b0	8d 45					.word xt_1
>47b2	40 43					.word xt_assertx3d
>47b4	05 46					.word xt_x28literalx29
>47b6	bc 47					.word l_16
>47b8	25 64					.word xt_x28branchx29
>47ba	d1 47					.word l_17
.47bc					l_16:
>47bc	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>47c4	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.47d1					l_17:
>47d1	20 43					.word xt_testname
>47d3	8d 45					.word xt_1
>47d5	ab 45					.word xt_2
>47d7	05 46					.word xt_x28literalx29
>47d9	03 00					.word 3
>47db	1c 5c					.word xt_swap
>47dd	ab 45					.word xt_2
>47df	40 43					.word xt_assertx3d
>47e1	05 46					.word xt_x28literalx29
>47e3	03 00					.word 3
>47e5	40 43					.word xt_assertx3d
>47e7	8d 45					.word xt_1
>47e9	40 43					.word xt_assertx3d
>47eb	05 46					.word xt_x28literalx29
>47ed	f3 47					.word l_18
>47ef	25 64					.word xt_x28branchx29
>47f1	0d 48					.word l_19
.47f3					l_18:
>47f3	31 20 32 20 33 20 34 20			.null "1 2 3 4 2swap --> 3 4 1 2"
>47fb	32 73 77 61 70 20 2d 2d 3e 20 33 20 34 20 31 20
>480b	32 00
.480d					l_19:
>480d	20 43					.word xt_testname
>480f	8d 45					.word xt_1
>4811	ab 45					.word xt_2
>4813	05 46					.word xt_x28literalx29
>4815	03 00					.word 3
>4817	05 46					.word xt_x28literalx29
>4819	04 00					.word 4
>481b	42 5c					.word xt_2swap
>481d	ab 45					.word xt_2
>481f	40 43					.word xt_assertx3d
>4821	8d 45					.word xt_1
>4823	40 43					.word xt_assertx3d
>4825	05 46					.word xt_x28literalx29
>4827	04 00					.word 4
>4829	40 43					.word xt_assertx3d
>482b	05 46					.word xt_x28literalx29
>482d	03 00					.word 3
>482f	40 43					.word xt_assertx3d
>4831	05 46					.word xt_x28literalx29
>4833	39 48					.word l_20
>4835	25 64					.word xt_x28branchx29
>4837	4c 48					.word l_21
.4839					l_20:
>4839	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>4841	20 2d 2d 3e 20 31 20 32 20 31 00
.484c					l_21:
>484c	20 43					.word xt_testname
>484e	8d 45					.word xt_1
>4850	ab 45					.word xt_2
>4852	80 5c					.word xt_over
>4854	8d 45					.word xt_1
>4856	40 43					.word xt_assertx3d
>4858	ab 45					.word xt_2
>485a	40 43					.word xt_assertx3d
>485c	8d 45					.word xt_1
>485e	40 43					.word xt_assertx3d
>4860	05 46					.word xt_x28literalx29
>4862	68 48					.word l_22
>4864	25 64					.word xt_x28branchx29
>4866	86 48					.word l_23
.4868					l_22:
>4868	31 20 32 20 33 20 34 20			.null "1 2 3 4 2over --> 1 2 3 4 1 2"
>4870	32 6f 76 65 72 20 2d 2d 3e 20 31 20 32 20 33 20
>4880	34 20 31 20 32 00
.4886					l_23:
>4886	20 43					.word xt_testname
>4888	8d 45					.word xt_1
>488a	ab 45					.word xt_2
>488c	05 46					.word xt_x28literalx29
>488e	03 00					.word 3
>4890	05 46					.word xt_x28literalx29
>4892	04 00					.word 4
>4894	a0 5c					.word xt_2over
>4896	ab 45					.word xt_2
>4898	40 43					.word xt_assertx3d
>489a	8d 45					.word xt_1
>489c	40 43					.word xt_assertx3d
>489e	05 46					.word xt_x28literalx29
>48a0	04 00					.word 4
>48a2	40 43					.word xt_assertx3d
>48a4	05 46					.word xt_x28literalx29
>48a6	03 00					.word 3
>48a8	40 43					.word xt_assertx3d
>48aa	ab 45					.word xt_2
>48ac	40 43					.word xt_assertx3d
>48ae	8d 45					.word xt_1
>48b0	40 43					.word xt_assertx3d
>48b2	05 46					.word xt_x28literalx29
>48b4	ba 48					.word l_24
>48b6	25 64					.word xt_x28branchx29
>48b8	da 48					.word l_25
.48ba					l_24:
>48ba	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>48c2	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>48d2	3e 20 35 35 35 35 68 00
.48da					l_25:
>48da	20 43					.word xt_testname
>48dc	05 46					.word xt_x28literalx29
>48de	55 55					.word 21845
>48e0	05 46					.word xt_x28literalx29
>48e2	04 00					.word 4
>48e4	3d 5d					.word xt_x21
>48e6	05 46					.word xt_x28literalx29
>48e8	04 00					.word 4
>48ea	69 5d					.word xt_x40
>48ec	05 46					.word xt_x28literalx29
>48ee	55 55					.word 21845
>48f0	40 43					.word xt_assertx3d
>48f2	05 46					.word xt_x28literalx29
>48f4	fa 48					.word l_26
>48f6	25 64					.word xt_x28branchx29
>48f8	1a 49					.word l_27
.48fa					l_26:
>48fa	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>4902	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>4912	3e 20 61 61 61 61 68 00
.491a					l_27:
>491a	20 43					.word xt_testname
>491c	05 46					.word xt_x28literalx29
>491e	aa aa					.word 43690
>4920	05 46					.word xt_x28literalx29
>4922	04 00					.word 4
>4924	3d 5d					.word xt_x21
>4926	05 46					.word xt_x28literalx29
>4928	04 00					.word 4
>492a	69 5d					.word xt_x40
>492c	05 46					.word xt_x28literalx29
>492e	aa aa					.word 43690
>4930	40 43					.word xt_assertx3d
>4932	05 46					.word xt_x28literalx29
>4934	3a 49					.word l_28
>4936	25 64					.word xt_x28branchx29
>4938	58 49					.word l_29
.493a					l_28:
>493a	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>4942	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>4952	3e 20 35 35 68 00
.4958					l_29:
>4958	20 43					.word xt_testname
>495a	05 46					.word xt_x28literalx29
>495c	55 00					.word 85
>495e	05 46					.word xt_x28literalx29
>4960	03 00					.word 3
>4962	91 5d					.word xt_cx21
>4964	05 46					.word xt_x28literalx29
>4966	03 00					.word 3
>4968	af 5d					.word xt_cx40
>496a	05 46					.word xt_x28literalx29
>496c	55 00					.word 85
>496e	40 43					.word xt_assertx3d
>4970	05 46					.word xt_x28literalx29
>4972	78 49					.word l_30
>4974	25 64					.word xt_x28branchx29
>4976	96 49					.word l_31
.4978					l_30:
>4978	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>4980	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>4990	3e 20 61 61 68 00
.4996					l_31:
>4996	20 43					.word xt_testname
>4998	05 46					.word xt_x28literalx29
>499a	aa 00					.word 170
>499c	05 46					.word xt_x28literalx29
>499e	03 00					.word 3
>49a0	91 5d					.word xt_cx21
>49a2	05 46					.word xt_x28literalx29
>49a4	03 00					.word 3
>49a6	af 5d					.word xt_cx40
>49a8	05 46					.word xt_x28literalx29
>49aa	aa 00					.word 170
>49ac	40 43					.word xt_assertx3d
>49ae	05 46					.word xt_x28literalx29
>49b0	b6 49					.word l_32
>49b2	25 64					.word xt_x28branchx29
>49b4	c2 49					.word l_33
.49b6					l_32:
>49b6	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>49be	3e 20 31 00
.49c2					l_33:
>49c2	20 43					.word xt_testname
>49c4	8d 45					.word xt_1
>49c6	71 45					.word xt_0
>49c8	a1 5f					.word xt_x2b
>49ca	8d 45					.word xt_1
>49cc	40 43					.word xt_assertx3d
>49ce	05 46					.word xt_x28literalx29
>49d0	d6 49					.word l_34
>49d2	25 64					.word xt_x28branchx29
>49d4	e2 49					.word l_35
.49d6					l_34:
>49d6	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>49de	3e 20 32 00
.49e2					l_35:
>49e2	20 43					.word xt_testname
>49e4	8d 45					.word xt_1
>49e6	8d 45					.word xt_1
>49e8	a1 5f					.word xt_x2b
>49ea	ab 45					.word xt_2
>49ec	40 43					.word xt_assertx3d
>49ee	05 46					.word xt_x28literalx29
>49f0	f6 49					.word l_36
>49f2	25 64					.word xt_x28branchx29
>49f4	04 4a					.word l_37
.49f6					l_36:
>49f6	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>49fe	2d 3e 20 31 33 00
.4a04					l_37:
>4a04	20 43					.word xt_testname
>4a06	05 46					.word xt_x28literalx29
>4a08	03 00					.word 3
>4a0a	05 46					.word xt_x28literalx29
>4a0c	0a 00					.word 10
>4a0e	a1 5f					.word xt_x2b
>4a10	05 46					.word xt_x28literalx29
>4a12	0d 00					.word 13
>4a14	40 43					.word xt_assertx3d
>4a16	05 46					.word xt_x28literalx29
>4a18	1e 4a					.word l_38
>4a1a	25 64					.word xt_x28branchx29
>4a1c	2e 4a					.word l_39
.4a1e					l_38:
>4a1e	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>4a26	2b 20 2d 2d 3e 20 34 00
.4a2e					l_39:
>4a2e	20 43					.word xt_testname
>4a30	05 46					.word xt_x28literalx29
>4a32	ff ff					.word 65535
>4a34	05 46					.word xt_x28literalx29
>4a36	05 00					.word 5
>4a38	a1 5f					.word xt_x2b
>4a3a	05 46					.word xt_x28literalx29
>4a3c	04 00					.word 4
>4a3e	40 43					.word xt_assertx3d
>4a40	05 46					.word xt_x28literalx29
>4a42	48 4a					.word l_40
>4a44	25 64					.word xt_x28branchx29
>4a46	73 4a					.word l_41
.4a48					l_40:
>4a48	31 32 33 34 68 20 35 36			.null "1234h 5678h 1111h 1111h d+ --> 2345h 6789h"
>4a50	37 38 68 20 31 31 31 31 68 20 31 31 31 31 68 20
>4a60	64 2b 20 2d 2d 3e 20 32 33 34 35 68 20 36 37 38
>4a70	39 68 00
.4a73					l_41:
>4a73	20 43					.word xt_testname
>4a75	05 46					.word xt_x28literalx29
>4a77	34 12					.word 4660
>4a79	05 46					.word xt_x28literalx29
>4a7b	78 56					.word 22136
>4a7d	05 46					.word xt_x28literalx29
>4a7f	11 11					.word 4369
>4a81	05 46					.word xt_x28literalx29
>4a83	11 11					.word 4369
>4a85	c6 5f					.word xt_dx2b
>4a87	05 46					.word xt_x28literalx29
>4a89	89 67					.word 26505
>4a8b	40 43					.word xt_assertx3d
>4a8d	05 46					.word xt_x28literalx29
>4a8f	45 23					.word 9029
>4a91	40 43					.word xt_assertx3d
>4a93	05 46					.word xt_x28literalx29
>4a95	9b 4a					.word l_42
>4a97	25 64					.word xt_x28branchx29
>4a99	c6 4a					.word l_43
.4a9b					l_42:
>4a9b	30 30 30 30 68 20 31 31			.null "0000h 1111h 0000h eeefh d+ --> 0001h 0000h"
>4aa3	31 31 68 20 30 30 30 30 68 20 65 65 65 66 68 20
>4ab3	64 2b 20 2d 2d 3e 20 30 30 30 31 68 20 30 30 30
>4ac3	30 68 00
.4ac6					l_43:
>4ac6	20 43					.word xt_testname
>4ac8	05 46					.word xt_x28literalx29
>4aca	00 00					.word 0
>4acc	05 46					.word xt_x28literalx29
>4ace	11 11					.word 4369
>4ad0	05 46					.word xt_x28literalx29
>4ad2	00 00					.word 0
>4ad4	05 46					.word xt_x28literalx29
>4ad6	ef ee					.word 61167
>4ad8	c6 5f					.word xt_dx2b
>4ada	05 46					.word xt_x28literalx29
>4adc	00 00					.word 0
>4ade	40 43					.word xt_assertx3d
>4ae0	05 46					.word xt_x28literalx29
>4ae2	01 00					.word 1
>4ae4	40 43					.word xt_assertx3d
>4ae6	05 46					.word xt_x28literalx29
>4ae8	ee 4a					.word l_44
>4aea	25 64					.word xt_x28branchx29
>4aec	fa 4a					.word l_45
.4aee					l_44:
>4aee	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>4af6	3e 20 31 00
.4afa					l_45:
>4afa	20 43					.word xt_testname
>4afc	05 46					.word xt_x28literalx29
>4afe	04 00					.word 4
>4b00	05 46					.word xt_x28literalx29
>4b02	03 00					.word 3
>4b04	2c 60					.word xt_x2d
>4b06	8d 45					.word xt_1
>4b08	40 43					.word xt_assertx3d
>4b0a	05 46					.word xt_x28literalx29
>4b0c	12 4b					.word l_46
>4b0e	25 64					.word xt_x28branchx29
>4b10	22 4b					.word l_47
.4b12					l_46:
>4b12	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>4b1a	3e 20 66 66 66 66 68 00
.4b22					l_47:
>4b22	20 43					.word xt_testname
>4b24	05 46					.word xt_x28literalx29
>4b26	03 00					.word 3
>4b28	05 46					.word xt_x28literalx29
>4b2a	04 00					.word 4
>4b2c	2c 60					.word xt_x2d
>4b2e	05 46					.word xt_x28literalx29
>4b30	ff ff					.word 65535
>4b32	40 43					.word xt_assertx3d
>4b34	05 46					.word xt_x28literalx29
>4b36	3c 4b					.word l_48
>4b38	25 64					.word xt_x28branchx29
>4b3a	49 4b					.word l_49
.4b3c					l_48:
>4b3c	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>4b44	2d 3e 20 35 00
.4b49					l_49:
>4b49	20 43					.word xt_testname
>4b4b	05 46					.word xt_x28literalx29
>4b4d	0a 00					.word 10
>4b4f	05 46					.word xt_x28literalx29
>4b51	05 00					.word 5
>4b53	2c 60					.word xt_x2d
>4b55	05 46					.word xt_x28literalx29
>4b57	05 00					.word 5
>4b59	40 43					.word xt_assertx3d
>4b5b	05 46					.word xt_x28literalx29
>4b5d	63 4b					.word l_50
>4b5f	25 64					.word xt_x28branchx29
>4b61	70 4b					.word l_51
.4b63					l_50:
>4b63	32 20 33 20 75 2a 20 2d			.null "2 3 u* --> 6"
>4b6b	2d 3e 20 36 00
.4b70					l_51:
>4b70	20 43					.word xt_testname
>4b72	ab 45					.word xt_2
>4b74	05 46					.word xt_x28literalx29
>4b76	03 00					.word 3
>4b78	51 60					.word xt_ux2a
>4b7a	05 46					.word xt_x28literalx29
>4b7c	06 00					.word 6
>4b7e	40 43					.word xt_assertx3d
>4b80	05 46					.word xt_x28literalx29
>4b82	88 4b					.word l_52
>4b84	25 64					.word xt_x28branchx29
>4b86	97 4b					.word l_53
.4b88					l_52:
>4b88	31 30 20 34 20 75 2a 20			.null "10 4 u* --> 40"
>4b90	2d 2d 3e 20 34 30 00
.4b97					l_53:
>4b97	20 43					.word xt_testname
>4b99	05 46					.word xt_x28literalx29
>4b9b	0a 00					.word 10
>4b9d	05 46					.word xt_x28literalx29
>4b9f	04 00					.word 4
>4ba1	51 60					.word xt_ux2a
>4ba3	05 46					.word xt_x28literalx29
>4ba5	28 00					.word 40
>4ba7	40 43					.word xt_assertx3d
>4ba9	05 46					.word xt_x28literalx29
>4bab	b1 4b					.word l_54
>4bad	25 64					.word xt_x28branchx29
>4baf	bd 4b					.word l_55
.4bb1					l_54:
>4bb1	32 20 33 20 2a 20 2d 2d			.null "2 3 * --> 6"
>4bb9	3e 20 36 00
.4bbd					l_55:
>4bbd	20 43					.word xt_testname
>4bbf	ab 45					.word xt_2
>4bc1	05 46					.word xt_x28literalx29
>4bc3	03 00					.word 3
>4bc5	89 60					.word xt_x2a
>4bc7	05 46					.word xt_x28literalx29
>4bc9	06 00					.word 6
>4bcb	40 43					.word xt_assertx3d
>4bcd	05 46					.word xt_x28literalx29
>4bcf	d5 4b					.word l_56
>4bd1	25 64					.word xt_x28branchx29
>4bd3	e3 4b					.word l_57
.4bd5					l_56:
>4bd5	31 30 20 34 20 2a 20 2d			.null "10 4 * --> 40"
>4bdd	2d 3e 20 34 30 00
.4be3					l_57:
>4be3	20 43					.word xt_testname
>4be5	05 46					.word xt_x28literalx29
>4be7	0a 00					.word 10
>4be9	05 46					.word xt_x28literalx29
>4beb	04 00					.word 4
>4bed	89 60					.word xt_x2a
>4bef	05 46					.word xt_x28literalx29
>4bf1	28 00					.word 40
>4bf3	40 43					.word xt_assertx3d
>4bf5	05 46					.word xt_x28literalx29
>4bf7	fd 4b					.word l_58
>4bf9	25 64					.word xt_x28branchx29
>4bfb	11 4c					.word l_59
.4bfd					l_58:
>4bfd	66 66 66 65 68 20 33 20			.null "fffeh 3 * --> fffah"
>4c05	2a 20 2d 2d 3e 20 66 66 66 61 68 00
.4c11					l_59:
>4c11	20 43					.word xt_testname
>4c13	05 46					.word xt_x28literalx29
>4c15	fe ff					.word 65534
>4c17	05 46					.word xt_x28literalx29
>4c19	03 00					.word 3
>4c1b	89 60					.word xt_x2a
>4c1d	05 46					.word xt_x28literalx29
>4c1f	fa ff					.word 65530
>4c21	40 43					.word xt_assertx3d
>4c23	05 46					.word xt_x28literalx29
>4c25	2b 4c					.word l_60
>4c27	25 64					.word xt_x28branchx29
>4c29	40 4c					.word l_61
.4c2b					l_60:
>4c2b	30 20 31 20 33 20 75 6d			.null "0 1 3 um/mod --> 1 0"
>4c33	2f 6d 6f 64 20 2d 2d 3e 20 31 20 30 00
.4c40					l_61:
>4c40	20 43					.word xt_testname
>4c42	71 45					.word xt_0
>4c44	8d 45					.word xt_1
>4c46	05 46					.word xt_x28literalx29
>4c48	03 00					.word 3
>4c4a	86 61					.word xt_umx2fmod
>4c4c	71 45					.word xt_0
>4c4e	40 43					.word xt_assertx3d
>4c50	8d 45					.word xt_1
>4c52	40 43					.word xt_assertx3d
>4c54	05 46					.word xt_x28literalx29
>4c56	5c 4c					.word l_62
>4c58	25 64					.word xt_x28branchx29
>4c5a	71 4c					.word l_63
.4c5c					l_62:
>4c5c	30 20 32 20 33 20 75 6d			.null "0 2 3 um/mod --> 2 0"
>4c64	2f 6d 6f 64 20 2d 2d 3e 20 32 20 30 00
.4c71					l_63:
>4c71	20 43					.word xt_testname
>4c73	71 45					.word xt_0
>4c75	ab 45					.word xt_2
>4c77	05 46					.word xt_x28literalx29
>4c79	03 00					.word 3
>4c7b	86 61					.word xt_umx2fmod
>4c7d	71 45					.word xt_0
>4c7f	40 43					.word xt_assertx3d
>4c81	ab 45					.word xt_2
>4c83	40 43					.word xt_assertx3d
>4c85	05 46					.word xt_x28literalx29
>4c87	8d 4c					.word l_64
>4c89	25 64					.word xt_x28branchx29
>4c8b	a2 4c					.word l_65
.4c8d					l_64:
>4c8d	30 20 33 20 33 20 75 6d			.null "0 3 3 um/mod --> 0 1"
>4c95	2f 6d 6f 64 20 2d 2d 3e 20 30 20 31 00
.4ca2					l_65:
>4ca2	20 43					.word xt_testname
>4ca4	71 45					.word xt_0
>4ca6	05 46					.word xt_x28literalx29
>4ca8	03 00					.word 3
>4caa	05 46					.word xt_x28literalx29
>4cac	03 00					.word 3
>4cae	86 61					.word xt_umx2fmod
>4cb0	8d 45					.word xt_1
>4cb2	40 43					.word xt_assertx3d
>4cb4	71 45					.word xt_0
>4cb6	40 43					.word xt_assertx3d
>4cb8	05 46					.word xt_x28literalx29
>4cba	c0 4c					.word l_66
>4cbc	25 64					.word xt_x28branchx29
>4cbe	d5 4c					.word l_67
.4cc0					l_66:
>4cc0	30 20 34 20 33 20 75 6d			.null "0 4 3 um/mod --> 1 1"
>4cc8	2f 6d 6f 64 20 2d 2d 3e 20 31 20 31 00
.4cd5					l_67:
>4cd5	20 43					.word xt_testname
>4cd7	71 45					.word xt_0
>4cd9	05 46					.word xt_x28literalx29
>4cdb	04 00					.word 4
>4cdd	05 46					.word xt_x28literalx29
>4cdf	03 00					.word 3
>4ce1	86 61					.word xt_umx2fmod
>4ce3	8d 45					.word xt_1
>4ce5	40 43					.word xt_assertx3d
>4ce7	8d 45					.word xt_1
>4ce9	40 43					.word xt_assertx3d
>4ceb	05 46					.word xt_x28literalx29
>4ced	f3 4c					.word l_68
>4cef	25 64					.word xt_x28branchx29
>4cf1	08 4d					.word l_69
.4cf3					l_68:
>4cf3	30 20 36 20 33 20 75 6d			.null "0 6 3 um/mod --> 0 2"
>4cfb	2f 6d 6f 64 20 2d 2d 3e 20 30 20 32 00
.4d08					l_69:
>4d08	20 43					.word xt_testname
>4d0a	71 45					.word xt_0
>4d0c	05 46					.word xt_x28literalx29
>4d0e	06 00					.word 6
>4d10	05 46					.word xt_x28literalx29
>4d12	03 00					.word 3
>4d14	86 61					.word xt_umx2fmod
>4d16	ab 45					.word xt_2
>4d18	40 43					.word xt_assertx3d
>4d1a	71 45					.word xt_0
>4d1c	40 43					.word xt_assertx3d
>4d1e	05 46					.word xt_x28literalx29
>4d20	26 4d					.word l_70
>4d22	25 64					.word xt_x28branchx29
>4d24	40 4d					.word l_71
.4d26					l_70:
>4d26	31 32 33 34 68 20 73 3e			.null "1234h s>d --> 0000h 1234h"
>4d2e	64 20 2d 2d 3e 20 30 30 30 30 68 20 31 32 33 34
>4d3e	68 00
.4d40					l_71:
>4d40	20 43					.word xt_testname
>4d42	05 46					.word xt_x28literalx29
>4d44	34 12					.word 4660
>4d46	e1 61					.word xt_sx3ed
>4d48	05 46					.word xt_x28literalx29
>4d4a	34 12					.word 4660
>4d4c	40 43					.word xt_assertx3d
>4d4e	05 46					.word xt_x28literalx29
>4d50	00 00					.word 0
>4d52	40 43					.word xt_assertx3d
>4d54	05 46					.word xt_x28literalx29
>4d56	5c 4d					.word l_72
>4d58	25 64					.word xt_x28branchx29
>4d5a	76 4d					.word l_73
.4d5c					l_72:
>4d5c	66 66 66 66 68 20 73 3e			.null "ffffh s>d --> ffffh ffffh"
>4d64	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 66
>4d74	68 00
.4d76					l_73:
>4d76	20 43					.word xt_testname
>4d78	05 46					.word xt_x28literalx29
>4d7a	ff ff					.word 65535
>4d7c	e1 61					.word xt_sx3ed
>4d7e	05 46					.word xt_x28literalx29
>4d80	ff ff					.word 65535
>4d82	40 43					.word xt_assertx3d
>4d84	05 46					.word xt_x28literalx29
>4d86	ff ff					.word 65535
>4d88	40 43					.word xt_assertx3d
>4d8a	05 46					.word xt_x28literalx29
>4d8c	92 4d					.word l_74
>4d8e	25 64					.word xt_x28branchx29
>4d90	ac 4d					.word l_75
.4d92					l_74:
>4d92	66 66 66 65 68 20 73 3e			.null "fffeh s>d --> ffffh fffeh"
>4d9a	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 65
>4daa	68 00
.4dac					l_75:
>4dac	20 43					.word xt_testname
>4dae	05 46					.word xt_x28literalx29
>4db0	fe ff					.word 65534
>4db2	e1 61					.word xt_sx3ed
>4db4	05 46					.word xt_x28literalx29
>4db6	fe ff					.word 65534
>4db8	40 43					.word xt_assertx3d
>4dba	05 46					.word xt_x28literalx29
>4dbc	ff ff					.word 65535
>4dbe	40 43					.word xt_assertx3d
>4dc0	05 46					.word xt_x28literalx29
>4dc2	c8 4d					.word l_76
>4dc4	25 64					.word xt_x28branchx29
>4dc6	d3 4d					.word l_77
.4dc8					l_76:
>4dc8	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>4dd0	20 32 00
.4dd3					l_77:
>4dd3	20 43					.word xt_testname
>4dd5	8d 45					.word xt_1
>4dd7	10 62					.word xt_1x2b
>4dd9	ab 45					.word xt_2
>4ddb	40 43					.word xt_assertx3d
>4ddd	05 46					.word xt_x28literalx29
>4ddf	e5 4d					.word l_78
>4de1	25 64					.word xt_x28branchx29
>4de3	f0 4d					.word l_79
.4de5					l_78:
>4de5	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>4ded	20 31 00
.4df0					l_79:
>4df0	20 43					.word xt_testname
>4df2	71 45					.word xt_0
>4df4	10 62					.word xt_1x2b
>4df6	8d 45					.word xt_1
>4df8	40 43					.word xt_assertx3d
>4dfa	05 46					.word xt_x28literalx29
>4dfc	02 4e					.word l_80
>4dfe	25 64					.word xt_x28branchx29
>4e00	0f 4e					.word l_81
.4e02					l_80:
>4e02	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>4e0a	3e 20 32 31 00
.4e0f					l_81:
>4e0f	20 43					.word xt_testname
>4e11	05 46					.word xt_x28literalx29
>4e13	14 00					.word 20
>4e15	10 62					.word xt_1x2b
>4e17	05 46					.word xt_x28literalx29
>4e19	15 00					.word 21
>4e1b	40 43					.word xt_assertx3d
>4e1d	05 46					.word xt_x28literalx29
>4e1f	25 4e					.word l_82
>4e21	25 64					.word xt_x28branchx29
>4e23	34 4e					.word l_83
.4e25					l_82:
>4e25	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>4e2d	20 2d 2d 3e 20 30 00
.4e34					l_83:
>4e34	20 43					.word xt_testname
>4e36	05 46					.word xt_x28literalx29
>4e38	ff ff					.word 65535
>4e3a	10 62					.word xt_1x2b
>4e3c	71 45					.word xt_0
>4e3e	40 43					.word xt_assertx3d
>4e40	05 46					.word xt_x28literalx29
>4e42	48 4e					.word l_84
>4e44	25 64					.word xt_x28branchx29
>4e46	53 4e					.word l_85
.4e48					l_84:
>4e48	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>4e50	20 33 00
.4e53					l_85:
>4e53	20 43					.word xt_testname
>4e55	8d 45					.word xt_1
>4e57	2c 62					.word xt_2x2b
>4e59	05 46					.word xt_x28literalx29
>4e5b	03 00					.word 3
>4e5d	40 43					.word xt_assertx3d
>4e5f	05 46					.word xt_x28literalx29
>4e61	67 4e					.word l_86
>4e63	25 64					.word xt_x28branchx29
>4e65	72 4e					.word l_87
.4e67					l_86:
>4e67	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>4e6f	20 32 00
.4e72					l_87:
>4e72	20 43					.word xt_testname
>4e74	71 45					.word xt_0
>4e76	2c 62					.word xt_2x2b
>4e78	ab 45					.word xt_2
>4e7a	40 43					.word xt_assertx3d
>4e7c	05 46					.word xt_x28literalx29
>4e7e	84 4e					.word l_88
>4e80	25 64					.word xt_x28branchx29
>4e82	91 4e					.word l_89
.4e84					l_88:
>4e84	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>4e8c	3e 20 32 32 00
.4e91					l_89:
>4e91	20 43					.word xt_testname
>4e93	05 46					.word xt_x28literalx29
>4e95	14 00					.word 20
>4e97	2c 62					.word xt_2x2b
>4e99	05 46					.word xt_x28literalx29
>4e9b	16 00					.word 22
>4e9d	40 43					.word xt_assertx3d
>4e9f	05 46					.word xt_x28literalx29
>4ea1	a7 4e					.word l_90
>4ea3	25 64					.word xt_x28branchx29
>4ea5	b6 4e					.word l_91
.4ea7					l_90:
>4ea7	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>4eaf	20 2d 2d 3e 20 30 00
.4eb6					l_91:
>4eb6	20 43					.word xt_testname
>4eb8	05 46					.word xt_x28literalx29
>4eba	fe ff					.word 65534
>4ebc	2c 62					.word xt_2x2b
>4ebe	71 45					.word xt_0
>4ec0	40 43					.word xt_assertx3d
>4ec2	05 46					.word xt_x28literalx29
>4ec4	ca 4e					.word l_92
>4ec6	25 64					.word xt_x28branchx29
>4ec8	d5 4e					.word l_93
.4eca					l_92:
>4eca	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>4ed2	20 30 00
.4ed5					l_93:
>4ed5	20 43					.word xt_testname
>4ed7	8d 45					.word xt_1
>4ed9	4f 62					.word xt_1x2d
>4edb	71 45					.word xt_0
>4edd	40 43					.word xt_assertx3d
>4edf	05 46					.word xt_x28literalx29
>4ee1	e7 4e					.word l_94
>4ee3	25 64					.word xt_x28branchx29
>4ee5	f6 4e					.word l_95
.4ee7					l_94:
>4ee7	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>4eef	20 66 66 66 66 68 00
.4ef6					l_95:
>4ef6	20 43					.word xt_testname
>4ef8	71 45					.word xt_0
>4efa	4f 62					.word xt_1x2d
>4efc	05 46					.word xt_x28literalx29
>4efe	ff ff					.word 65535
>4f00	40 43					.word xt_assertx3d
>4f02	05 46					.word xt_x28literalx29
>4f04	0a 4f					.word l_96
>4f06	25 64					.word xt_x28branchx29
>4f08	17 4f					.word l_97
.4f0a					l_96:
>4f0a	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>4f12	3e 20 31 39 00
.4f17					l_97:
>4f17	20 43					.word xt_testname
>4f19	05 46					.word xt_x28literalx29
>4f1b	14 00					.word 20
>4f1d	4f 62					.word xt_1x2d
>4f1f	05 46					.word xt_x28literalx29
>4f21	13 00					.word 19
>4f23	40 43					.word xt_assertx3d
>4f25	05 46					.word xt_x28literalx29
>4f27	2d 4f					.word l_98
>4f29	25 64					.word xt_x28branchx29
>4f2b	40 4f					.word l_99
.4f2d					l_98:
>4f2d	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>4f35	20 2d 2d 3e 20 66 66 66 65 68 00
.4f40					l_99:
>4f40	20 43					.word xt_testname
>4f42	05 46					.word xt_x28literalx29
>4f44	ff ff					.word 65535
>4f46	4f 62					.word xt_1x2d
>4f48	05 46					.word xt_x28literalx29
>4f4a	fe ff					.word 65534
>4f4c	40 43					.word xt_assertx3d
>4f4e	05 46					.word xt_x28literalx29
>4f50	56 4f					.word l_100
>4f52	25 64					.word xt_x28branchx29
>4f54	65 4f					.word l_101
.4f56					l_100:
>4f56	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>4f5e	20 66 66 66 66 68 00
.4f65					l_101:
>4f65	20 43					.word xt_testname
>4f67	8d 45					.word xt_1
>4f69	6d 62					.word xt_2x2d
>4f6b	05 46					.word xt_x28literalx29
>4f6d	ff ff					.word 65535
>4f6f	40 43					.word xt_assertx3d
>4f71	05 46					.word xt_x28literalx29
>4f73	79 4f					.word l_102
>4f75	25 64					.word xt_x28branchx29
>4f77	88 4f					.word l_103
.4f79					l_102:
>4f79	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>4f81	20 66 66 66 65 68 00
.4f88					l_103:
>4f88	20 43					.word xt_testname
>4f8a	71 45					.word xt_0
>4f8c	6d 62					.word xt_2x2d
>4f8e	05 46					.word xt_x28literalx29
>4f90	fe ff					.word 65534
>4f92	40 43					.word xt_assertx3d
>4f94	05 46					.word xt_x28literalx29
>4f96	9c 4f					.word l_104
>4f98	25 64					.word xt_x28branchx29
>4f9a	a9 4f					.word l_105
.4f9c					l_104:
>4f9c	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>4fa4	3e 20 31 38 00
.4fa9					l_105:
>4fa9	20 43					.word xt_testname
>4fab	05 46					.word xt_x28literalx29
>4fad	14 00					.word 20
>4faf	6d 62					.word xt_2x2d
>4fb1	05 46					.word xt_x28literalx29
>4fb3	12 00					.word 18
>4fb5	40 43					.word xt_assertx3d
>4fb7	05 46					.word xt_x28literalx29
>4fb9	bf 4f					.word l_106
>4fbb	25 64					.word xt_x28branchx29
>4fbd	d2 4f					.word l_107
.4fbf					l_106:
>4fbf	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>4fc7	20 2d 2d 3e 20 66 66 66 64 68 00
.4fd2					l_107:
>4fd2	20 43					.word xt_testname
>4fd4	05 46					.word xt_x28literalx29
>4fd6	ff ff					.word 65535
>4fd8	6d 62					.word xt_2x2d
>4fda	05 46					.word xt_x28literalx29
>4fdc	fd ff					.word 65533
>4fde	40 43					.word xt_assertx3d
>4fe0	05 46					.word xt_x28literalx29
>4fe2	e8 4f					.word l_108
>4fe4	25 64					.word xt_x28branchx29
>4fe6	02 50					.word l_109
.4fe8					l_108:
>4fe8	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>4ff0	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>5000	68 00
.5002					l_109:
>5002	20 43					.word xt_testname
>5004	05 46					.word xt_x28literalx29
>5006	00 00					.word 0
>5008	05 46					.word xt_x28literalx29
>500a	00 00					.word 0
>500c	90 62					.word xt_and
>500e	05 46					.word xt_x28literalx29
>5010	00 00					.word 0
>5012	40 43					.word xt_assertx3d
>5014	05 46					.word xt_x28literalx29
>5016	1c 50					.word l_110
>5018	25 64					.word xt_x28branchx29
>501a	36 50					.word l_111
.501c					l_110:
>501c	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>5024	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>5034	68 00
.5036					l_111:
>5036	20 43					.word xt_testname
>5038	05 46					.word xt_x28literalx29
>503a	00 00					.word 0
>503c	05 46					.word xt_x28literalx29
>503e	ff ff					.word 65535
>5040	90 62					.word xt_and
>5042	05 46					.word xt_x28literalx29
>5044	00 00					.word 0
>5046	40 43					.word xt_assertx3d
>5048	05 46					.word xt_x28literalx29
>504a	50 50					.word l_112
>504c	25 64					.word xt_x28branchx29
>504e	6a 50					.word l_113
.5050					l_112:
>5050	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>5058	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>5068	68 00
.506a					l_113:
>506a	20 43					.word xt_testname
>506c	05 46					.word xt_x28literalx29
>506e	ff ff					.word 65535
>5070	05 46					.word xt_x28literalx29
>5072	00 00					.word 0
>5074	90 62					.word xt_and
>5076	05 46					.word xt_x28literalx29
>5078	00 00					.word 0
>507a	40 43					.word xt_assertx3d
>507c	05 46					.word xt_x28literalx29
>507e	84 50					.word l_114
>5080	25 64					.word xt_x28branchx29
>5082	9e 50					.word l_115
.5084					l_114:
>5084	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>508c	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>509c	68 00
.509e					l_115:
>509e	20 43					.word xt_testname
>50a0	05 46					.word xt_x28literalx29
>50a2	ff ff					.word 65535
>50a4	05 46					.word xt_x28literalx29
>50a6	ff ff					.word 65535
>50a8	90 62					.word xt_and
>50aa	05 46					.word xt_x28literalx29
>50ac	ff ff					.word 65535
>50ae	40 43					.word xt_assertx3d
>50b0	05 46					.word xt_x28literalx29
>50b2	b8 50					.word l_116
>50b4	25 64					.word xt_x28branchx29
>50b6	d1 50					.word l_117
.50b8					l_116:
>50b8	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>50c0	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>50d0	00
.50d1					l_117:
>50d1	20 43					.word xt_testname
>50d3	05 46					.word xt_x28literalx29
>50d5	00 00					.word 0
>50d7	05 46					.word xt_x28literalx29
>50d9	00 00					.word 0
>50db	b4 62					.word xt_or
>50dd	05 46					.word xt_x28literalx29
>50df	00 00					.word 0
>50e1	40 43					.word xt_assertx3d
>50e3	05 46					.word xt_x28literalx29
>50e5	eb 50					.word l_118
>50e7	25 64					.word xt_x28branchx29
>50e9	04 51					.word l_119
.50eb					l_118:
>50eb	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>50f3	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>5103	00
.5104					l_119:
>5104	20 43					.word xt_testname
>5106	05 46					.word xt_x28literalx29
>5108	00 00					.word 0
>510a	05 46					.word xt_x28literalx29
>510c	ff ff					.word 65535
>510e	b4 62					.word xt_or
>5110	05 46					.word xt_x28literalx29
>5112	ff ff					.word 65535
>5114	40 43					.word xt_assertx3d
>5116	05 46					.word xt_x28literalx29
>5118	1e 51					.word l_120
>511a	25 64					.word xt_x28branchx29
>511c	37 51					.word l_121
.511e					l_120:
>511e	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>5126	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>5136	00
.5137					l_121:
>5137	20 43					.word xt_testname
>5139	05 46					.word xt_x28literalx29
>513b	ff ff					.word 65535
>513d	05 46					.word xt_x28literalx29
>513f	00 00					.word 0
>5141	b4 62					.word xt_or
>5143	05 46					.word xt_x28literalx29
>5145	ff ff					.word 65535
>5147	40 43					.word xt_assertx3d
>5149	05 46					.word xt_x28literalx29
>514b	51 51					.word l_122
>514d	25 64					.word xt_x28branchx29
>514f	6a 51					.word l_123
.5151					l_122:
>5151	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>5159	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>5169	00
.516a					l_123:
>516a	20 43					.word xt_testname
>516c	05 46					.word xt_x28literalx29
>516e	ff ff					.word 65535
>5170	05 46					.word xt_x28literalx29
>5172	ff ff					.word 65535
>5174	b4 62					.word xt_or
>5176	05 46					.word xt_x28literalx29
>5178	ff ff					.word 65535
>517a	40 43					.word xt_assertx3d
>517c	05 46					.word xt_x28literalx29
>517e	84 51					.word l_124
>5180	25 64					.word xt_x28branchx29
>5182	9e 51					.word l_125
.5184					l_124:
>5184	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>518c	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>519c	68 00
.519e					l_125:
>519e	20 43					.word xt_testname
>51a0	05 46					.word xt_x28literalx29
>51a2	00 00					.word 0
>51a4	05 46					.word xt_x28literalx29
>51a6	00 00					.word 0
>51a8	d8 62					.word xt_xor
>51aa	05 46					.word xt_x28literalx29
>51ac	00 00					.word 0
>51ae	40 43					.word xt_assertx3d
>51b0	05 46					.word xt_x28literalx29
>51b2	b8 51					.word l_126
>51b4	25 64					.word xt_x28branchx29
>51b6	d2 51					.word l_127
.51b8					l_126:
>51b8	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>51c0	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>51d0	68 00
.51d2					l_127:
>51d2	20 43					.word xt_testname
>51d4	05 46					.word xt_x28literalx29
>51d6	00 00					.word 0
>51d8	05 46					.word xt_x28literalx29
>51da	ff ff					.word 65535
>51dc	d8 62					.word xt_xor
>51de	05 46					.word xt_x28literalx29
>51e0	ff ff					.word 65535
>51e2	40 43					.word xt_assertx3d
>51e4	05 46					.word xt_x28literalx29
>51e6	ec 51					.word l_128
>51e8	25 64					.word xt_x28branchx29
>51ea	06 52					.word l_129
.51ec					l_128:
>51ec	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>51f4	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>5204	68 00
.5206					l_129:
>5206	20 43					.word xt_testname
>5208	05 46					.word xt_x28literalx29
>520a	ff ff					.word 65535
>520c	05 46					.word xt_x28literalx29
>520e	00 00					.word 0
>5210	d8 62					.word xt_xor
>5212	05 46					.word xt_x28literalx29
>5214	ff ff					.word 65535
>5216	40 43					.word xt_assertx3d
>5218	05 46					.word xt_x28literalx29
>521a	20 52					.word l_130
>521c	25 64					.word xt_x28branchx29
>521e	3a 52					.word l_131
.5220					l_130:
>5220	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>5228	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>5238	68 00
.523a					l_131:
>523a	20 43					.word xt_testname
>523c	05 46					.word xt_x28literalx29
>523e	ff ff					.word 65535
>5240	05 46					.word xt_x28literalx29
>5242	ff ff					.word 65535
>5244	d8 62					.word xt_xor
>5246	05 46					.word xt_x28literalx29
>5248	00 00					.word 0
>524a	40 43					.word xt_assertx3d
>524c	05 46					.word xt_x28literalx29
>524e	54 52					.word l_132
>5250	25 64					.word xt_x28branchx29
>5252	68 52					.word l_133
.5254					l_132:
>5254	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>525c	74 20 2d 2d 3e 20 66 66 66 66 68 00
.5268					l_133:
>5268	20 43					.word xt_testname
>526a	05 46					.word xt_x28literalx29
>526c	00 00					.word 0
>526e	fc 62					.word xt_not
>5270	05 46					.word xt_x28literalx29
>5272	ff ff					.word 65535
>5274	40 43					.word xt_assertx3d
>5276	05 46					.word xt_x28literalx29
>5278	7e 52					.word l_134
>527a	25 64					.word xt_x28branchx29
>527c	92 52					.word l_135
.527e					l_134:
>527e	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>5286	74 20 2d 2d 3e 20 30 30 30 30 68 00
.5292					l_135:
>5292	20 43					.word xt_testname
>5294	05 46					.word xt_x28literalx29
>5296	ff ff					.word 65535
>5298	fc 62					.word xt_not
>529a	05 46					.word xt_x28literalx29
>529c	00 00					.word 0
>529e	40 43					.word xt_assertx3d
>52a0	05 46					.word xt_x28literalx29
>52a2	a8 52					.word l_136
>52a4	25 64					.word xt_x28branchx29
>52a6	b7 52					.word l_137
.52a8					l_136:
>52a8	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>52b0	20 30 30 30 30 68 00
.52b7					l_137:
>52b7	20 43					.word xt_testname
>52b9	71 45					.word xt_0
>52bb	1e 63					.word xt_0x3c
>52bd	05 46					.word xt_x28literalx29
>52bf	00 00					.word 0
>52c1	40 43					.word xt_assertx3d
>52c3	05 46					.word xt_x28literalx29
>52c5	cb 52					.word l_138
>52c7	25 64					.word xt_x28branchx29
>52c9	da 52					.word l_139
.52cb					l_138:
>52cb	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>52d3	20 30 30 30 30 68 00
.52da					l_139:
>52da	20 43					.word xt_testname
>52dc	05 46					.word xt_x28literalx29
>52de	03 00					.word 3
>52e0	1e 63					.word xt_0x3c
>52e2	05 46					.word xt_x28literalx29
>52e4	00 00					.word 0
>52e6	40 43					.word xt_assertx3d
>52e8	05 46					.word xt_x28literalx29
>52ea	f0 52					.word l_140
>52ec	25 64					.word xt_x28branchx29
>52ee	03 53					.word l_141
.52f0					l_140:
>52f0	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>52f8	20 2d 2d 3e 20 66 66 66 66 68 00
.5303					l_141:
>5303	20 43					.word xt_testname
>5305	05 46					.word xt_x28literalx29
>5307	ff ff					.word 65535
>5309	1e 63					.word xt_0x3c
>530b	05 46					.word xt_x28literalx29
>530d	ff ff					.word 65535
>530f	40 43					.word xt_assertx3d
>5311	05 46					.word xt_x28literalx29
>5313	19 53					.word l_142
>5315	25 64					.word xt_x28branchx29
>5317	28 53					.word l_143
.5319					l_142:
>5319	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>5321	20 66 66 66 66 68 00
.5328					l_143:
>5328	20 43					.word xt_testname
>532a	71 45					.word xt_0
>532c	45 63					.word xt_0x3d
>532e	05 46					.word xt_x28literalx29
>5330	ff ff					.word 65535
>5332	40 43					.word xt_assertx3d
>5334	05 46					.word xt_x28literalx29
>5336	3c 53					.word l_144
>5338	25 64					.word xt_x28branchx29
>533a	4b 53					.word l_145
.533c					l_144:
>533c	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>5344	20 30 30 30 30 68 00
.534b					l_145:
>534b	20 43					.word xt_testname
>534d	05 46					.word xt_x28literalx29
>534f	03 00					.word 3
>5351	45 63					.word xt_0x3d
>5353	05 46					.word xt_x28literalx29
>5355	00 00					.word 0
>5357	40 43					.word xt_assertx3d
>5359	05 46					.word xt_x28literalx29
>535b	61 53					.word l_146
>535d	25 64					.word xt_x28branchx29
>535f	74 53					.word l_147
.5361					l_146:
>5361	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>5369	20 2d 2d 3e 20 30 30 30 30 68 00
.5374					l_147:
>5374	20 43					.word xt_testname
>5376	05 46					.word xt_x28literalx29
>5378	ff ff					.word 65535
>537a	45 63					.word xt_0x3d
>537c	05 46					.word xt_x28literalx29
>537e	00 00					.word 0
>5380	40 43					.word xt_assertx3d
>5382	05 46					.word xt_x28literalx29
>5384	8a 53					.word l_148
>5386	25 64					.word xt_x28branchx29
>5388	99 53					.word l_149
.538a					l_148:
>538a	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>5392	20 30 30 30 30 68 00
.5399					l_149:
>5399	20 43					.word xt_testname
>539b	71 45					.word xt_0
>539d	70 63					.word xt_0x3e
>539f	05 46					.word xt_x28literalx29
>53a1	00 00					.word 0
>53a3	40 43					.word xt_assertx3d
>53a5	05 46					.word xt_x28literalx29
>53a7	ad 53					.word l_150
>53a9	25 64					.word xt_x28branchx29
>53ab	bc 53					.word l_151
.53ad					l_150:
>53ad	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>53b5	20 66 66 66 66 68 00
.53bc					l_151:
>53bc	20 43					.word xt_testname
>53be	05 46					.word xt_x28literalx29
>53c0	03 00					.word 3
>53c2	70 63					.word xt_0x3e
>53c4	05 46					.word xt_x28literalx29
>53c6	ff ff					.word 65535
>53c8	40 43					.word xt_assertx3d
>53ca	05 46					.word xt_x28literalx29
>53cc	d2 53					.word l_152
>53ce	25 64					.word xt_x28branchx29
>53d0	e5 53					.word l_153
.53d2					l_152:
>53d2	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>53da	20 2d 2d 3e 20 30 30 30 30 68 00
.53e5					l_153:
>53e5	20 43					.word xt_testname
>53e7	05 46					.word xt_x28literalx29
>53e9	ff ff					.word 65535
>53eb	70 63					.word xt_0x3e
>53ed	05 46					.word xt_x28literalx29
>53ef	00 00					.word 0
>53f1	40 43					.word xt_assertx3d
>53f3	05 46					.word xt_x28literalx29
>53f5	fb 53					.word l_154
>53f7	25 64					.word xt_x28branchx29
>53f9	12 54					.word l_155
.53fb					l_154:
>53fb	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>5403	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.5412					l_155:
>5412	20 43					.word xt_testname
>5414	e5 63					.word xt_cells
>5416	ab 45					.word xt_2
>5418	2c 60					.word xt_x2d
>541a	45 63					.word xt_0x3d
>541c	05 46					.word xt_x28literalx29
>541e	ff ff					.word 65535
>5420	40 43					.word xt_assertx3d
>5422	05 46					.word xt_x28literalx29
>5424	2a 54					.word l_156
>5426	25 64					.word xt_x28branchx29
>5428	3c 54					.word l_157
.542a					l_156:
>542a	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>5432	75 74 65 20 2d 2d 3e 20 31 00
.543c					l_157:
>543c	20 43					.word xt_testname
>543e	05 46					.word xt_x28literalx29
>5440	8d 45					.word xt_1
>5442	45 66					.word xt_execute
>5444	8d 45					.word xt_1
>5446	40 43					.word xt_assertx3d
>5448	05 46					.word xt_x28literalx29
>544a	50 54					.word l_158
>544c	25 64					.word xt_x28branchx29
>544e	66 54					.word l_159
.5450					l_158:
>5450	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>5458	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.5466					l_159:
>5466	20 43					.word xt_testname
>5468	8d 45					.word xt_1
>546a	ab 45					.word xt_2
>546c	05 46					.word xt_x28literalx29
>546e	a1 5f					.word xt_x2b
>5470	45 66					.word xt_execute
>5472	05 46					.word xt_x28literalx29
>5474	03 00					.word 3
>5476	40 43					.word xt_assertx3d
>5478	05 46					.word xt_x28literalx29
>547a	80 54					.word l_160
>547c	25 64					.word xt_x28branchx29
>547e	99 54					.word l_161
.5480					l_160:
>5480	33 30 68 20 31 30 20 64			.null "30h 10 digit --> 0 ffffh"
>5488	69 67 69 74 20 2d 2d 3e 20 30 20 66 66 66 66 68
>5498	00
.5499					l_161:
>5499	20 43					.word xt_testname
>549b	05 46					.word xt_x28literalx29
>549d	30 00					.word 48
>549f	05 46					.word xt_x28literalx29
>54a1	0a 00					.word 10
>54a3	2e 67					.word xt_digit
>54a5	05 46					.word xt_x28literalx29
>54a7	ff ff					.word 65535
>54a9	40 43					.word xt_assertx3d
>54ab	71 45					.word xt_0
>54ad	40 43					.word xt_assertx3d
>54af	05 46					.word xt_x28literalx29
>54b1	b7 54					.word l_162
>54b3	25 64					.word xt_x28branchx29
>54b5	d0 54					.word l_163
.54b7					l_162:
>54b7	33 31 68 20 31 30 20 64			.null "31h 10 digit --> 1 ffffh"
>54bf	69 67 69 74 20 2d 2d 3e 20 31 20 66 66 66 66 68
>54cf	00
.54d0					l_163:
>54d0	20 43					.word xt_testname
>54d2	05 46					.word xt_x28literalx29
>54d4	31 00					.word 49
>54d6	05 46					.word xt_x28literalx29
>54d8	0a 00					.word 10
>54da	2e 67					.word xt_digit
>54dc	05 46					.word xt_x28literalx29
>54de	ff ff					.word 65535
>54e0	40 43					.word xt_assertx3d
>54e2	8d 45					.word xt_1
>54e4	40 43					.word xt_assertx3d
>54e6	05 46					.word xt_x28literalx29
>54e8	ee 54					.word l_164
>54ea	25 64					.word xt_x28branchx29
>54ec	07 55					.word l_165
.54ee					l_164:
>54ee	33 39 68 20 31 30 20 64			.null "39h 10 digit --> 9 ffffh"
>54f6	69 67 69 74 20 2d 2d 3e 20 39 20 66 66 66 66 68
>5506	00
.5507					l_165:
>5507	20 43					.word xt_testname
>5509	05 46					.word xt_x28literalx29
>550b	39 00					.word 57
>550d	05 46					.word xt_x28literalx29
>550f	0a 00					.word 10
>5511	2e 67					.word xt_digit
>5513	05 46					.word xt_x28literalx29
>5515	ff ff					.word 65535
>5517	40 43					.word xt_assertx3d
>5519	05 46					.word xt_x28literalx29
>551b	09 00					.word 9
>551d	40 43					.word xt_assertx3d
>551f	05 46					.word xt_x28literalx29
>5521	27 55					.word l_166
>5523	25 64					.word xt_x28branchx29
>5525	3a 55					.word l_167
.5527					l_166:
>5527	34 31 68 20 31 30 20 64			.null "41h 10 digit --> 0"
>552f	69 67 69 74 20 2d 2d 3e 20 30 00
.553a					l_167:
>553a	20 43					.word xt_testname
>553c	05 46					.word xt_x28literalx29
>553e	41 00					.word 65
>5540	05 46					.word xt_x28literalx29
>5542	0a 00					.word 10
>5544	2e 67					.word xt_digit
>5546	71 45					.word xt_0
>5548	40 43					.word xt_assertx3d
>554a	05 46					.word xt_x28literalx29
>554c	52 55					.word l_168
>554e	25 64					.word xt_x28branchx29
>5550	65 55					.word l_169
.5552					l_168:
>5552	36 31 68 20 31 30 20 64			.null "61h 10 digit --> 0"
>555a	69 67 69 74 20 2d 2d 3e 20 30 00
.5565					l_169:
>5565	20 43					.word xt_testname
>5567	05 46					.word xt_x28literalx29
>5569	61 00					.word 97
>556b	05 46					.word xt_x28literalx29
>556d	0a 00					.word 10
>556f	2e 67					.word xt_digit
>5571	71 45					.word xt_0
>5573	40 43					.word xt_assertx3d
>5575	05 46					.word xt_x28literalx29
>5577	7d 55					.word l_170
>5579	25 64					.word xt_x28branchx29
>557b	97 55					.word l_171
.557d					l_170:
>557d	34 31 68 20 31 36 20 64			.null "41h 16 digit --> 10 ffffh"
>5585	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>5595	68 00
.5597					l_171:
>5597	20 43					.word xt_testname
>5599	05 46					.word xt_x28literalx29
>559b	41 00					.word 65
>559d	05 46					.word xt_x28literalx29
>559f	10 00					.word 16
>55a1	2e 67					.word xt_digit
>55a3	05 46					.word xt_x28literalx29
>55a5	ff ff					.word 65535
>55a7	40 43					.word xt_assertx3d
>55a9	05 46					.word xt_x28literalx29
>55ab	0a 00					.word 10
>55ad	40 43					.word xt_assertx3d
>55af	05 46					.word xt_x28literalx29
>55b1	b7 55					.word l_172
>55b3	25 64					.word xt_x28branchx29
>55b5	d1 55					.word l_173
.55b7					l_172:
>55b7	36 31 68 20 31 36 20 64			.null "61h 16 digit --> 10 ffffh"
>55bf	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>55cf	68 00
.55d1					l_173:
>55d1	20 43					.word xt_testname
>55d3	05 46					.word xt_x28literalx29
>55d5	61 00					.word 97
>55d7	05 46					.word xt_x28literalx29
>55d9	10 00					.word 16
>55db	2e 67					.word xt_digit
>55dd	05 46					.word xt_x28literalx29
>55df	ff ff					.word 65535
>55e1	40 43					.word xt_assertx3d
>55e3	05 46					.word xt_x28literalx29
>55e5	0a 00					.word 10
>55e7	40 43					.word xt_assertx3d
>55e9	05 46					.word xt_x28literalx29
>55eb	f1 55					.word l_174
>55ed	25 64					.word xt_x28branchx29
>55ef	0b 56					.word l_175
.55f1					l_174:
>55f1	34 36 68 20 31 36 20 64			.null "46h 16 digit --> fh ffffh"
>55f9	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>5609	68 00
.560b					l_175:
>560b	20 43					.word xt_testname
>560d	05 46					.word xt_x28literalx29
>560f	46 00					.word 70
>5611	05 46					.word xt_x28literalx29
>5613	10 00					.word 16
>5615	2e 67					.word xt_digit
>5617	05 46					.word xt_x28literalx29
>5619	ff ff					.word 65535
>561b	40 43					.word xt_assertx3d
>561d	05 46					.word xt_x28literalx29
>561f	0f 00					.word 15
>5621	40 43					.word xt_assertx3d
>5623	05 46					.word xt_x28literalx29
>5625	2b 56					.word l_176
>5627	25 64					.word xt_x28branchx29
>5629	45 56					.word l_177
.562b					l_176:
>562b	36 36 68 20 31 36 20 64			.null "66h 16 digit --> fh ffffh"
>5633	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>5643	68 00
.5645					l_177:
>5645	20 43					.word xt_testname
>5647	05 46					.word xt_x28literalx29
>5649	66 00					.word 102
>564b	05 46					.word xt_x28literalx29
>564d	10 00					.word 16
>564f	2e 67					.word xt_digit
>5651	05 46					.word xt_x28literalx29
>5653	ff ff					.word 65535
>5655	40 43					.word xt_assertx3d
>5657	05 46					.word xt_x28literalx29
>5659	0f 00					.word 15
>565b	40 43					.word xt_assertx3d
>565d	05 46					.word xt_x28literalx29
>565f	65 56					.word l_179
>5661	25 64					.word xt_x28branchx29
>5663	72 56					.word l_180
.5665					l_179:
>5665	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>566d	2d 3e 20 30 00
.5672					l_180:
>5672	20 43					.word xt_testname
>5674	71 45					.word xt_0
>5676	90 69					.word xt_x3fdup
>5678	71 45					.word xt_0
>567a	40 43					.word xt_assertx3d
>567c	05 46					.word xt_x28literalx29
>567e	84 56					.word l_181
>5680	25 64					.word xt_x28branchx29
>5682	93 56					.word l_182
.5684					l_181:
>5684	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>568c	2d 3e 20 31 20 31 00
.5693					l_182:
>5693	20 43					.word xt_testname
>5695	8d 45					.word xt_1
>5697	90 69					.word xt_x3fdup
>5699	8d 45					.word xt_1
>569b	40 43					.word xt_assertx3d
>569d	8d 45					.word xt_1
>569f	40 43					.word xt_assertx3d
>56a1	05 46					.word xt_x28literalx29
>56a3	a9 56					.word l_183
>56a5	25 64					.word xt_x28branchx29
>56a7	bd 56					.word l_184
.56a9					l_183:
>56a9	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>56b1	74 20 2d 2d 3e 20 32 20 33 20 31 00
.56bd					l_184:
>56bd	20 43					.word xt_testname
>56bf	8d 45					.word xt_1
>56c1	ab 45					.word xt_2
>56c3	05 46					.word xt_x28literalx29
>56c5	03 00					.word 3
>56c7	b0 69					.word xt_rot
>56c9	8d 45					.word xt_1
>56cb	40 43					.word xt_assertx3d
>56cd	05 46					.word xt_x28literalx29
>56cf	03 00					.word 3
>56d1	40 43					.word xt_assertx3d
>56d3	ab 45					.word xt_2
>56d5	40 43					.word xt_assertx3d
>56d7	05 46					.word xt_x28literalx29
>56d9	df 56					.word l_185
>56db	25 64					.word xt_x28branchx29
>56dd	f4 56					.word l_186
.56df					l_185:
>56df	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>56e7	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.56f4					l_186:
>56f4	20 43					.word xt_testname
>56f6	8d 45					.word xt_1
>56f8	ab 45					.word xt_2
>56fa	d0 69					.word xt_2dup
>56fc	ab 45					.word xt_2
>56fe	40 43					.word xt_assertx3d
>5700	8d 45					.word xt_1
>5702	40 43					.word xt_assertx3d
>5704	ab 45					.word xt_2
>5706	40 43					.word xt_assertx3d
>5708	8d 45					.word xt_1
>570a	40 43					.word xt_assertx3d
>570c	05 46					.word xt_x28literalx29
>570e	14 57					.word l_187
>5710	25 64					.word xt_x28branchx29
>5712	2a 57					.word l_188
.5714					l_187:
>5714	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>571c	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.572a					l_188:
>572a	20 43					.word xt_testname
>572c	8d 45					.word xt_1
>572e	ab 45					.word xt_2
>5730	05 46					.word xt_x28literalx29
>5732	03 00					.word 3
>5734	05 46					.word xt_x28literalx29
>5736	04 00					.word 4
>5738	ec 69					.word xt_2drop
>573a	ab 45					.word xt_2
>573c	40 43					.word xt_assertx3d
>573e	8d 45					.word xt_1
>5740	40 43					.word xt_assertx3d
>5742	05 46					.word xt_x28literalx29
>5744	4a 57					.word l_189
>5746	25 64					.word xt_x28branchx29
>5748	5a 57					.word l_190
.574a					l_189:
>574a	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>5752	3e 20 66 66 66 66 68 00
.575a					l_190:
>575a	20 43					.word xt_testname
>575c	8d 45					.word xt_1
>575e	ab 45					.word xt_2
>5760	08 6a					.word xt_x3c
>5762	05 46					.word xt_x28literalx29
>5764	ff ff					.word 65535
>5766	40 43					.word xt_assertx3d
>5768	05 46					.word xt_x28literalx29
>576a	70 57					.word l_191
>576c	25 64					.word xt_x28branchx29
>576e	80 57					.word l_192
.5770					l_191:
>5770	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>5778	3e 20 30 30 30 30 68 00
.5780					l_192:
>5780	20 43					.word xt_testname
>5782	ab 45					.word xt_2
>5784	8d 45					.word xt_1
>5786	08 6a					.word xt_x3c
>5788	05 46					.word xt_x28literalx29
>578a	00 00					.word 0
>578c	40 43					.word xt_assertx3d
>578e	05 46					.word xt_x28literalx29
>5790	96 57					.word l_193
>5792	25 64					.word xt_x28branchx29
>5794	aa 57					.word l_194
.5796					l_193:
>5796	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>579e	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.57aa					l_194:
>57aa	20 43					.word xt_testname
>57ac	71 45					.word xt_0
>57ae	05 46					.word xt_x28literalx29
>57b0	ff ff					.word 65535
>57b2	08 6a					.word xt_x3c
>57b4	05 46					.word xt_x28literalx29
>57b6	00 00					.word 0
>57b8	40 43					.word xt_assertx3d
>57ba	05 46					.word xt_x28literalx29
>57bc	c2 57					.word l_195
>57be	25 64					.word xt_x28branchx29
>57c0	d6 57					.word l_196
.57c2					l_195:
>57c2	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>57ca	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.57d6					l_196:
>57d6	20 43					.word xt_testname
>57d8	05 46					.word xt_x28literalx29
>57da	ff ff					.word 65535
>57dc	71 45					.word xt_0
>57de	08 6a					.word xt_x3c
>57e0	05 46					.word xt_x28literalx29
>57e2	ff ff					.word 65535
>57e4	40 43					.word xt_assertx3d
>57e6	05 46					.word xt_x28literalx29
>57e8	ee 57					.word l_197
>57ea	25 64					.word xt_x28branchx29
>57ec	fe 57					.word l_198
.57ee					l_197:
>57ee	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>57f6	3e 20 30 30 30 30 68 00
.57fe					l_198:
>57fe	20 43					.word xt_testname
>5800	8d 45					.word xt_1
>5802	ab 45					.word xt_2
>5804	24 6a					.word xt_x3e
>5806	05 46					.word xt_x28literalx29
>5808	00 00					.word 0
>580a	40 43					.word xt_assertx3d
>580c	05 46					.word xt_x28literalx29
>580e	14 58					.word l_199
>5810	25 64					.word xt_x28branchx29
>5812	24 58					.word l_200
.5814					l_199:
>5814	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>581c	3e 20 66 66 66 66 68 00
.5824					l_200:
>5824	20 43					.word xt_testname
>5826	ab 45					.word xt_2
>5828	8d 45					.word xt_1
>582a	24 6a					.word xt_x3e
>582c	05 46					.word xt_x28literalx29
>582e	ff ff					.word 65535
>5830	40 43					.word xt_assertx3d
>5832	05 46					.word xt_x28literalx29
>5834	3a 58					.word l_201
>5836	25 64					.word xt_x28branchx29
>5838	4e 58					.word l_202
.583a					l_201:
>583a	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>5842	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.584e					l_202:
>584e	20 43					.word xt_testname
>5850	71 45					.word xt_0
>5852	05 46					.word xt_x28literalx29
>5854	ff ff					.word 65535
>5856	24 6a					.word xt_x3e
>5858	05 46					.word xt_x28literalx29
>585a	ff ff					.word 65535
>585c	40 43					.word xt_assertx3d
>585e	05 46					.word xt_x28literalx29
>5860	66 58					.word l_203
>5862	25 64					.word xt_x28branchx29
>5864	7a 58					.word l_204
.5866					l_203:
>5866	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>586e	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.587a					l_204:
>587a	20 43					.word xt_testname
>587c	05 46					.word xt_x28literalx29
>587e	ff ff					.word 65535
>5880	71 45					.word xt_0
>5882	24 6a					.word xt_x3e
>5884	05 46					.word xt_x28literalx29
>5886	00 00					.word 0
>5888	40 43					.word xt_assertx3d
>588a	05 46					.word xt_x28literalx29
>588c	92 58					.word l_205
>588e	25 64					.word xt_x28branchx29
>5890	a2 58					.word l_206
.5892					l_205:
>5892	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>589a	3e 20 30 30 30 30 68 00
.58a2					l_206:
>58a2	20 43					.word xt_testname
>58a4	8d 45					.word xt_1
>58a6	71 45					.word xt_0
>58a8	40 6a					.word xt_x3d
>58aa	05 46					.word xt_x28literalx29
>58ac	00 00					.word 0
>58ae	40 43					.word xt_assertx3d
>58b0	05 46					.word xt_x28literalx29
>58b2	b8 58					.word l_207
>58b4	25 64					.word xt_x28branchx29
>58b6	c8 58					.word l_208
.58b8					l_207:
>58b8	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>58c0	3e 20 66 66 66 66 68 00
.58c8					l_208:
>58c8	20 43					.word xt_testname
>58ca	8d 45					.word xt_1
>58cc	8d 45					.word xt_1
>58ce	40 6a					.word xt_x3d
>58d0	05 46					.word xt_x28literalx29
>58d2	ff ff					.word 65535
>58d4	40 43					.word xt_assertx3d
>58d6	05 46					.word xt_x28literalx29
>58d8	de 58					.word l_209
>58da	25 64					.word xt_x28branchx29
>58dc	f2 58					.word l_210
.58de					l_209:
>58de	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>58e6	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.58f2					l_210:
>58f2	20 43					.word xt_testname
>58f4	05 46					.word xt_x28literalx29
>58f6	ff ff					.word 65535
>58f8	71 45					.word xt_0
>58fa	40 6a					.word xt_x3d
>58fc	05 46					.word xt_x28literalx29
>58fe	00 00					.word 0
>5900	40 43					.word xt_assertx3d
>5902	05 46					.word xt_x28literalx29
>5904	0a 59					.word l_211
>5906	25 64					.word xt_x28branchx29
>5908	22 59					.word l_212
.590a					l_211:
>590a	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>5912	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.5922					l_212:
>5922	20 43					.word xt_testname
>5924	05 46					.word xt_x28literalx29
>5926	ff ff					.word 65535
>5928	05 46					.word xt_x28literalx29
>592a	ff ff					.word 65535
>592c	40 6a					.word xt_x3d
>592e	05 46					.word xt_x28literalx29
>5930	ff ff					.word 65535
>5932	40 43					.word xt_assertx3d
>5934	05 46					.word xt_x28literalx29
>5936	3c 59					.word l_213
>5938	25 64					.word xt_x28branchx29
>593a	4c 59					.word l_214
.593c					l_213:
>593c	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>5944	3e 20 66 66 66 66 68 00
.594c					l_214:
>594c	20 43					.word xt_testname
>594e	71 45					.word xt_0
>5950	71 45					.word xt_0
>5952	40 6a					.word xt_x3d
>5954	05 46					.word xt_x28literalx29
>5956	ff ff					.word 65535
>5958	40 43					.word xt_assertx3d
>595a	05 46					.word xt_x28literalx29
>595c	62 59					.word l_216
>595e	25 64					.word xt_x28branchx29
>5960	6e 59					.word l_217
.5962					l_216:
>5962	31 20 61 62 73 20 2d 2d			.null "1 abs --> 1"
>596a	3e 20 31 00
.596e					l_217:
>596e	20 43					.word xt_testname
>5970	8d 45					.word xt_1
>5972	7a 6a					.word xt_abs
>5974	8d 45					.word xt_1
>5976	40 43					.word xt_assertx3d
>5978	05 46					.word xt_x28literalx29
>597a	80 59					.word l_218
>597c	25 64					.word xt_x28branchx29
>597e	90 59					.word l_219
.5980					l_218:
>5980	66 66 66 66 68 20 61 62			.null "ffffh abs --> 1"
>5988	73 20 2d 2d 3e 20 31 00
.5990					l_219:
>5990	20 43					.word xt_testname
>5992	05 46					.word xt_x28literalx29
>5994	ff ff					.word 65535
>5996	7a 6a					.word xt_abs
>5998	8d 45					.word xt_1
>599a	40 43					.word xt_assertx3d
>599c	05 46					.word xt_x28literalx29
>599e	a4 59					.word l_220
>59a0	25 64					.word xt_x28branchx29
>59a2	b0 59					.word l_221
.59a4					l_220:
>59a4	30 20 61 62 73 20 2d 2d			.null "0 abs --> 0"
>59ac	3e 20 30 00
.59b0					l_221:
>59b0	20 43					.word xt_testname
>59b2	71 45					.word xt_0
>59b4	7a 6a					.word xt_abs
>59b6	71 45					.word xt_0
>59b8	40 43					.word xt_assertx3d
>59ba	05 46					.word xt_x28literalx29
>59bc	c2 59					.word l_223
>59be	25 64					.word xt_x28branchx29
>59c0	d3 59					.word l_224
.59c2					l_223:
>59c2	31 20 32 20 64 61 62 73			.null "1 2 dabs --> 1 2"
>59ca	20 2d 2d 3e 20 31 20 32 00
.59d3					l_224:
>59d3	20 43					.word xt_testname
>59d5	8d 45					.word xt_1
>59d7	ab 45					.word xt_2
>59d9	a0 6a					.word xt_dabs
>59db	ab 45					.word xt_2
>59dd	40 43					.word xt_assertx3d
>59df	8d 45					.word xt_1
>59e1	40 43					.word xt_assertx3d
>59e3	05 46					.word xt_x28literalx29
>59e5	eb 59					.word l_225
>59e7	25 64					.word xt_x28branchx29
>59e9	04 5a					.word l_226
.59eb					l_225:
>59eb	66 66 66 66 68 20 66 66			.null "ffffh ffffh dabs --> 0 1"
>59f3	66 66 68 20 64 61 62 73 20 2d 2d 3e 20 30 20 31
>5a03	00
.5a04					l_226:
>5a04	20 43					.word xt_testname
>5a06	05 46					.word xt_x28literalx29
>5a08	ff ff					.word 65535
>5a0a	05 46					.word xt_x28literalx29
>5a0c	ff ff					.word 65535
>5a0e	a0 6a					.word xt_dabs
>5a10	8d 45					.word xt_1
>5a12	40 43					.word xt_assertx3d
>5a14	71 45					.word xt_0
>5a16	40 43					.word xt_assertx3d
>5a18	05 46					.word xt_x28literalx29
>5a1a	20 5a					.word l_227
>5a1c	25 64					.word xt_x28branchx29
>5a1e	31 5a					.word l_228
.5a20					l_227:
>5a20	30 20 30 20 64 61 62 73			.null "0 0 dabs --> 0 0"
>5a28	20 2d 2d 3e 20 30 20 30 00
.5a31					l_228:
>5a31	20 43					.word xt_testname
>5a33	71 45					.word xt_0
>5a35	71 45					.word xt_0
>5a37	a0 6a					.word xt_dabs
>5a39	71 45					.word xt_0
>5a3b	40 43					.word xt_assertx3d
>5a3d	71 45					.word xt_0
>5a3f	40 43					.word xt_assertx3d
>5a41	05 46					.word xt_x28literalx29
>5a43	49 5a					.word l_229
>5a45	25 64					.word xt_x28branchx29
>5a47	55 5a					.word l_230
.5a49					l_229:
>5a49	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>5a51	3e 20 32 00
.5a55					l_230:
>5a55	20 43					.word xt_testname
>5a57	05 46					.word xt_x28literalx29
>5a59	06 00					.word 6
>5a5b	05 46					.word xt_x28literalx29
>5a5d	03 00					.word 3
>5a5f	e0 6a					.word xt_x2f
>5a61	ab 45					.word xt_2
>5a63	40 43					.word xt_assertx3d
>5a65	05 46					.word xt_x28literalx29
>5a67	6d 5a					.word l_231
>5a69	25 64					.word xt_x28branchx29
>5a6b	7a 5a					.word l_232
.5a6d					l_231:
>5a6d	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>5a75	2d 3e 20 33 00
.5a7a					l_232:
>5a7a	20 43					.word xt_testname
>5a7c	05 46					.word xt_x28literalx29
>5a7e	0a 00					.word 10
>5a80	05 46					.word xt_x28literalx29
>5a82	03 00					.word 3
>5a84	e0 6a					.word xt_x2f
>5a86	05 46					.word xt_x28literalx29
>5a88	03 00					.word 3
>5a8a	40 43					.word xt_assertx3d
>5a8c	05 46					.word xt_x28literalx29
>5a8e	94 5a					.word l_233
>5a90	25 64					.word xt_x28branchx29
>5a92	a2 5a					.word l_234
.5a94					l_233:
>5a94	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>5a9c	2d 2d 3e 20 30 00
.5aa2					l_234:
>5aa2	20 43					.word xt_testname
>5aa4	05 46					.word xt_x28literalx29
>5aa6	06 00					.word 6
>5aa8	05 46					.word xt_x28literalx29
>5aaa	03 00					.word 3
>5aac	fe 6a					.word xt_mod
>5aae	71 45					.word xt_0
>5ab0	40 43					.word xt_assertx3d
>5ab2	05 46					.word xt_x28literalx29
>5ab4	ba 5a					.word l_235
>5ab6	25 64					.word xt_x28branchx29
>5ab8	c9 5a					.word l_236
.5aba					l_235:
>5aba	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>5ac2	20 2d 2d 3e 20 31 00
.5ac9					l_236:
>5ac9	20 43					.word xt_testname
>5acb	05 46					.word xt_x28literalx29
>5acd	0a 00					.word 10
>5acf	05 46					.word xt_x28literalx29
>5ad1	03 00					.word 3
>5ad3	fe 6a					.word xt_mod
>5ad5	8d 45					.word xt_1
>5ad7	40 43					.word xt_assertx3d
>5ad9	05 46					.word xt_x28literalx29
>5adb	e1 5a					.word l_239
>5add	25 64					.word xt_x28branchx29
>5adf	ef 5a					.word l_240
.5ae1					l_239:
>5ae1	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>5ae9	2d 2d 3e 20 32 00
.5aef					l_240:
>5aef	20 43					.word xt_testname
>5af1	8d 45					.word xt_1
>5af3	ab 45					.word xt_2
>5af5	1a 6b					.word xt_max
>5af7	ab 45					.word xt_2
>5af9	40 43					.word xt_assertx3d
>5afb	05 46					.word xt_x28literalx29
>5afd	03 5b					.word l_241
>5aff	25 64					.word xt_x28branchx29
>5b01	11 5b					.word l_242
.5b03					l_241:
>5b03	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>5b0b	2d 2d 3e 20 33 00
.5b11					l_242:
>5b11	20 43					.word xt_testname
>5b13	05 46					.word xt_x28literalx29
>5b15	03 00					.word 3
>5b17	71 45					.word xt_0
>5b19	1a 6b					.word xt_max
>5b1b	05 46					.word xt_x28literalx29
>5b1d	03 00					.word 3
>5b1f	40 43					.word xt_assertx3d
>5b21	05 46					.word xt_x28literalx29
>5b23	29 5b					.word l_243
>5b25	25 64					.word xt_x28branchx29
>5b27	43 5b					.word l_244
.5b29					l_243:
>5b29	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>5b31	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>5b41	68 00
.5b43					l_244:
>5b43	20 43					.word xt_testname
>5b45	05 46					.word xt_x28literalx29
>5b47	fe ff					.word 65534
>5b49	05 46					.word xt_x28literalx29
>5b4b	ff ff					.word 65535
>5b4d	1a 6b					.word xt_max
>5b4f	05 46					.word xt_x28literalx29
>5b51	ff ff					.word 65535
>5b53	40 43					.word xt_assertx3d
>5b55	05 46					.word xt_x28literalx29
>5b57	5d 5b					.word l_247
>5b59	25 64					.word xt_x28branchx29
>5b5b	6b 5b					.word l_248
.5b5d					l_247:
>5b5d	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>5b65	2d 2d 3e 20 31 00
.5b6b					l_248:
>5b6b	20 43					.word xt_testname
>5b6d	8d 45					.word xt_1
>5b6f	ab 45					.word xt_2
>5b71	44 6b					.word xt_min
>5b73	8d 45					.word xt_1
>5b75	40 43					.word xt_assertx3d
>5b77	05 46					.word xt_x28literalx29
>5b79	7f 5b					.word l_249
>5b7b	25 64					.word xt_x28branchx29
>5b7d	8d 5b					.word l_250
.5b7f					l_249:
>5b7f	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>5b87	2d 2d 3e 20 30 00
.5b8d					l_250:
>5b8d	20 43					.word xt_testname
>5b8f	05 46					.word xt_x28literalx29
>5b91	03 00					.word 3
>5b93	71 45					.word xt_0
>5b95	44 6b					.word xt_min
>5b97	71 45					.word xt_0
>5b99	40 43					.word xt_assertx3d
>5b9b	05 46					.word xt_x28literalx29
>5b9d	a3 5b					.word l_251
>5b9f	25 64					.word xt_x28branchx29
>5ba1	bd 5b					.word l_252
.5ba3					l_251:
>5ba3	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>5bab	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>5bbb	68 00
.5bbd					l_252:
>5bbd	20 43					.word xt_testname
>5bbf	05 46					.word xt_x28literalx29
>5bc1	fe ff					.word 65534
>5bc3	05 46					.word xt_x28literalx29
>5bc5	ff ff					.word 65535
>5bc7	44 6b					.word xt_min
>5bc9	05 46					.word xt_x28literalx29
>5bcb	fe ff					.word 65534
>5bcd	40 43					.word xt_assertx3d
>5bcf	db 42					.word xt_exit
.5bd1					w_drop:
>5bd1	04					.byte $04
>5bd2	64 72 6f 70				.text 'drop'
>5bd6						.fill 12
>5be2	7c 46					.word w_unittest
.5be4					xt_drop:
.5be4	e8		inx			inx
.5be5	e8		inx			inx
.5be6	4c 4a 40	jmp $404a		jmp next
.5be9					w_dup:
>5be9	03					.byte $03
>5bea	64 75 70				.text 'dup'
>5bed						.fill 13
>5bfa	d1 5b					.word w_drop
.5bfc					xt_dup:
.5bfc	b5 02		lda $02,x		lda pstack+2,x
.5bfe	95 00		sta $00,x		sta pstack,x
.5c00	b5 03		lda $03,x		lda pstack+3,x
.5c02	95 01		sta $01,x		sta pstack+1,x
.5c04	ca		dex			dex
.5c05	ca		dex			dex
.5c06	4c 4a 40	jmp $404a		jmp next
.5c09					w_swap:
>5c09	04					.byte $04
>5c0a	73 77 61 70				.text 'swap'
>5c0e						.fill 12
>5c1a	e9 5b					.word w_dup
.5c1c					xt_swap:
.5c1c	b5 02		lda $02,x		lda pstack+2,x
.5c1e	b4 04		ldy $04,x		ldy pstack+4,x
.5c20	94 02		sty $02,x		sty pstack+2,x
.5c22	95 04		sta $04,x		sta pstack+4,x
.5c24	b5 03		lda $03,x		lda pstack+3,x
.5c26	b4 05		ldy $05,x		ldy pstack+5,x
.5c28	94 03		sty $03,x		sty pstack+3,x
.5c2a	95 05		sta $05,x		sta pstack+5,x
.5c2c	4c 4a 40	jmp $404a		jmp next
.5c2f					w_2swap:
>5c2f	05					.byte $05
>5c30	32 73 77 61 70				.text '2swap'
>5c35						.fill 11
>5c40	09 5c					.word w_swap
.5c42					xt_2swap:
.5c42	b5 05		lda $05,x		lda pstack+5,x
.5c44	48		pha			pha
.5c45	b5 04		lda $04,x		lda pstack+4,x
.5c47	48		pha			pha
.5c48	b5 03		lda $03,x		lda pstack+3,x
.5c4a	48		pha			pha
.5c4b	b5 02		lda $02,x		lda pstack+2,x
.5c4d	48		pha			pha
.5c4e	b5 09		lda $09,x		lda pstack+9,x
.5c50	95 05		sta $05,x		sta pstack+5,x
.5c52	b5 08		lda $08,x		lda pstack+8,x
.5c54	95 04		sta $04,x		sta pstack+4,x
.5c56	b5 07		lda $07,x		lda pstack+7,x
.5c58	95 03		sta $03,x		sta pstack+3,x
.5c5a	b5 06		lda $06,x		lda pstack+6,x
.5c5c	95 02		sta $02,x		sta pstack+2,x
.5c5e	68		pla			pla
.5c5f	95 06		sta $06,x		sta pstack+6,x
.5c61	68		pla			pla
.5c62	95 07		sta $07,x		sta pstack+7,x
.5c64	68		pla			pla
.5c65	95 08		sta $08,x		sta pstack+8,x
.5c67	68		pla			pla
.5c68	95 09		sta $09,x		sta pstack+9,x
.5c6a	4c 4a 40	jmp $404a		jmp next
.5c6d					w_over:
>5c6d	04					.byte $04
>5c6e	6f 76 65 72				.text 'over'
>5c72						.fill 12
>5c7e	2f 5c					.word w_2swap
.5c80					xt_over:
.5c80	b5 04		lda $04,x		lda pstack+4,x
.5c82	95 00		sta $00,x		sta pstack,x
.5c84	b5 05		lda $05,x		lda pstack+5,x
.5c86	95 01		sta $01,x		sta pstack+1,x
.5c88	ca		dex			dex
.5c89	ca		dex			dex
.5c8a	4c 4a 40	jmp $404a		jmp next
.5c8d					w_2over:
>5c8d	05					.byte $05
>5c8e	32 6f 76 65 72				.text '2over'
>5c93						.fill 11
>5c9e	6d 5c					.word w_over
.5ca0					xt_2over:
.5ca0	ca		dex			dex
.5ca1	ca		dex			dex
.5ca2	ca		dex			dex
.5ca3	ca		dex			dex
.5ca4	b5 0d		lda $0d,x		lda pstack+13,x
.5ca6	95 05		sta $05,x		sta pstack+5,x
.5ca8	b5 0c		lda $0c,x		lda pstack+12,x
.5caa	95 04		sta $04,x		sta pstack+4,x
.5cac	b5 0b		lda $0b,x		lda pstack+11,x
.5cae	95 03		sta $03,x		sta pstack+3,x
.5cb0	b5 0a		lda $0a,x		lda pstack+10,x
.5cb2	95 02		sta $02,x		sta pstack+2,x
.5cb4	4c 4a 40	jmp $404a		jmp next
.5cb7					w_x3er:
>5cb7	02					.byte $02
>5cb8	3e 72					.text '>r'
>5cba						.fill 14
>5cc8	8d 5c					.word w_2over
.5cca					xt_x3er:
.5cca	b5 03		lda $03,x		lda pstack+3,x
.5ccc	48		pha			pha
.5ccd	b5 02		lda $02,x		lda pstack+2,x
.5ccf	48		pha			pha
.5cd0	e8		inx			inx
.5cd1	e8		inx			inx
.5cd2	4c 4a 40	jmp $404a		jmp next
.5cd5					w_rx3e:
>5cd5	02					.byte $02
>5cd6	72 3e					.text 'r>'
>5cd8						.fill 14
>5ce6	b7 5c					.word w_x3er
.5ce8					xt_rx3e:
.5ce8	68		pla			pla
.5ce9	95 00		sta $00,x		sta pstack,x
.5ceb	68		pla			pla
.5cec	95 01		sta $01,x		sta pstack+1,x
.5cee	ca		dex			dex
.5cef	ca		dex			dex
.5cf0	4c 4a 40	jmp $404a		jmp next
.5cf3					w_r:
>5cf3	01					.byte $01
>5cf4	72					.text 'r'
>5cf5						.fill 15
>5d04	d5 5c					.word w_rx3e
.5d06					xt_r:
.5d06	68		pla			pla
.5d07	95 00		sta $00,x		sta pstack,x
.5d09	68		pla			pla
.5d0a	95 01		sta $01,x		sta pstack+1,x
.5d0c	48		pha			pha
.5d0d	b5 00		lda $00,x		lda pstack,x
.5d0f	48		pha			pha
.5d10	ca		dex			dex
.5d11	ca		dex			dex
.5d12	4c 4a 40	jmp $404a		jmp next
.5d15					w_rdrop:
>5d15	05					.byte $05
>5d16	72 64 72 6f 70				.text 'rdrop'
>5d1b						.fill 11
>5d26	f3 5c					.word w_r
.5d28					xt_rdrop:
.5d28	68		pla			pla
.5d29	68		pla			pla
.5d2a					w_x21:
>5d2a	01					.byte $01
>5d2b	21					.text '!'
>5d2c						.fill 15
>5d3b	15 5d					.word w_rdrop
.5d3d					xt_x21:
.5d3d	b5 02		lda $02,x		lda pstack+2,x
.5d3f	85 2a		sta $2a			sta tmp
.5d41	b5 03		lda $03,x		lda pstack+3,x
.5d43	85 2b		sta $2b			sta tmp+1
.5d45	a0 01		ldy #$01		ldy #1
.5d47	b5 04		lda $04,x		lda pstack+4,x
.5d49	92 2a		sta ($2a)		sta (tmp)
.5d4b	b5 05		lda $05,x		lda pstack+5,x
.5d4d	91 2a		sta ($2a),y		sta (tmp),y
.5d4f	e8		inx			inx
.5d50	e8		inx			inx
.5d51	e8		inx			inx
.5d52	e8		inx			inx
.5d53	4c 4a 40	jmp $404a		jmp next
.5d56					w_x40:
>5d56	01					.byte $01
>5d57	40					.text '@'
>5d58						.fill 15
>5d67	2a 5d					.word w_x21
.5d69					xt_x40:
.5d69	b5 02		lda $02,x		lda pstack+2,x
.5d6b	85 2a		sta $2a			sta tmp
.5d6d	b5 03		lda $03,x		lda pstack+3,x
.5d6f	85 2b		sta $2b			sta tmp+1
.5d71	a0 01		ldy #$01		ldy #1
.5d73	b2 2a		lda ($2a)		lda (tmp)
.5d75	95 02		sta $02,x		sta pstack+2,x
.5d77	b1 2a		lda ($2a),y		lda (tmp),y
.5d79	95 03		sta $03,x		sta pstack+3,x
.5d7b	4c 4a 40	jmp $404a		jmp next
.5d7e					w_cx21:
>5d7e	02					.byte $02
>5d7f	63 21					.text 'c!'
>5d81						.fill 14
>5d8f	56 5d					.word w_x40
.5d91					xt_cx21:
.5d91	b5 04		lda $04,x		lda pstack+4,x
.5d93	81 02		sta ($02,x)		sta (pstack+2,x)
.5d95	e8		inx			inx
.5d96	e8		inx			inx
.5d97	e8		inx			inx
.5d98	e8		inx			inx
.5d99	4c 4a 40	jmp $404a		jmp next
.5d9c					w_cx40:
>5d9c	02					.byte $02
>5d9d	63 40					.text 'c@'
>5d9f						.fill 14
>5dad	7e 5d					.word w_cx21
.5daf					xt_cx40:
.5daf	a1 02		lda ($02,x)		lda (pstack+2,x)
.5db1	95 02		sta $02,x		sta pstack+2,x
.5db3	74 03		stz $03,x		stz pstack+3,x
.5db5	4c 4a 40	jmp $404a		jmp next
.5db8					w_fill:
>5db8	04					.byte $04
>5db9	66 69 6c 6c				.text 'fill'
>5dbd						.fill 12
>5dc9	9c 5d					.word w_cx40
.5dcb					xt_fill:
.5dcb						loop:
.5dcb	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.5dcd	d0 04		bne $5dd3		bne do_write
.5dcf	b5 04		lda $04,x		lda pstack+4,x
.5dd1	f0 19		beq $5dec		beq done                ; Yes: we're done...
.5dd3						do_write:
.5dd3	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.5dd5	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.5dd7	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.5dd9	d0 02		bne $5ddd		bne deccount
.5ddb	f6 06		inc $06,x		inc pstack+6,x
.5ddd						deccount:
.5ddd	38		sec			sec                     ; Decrement the count
.5dde	b5 03		lda $03,x		lda pstack+3,x
.5de0	e9 01		sbc #$01		sbc #1
.5de2	95 03		sta $03,x		sta pstack+3,x
.5de4	b5 04		lda $04,x		lda pstack+4,x
.5de6	e9 00		sbc #$00		sbc #0
.5de8	95 04		sta $04,x		sta pstack+4,x
.5dea	80 df		bra $5dcb		bra loop                ; And check again
.5dec						done:
.5dec	8a		txa			txa                     ; Clean up the parameter stack
.5ded	69 06		adc #$06		adc #6
.5def	aa		tax			tax
.5df0	4c 4a 40	jmp $404a		jmp next
.5df3					w_x2bx21:
>5df3	02					.byte $02
>5df4	2b 21					.text '+!'
>5df6						.fill 14
>5e04	b8 5d					.word w_fill
.5e06					xt_x2bx21:
.5e06	b5 03		lda $03,x		lda pstack+3,x
.5e08	85 2b		sta $2b			sta tmp+1
.5e0a	b5 02		lda $02,x		lda pstack+2,x
.5e0c	85 2a		sta $2a			sta tmp
.5e0e	18		clc			clc
.5e0f	a0 01		ldy #$01		ldy #1
.5e11	b2 2a		lda ($2a)		lda (tmp)
.5e13	75 04		adc $04,x		adc pstack+4,x
.5e15	92 2a		sta ($2a)		sta (tmp)
.5e17	b1 2a		lda ($2a),y		lda (tmp),y
.5e19	75 05		adc $05,x		adc pstack+5,x
.5e1b	91 2a		sta ($2a),y		sta (tmp),y
.5e1d						done:
.5e1d	e8		inx			inx                     ; Clean up the stack
.5e1e	e8		inx			inx
.5e1f	e8		inx			inx
.5e20	e8		inx			inx
.5e21	4c 4a 40	jmp $404a		jmp next
.5e24					w_enclose:
>5e24	07					.byte $07
>5e25	65 6e 63 6c 6f 73 65			.text 'enclose'
>5e2c						.fill 9
>5e35	f3 5d					.word w_x2bx21
.5e37					xt_enclose:
.5e37	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.5e39	85 34		sta $34			sta src_ptr+1
.5e3b	b5 04		lda $04,x		lda pstack+4,x
.5e3d	85 33		sta $33			sta src_ptr
.5e3f	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.5e41	85 2a		sta $2a			sta tmp
.5e43	8a		txa			txa
.5e44	38		sec			sec
.5e45	e9 04		sbc #$04		sbc #4
.5e47	aa		tax			tax
.5e48	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.5e4a	74 06		stz $06,x		stz pstack+6,x
.5e4c	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.5e4e	74 04		stz $04,x		stz pstack+4,x
.5e50	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.5e52	74 02		stz $02,x		stz pstack+2,x
.5e54	a0 00		ldy #$00		ldy #0
.5e56						loop1:
.5e56	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character
.5e58	d0 03		bne $5e5d		bne chk_delim1          ; NUL? No:; check it against the delimiter
.5e5a						none:
.5e5a	4c 4a 40	jmp $404a		jmp next                ; Yes: we want to return 0s
.5e5d						chk_delim1:
.5e5d	c5 2a		cmp $2a			cmp tmp                 ; Is it the delimiter?
.5e5f	f0 13		beq $5e74		beq skip2               ; Yes: skip the character
.5e61	a5 2a		lda $2a			lda tmp                 ; Check the delimiter
.5e63	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.5e65	d0 0b		bne $5e72		bne found               ; No: ok, we've found the first character;
.5e67	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character back
.5e69	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.5e6b	d0 05		bne $5e72		bne found               ; No: we found the first character
.5e6d	c8		iny			iny                     ; Move to the next character
.5e6e	f0 ea		beq $5e5a		beq none                ; If we've rolled over, we found nothing
.5e70	80 e4		bra $5e56		bra loop1               ; Otherwise: check the next character
.5e72						found:
.5e72	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.5e74						skip2:
.5e74	c8		iny			iny                     ; Go to the next character
.5e75	f0 1c		beq $5e93		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.5e77						loop2:
.5e77	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character
.5e79	f0 18		beq $5e93		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.5e7b	c5 2a		cmp $2a			cmp tmp                 ; Check it against the delimiter
.5e7d	f0 0c		beq $5e8b		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.5e7f	a5 2a		lda $2a			lda tmp                 ; Get the delimiter
.5e81	c9 20		cmp #$20		cmp #' '                ; Is it space?
.5e83	d0 ef		bne $5e74		bne skip2               ; No: go to the next character
.5e85	b1 33		lda ($33),y		lda (src_ptr),y         ; Get the character again
.5e87	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.5e89	d0 e9		bne $5e74		bne skip2               ; No: go to the next character
.5e8b						found_delim:
.5e8b	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.5e8d	c8		iny			iny
.5e8e	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.5e90	4c 4a 40	jmp $404a		jmp next                ; And we're done
.5e93						found_nul:
.5e93	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.5e95	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.5e97	4c 4a 40	jmp $404a		jmp next                ; And we're done
.5e9a					w_cmove:
>5e9a	05					.byte $05
>5e9b	63 6d 6f 76 65				.text 'cmove'
>5ea0						.fill 11
>5eab	24 5e					.word w_enclose
.5ead					xt_cmove:
.5ead	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.5eaf	85 2b		sta $2b			sta tmp+1
.5eb1	b5 02		lda $02,x		lda pstack+2,x
.5eb3	85 2a		sta $2a			sta tmp
.5eb5	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.5eb7	85 36		sta $36			sta dst_ptr+1
.5eb9	b5 04		lda $04,x		lda pstack+4,x
.5ebb	85 35		sta $35			sta dst_ptr
.5ebd	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.5ebf	85 34		sta $34			sta src_ptr+1
.5ec1	b5 06		lda $06,x		lda pstack+6,x
.5ec3	85 33		sta $33			sta src_ptr
.5ec5	8a		txa			txa                     ; Clean up the stack
.5ec6	18		clc			clc
.5ec7	69 06		adc #$06		adc #6
.5ec9	85 2e		sta $2e			sta savex               ; And save it for later restoration
.5ecb	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.5ecd	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.5ecf						loop:
.5ecf	e4 2b		cpx $2b			cpx tmp+1               ; is tmp == X:Y?
.5ed1	d0 04		bne $5ed7		bne copy
.5ed3	c4 2a		cpy $2a			cpy tmp
.5ed5	f0 0e		beq $5ee5		beq done                ; Yes: we're done
.5ed7						copy:
.5ed7	b1 33		lda ($33),y		lda (src_ptr),y         ; Copy the byte
.5ed9	91 35		sta ($35),y		sta (dst_ptr),y
.5edb	c8		iny			iny                     ; Move to the next byte
.5edc	d0 f1		bne $5ecf		bne loop                ; Repeat for 256 bytes
.5ede	e8		inx			inx                     ; Move to the next block of 256
.5edf	e6 34		inc $34			inc src_ptr+1
.5ee1	e6 36		inc $36			inc dst_ptr+1
.5ee3	80 ea		bra $5ecf		bra loop                ; And continue the loop
.5ee5						done:
.5ee5	a6 2e		ldx $2e			ldx savex
.5ee7	4c 4a 40	jmp $404a		jmp next
.5eea					w_move:
>5eea	04					.byte $04
>5eeb	6d 6f 76 65				.text 'move'
>5eef						.fill 12
>5efb	9a 5e					.word w_cmove
.5efd					xt_move:
.5efd	38		sec			sec                     ; Compare addr1 and addr2
.5efe	b5 06		lda $06,x		lda pstack+6,x
.5f00	f5 04		sbc $04,x		sbc pstack+4,x
.5f02	85 2a		sta $2a			sta tmp
.5f04	b5 07		lda $07,x		lda pstack+7,x
.5f06	f5 05		sbc $05,x		sbc pstack+5,x
.5f08	85 2b		sta $2b			sta tmp+1
.5f0a	30 24		bmi $5f30		bmi a1less
.5f0c	f0 72		beq $5f80		beq chklo
.5f0e						a1greater:
.5f0e	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.5f10	d0 50		bne $5f62		bne docopy1
.5f12	b5 03		lda $03,x		lda pstack+3,x
.5f14	f0 72		beq $5f88		beq done                ; Yes: we're done;
.5f16	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.5f18	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.5f1a	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.5f1c	d0 02		bne $5f20		bne inc2
.5f1e	f6 07		inc $07,x		inc pstack+7,x
.5f20						inc2:
.5f20	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.5f22	d0 02		bne $5f26		bne dec_count
.5f24	f6 03		inc $03,x		inc pstack+3,x
.5f26						dec_count:
.5f26	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.5f28	d0 02		bne $5f2c		bne l1
.5f2a	d6 03		dec $03,x		dec pstack+3,x
.5f2c						l1:
.5f2c	d6 02		dec $02,x		dec pstack+2,x
.5f2e	80 de		bra $5f0e		bra a1greater
.5f30						a1less:
.5f30	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.5f32	d0 02		bne $5f36		bne l2
.5f34	d6 05		dec $05,x		dec pstack+5,x
.5f36						l2:
.5f36	d6 04		dec $04,x		dec pstack+4,x
.5f38	18		clc			clc                     ; addr2 := addr2 + u
.5f39	b5 04		lda $04,x		lda pstack+4,x
.5f3b	75 02		adc $02,x		adc pstack+2,x
.5f3d	95 04		sta $04,x		sta pstack+4,x
.5f3f	b5 05		lda $05,x		lda pstack+5,x
.5f41	75 03		adc $03,x		adc pstack+3,x
.5f43	95 05		sta $05,x		sta pstack+5,x
.5f45	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.5f47	d0 02		bne $5f4b		bne l3
.5f49	d6 07		dec $07,x		dec pstack+7,x
.5f4b						l3:
.5f4b	d6 06		dec $06,x		dec pstack+6,x
.5f4d	18		clc			clc                     ; addr1 := addr1 + u
.5f4e	b5 06		lda $06,x		lda pstack+6,x
.5f50	75 02		adc $02,x		adc pstack+2,x
.5f52	95 06		sta $06,x		sta pstack+6,x
.5f54	b5 07		lda $07,x		lda pstack+7,x
.5f56	75 03		adc $03,x		adc pstack+3,x
.5f58	95 07		sta $07,x		sta pstack+7,x
.5f5a						loop2:
.5f5a	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.5f5c	d0 04		bne $5f62		bne docopy1
.5f5e	b5 03		lda $03,x		lda pstack+3,x
.5f60	f0 26		beq $5f88		beq done                ; Yes: we're done;
.5f62						docopy1:
.5f62	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.5f64	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.5f66	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.5f68	d0 02		bne $5f6c		bne l4
.5f6a	d6 07		dec $07,x		dec pstack+7,x
.5f6c						l4:
.5f6c	d6 06		dec $06,x		dec pstack+6,x
.5f6e	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.5f70	d0 02		bne $5f74		bne l5
.5f72	d6 05		dec $05,x		dec pstack+5,x
.5f74						l5:
.5f74	d6 04		dec $04,x		dec pstack+4,x
.5f76	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.5f78	d0 02		bne $5f7c		bne l6
.5f7a	d6 03		dec $03,x		dec pstack+3,x
.5f7c						l6:
.5f7c	d6 02		dec $02,x		dec pstack+2,x
.5f7e	80 da		bra $5f5a		bra loop2
.5f80						chklo:
.5f80	a5 2a		lda $2a			lda tmp                 ; High bytes are equal: check the low byte
.5f82	30 ac		bmi $5f30		bmi a1less
.5f84	f0 02		beq $5f88		beq done                ; If equal, we don't need to move the data
.5f86	80 86		bra $5f0e		bra a1greater
.5f88						done:
.5f88	8a		txa			txa
.5f89	18		clc			clc
.5f8a	69 06		adc #$06		adc #6
.5f8c	aa		tax			tax
.5f8d	60		rts			rts
.5f8e					w_x2b:
>5f8e	01					.byte $01
>5f8f	2b					.text '+'
>5f90						.fill 15
>5f9f	ea 5e					.word w_move
.5fa1					xt_x2b:
.5fa1	18		clc			clc
.5fa2	b5 04		lda $04,x		lda pstack+4,x
.5fa4	75 02		adc $02,x		adc pstack+2,x
.5fa6	95 04		sta $04,x		sta pstack+4,x
.5fa8	b5 05		lda $05,x		lda pstack+5,x
.5faa	75 03		adc $03,x		adc pstack+3,x
.5fac	95 05		sta $05,x		sta pstack+5,x
.5fae	e8		inx			inx
.5faf	e8		inx			inx
.5fb0	4c 4a 40	jmp $404a		jmp next
.5fb3					w_dx2b:
>5fb3	02					.byte $02
>5fb4	64 2b					.text 'd+'
>5fb6						.fill 14
>5fc4	8e 5f					.word w_x2b
.5fc6					xt_dx2b:
.5fc6	18		clc			clc
.5fc7	b5 06		lda $06,x		lda pstack+6,x
.5fc9	75 02		adc $02,x		adc pstack+2,x
.5fcb	95 06		sta $06,x		sta pstack+6,x
.5fcd	b5 07		lda $07,x		lda pstack+7,x
.5fcf	75 03		adc $03,x		adc pstack+3,x
.5fd1	95 07		sta $07,x		sta pstack+7,x
.5fd3	b5 08		lda $08,x		lda pstack+8,x
.5fd5	75 04		adc $04,x		adc pstack+4,x
.5fd7	95 08		sta $08,x		sta pstack+8,x
.5fd9	b5 09		lda $09,x		lda pstack+9,x
.5fdb	75 05		adc $05,x		adc pstack+5,x
.5fdd	95 09		sta $09,x		sta pstack+9,x
.5fdf	e8		inx			inx
.5fe0	e8		inx			inx
.5fe1	e8		inx			inx
.5fe2	e8		inx			inx
.5fe3	4c 4a 40	jmp $404a		jmp next
.5fe6					w_dx2d:
>5fe6	02					.byte $02
>5fe7	64 2d					.text 'd-'
>5fe9						.fill 14
>5ff7	b3 5f					.word w_dx2b
.5ff9					xt_dx2d:
.5ff9	38		sec			sec
.5ffa	b5 06		lda $06,x		lda pstack+6,x
.5ffc	f5 02		sbc $02,x		sbc pstack+2,x
.5ffe	95 06		sta $06,x		sta pstack+6,x
.6000	b5 07		lda $07,x		lda pstack+7,x
.6002	f5 03		sbc $03,x		sbc pstack+3,x
.6004	95 07		sta $07,x		sta pstack+7,x
.6006	b5 08		lda $08,x		lda pstack+8,x
.6008	f5 04		sbc $04,x		sbc pstack+4,x
.600a	95 08		sta $08,x		sta pstack+8,x
.600c	b5 09		lda $09,x		lda pstack+9,x
.600e	f5 05		sbc $05,x		sbc pstack+5,x
.6010	95 09		sta $09,x		sta pstack+9,x
.6012	e8		inx			inx
.6013	e8		inx			inx
.6014	e8		inx			inx
.6015	e8		inx			inx
.6016	4c 4a 40	jmp $404a		jmp next
.6019					w_x2d:
>6019	01					.byte $01
>601a	2d					.text '-'
>601b						.fill 15
>602a	e6 5f					.word w_dx2d
.602c					xt_x2d:
.602c	38		sec			sec
.602d	b5 04		lda $04,x		lda pstack+4,x
.602f	f5 02		sbc $02,x		sbc pstack+2,x
.6031	95 04		sta $04,x		sta pstack+4,x
.6033	b5 05		lda $05,x		lda pstack+5,x
.6035	f5 03		sbc $03,x		sbc pstack+3,x
.6037	95 05		sta $05,x		sta pstack+5,x
.6039	e8		inx			inx
.603a	e8		inx			inx
.603b	4c 4a 40	jmp $404a		jmp next
.603e					w_ux2a:
>603e	02					.byte $02
>603f	75 2a					.text 'u*'
>6041						.fill 14
>604f	19 60					.word w_x2d
.6051					xt_ux2a:
.6051	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.6053	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.6055	8d 01 de	sta $de01		sta $de01
.6058	b5 04		lda $04,x		lda pstack+4,x
.605a	8d 00 de	sta $de00		sta $de00
.605d	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.605f	8d 03 de	sta $de03		sta $de03
.6062	b5 02		lda $02,x		lda pstack+2,x
.6064	8d 02 de	sta $de02		sta $de02
.6067	e8		inx			inx
.6068	e8		inx			inx
.6069	ad 05 de	lda $de05		lda $de05       ; Read the coprocessor unsigned multiplication result
.606c	95 03		sta $03,x		sta pstack+3,x
.606e	ad 04 de	lda $de04		lda $de04
.6071	95 02		sta $02,x		sta pstack+2,x
.6073	4c 4a 40	jmp $404a		jmp next
.6076					w_x2a:
>6076	01					.byte $01
>6077	2a					.text '*'
>6078						.fill 15
>6087	3e 60					.word w_ux2a
.6089					xt_x2a:
.6089	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.608b	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.608d	8d 05 de	sta $de05		sta $de05
.6090	b5 04		lda $04,x		lda pstack+4,x
.6092	8d 04 de	sta $de04		sta $de04
.6095	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.6097	8d 07 de	sta $de07		sta $de07
.609a	b5 02		lda $02,x		lda pstack+2,x
.609c	8d 06 de	sta $de06		sta $de06
.609f	e8		inx			inx
.60a0	e8		inx			inx
.60a1	ad 0d de	lda $de0d		lda $de0d       ; Read the coprocessor unsigned multiplication result
.60a4	95 03		sta $03,x		sta pstack+3,x
.60a6	ad 0c de	lda $de0c		lda $de0c
.60a9	95 02		sta $02,x		sta pstack+2,x
.60ab	4c 4a 40	jmp $404a		jmp next
.60ae					w_ux2ax2dsoft:
>60ae	07					.byte $07
>60af	75 2a 2d 73 6f 66 74			.text 'u*-soft'
>60b6						.fill 9
>60bf	76 60					.word w_x2a
.60c1					xt_ux2ax2dsoft:
.60c1	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.60c3	85 2c		sta $2c			sta tmp+2
.60c5	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.60c7						l1:
.60c7	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.60c9	76 02		ror $02,x		ror pstack+2,x
.60cb	90 0b		bcc $60d8		bcc l2          ; 0 or 1?
.60cd	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.60ce	18		clc			clc
.60cf	b5 04		lda $04,x		lda pstack+4,x
.60d1	65 2c		adc $2c			adc tmp+2
.60d3	85 2c		sta $2c			sta tmp+2
.60d5	98		tya			tya
.60d6	75 05		adc $05,x		adc pstack+5,x
.60d8						l2:
.60d8	6a		ror a			ror A
.60d9	66 2c		ror $2c			ror tmp+2
.60db	66 2b		ror $2b			ror tmp+1
.60dd	66 2a		ror $2a			ror tmp
.60df	3a		dec a			dec a
.60e0	d0 e5		bne $60c7		bne l1
.60e2	85 2d		sta $2d			sta tmp+3
.60e4	a5 2a		lda $2a			lda tmp         ; Save result to parameter stack
.60e6	95 04		sta $04,x		sta pstack+4,x
.60e8	a5 2b		lda $2b			lda tmp+1
.60ea	95 05		sta $05,x		sta pstack+5,x
.60ec	e8		inx			inx             ; Clean up parameter stack
.60ed	e8		inx			inx
.60ee	4c 4a 40	jmp $404a		jmp next
.60f1					w_x2ax2dsoft:
>60f1	06					.byte $06
>60f2	2a 2d 73 6f 66 74			.text '*-soft'
>60f8						.fill 10
>6102	ae 60					.word w_ux2ax2dsoft
.6104					xt_x2ax2dsoft:
.6104	64 30		stz $30			stz sign
.6106	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.6108	10 11		bpl $611b		bpl chk_n2
.610a	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.610c	85 30		sta $30			sta sign
.610e	38		sec			sec             ; Negate n1
.610f	a9 00		lda #$00		lda #0
.6111	f5 04		sbc $04,x		sbc pstack+4,x
.6113	95 04		sta $04,x		sta pstack+4,x
.6115	a9 00		lda #$00		lda #0
.6117	f5 05		sbc $05,x		sbc pstack+5,x
.6119	95 05		sta $05,x		sta pstack+5,x
.611b						chk_n2:
.611b	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.611d	10 13		bpl $6132		bpl init_tmp
.611f	a5 30		lda $30			lda sign        ; Flip the sign bit, if so
.6121	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.6123	85 30		sta $30			sta sign
.6125	38		sec			sec             ; Negate n2
.6126	a9 00		lda #$00		lda #0
.6128	f5 02		sbc $02,x		sbc pstack+2,x
.612a	95 02		sta $02,x		sta pstack+2,x
.612c	a9 00		lda #$00		lda #0
.612e	f5 03		sbc $03,x		sbc pstack+3,x
.6130	95 03		sta $03,x		sta pstack+3,x
.6132						init_tmp:
.6132	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.6134	85 2c		sta $2c			sta tmp+2
.6136	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.6138						l1:
.6138	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.613a	76 02		ror $02,x		ror pstack+2,x
.613c	90 0b		bcc $6149		bcc l2          ; 0 or 1?
.613e	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.613f	18		clc			clc
.6140	b5 04		lda $04,x		lda pstack+4,x
.6142	65 2c		adc $2c			adc tmp+2
.6144	85 2c		sta $2c			sta tmp+2
.6146	98		tya			tya
.6147	75 05		adc $05,x		adc pstack+5,x
.6149						l2:
.6149	6a		ror a			ror A
.614a	66 2c		ror $2c			ror tmp+2
.614c	66 2b		ror $2b			ror tmp+1
.614e	66 2a		ror $2a			ror tmp
.6150	3a		dec a			dec a
.6151	d0 e5		bne $6138		bne l1
.6153	85 2d		sta $2d			sta tmp+3
.6155	a5 2a		lda $2a			lda tmp         ; Save result to parameter stack
.6157	95 04		sta $04,x		sta pstack+4,x
.6159	a5 2b		lda $2b			lda tmp+1
.615b	95 05		sta $05,x		sta pstack+5,x
.615d	e8		inx			inx             ; Clean up parameter stack
.615e	e8		inx			inx
.615f	a5 30		lda $30			lda sign        ; Check the sign
.6161	10 0d		bpl $6170		bpl done
.6163	38		sec			sec             ; If negative, negate result
.6164	a9 00		lda #$00		lda #0
.6166	f5 02		sbc $02,x		sbc pstack+2,x
.6168	95 02		sta $02,x		sta pstack+2,x
.616a	a9 00		lda #$00		lda #0
.616c	f5 03		sbc $03,x		sbc pstack+3,x
.616e	95 03		sta $03,x		sta pstack+3,x
.6170						done:
.6170	4c 4a 40	jmp $404a		jmp next
.6173					w_umx2fmod:
>6173	06					.byte $06
>6174	75 6d 2f 6d 6f 64			.text 'um/mod'
>617a						.fill 10
>6184	f1 60					.word w_x2ax2dsoft
.6186					xt_umx2fmod:
.6186	38		sec			sec
.6187	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract hi cell of dividend by
.6189	f5 02		sbc $02,x		sbc     pstack+2,x          ; divisor to see if there's an overflow condition.
.618b	b5 07		lda $07,x		lda     pstack+7,x
.618d	f5 03		sbc $03,x		sbc     pstack+3,x
.618f	b0 2e		bcs $61bf		bcs     overflow            ; Branch if /0 or overflow.
.6191	a9 11		lda #$11		lda     #$11                ; Loop 17x.
.6193	85 2a		sta $2a			sta     tmp                 ; Use tmp for loop counter.
.6195						loop:
.6195	36 04		rol $04,x		rol     pstack+4,x          ; Rotate dividend lo cell left one bit.
.6197	36 05		rol $05,x		rol     pstack+5,x
.6199	c6 2a		dec $2a			dec     tmp                 ; Decrement loop counter.
.619b	f0 2c		beq $61c9		beq     done                ; If we're done, then branch to end.
.619d	36 06		rol $06,x		rol     pstack+6,x          ; Otherwise rotate dividend hi cell left one bit.
.619f	36 07		rol $07,x		rol     pstack+7,x
.61a1	64 2b		stz $2b			stz     tmp+1
.61a3	26 2b		rol $2b			rol     tmp+1               ; Rotate the bit carried out of above into tmp+1.
.61a5	38		sec			sec
.61a6	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract dividend hi cell minus divisor.
.61a8	f5 02		sbc $02,x		sbc     pstack+2,x
.61aa	85 2c		sta $2c			sta     tmp+2               ; Put result temporarily in tmp+2 (lo byte)
.61ac	b5 07		lda $07,x		lda     pstack+7,x
.61ae	f5 03		sbc $03,x		sbc     pstack+3,x
.61b0	a8		tay			tay                         ; and Y (hi byte).
.61b1	a5 2b		lda $2b			lda     tmp+1               ; Remember now to bring in the bit carried out above.
.61b3	e9 00		sbc #$00		sbc     #0
.61b5	90 de		bcc $6195		bcc     loop
.61b7	a5 2c		lda $2c			lda     tmp+2               ; If that didn't cause a borrow,
.61b9	95 06		sta $06,x		sta     pstack+6,x          ; make the result from above to
.61bb	94 07		sty $07,x		sty     pstack+7,x          ; be the new dividend hi cell
.61bd	80 d6		bra $6195		bra     loop                ; and then brach up.  (NMOS 6502 can use BCS here.)
.61bf						overflow:
.61bf	a9 ff		lda #$ff		lda     #$ff                ; If overflow or /0 condition found,
.61c1	95 06		sta $06,x		sta     pstack+6,x          ; just put FFFF in both the remainder
.61c3	95 07		sta $07,x		sta     pstack+7,x
.61c5	95 04		sta $04,x		sta     pstack+4,x          ; and the quotient.
.61c7	95 05		sta $05,x		sta     pstack+5,x
.61c9						done:
.61c9	e8		inx			inx
.61ca	e8		inx			inx
.61cb	4c 4a 40	jmp $404a		jmp next
.61ce					w_sx3ed:
>61ce	03					.byte $03
>61cf	73 3e 64				.text 's>d'
>61d2						.fill 13
>61df	73 61					.word w_umx2fmod
.61e1					xt_sx3ed:
.61e1	ca		dex			dex
.61e2	ca		dex			dex
.61e3	b5 04		lda $04,x		lda pstack+4,x
.61e5	95 02		sta $02,x		sta pstack+2,x
.61e7	b5 05		lda $05,x		lda pstack+5,x
.61e9	95 03		sta $03,x		sta pstack+3,x
.61eb	30 07		bmi $61f4		bmi is_neg
.61ed	74 04		stz $04,x		stz pstack+4,x
.61ef	74 05		stz $05,x		stz pstack+5,x
.61f1	4c 4a 40	jmp $404a		jmp next
.61f4						is_neg:
.61f4	a9 ff		lda #$ff		lda #$ff
.61f6	95 04		sta $04,x		sta pstack+4,x
.61f8	95 05		sta $05,x		sta pstack+5,x
.61fa	4c 4a 40	jmp $404a		jmp next
.61fd					w_1x2b:
>61fd	02					.byte $02
>61fe	31 2b					.text '1+'
>6200						.fill 14
>620e	ce 61					.word w_sx3ed
.6210					xt_1x2b:
.6210	f6 02		inc $02,x		inc pstack+2,x
.6212	d0 02		bne $6216		bne skip
.6214	f6 03		inc $03,x		inc pstack+3,x
.6216						skip:
.6216	4c 4a 40	jmp $404a		jmp next
.6219					w_2x2b:
>6219	02					.byte $02
>621a	32 2b					.text '2+'
>621c						.fill 14
>622a	fd 61					.word w_1x2b
.622c					xt_2x2b:
.622c	18		clc			clc
.622d	b5 02		lda $02,x		lda pstack+2,x
.622f	69 02		adc #$02		adc #2
.6231	95 02		sta $02,x		sta pstack+2,x
.6233	b5 03		lda $03,x		lda pstack+3,x
.6235	69 00		adc #$00		adc #0
.6237	95 03		sta $03,x		sta pstack+3,x
.6239	4c 4a 40	jmp $404a		jmp next
.623c					w_1x2d:
>623c	02					.byte $02
>623d	31 2d					.text '1-'
>623f						.fill 14
>624d	19 62					.word w_2x2b
.624f					xt_1x2d:
.624f	b5 02		lda $02,x		lda pstack+2,x
.6251	d0 02		bne $6255		bne l1
.6253	d6 03		dec $03,x		dec pstack+3,x
.6255						l1:
.6255	d6 02		dec $02,x		dec pstack+2,x
.6257	4c 4a 40	jmp $404a		jmp next
.625a					w_2x2d:
>625a	02					.byte $02
>625b	32 2d					.text '2-'
>625d						.fill 14
>626b	3c 62					.word w_1x2d
.626d					xt_2x2d:
.626d	38		sec			sec
.626e	b5 02		lda $02,x		lda pstack+2,x
.6270	e9 02		sbc #$02		sbc #2
.6272	95 02		sta $02,x		sta pstack+2,x
.6274	b5 03		lda $03,x		lda pstack+3,x
.6276	e9 00		sbc #$00		sbc #0
.6278	95 03		sta $03,x		sta pstack+3,x
.627a	4c 4a 40	jmp $404a		jmp next
.627d					w_and:
>627d	03					.byte $03
>627e	61 6e 64				.text 'and'
>6281						.fill 13
>628e	5a 62					.word w_2x2d
.6290					xt_and:
.6290	b5 02		lda $02,x		lda pstack+2,x
.6292	35 04		and $04,x		and pstack+4,x
.6294	95 04		sta $04,x		sta pstack+4,x
.6296	b5 03		lda $03,x		lda pstack+3,x
.6298	35 05		and $05,x		and pstack+5,x
.629a	95 05		sta $05,x		sta pstack+5,x
.629c	e8		inx			inx
.629d	e8		inx			inx
.629e	4c 4a 40	jmp $404a		jmp next
.62a1					w_or:
>62a1	02					.byte $02
>62a2	6f 72					.text 'or'
>62a4						.fill 14
>62b2	7d 62					.word w_and
.62b4					xt_or:
.62b4	b5 02		lda $02,x		lda pstack+2,x
.62b6	15 04		ora $04,x		ora pstack+4,x
.62b8	95 04		sta $04,x		sta pstack+4,x
.62ba	b5 03		lda $03,x		lda pstack+3,x
.62bc	15 05		ora $05,x		ora pstack+5,x
.62be	95 05		sta $05,x		sta pstack+5,x
.62c0	e8		inx			inx
.62c1	e8		inx			inx
.62c2	4c 4a 40	jmp $404a		jmp next
.62c5					w_xor:
>62c5	03					.byte $03
>62c6	78 6f 72				.text 'xor'
>62c9						.fill 13
>62d6	a1 62					.word w_or
.62d8					xt_xor:
.62d8	b5 02		lda $02,x		lda pstack+2,x
.62da	55 04		eor $04,x		eor pstack+4,x
.62dc	95 04		sta $04,x		sta pstack+4,x
.62de	b5 03		lda $03,x		lda pstack+3,x
.62e0	55 05		eor $05,x		eor pstack+5,x
.62e2	95 05		sta $05,x		sta pstack+5,x
.62e4	e8		inx			inx
.62e5	e8		inx			inx
.62e6	4c 4a 40	jmp $404a		jmp next
.62e9					w_not:
>62e9	03					.byte $03
>62ea	6e 6f 74				.text 'not'
>62ed						.fill 13
>62fa	c5 62					.word w_xor
.62fc					xt_not:
.62fc	b5 02		lda $02,x		lda pstack+2,x
.62fe	49 ff		eor #$ff		eor #$ff
.6300	95 02		sta $02,x		sta pstack+2,x
.6302	b5 03		lda $03,x		lda pstack+3,x
.6304	49 ff		eor #$ff		eor #$ff
.6306	95 03		sta $03,x		sta pstack+3,x
.6308	4c 4a 40	jmp $404a		jmp next
.630b					w_0x3c:
>630b	02					.byte $02
>630c	30 3c					.text '0<'
>630e						.fill 14
>631c	e9 62					.word w_not
.631e					xt_0x3c:
.631e	b5 03		lda $03,x		lda pstack+3,x
.6320	30 07		bmi $6329		bmi istrue
.6322	74 02		stz $02,x		stz pstack+2,x
.6324	74 03		stz $03,x		stz pstack+3,x
.6326	4c 4a 40	jmp $404a		jmp next
.6329						istrue:
.6329	a9 ff		lda #$ff		lda #$ff
.632b	95 02		sta $02,x		sta pstack+2,x
.632d	95 03		sta $03,x		sta pstack+3,x
.632f	4c 4a 40	jmp $404a		jmp next
.6332					w_0x3d:
>6332	02					.byte $02
>6333	30 3d					.text '0='
>6335						.fill 14
>6343	0b 63					.word w_0x3c
.6345					xt_0x3d:
.6345	b5 02		lda $02,x		lda pstack+2,x
.6347	d0 0d		bne $6356		bne isfalse
.6349	b5 03		lda $03,x		lda pstack+3,x
.634b	d0 09		bne $6356		bne isfalse
.634d	a9 ff		lda #$ff		lda #$ff
.634f	95 02		sta $02,x		sta pstack+2,x
.6351	95 03		sta $03,x		sta pstack+3,x
.6353	4c 4a 40	jmp $404a		jmp next
.6356						isfalse:
.6356	74 02		stz $02,x		stz pstack+2,x
.6358	74 03		stz $03,x		stz pstack+3,x
.635a	4c 4a 40	jmp $404a		jmp next
.635d					w_0x3e:
>635d	02					.byte $02
>635e	30 3e					.text '0>'
>6360						.fill 14
>636e	32 63					.word w_0x3d
.6370					xt_0x3e:
.6370	b5 03		lda $03,x		lda pstack+3,x
.6372	30 0f		bmi $6383		bmi isfalse
.6374	d0 04		bne $637a		bne istrue
.6376	b5 02		lda $02,x		lda pstack+2,x
.6378	f0 09		beq $6383		beq isfalse
.637a						istrue:
.637a	a9 ff		lda #$ff		lda #$ff
.637c	95 02		sta $02,x		sta pstack+2,x
.637e	95 03		sta $03,x		sta pstack+3,x
.6380	4c 4a 40	jmp $404a		jmp next
.6383						isfalse:
.6383	74 02		stz $02,x		stz pstack+2,x
.6385	74 03		stz $03,x		stz pstack+3,x
.6387	4c 4a 40	jmp $404a		jmp next
.638a					w_x28variablex29:
>638a	0a					.byte $0A
>638b	28 76 61 72 69 61 62 6c			.text '(variable)'
>6393	65 29
>6395						.fill 6
>639b	5d 63					.word w_0x3e
.639d					xt_x28variablex29:
.639d	18		clc			clc                     ; push(wp + 3)
.639e	a5 22		lda $22			lda wp
.63a0	69 03		adc #$03		adc #3
.63a2	95 00		sta $00,x		sta pstack,x
.63a4	a5 23		lda $23			lda wp+1
.63a6	69 00		adc #$00		adc #0
.63a8	95 01		sta $01,x		sta pstack+1,x
.63aa	ca		dex			dex
.63ab	ca		dex			dex
.63ac	4c 4a 40	jmp $404a		jmp next
.63af					w_x28constantx29:
>63af	0a					.byte $0A
>63b0	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>63b8	74 29
>63ba						.fill 6
>63c0	8a 63					.word w_x28variablex29
.63c2					xt_x28constantx29:
.63c2	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.63c4	b1 22		lda ($22),y		lda (wp),y
.63c6	95 00		sta $00,x		sta pstack,x
.63c8	c8		iny			iny
.63c9	b1 22		lda ($22),y		lda (wp),y
.63cb	95 01		sta $01,x		sta pstack+1,x
.63cd	ca		dex			dex
.63ce	ca		dex			dex
.63cf	4c 4a 40	jmp $404a		jmp next
.63d2					w_cells:
>63d2	05					.byte $05
>63d3	63 65 6c 6c 73				.text 'cells'
>63d8						.fill 11
>63e3	af 63					.word w_x28constantx29
.63e5					xt_cells:
.63e5	4c c2 63	jmp $63c2		jmp xt_x28constantx29
>63e8	02 00					.word 2
.63ea					w_x28userx29:
>63ea	06					.byte $06
>63eb	28 75 73 65 72 29			.text '(user)'
>63f1						.fill 10
>63fb	d2 63					.word w_cells
.63fd					xt_x28userx29:
.63fd	18		clc			clc                     ; push(up + memory(wp + 3))
.63fe	a0 03		ldy #$03		ldy #3
.6400	a5 24		lda $24			lda up
.6402	71 22		adc ($22),y		adc (wp),y
.6404	95 00		sta $00,x		sta pstack,x
.6406	c8		iny			iny
.6407	a5 25		lda $25			lda up+1
.6409	71 22		adc ($22),y		adc (wp),y
.640b	95 01		sta $01,x		sta pstack+1,x
.640d	ca		dex			dex
.640e	ca		dex			dex
.640f	4c 4a 40	jmp $404a		jmp next
.6412					w_x28branchx29:
>6412	08					.byte $08
>6413	28 62 72 61 6e 63 68 29			.text '(branch)'
>641b						.fill 8
>6423	ea 63					.word w_x28userx29
.6425					xt_x28branchx29:
.6425	a0 01		ldy #$01		ldy #1              ; ip := branch address
.6427	b2 20		lda ($20)		lda (ip)
.6429	85 2a		sta $2a			sta tmp
.642b	b1 20		lda ($20),y		lda (ip),y
.642d	85 21		sta $21			sta ip+1
.642f	a5 2a		lda $2a			lda tmp
.6431	85 20		sta $20			sta ip
.6433	4c 4a 40	jmp $404a		jmp next
.6436					w_x28branch0x29:
>6436	09					.byte $09
>6437	28 62 72 61 6e 63 68 30			.text '(branch0)'
>643f	29
>6440						.fill 7
>6447	12 64					.word w_x28branchx29
.6449					xt_x28branch0x29:
.6449	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.644b	d0 04		bne $6451		bne nobranch        ; No: skip over the branch address
.644d	b5 03		lda $03,x		lda pstack+3,x
.644f	f0 0f		beq $6460		beq dobranch        ; Yes: take the branch
.6451						nobranch:
.6451	18		clc			clc                 ; No: skip over the branch address
.6452	a5 20		lda $20			lda ip
.6454	69 02		adc #$02		adc #2
.6456	85 20		sta $20			sta ip
.6458	a5 21		lda $21			lda ip+1
.645a	69 00		adc #$00		adc #0
.645c	85 21		sta $21			sta ip+1
.645e	80 0e		bra $646e		bra done
.6460						dobranch:
.6460	a0 01		ldy #$01		ldy #1              ; ip := branch address
.6462	b2 20		lda ($20)		lda (ip)
.6464	85 2a		sta $2a			sta tmp
.6466	b1 20		lda ($20),y		lda (ip),y
.6468	85 21		sta $21			sta ip+1
.646a	a5 2a		lda $2a			lda tmp
.646c	85 20		sta $20			sta ip
.646e						done:
.646e	e8		inx			inx                 ; clean up the parameter stack
.646f	e8		inx			inx
.6470	4c 4a 40	jmp $404a		jmp next
.6473					w_x28dox29:
>6473	04					.byte $04
>6474	28 64 6f 29				.text '(do)'
>6478						.fill 12
>6484	36 64					.word w_x28branch0x29
.6486					xt_x28dox29:
.6486	b5 03		lda $03,x		lda pstack+3,x
.6488	48		pha			pha
.6489	b5 02		lda $02,x		lda pstack+2,x
.648b	48		pha			pha
.648c	b5 05		lda $05,x		lda pstack+5,x
.648e	48		pha			pha
.648f	b5 04		lda $04,x		lda pstack+4,x
.6491	48		pha			pha
.6492	18		clc			clc
.6493	8a		txa			txa
.6494	69 04		adc #$04		adc #4
.6496	aa		tax			tax
.6497	4c 4a 40	jmp $404a		jmp next
.649a					w_x3ei:
>649a	02					.byte $02
>649b	3e 69					.text '>i'
>649d						.fill 14
>64ab	73 64					.word w_x28dox29
.64ad					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.64ad	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.64af	85 2b		sta $2b			sta tmp+1
.64b1	b5 02		lda $02,x		lda pstack+2,x
.64b3	85 2a		sta $2a			sta tmp
.64b5	e8		inx			inx
.64b6	e8		inx			inx
.64b7	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.64b9	ba		tsx			tsx
.64ba	a5 2b		lda $2b			lda tmp+1           ; current := tmp = n
.64bc	9d 04 01	sta $0104,x		sta current+1
.64bf	a5 2a		lda $2a			lda tmp
.64c1	9d 03 01	sta $0103,x		sta current
.64c4	a6 2e		ldx $2e			ldx savex
.64c6	4c 4a 40	jmp $404a		jmp next
.64c9					w_leave:
>64c9	05					.byte $05
>64ca	6c 65 61 76 65				.text 'leave'
>64cf						.fill 11
>64da	9a 64					.word w_x3ei
.64dc					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.64dc	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.64de	ba		tsx			tsx
.64df	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.64e2	9d 02 01	sta $0102,x		sta limit+1
.64e5	bd 03 01	lda $0103,x		lda current
.64e8	9d 01 01	sta $0101,x		sta limit
.64eb	a6 2e		ldx $2e			ldx savex
.64ed	4c 4a 40	jmp $404a		jmp next
.64f0					w_x28loopx29:
>64f0	06					.byte $06
>64f1	28 6c 6f 6f 70 29			.text '(loop)'
>64f7						.fill 10
>6501	c9 64					.word w_leave
.6503					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.6503	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.6505	ba		tsx			tsx
.6506	fe 03 01	inc $0103,x		inc current         ; Increment current
.6509	d0 03		bne $650e		bne chk_current
.650b	fe 04 01	inc $0104,x		inc current+1
.650e						chk_current:
.650e	38		sec			sec
.650f	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.6512	fd 02 01	sbc $0102,x		sbc limit+1
.6515	50 02		bvc $6519		bvc label1          ; the equality comparison is in the Z flag here
.6517	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.6519						label1:
.6519	30 23		bmi $653e		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.651b	50 02		bvc $651f		bvc label2          ; the Z flag was affected only if V is 1
.651d	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc NUM2H
.651f						label2:
.651f	d0 08		bne $6529		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.6521	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.6524	fd 01 01	sbc $0101,x		sbc limit
.6527	90 15		bcc $653e		bcc dobranch        ; if current < limit then current < limit
.6529						nobranch:
.6529	8a		txa			txa                 ; Yes: Remove the context from the return stack
.652a	18		clc			clc
.652b	69 04		adc #$04		adc #4
.652d	aa		tax			tax
.652e	9a		txs			txs
.652f	18		clc			clc                 ; And skip over the branch address
.6530	a5 20		lda $20			lda ip
.6532	69 02		adc #$02		adc #2
.6534	85 20		sta $20			sta ip
.6536	a5 21		lda $21			lda ip+1
.6538	69 00		adc #$00		adc #0
.653a	85 21		sta $21			sta ip+1
.653c	80 0e		bra $654c		bra done
.653e						dobranch:
.653e	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.6540	b2 20		lda ($20)		lda (ip)
.6542	85 2a		sta $2a			sta tmp
.6544	b1 20		lda ($20),y		lda (ip),y
.6546	85 21		sta $21			sta ip+1
.6548	a5 2a		lda $2a			lda tmp
.654a	85 20		sta $20			sta ip
.654c						done:
.654c	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.654e	4c 4a 40	jmp $404a		jmp next
.6551					w_x28x2bloopx29:
>6551	07					.byte $07
>6552	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>6559						.fill 9
>6562	f0 64					.word w_x28loopx29
.6564					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.6564	b5 03		lda $03,x		lda pstack+3,x      ; Pop n from the stack
.6566	85 2b		sta $2b			sta tmp+1
.6568	b5 02		lda $02,x		lda pstack+2,x
.656a	85 2a		sta $2a			sta tmp
.656c	e8		inx			inx
.656d	e8		inx			inx
.656e	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.6570	ba		tsx			tsx
.6571	18		clc			clc                 ; Increment current by n
.6572	bd 03 01	lda $0103,x		lda current
.6575	65 2a		adc $2a			adc tmp
.6577	9d 03 01	sta $0103,x		sta current
.657a	bd 04 01	lda $0104,x		lda current+1
.657d	65 2b		adc $2b			adc tmp+1
.657f	9d 04 01	sta $0104,x		sta current+1
.6582						chk_current:
.6582	38		sec			sec
.6583	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.6586	fd 02 01	sbc $0102,x		sbc limit+1
.6589	50 02		bvc $658d		bvc label1          ; the equality comparison is in the Z flag here
.658b	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.658d						label1:
.658d	30 23		bmi $65b2		bmi dobranch        ; if current+1 < limit+1 then current < limit
.658f	50 02		bvc $6593		bvc label2          ; the Z flag was affected only if V is 1
.6591	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc current+1
.6593						label2:
.6593	d0 08		bne $659d		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.6595	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.6598	fd 01 01	sbc $0101,x		sbc limit
.659b	90 15		bcc $65b2		bcc dobranch        ; if current < limit then current < limit
.659d						nobranch:
.659d	8a		txa			txa                 ; Yes: Remove the context from the return stack
.659e	18		clc			clc
.659f	69 04		adc #$04		adc #4
.65a1	aa		tax			tax
.65a2	9a		txs			txs
.65a3	18		clc			clc                 ; And skip over the branch address
.65a4	a5 20		lda $20			lda ip
.65a6	69 02		adc #$02		adc #2
.65a8	85 20		sta $20			sta ip
.65aa	a5 21		lda $21			lda ip+1
.65ac	69 00		adc #$00		adc #0
.65ae	85 21		sta $21			sta ip+1
.65b0	80 0e		bra $65c0		bra done
.65b2						dobranch:
.65b2	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.65b4	b2 20		lda ($20)		lda (ip)
.65b6	85 2a		sta $2a			sta tmp
.65b8	b1 20		lda ($20),y		lda (ip),y
.65ba	85 21		sta $21			sta ip+1
.65bc	a5 2a		lda $2a			lda tmp
.65be	85 20		sta $20			sta ip
.65c0						done:
.65c0	a6 2e		ldx $2e			ldx savex           ; Restore the parameter stack pointer
.65c2	4c 4a 40	jmp $404a		jmp next
.65c5					w_i:
>65c5	01					.byte $01
>65c6	69					.text 'i'
>65c7						.fill 15
>65d6	51 65					.word w_x28x2bloopx29
.65d8					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.65d8	86 2e		stx $2e			stx savex           ; Point X to the return stack temporarily
.65da	ba		tsx			tsx
.65db	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.65de	bd 03 01	lda $0103,x		lda current
.65e1	a6 2e		ldx $2e			ldx savex           ; Restore the PSP
.65e3	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.65e5	95 00		sta $00,x		sta pstack,x
.65e7	ca		dex			dex
.65e8	ca		dex			dex
.65e9	4c 4a 40	jmp $404a		jmp next
.65ec					w_x28ofx29:
>65ec	04					.byte $04
>65ed	28 6f 66 29				.text '(of)'
>65f1						.fill 12
>65fd	c5 65					.word w_i
.65ff					xt_x28ofx29:
.65ff	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.6601	d5 04		cmp $04,x		cmp pstack+4,x
.6603	d0 1a		bne $661f		bne not_eq
.6605	b5 03		lda $03,x		lda pstack+3,x
.6607	d5 05		cmp $05,x		cmp pstack+5,x
.6609	d0 14		bne $661f		bne not_eq
.660b	e8		inx			inx
.660c	e8		inx			inx
.660d	e8		inx			inx
.660e	e8		inx			inx
.660f	18		clc			clc                 ; Skip over the branch target
.6610	a5 20		lda $20			lda ip
.6612	69 02		adc #$02		adc #2
.6614	85 20		sta $20			sta ip
.6616	a5 21		lda $21			lda ip+1
.6618	69 00		adc #$00		adc #0
.661a	85 21		sta $21			sta ip+1
.661c	4c 4a 40	jmp $404a		jmp next
.661f						not_eq:
.661f	e8		inx			inx                 ; Remove n2 from stack
.6620	e8		inx			inx
.6621	a0 01		ldy #$01		ldy #1              ; Take the branch target
.6623	b2 20		lda ($20)		lda (ip)
.6625	85 2a		sta $2a			sta tmp
.6627	b1 20		lda ($20),y		lda (ip),y
.6629	85 21		sta $21			sta ip+1
.662b	a5 2a		lda $2a			lda tmp
.662d	85 20		sta $20			sta ip
.662f	4c 4a 40	jmp $404a		jmp next
.6632					w_execute:
>6632	07					.byte $07
>6633	65 78 65 63 75 74 65			.text 'execute'
>663a						.fill 9
>6643	ec 65					.word w_x28ofx29
.6645					xt_execute:
.6645	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.6647	85 22		sta $22			sta wp
.6649	b5 03		lda $03,x		lda pstack+3,x
.664b	85 23		sta $23			sta wp+1
.664d	e8		inx			inx                 ; Clean up stack
.664e	e8		inx			inx
.664f	6c 22 00	jmp ($0022)		jmp (wp)            ; jmp xt
.6652					w_x28vocabularyx29:
>6652	0c					.byte $0C
>6653	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>665b	61 72 79 29
>665f						.fill 4
>6663	32 66					.word w_execute
.6665					xt_x28vocabularyx29:
.6665	18		clc			clc                 ; tmp := up + user_context
.6666	a5 24		lda $24			lda up
.6668	69 08		adc #$08		adc #user_context
.666a	85 2a		sta $2a			sta tmp
.666c	a5 25		lda $25			lda up+1
.666e	69 00		adc #$00		adc #0
.6670	85 2b		sta $2b			sta tmp+1
.6672	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.6674	18		clc			clc
.6675	a5 22		lda $22			lda wp
.6677	69 03		adc #$03		adc #3
.6679	92 2a		sta ($2a)		sta (tmp)
.667b	a5 23		lda $23			lda wp+1
.667d	69 00		adc #$00		adc #0
.667f	91 2a		sta ($2a),y		sta (tmp),y
.6681	4c 4a 40	jmp $404a		jmp next
.6684					w_forth:
>6684	05					.byte $05
>6685	66 6f 72 74 68				.text 'forth'
>668a						.fill 11
>6695	52 66					.word w_x28vocabularyx29
.6697					xt_forth:
.6697	4c 65 66	jmp $6665		jmp xt_x28vocabularyx29
>669a	fc 75					.word <>w_cold
.669c					w_x28findx29:
>669c	06					.byte $06
>669d	28 66 69 6e 64 29			.text '(find)'
>66a3						.fill 10
>66ad	84 66					.word w_forth
.66af					xt_x28findx29:
.66af	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.66b1	85 34		sta $34			sta src_ptr+1
.66b3	b5 02		lda $02,x		lda pstack+2,x
.66b5	85 33		sta $33			sta src_ptr
.66b7	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.66b9	85 36		sta $36			sta dst_ptr+1
.66bb	b5 04		lda $04,x		lda pstack+4,x
.66bd	85 35		sta $35			sta dst_ptr
.66bf						loop:
.66bf	a5 33		lda $33			lda src_ptr             ; Check to see if src_ptr = NULL
.66c1	d0 0d		bne $66d0		bne not_eod
.66c3	a5 34		lda $34			lda src_ptr+1
.66c5	d0 09		bne $66d0		bne not_eod
.66c7	e8		inx			inx                     ; Clean up the stack
.66c8	e8		inx			inx
.66c9	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.66cb	74 02		stz $02,x		stz pstack+2,x
.66cd	4c 4a 40	jmp $404a		jmp next
.66d0						not_eod:
.66d0	b2 33		lda ($33)		lda (src_ptr)           ; Get the size of the word in the dictionary
.66d2	29 3f		and #$3f		and #$3f                ; Filter out the flags
.66d4	d2 35		cmp ($35)		cmp (dst_ptr)           ; Check it against the word to search
.66d6	f0 1b		beq $66f3		beq chk_chars           ; If they match, check the characters
.66d8						next_word:
.66d8	18		clc			clc                     ; Move src_ptr to the link field
.66d9	a5 33		lda $33			lda src_ptr
.66db	69 11		adc #$11		adc #17
.66dd	85 33		sta $33			sta src_ptr
.66df	a5 34		lda $34			lda src_ptr+1
.66e1	69 00		adc #$00		adc #0
.66e3	85 34		sta $34			sta src_ptr+1
.66e5	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.66e7	b2 33		lda ($33)		lda (src_ptr)
.66e9	48		pha			pha
.66ea	b1 33		lda ($33),y		lda (src_ptr),y
.66ec	85 34		sta $34			sta src_ptr+1
.66ee	68		pla			pla
.66ef	85 33		sta $33			sta src_ptr
.66f1	80 cc		bra $66bf		bra loop                ; And check that word
.66f3						chk_chars:
.66f3	a8		tay			tay                     ; y := index to character to check
.66f4						char_loop:
.66f4	b1 33		lda ($33),y		lda (src_ptr),y         ; Check the yth character
.66f6	d1 35		cmp ($35),y		cmp (dst_ptr),y
.66f8	d0 de		bne $66d8		bne next_word           ; If they are not equal, go to the next word in the dictionary
.66fa	88		dey			dey                     ; Move to the previous character in the words
.66fb	d0 f7		bne $66f4		bne char_loop           ; Are we back at the size? No: keep checking
.66fd	ca		dex			dex                     ; Make room for all the return values
.66fe	ca		dex			dex
.66ff	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.6701	74 03		stz $03,x		stz pstack+3,x
.6703	95 02		sta $02,x		sta pstack+2,x
.6705	b2 35		lda ($35)		lda (dst_ptr)           ; Then the length of the word
.6707	74 05		stz $05,x		stz pstack+5,x
.6709	95 04		sta $04,x		sta pstack+4,x
.670b	18		clc			clc                     ; Then the pfa pointer
.670c	a5 33		lda $33			lda src_ptr
.670e	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.6710	95 06		sta $06,x		sta pstack+6,x
.6712	a5 34		lda $34			lda src_ptr+1
.6714	69 00		adc #$00		adc #0
.6716	95 07		sta $07,x		sta pstack+7,x
.6718	4c 4a 40	jmp $404a		jmp next
.671b					w_digit:
>671b	05					.byte $05
>671c	64 69 67 69 74				.text 'digit'
>6721						.fill 11
>672c	9c 66					.word w_x28findx29
.672e					xt_digit:
.672e	b5 04		lda $04,x		lda pstack+4,x          ; Get the character in A
.6730	c9 61		cmp #$61		cmp #'a'
.6732	90 06		bcc $673a		blt get_base
.6734	c9 7b		cmp #$7b		cmp #'z'+1
.6736	b0 02		bcs $673a		bge get_base
.6738	29 df		and #$df		and #$df               ; Turn off the case bit
.673a						get_base:
.673a	b4 02		ldy $02,x		ldy pstack+2,x          ; Get the base into Y
.673c	88		dey			dey
.673d						loop:
.673d	d9 5d 67	cmp $675d,y		cmp digits,y            ; Check to see if we have a match
.6740	f0 0e		beq $6750		beq found               ; If so: return the number
.6742	88		dey			dey                     ; Move to the previous digit
.6743	c0 ff		cpy #$ff		cpy #$ff                ; Have we checked the first digit?
.6745	d0 f6		bne $673d		bne loop                ; No: check against this digit
.6747						not_found:
.6747	e8		inx			inx                     ; Clean up the stack
.6748	e8		inx			inx
.6749	74 03		stz $03,x		stz pstack+3,x          ; Return false
.674b	74 02		stz $02,x		stz pstack+2,x
.674d	4c 4a 40	jmp $404a		jmp next
.6750						found:
.6750	74 05		stz $05,x		stz pstack+5,x          ; Return the value of the digit
.6752	94 04		sty $04,x		sty pstack+4,x
.6754	a9 ff		lda #$ff		lda #$ff                ; And the true flag
.6756	95 03		sta $03,x		sta pstack+3,x
.6758	95 02		sta $02,x		sta pstack+2,x
.675a	4c 4a 40	jmp $404a		jmp next
.675d						digits:
>675d	30 31 32 33 34 35 36 37			.text "0123456789ABCDEF"
>6765	38 39 41 42 43 44 45 46
.676d					w_bs:
>676d	02					.byte $02
>676e	62 73					.text 'bs'
>6770						.fill 14
>677e	1b 67					.word w_digit
.6780					xt_bs:
.6780	4c c2 63	jmp $63c2		jmp xt_x28constantx29
>6783	08 00					.word 8
.6785					w_nl:
>6785	02					.byte $02
>6786	6e 6c					.text 'nl'
>6788						.fill 14
>6796	6d 67					.word w_bs
.6798					xt_nl:
.6798	4c c2 63	jmp $63c2		jmp xt_x28constantx29
>679b	0d 00					.word 13
.679d					w_bl:
>679d	02					.byte $02
>679e	62 6c					.text 'bl'
>67a0						.fill 14
>67ae	85 67					.word w_nl
.67b0					xt_bl:
.67b0	4c c2 63	jmp $63c2		jmp xt_x28constantx29
>67b3	20 00					.word 32
.67b5					w_s0:
>67b5	02					.byte $02
>67b6	73 30					.text 's0'
>67b8						.fill 14
>67c6	9d 67					.word w_bl
.67c8					xt_s0:
.67c8	4c fd 63	jmp $63fd		jmp xt_x28userx29
>67cb	00 00					.word 0
.67cd					w_r0:
>67cd	02					.byte $02
>67ce	72 30					.text 'r0'
>67d0						.fill 14
>67de	b5 67					.word w_s0
.67e0					xt_r0:
.67e0	4c fd 63	jmp $63fd		jmp xt_x28userx29
>67e3	02 00					.word 2
.67e5					w_base:
>67e5	04					.byte $04
>67e6	62 61 73 65				.text 'base'
>67ea						.fill 12
>67f6	cd 67					.word w_r0
.67f8					xt_base:
.67f8	4c fd 63	jmp $63fd		jmp xt_x28userx29
>67fb	04 00					.word 4
.67fd					w_state:
>67fd	05					.byte $05
>67fe	73 74 61 74 65				.text 'state'
>6803						.fill 11
>680e	e5 67					.word w_base
.6810					xt_state:
.6810	4c fd 63	jmp $63fd		jmp xt_x28userx29
>6813	06 00					.word 6
.6815					w_context:
>6815	07					.byte $07
>6816	63 6f 6e 74 65 78 74			.text 'context'
>681d						.fill 9
>6826	fd 67					.word w_state
.6828					xt_context:
.6828	4c fd 63	jmp $63fd		jmp xt_x28userx29
>682b	08 00					.word 8
.682d					w_current:
>682d	07					.byte $07
>682e	63 75 72 72 65 6e 74			.text 'current'
>6835						.fill 9
>683e	15 68					.word w_context
.6840					xt_current:
.6840	4c fd 63	jmp $63fd		jmp xt_x28userx29
>6843	0a 00					.word 10
.6845					w_dp:
>6845	02					.byte $02
>6846	64 70					.text 'dp'
>6848						.fill 14
>6856	2d 68					.word w_current
.6858					xt_dp:
.6858	4c fd 63	jmp $63fd		jmp xt_x28userx29
>685b	0c 00					.word 12
.685d					w_x3ein:
>685d	03					.byte $03
>685e	3e 69 6e				.text '>in'
>6861						.fill 13
>686e	45 68					.word w_dp
.6870					xt_x3ein:
.6870	4c fd 63	jmp $63fd		jmp xt_x28userx29
>6873	0e 00					.word 14
.6875					w_tib:
>6875	03					.byte $03
>6876	74 69 62				.text 'tib'
>6879						.fill 13
>6886	5d 68					.word w_x3ein
.6888					xt_tib:
.6888	4c fd 63	jmp $63fd		jmp xt_x28userx29
>688b	10 00					.word 16
.688d					w_sourcex2did:
>688d	09					.byte $09
>688e	73 6f 75 72 63 65 2d 69			.text 'source-id'
>6896	64
>6897						.fill 7
>689e	75 68					.word w_tib
.68a0					xt_sourcex2did:
.68a0	4c fd 63	jmp $63fd		jmp xt_x28userx29
>68a3	12 00					.word 18
.68a5					w_blk:
>68a5	03					.byte $03
>68a6	62 6c 6b				.text 'blk'
>68a9						.fill 13
>68b6	8d 68					.word w_sourcex2did
.68b8					xt_blk:
.68b8	4c fd 63	jmp $63fd		jmp xt_x28userx29
>68bb	14 00					.word 20
.68bd					w_dpl:
>68bd	03					.byte $03
>68be	64 70 6c				.text 'dpl'
>68c1						.fill 13
>68ce	a5 68					.word w_blk
.68d0					xt_dpl:
.68d0	4c fd 63	jmp $63fd		jmp xt_x28userx29
>68d3	16 00					.word 22
.68d5					w_hld:
>68d5	03					.byte $03
>68d6	68 6c 64				.text 'hld'
>68d9						.fill 13
>68e6	bd 68					.word w_dpl
.68e8					xt_hld:
.68e8	4c fd 63	jmp $63fd		jmp xt_x28userx29
>68eb	18 00					.word 24
.68ed					w_handler:
>68ed	07					.byte $07
>68ee	68 61 6e 64 6c 65 72			.text 'handler'
>68f5						.fill 9
>68fe	d5 68					.word w_hld
.6900					xt_handler:
.6900	4c fd 63	jmp $63fd		jmp xt_x28userx29
>6903	1a 00					.word 26
.6905					w_csp:
>6905	03					.byte $03
>6906	63 73 70				.text 'csp'
>6909						.fill 13
>6916	ed 68					.word w_handler
.6918					xt_csp:
.6918	4c fd 63	jmp $63fd		jmp xt_x28userx29
>691b	1c 00					.word 28
.691d					w_pad:
>691d	03					.byte $03
>691e	70 61 64				.text 'pad'
>6921						.fill 13
>692e	05 69					.word w_csp
.6930					xt_pad:
.6930	4c f7 42	jmp $42f7		jmp xt_enter
>6933	58 68					.word xt_dp
>6935	69 5d					.word xt_x40
>6937	05 46					.word xt_x28literalx29
>6939	00 01					.word 256
>693b	a1 5f					.word xt_x2b
>693d	db 42					.word xt_exit
.693f					w_x5b:
>693f	c1					.byte $C1
>6940	5b					.text '['
>6941						.fill 15
>6950	1d 69					.word w_pad
.6952					xt_x5b:
.6952	4c f7 42	jmp $42f7		jmp xt_enter
>6955	71 45					.word xt_0
>6957	10 68					.word xt_state
>6959	3d 5d					.word xt_x21
>695b	db 42					.word xt_exit
.695d					w_x5d:
>695d	c1					.byte $C1
>695e	5d					.text ']'
>695f						.fill 15
>696e	3f 69					.word w_x5b
.6970					xt_x5d:
.6970	4c f7 42	jmp $42f7		jmp xt_enter
>6973	05 46					.word xt_x28literalx29
>6975	c0 00					.word 192
>6977	10 68					.word xt_state
>6979	3d 5d					.word xt_x21
>697b	db 42					.word xt_exit
.697d					w_x3fdup:
>697d	04					.byte $04
>697e	3f 64 75 70				.text '?dup'
>6982						.fill 12
>698e	5d 69					.word w_x5d
.6990					xt_x3fdup:
.6990	4c f7 42	jmp $42f7		jmp xt_enter
>6993	fc 5b					.word xt_dup
>6995	49 64					.word xt_x28branch0x29
>6997	9b 69					.word l_178
>6999	fc 5b					.word xt_dup
.699b					l_178:
>699b	db 42					.word xt_exit
.699d					w_rot:
>699d	03					.byte $03
>699e	72 6f 74				.text 'rot'
>69a1						.fill 13
>69ae	7d 69					.word w_x3fdup
.69b0					xt_rot:
.69b0	4c f7 42	jmp $42f7		jmp xt_enter
>69b3	ca 5c					.word xt_x3er
>69b5	1c 5c					.word xt_swap
>69b7	e8 5c					.word xt_rx3e
>69b9	1c 5c					.word xt_swap
>69bb	db 42					.word xt_exit
.69bd					w_2dup:
>69bd	04					.byte $04
>69be	32 64 75 70				.text '2dup'
>69c2						.fill 12
>69ce	9d 69					.word w_rot
.69d0					xt_2dup:
.69d0	4c f7 42	jmp $42f7		jmp xt_enter
>69d3	80 5c					.word xt_over
>69d5	80 5c					.word xt_over
>69d7	db 42					.word xt_exit
.69d9					w_2drop:
>69d9	05					.byte $05
>69da	32 64 72 6f 70				.text '2drop'
>69df						.fill 11
>69ea	bd 69					.word w_2dup
.69ec					xt_2drop:
.69ec	4c f7 42	jmp $42f7		jmp xt_enter
>69ef	e4 5b					.word xt_drop
>69f1	e4 5b					.word xt_drop
>69f3	db 42					.word xt_exit
.69f5					w_x3c:
>69f5	01					.byte $01
>69f6	3c					.text '<'
>69f7						.fill 15
>6a06	d9 69					.word w_2drop
.6a08					xt_x3c:
.6a08	4c f7 42	jmp $42f7		jmp xt_enter
>6a0b	2c 60					.word xt_x2d
>6a0d	1e 63					.word xt_0x3c
>6a0f	db 42					.word xt_exit
.6a11					w_x3e:
>6a11	01					.byte $01
>6a12	3e					.text '>'
>6a13						.fill 15
>6a22	f5 69					.word w_x3c
.6a24					xt_x3e:
.6a24	4c f7 42	jmp $42f7		jmp xt_enter
>6a27	2c 60					.word xt_x2d
>6a29	70 63					.word xt_0x3e
>6a2b	db 42					.word xt_exit
.6a2d					w_x3d:
>6a2d	01					.byte $01
>6a2e	3d					.text '='
>6a2f						.fill 15
>6a3e	11 6a					.word w_x3e
.6a40					xt_x3d:
.6a40	4c f7 42	jmp $42f7		jmp xt_enter
>6a43	2c 60					.word xt_x2d
>6a45	45 63					.word xt_0x3d
>6a47	db 42					.word xt_exit
.6a49					w_dx3c:
>6a49	02					.byte $02
>6a4a	64 3c					.text 'd<'
>6a4c						.fill 14
>6a5a	2d 6a					.word w_x3d
.6a5c					xt_dx3c:
.6a5c	4c f7 42	jmp $42f7		jmp xt_enter
>6a5f	f9 5f					.word xt_dx2d
>6a61	e4 5b					.word xt_drop
>6a63	1e 63					.word xt_0x3c
>6a65	db 42					.word xt_exit
.6a67					w_abs:
>6a67	03					.byte $03
>6a68	61 62 73				.text 'abs'
>6a6b						.fill 13
>6a78	49 6a					.word w_dx3c
.6a7a					xt_abs:
.6a7a	4c f7 42	jmp $42f7		jmp xt_enter
>6a7d	fc 5b					.word xt_dup
>6a7f	1e 63					.word xt_0x3c
>6a81	49 64					.word xt_x28branch0x29
>6a83	8b 6a					.word l_215
>6a85	71 45					.word xt_0
>6a87	1c 5c					.word xt_swap
>6a89	2c 60					.word xt_x2d
.6a8b					l_215:
>6a8b	db 42					.word xt_exit
.6a8d					w_dabs:
>6a8d	04					.byte $04
>6a8e	64 61 62 73				.text 'dabs'
>6a92						.fill 12
>6a9e	67 6a					.word w_abs
.6aa0					xt_dabs:
.6aa0	4c f7 42	jmp $42f7		jmp xt_enter
>6aa3	80 5c					.word xt_over
>6aa5	1e 63					.word xt_0x3c
>6aa7	49 64					.word xt_x28branch0x29
>6aa9	b3 6a					.word l_222
>6aab	71 45					.word xt_0
>6aad	71 45					.word xt_0
>6aaf	42 5c					.word xt_2swap
>6ab1	f9 5f					.word xt_dx2d
.6ab3					l_222:
>6ab3	db 42					.word xt_exit
.6ab5					w_x2fmod:
>6ab5	04					.byte $04
>6ab6	2f 6d 6f 64				.text '/mod'
>6aba						.fill 12
>6ac6	8d 6a					.word w_dabs
.6ac8					xt_x2fmod:
.6ac8	4c f7 42	jmp $42f7		jmp xt_enter
>6acb	db 42					.word xt_exit
.6acd					w_x2f:
>6acd	01					.byte $01
>6ace	2f					.text '/'
>6acf						.fill 15
>6ade	b5 6a					.word w_x2fmod
.6ae0					xt_x2f:
.6ae0	4c f7 42	jmp $42f7		jmp xt_enter
>6ae3	c8 6a					.word xt_x2fmod
>6ae5	1c 5c					.word xt_swap
>6ae7	e4 5b					.word xt_drop
>6ae9	db 42					.word xt_exit
.6aeb					w_mod:
>6aeb	03					.byte $03
>6aec	6d 6f 64				.text 'mod'
>6aef						.fill 13
>6afc	cd 6a					.word w_x2f
.6afe					xt_mod:
.6afe	4c f7 42	jmp $42f7		jmp xt_enter
>6b01	c8 6a					.word xt_x2fmod
>6b03	e4 5b					.word xt_drop
>6b05	db 42					.word xt_exit
.6b07					w_max:
>6b07	03					.byte $03
>6b08	6d 61 78				.text 'max'
>6b0b						.fill 13
>6b18	eb 6a					.word w_mod
.6b1a					xt_max:
.6b1a	4c f7 42	jmp $42f7		jmp xt_enter
>6b1d	d0 69					.word xt_2dup
>6b1f	08 6a					.word xt_x3c
>6b21	49 64					.word xt_x28branch0x29
>6b23	2d 6b					.word l_237
>6b25	80 5c					.word xt_over
>6b27	e4 5b					.word xt_drop
>6b29	25 64					.word xt_x28branchx29
>6b2b	2f 6b					.word l_238
.6b2d					l_237:
>6b2d	e4 5b					.word xt_drop
.6b2f					l_238:
>6b2f	db 42					.word xt_exit
.6b31					w_min:
>6b31	03					.byte $03
>6b32	6d 69 6e				.text 'min'
>6b35						.fill 13
>6b42	07 6b					.word w_max
.6b44					xt_min:
.6b44	4c f7 42	jmp $42f7		jmp xt_enter
>6b47	d0 69					.word xt_2dup
>6b49	24 6a					.word xt_x3e
>6b4b	49 64					.word xt_x28branch0x29
>6b4d	57 6b					.word l_245
>6b4f	80 5c					.word xt_over
>6b51	e4 5b					.word xt_drop
>6b53	25 64					.word xt_x28branchx29
>6b55	59 6b					.word l_246
.6b57					l_245:
>6b57	e4 5b					.word xt_drop
.6b59					l_246:
>6b59	db 42					.word xt_exit
.6b5b					w_lfa:
>6b5b	03					.byte $03
>6b5c	6c 66 61				.text 'lfa'
>6b5f						.fill 13
>6b6c	31 6b					.word w_min
.6b6e					xt_lfa:
.6b6e	4c f7 42	jmp $42f7		jmp xt_enter
>6b71	05 46					.word xt_x28literalx29
>6b73	05 00					.word 5
>6b75	2c 60					.word xt_x2d
>6b77	db 42					.word xt_exit
.6b79					w_cfa:
>6b79	03					.byte $03
>6b7a	63 66 61				.text 'cfa'
>6b7d						.fill 13
>6b8a	5b 6b					.word w_lfa
.6b8c					xt_cfa:
.6b8c	4c f7 42	jmp $42f7		jmp xt_enter
>6b8f	05 46					.word xt_x28literalx29
>6b91	03 00					.word 3
>6b93	2c 60					.word xt_x2d
>6b95	db 42					.word xt_exit
.6b97					w_nfa:
>6b97	03					.byte $03
>6b98	6e 66 61				.text 'nfa'
>6b9b						.fill 13
>6ba8	79 6b					.word w_cfa
.6baa					xt_nfa:
.6baa	4c f7 42	jmp $42f7		jmp xt_enter
>6bad	05 46					.word xt_x28literalx29
>6baf	16 00					.word 22
>6bb1	2c 60					.word xt_x2d
>6bb3	db 42					.word xt_exit
.6bb5					w_pfa:
>6bb5	03					.byte $03
>6bb6	70 66 61				.text 'pfa'
>6bb9						.fill 13
>6bc6	97 6b					.word w_nfa
.6bc8					xt_pfa:
.6bc8	4c f7 42	jmp $42f7		jmp xt_enter
>6bcb	05 46					.word xt_x28literalx29
>6bcd	16 00					.word 22
>6bcf	a1 5f					.word xt_x2b
>6bd1	db 42					.word xt_exit
.6bd3					w_here:
>6bd3	04					.byte $04
>6bd4	68 65 72 65				.text 'here'
>6bd8						.fill 12
>6be4	b5 6b					.word w_pfa
.6be6					xt_here:
.6be6	4c f7 42	jmp $42f7		jmp xt_enter
>6be9	58 68					.word xt_dp
>6beb	69 5d					.word xt_x40
>6bed	db 42					.word xt_exit
.6bef					w_allot:
>6bef	05					.byte $05
>6bf0	61 6c 6c 6f 74				.text 'allot'
>6bf5						.fill 11
>6c00	d3 6b					.word w_here
.6c02					xt_allot:
.6c02	4c f7 42	jmp $42f7		jmp xt_enter
>6c05	58 68					.word xt_dp
>6c07	06 5e					.word xt_x2bx21
>6c09	db 42					.word xt_exit
.6c0b					w_x2c:
>6c0b	01					.byte $01
>6c0c	2c					.text ','
>6c0d						.fill 15
>6c1c	ef 6b					.word w_allot
.6c1e					xt_x2c:
.6c1e	4c f7 42	jmp $42f7		jmp xt_enter
>6c21	e6 6b					.word xt_here
>6c23	3d 5d					.word xt_x21
>6c25	ab 45					.word xt_2
>6c27	02 6c					.word xt_allot
>6c29	db 42					.word xt_exit
.6c2b					w_cx2c:
>6c2b	02					.byte $02
>6c2c	63 2c					.text 'c,'
>6c2e						.fill 14
>6c3c	0b 6c					.word w_x2c
.6c3e					xt_cx2c:
.6c3e	4c f7 42	jmp $42f7		jmp xt_enter
>6c41	e6 6b					.word xt_here
>6c43	91 5d					.word xt_cx21
>6c45	8d 45					.word xt_1
>6c47	02 6c					.word xt_allot
>6c49	db 42					.word xt_exit
.6c4b					w_definitions:
>6c4b	0b					.byte $0B
>6c4c	64 65 66 69 6e 69 74 69			.text 'definitions'
>6c54	6f 6e 73
>6c57						.fill 5
>6c5c	2b 6c					.word w_cx2c
.6c5e					xt_definitions:
.6c5e	4c f7 42	jmp $42f7		jmp xt_enter
>6c61	28 68					.word xt_context
>6c63	69 5d					.word xt_x40
>6c65	40 68					.word xt_current
>6c67	3d 5d					.word xt_x21
>6c69	db 42					.word xt_exit
.6c6b					w_latest:
>6c6b	06					.byte $06
>6c6c	6c 61 74 65 73 74			.text 'latest'
>6c72						.fill 10
>6c7c	4b 6c					.word w_definitions
.6c7e					xt_latest:
.6c7e	4c f7 42	jmp $42f7		jmp xt_enter
>6c81	40 68					.word xt_current
>6c83	69 5d					.word xt_x40
>6c85	69 5d					.word xt_x40
>6c87	db 42					.word xt_exit
.6c89					w_count:
>6c89	05					.byte $05
>6c8a	63 6f 75 6e 74				.text 'count'
>6c8f						.fill 11
>6c9a	6b 6c					.word w_latest
.6c9c					xt_count:
.6c9c	4c f7 42	jmp $42f7		jmp xt_enter
>6c9f	fc 5b					.word xt_dup
>6ca1	10 62					.word xt_1x2b
>6ca3	1c 5c					.word xt_swap
>6ca5	af 5d					.word xt_cx40
>6ca7	db 42					.word xt_exit
.6ca9					w_type:
>6ca9	04					.byte $04
>6caa	74 79 70 65				.text 'type'
>6cae						.fill 12
>6cba	89 6c					.word w_count
.6cbc					xt_type:
.6cbc	4c f7 42	jmp $42f7		jmp xt_enter
>6cbf	90 69					.word xt_x3fdup
>6cc1	49 64					.word xt_x28branch0x29
>6cc3	e7 6c					.word l_253
>6cc5	80 5c					.word xt_over
>6cc7	a1 5f					.word xt_x2b
>6cc9	1c 5c					.word xt_swap
>6ccb	86 64					.word xt_x28dox29
.6ccd					l_254:
>6ccd	d8 65					.word xt_i
>6ccf	af 5d					.word xt_cx40
>6cd1	90 69					.word xt_x3fdup
>6cd3	49 64					.word xt_x28branch0x29
>6cd5	dd 6c					.word l_256
>6cd7	e5 44					.word xt_emit
>6cd9	25 64					.word xt_x28branchx29
>6cdb	df 6c					.word l_257
.6cdd					l_256:
>6cdd	dc 64					.word xt_leave
.6cdf					l_257:
>6cdf	03 65					.word xt_x28loopx29
>6ce1	cd 6c					.word l_254
.6ce3					l_255:
>6ce3	25 64					.word xt_x28branchx29
>6ce5	e9 6c					.word l_258
.6ce7					l_253:
>6ce7	e4 5b					.word xt_drop
.6ce9					l_258:
>6ce9	db 42					.word xt_exit
.6ceb					w_x28x2ex22x29:
>6ceb	04					.byte $04
>6cec	28 2e 22 29				.text '(.")'
>6cf0						.fill 12
>6cfc	a9 6c					.word w_type
.6cfe					xt_x28x2ex22x29:
.6cfe	4c f7 42	jmp $42f7		jmp xt_enter
>6d01	06 5d					.word xt_r
>6d03	9c 6c					.word xt_count
>6d05	fc 5b					.word xt_dup
>6d07	10 62					.word xt_1x2b
>6d09	e8 5c					.word xt_rx3e
>6d0b	a1 5f					.word xt_x2b
>6d0d	ca 5c					.word xt_x3er
>6d0f	bc 6c					.word xt_type
>6d11	db 42					.word xt_exit
.6d13					w_space:
>6d13	05					.byte $05
>6d14	73 70 61 63 65				.text 'space'
>6d19						.fill 11
>6d24	eb 6c					.word w_x28x2ex22x29
.6d26					xt_space:
.6d26	4c f7 42	jmp $42f7		jmp xt_enter
>6d29	05 46					.word xt_x28literalx29
>6d2b	20 00					.word 32
>6d2d	e5 44					.word xt_emit
>6d2f	db 42					.word xt_exit
.6d31					w_spaces:
>6d31	06					.byte $06
>6d32	73 70 61 63 65 73			.text 'spaces'
>6d38						.fill 10
>6d42	13 6d					.word w_space
.6d44					xt_spaces:
.6d44	4c f7 42	jmp $42f7		jmp xt_enter
>6d47	fc 5b					.word xt_dup
>6d49	70 63					.word xt_0x3e
>6d4b	49 64					.word xt_x28branch0x29
>6d4d	5d 6d					.word l_259
>6d4f	71 45					.word xt_0
>6d51	86 64					.word xt_x28dox29
.6d53					l_260:
>6d53	26 6d					.word xt_space
>6d55	03 65					.word xt_x28loopx29
>6d57	53 6d					.word l_260
.6d59					l_261:
>6d59	25 64					.word xt_x28branchx29
>6d5b	5f 6d					.word l_262
.6d5d					l_259:
>6d5d	e4 5b					.word xt_drop
.6d5f					l_262:
>6d5f	db 42					.word xt_exit
.6d61					w_expect:
>6d61	06					.byte $06
>6d62	65 78 70 65 63 74			.text 'expect'
>6d68						.fill 10
>6d72	31 6d					.word w_spaces
.6d74					xt_expect:
.6d74	4c f7 42	jmp $42f7		jmp xt_enter
>6d77	80 5c					.word xt_over
>6d79	a1 5f					.word xt_x2b
>6d7b	80 5c					.word xt_over
>6d7d	86 64					.word xt_x28dox29
.6d7f					l_263:
>6d7f	2f 45					.word xt_key
>6d81	80 67					.word xt_bs
>6d83	ff 65					.word xt_x28ofx29
>6d85	b1 6d					.word l_266
>6d87	fc 5b					.word xt_dup
>6d89	d8 65					.word xt_i
>6d8b	40 6a					.word xt_x3d
>6d8d	fc 62					.word xt_not
>6d8f	49 64					.word xt_x28branch0x29
>6d91	ad 6d					.word l_267
>6d93	80 67					.word xt_bs
>6d95	e5 44					.word xt_emit
>6d97	b0 67					.word xt_bl
>6d99	e5 44					.word xt_emit
>6d9b	80 67					.word xt_bs
>6d9d	e5 44					.word xt_emit
>6d9f	71 45					.word xt_0
>6da1	d8 65					.word xt_i
>6da3	4f 62					.word xt_1x2d
>6da5	91 5d					.word xt_cx21
>6da7	d8 65					.word xt_i
>6da9	6d 62					.word xt_2x2d
>6dab	ad 64					.word xt_x3ei
.6dad					l_267:
>6dad	25 64					.word xt_x28branchx29
>6daf	d7 6d					.word l_265
.6db1					l_266:
>6db1	98 67					.word xt_nl
>6db3	ff 65					.word xt_x28ofx29
>6db5	c3 6d					.word l_268
>6db7	71 45					.word xt_0
>6db9	d8 65					.word xt_i
>6dbb	91 5d					.word xt_cx21
>6dbd	dc 64					.word xt_leave
>6dbf	25 64					.word xt_x28branchx29
>6dc1	d7 6d					.word l_265
.6dc3					l_268:
>6dc3	fc 5b					.word xt_dup
>6dc5	fc 5b					.word xt_dup
>6dc7	d8 65					.word xt_i
>6dc9	91 5d					.word xt_cx21
>6dcb	71 45					.word xt_0
>6dcd	d8 65					.word xt_i
>6dcf	10 62					.word xt_1x2b
>6dd1	91 5d					.word xt_cx21
>6dd3	e5 44					.word xt_emit
>6dd5	e4 5b					.word xt_drop
.6dd7					l_265:
>6dd7	03 65					.word xt_x28loopx29
>6dd9	7f 6d					.word l_263
.6ddb					l_264:
>6ddb	e4 5b					.word xt_drop
>6ddd	db 42					.word xt_exit
.6ddf					w_query:
>6ddf	05					.byte $05
>6de0	71 75 65 72 79				.text 'query'
>6de5						.fill 11
>6df0	61 6d					.word w_expect
.6df2					xt_query:
.6df2	4c f7 42	jmp $42f7		jmp xt_enter
>6df5	88 68					.word xt_tib
>6df7	69 5d					.word xt_x40
>6df9	05 46					.word xt_x28literalx29
>6dfb	50 00					.word 80
>6dfd	74 6d					.word xt_expect
>6dff	71 45					.word xt_0
>6e01	70 68					.word xt_x3ein
>6e03	3d 5d					.word xt_x21
>6e05	db 42					.word xt_exit
.6e07					w_erase:
>6e07	05					.byte $05
>6e08	65 72 61 73 65				.text 'erase'
>6e0d						.fill 11
>6e18	df 6d					.word w_query
.6e1a					xt_erase:
.6e1a	4c f7 42	jmp $42f7		jmp xt_enter
>6e1d	71 45					.word xt_0
>6e1f	cb 5d					.word xt_fill
>6e21	db 42					.word xt_exit
.6e23					w_blanks:
>6e23	06					.byte $06
>6e24	62 6c 61 6e 6b 73			.text 'blanks'
>6e2a						.fill 10
>6e34	07 6e					.word w_erase
.6e36					xt_blanks:
.6e36	4c f7 42	jmp $42f7		jmp xt_enter
>6e39	b0 67					.word xt_bl
>6e3b	cb 5d					.word xt_fill
>6e3d	db 42					.word xt_exit
.6e3f					w_word:
>6e3f	04					.byte $04
>6e40	77 6f 72 64				.text 'word'
>6e44						.fill 12
>6e50	23 6e					.word w_blanks
.6e52					xt_word:
.6e52	4c f7 42	jmp $42f7		jmp xt_enter
>6e55	88 68					.word xt_tib
>6e57	69 5d					.word xt_x40
>6e59	70 68					.word xt_x3ein
>6e5b	69 5d					.word xt_x40
>6e5d	a1 5f					.word xt_x2b
>6e5f	1c 5c					.word xt_swap
>6e61	37 5e					.word xt_enclose
>6e63	71 45					.word xt_0
>6e65	e6 6b					.word xt_here
>6e67	3d 5d					.word xt_x21
>6e69	70 68					.word xt_x3ein
>6e6b	06 5e					.word xt_x2bx21
>6e6d	80 5c					.word xt_over
>6e6f	2c 60					.word xt_x2d
>6e71	ca 5c					.word xt_x3er
>6e73	06 5d					.word xt_r
>6e75	e6 6b					.word xt_here
>6e77	91 5d					.word xt_cx21
>6e79	a1 5f					.word xt_x2b
>6e7b	e6 6b					.word xt_here
>6e7d	10 62					.word xt_1x2b
>6e7f	e8 5c					.word xt_rx3e
>6e81	ad 5e					.word xt_cmove
>6e83	b0 67					.word xt_bl
>6e85	e6 6b					.word xt_here
>6e87	9c 6c					.word xt_count
>6e89	a1 5f					.word xt_x2b
>6e8b	91 5d					.word xt_cx21
>6e8d	db 42					.word xt_exit
.6e8f					w_x2dfind:
>6e8f	05					.byte $05
>6e90	2d 66 69 6e 64				.text '-find'
>6e95						.fill 11
>6ea0	3f 6e					.word w_word
.6ea2					xt_x2dfind:
.6ea2	4c f7 42	jmp $42f7		jmp xt_enter
>6ea5	b0 67					.word xt_bl
>6ea7	52 6e					.word xt_word
>6ea9	e6 6b					.word xt_here
>6eab	28 68					.word xt_context
>6ead	69 5d					.word xt_x40
>6eaf	69 5d					.word xt_x40
>6eb1	af 66					.word xt_x28findx29
>6eb3	fc 5b					.word xt_dup
>6eb5	45 63					.word xt_0x3d
>6eb7	49 64					.word xt_x28branch0x29
>6eb9	c3 6e					.word l_269
>6ebb	e4 5b					.word xt_drop
>6ebd	e6 6b					.word xt_here
>6ebf	7e 6c					.word xt_latest
>6ec1	af 66					.word xt_x28findx29
.6ec3					l_269:
>6ec3	db 42					.word xt_exit
.6ec5					w_decimal:
>6ec5	07					.byte $07
>6ec6	64 65 63 69 6d 61 6c			.text 'decimal'
>6ecd						.fill 9
>6ed6	8f 6e					.word w_x2dfind
.6ed8					xt_decimal:
.6ed8	4c f7 42	jmp $42f7		jmp xt_enter
>6edb	05 46					.word xt_x28literalx29
>6edd	0a 00					.word 10
>6edf	f8 67					.word xt_base
>6ee1	3d 5d					.word xt_x21
>6ee3	db 42					.word xt_exit
.6ee5					w_hex:
>6ee5	03					.byte $03
>6ee6	68 65 78				.text 'hex'
>6ee9						.fill 13
>6ef6	c5 6e					.word w_decimal
.6ef8					xt_hex:
.6ef8	4c f7 42	jmp $42f7		jmp xt_enter
>6efb	05 46					.word xt_x28literalx29
>6efd	10 00					.word 16
>6eff	f8 67					.word xt_base
>6f01	3d 5d					.word xt_x21
>6f03	db 42					.word xt_exit
.6f05					w_octal:
>6f05	05					.byte $05
>6f06	6f 63 74 61 6c				.text 'octal'
>6f0b						.fill 11
>6f16	e5 6e					.word w_hex
.6f18					xt_octal:
.6f18	4c f7 42	jmp $42f7		jmp xt_enter
>6f1b	05 46					.word xt_x28literalx29
>6f1d	08 00					.word 8
>6f1f	f8 67					.word xt_base
>6f21	3d 5d					.word xt_x21
>6f23	db 42					.word xt_exit
.6f25					w_x2e:
>6f25	01					.byte $01
>6f26	2e					.text '.'
>6f27						.fill 15
>6f36	05 6f					.word w_octal
.6f38					xt_x2e:
.6f38	4c f7 42	jmp $42f7		jmp xt_enter
>6f3b	e1 61					.word xt_sx3ed
>6f3d	54 71					.word xt_dx2e
>6f3f	db 42					.word xt_exit
.6f41					w_x28numberx29:
>6f41	08					.byte $08
>6f42	28 6e 75 6d 62 65 72 29			.text '(number)'
>6f4a						.fill 8
>6f52	25 6f					.word w_x2e
.6f54					xt_x28numberx29:
.6f54	4c f7 42	jmp $42f7		jmp xt_enter
.6f57					l_270:
>6f57	fc 5b					.word xt_dup
>6f59	ca 5c					.word xt_x3er
>6f5b	af 5d					.word xt_cx40
>6f5d	f8 67					.word xt_base
>6f5f	69 5d					.word xt_x40
>6f61	2e 67					.word xt_digit
>6f63	49 64					.word xt_x28branch0x29
>6f65	7d 6f					.word l_271
>6f67	ca 5c					.word xt_x3er
>6f69	f8 67					.word xt_base
>6f6b	69 5d					.word xt_x40
>6f6d	51 60					.word xt_ux2a
>6f6f	e8 5c					.word xt_rx3e
>6f71	e1 61					.word xt_sx3ed
>6f73	c6 5f					.word xt_dx2b
>6f75	e8 5c					.word xt_rx3e
>6f77	10 62					.word xt_1x2b
>6f79	25 64					.word xt_x28branchx29
>6f7b	57 6f					.word l_270
.6f7d					l_271:
>6f7d	e8 5c					.word xt_rx3e
>6f7f	db 42					.word xt_exit
.6f81					w_x3ferror:
>6f81	06					.byte $06
>6f82	3f 65 72 72 6f 72			.text '?error'
>6f88						.fill 10
>6f92	41 6f					.word w_x28numberx29
.6f94					xt_x3ferror:
.6f94	4c f7 42	jmp $42f7		jmp xt_enter
>6f97	1c 5c					.word xt_swap
>6f99	49 64					.word xt_x28branch0x29
>6f9b	a3 6f					.word l_293
>6f9d	18 73					.word xt_error
>6f9f	25 64					.word xt_x28branchx29
>6fa1	a5 6f					.word l_294
.6fa3					l_293:
>6fa3	e4 5b					.word xt_drop
.6fa5					l_294:
>6fa5	db 42					.word xt_exit
.6fa7					w_number:
>6fa7	06					.byte $06
>6fa8	6e 75 6d 62 65 72			.text 'number'
>6fae						.fill 10
>6fb8	81 6f					.word w_x3ferror
.6fba					xt_number:
.6fba	4c f7 42	jmp $42f7		jmp xt_enter
>6fbd	71 45					.word xt_0
>6fbf	71 45					.word xt_0
>6fc1	b0 69					.word xt_rot
>6fc3	fc 5b					.word xt_dup
>6fc5	af 5d					.word xt_cx40
>6fc7	05 46					.word xt_x28literalx29
>6fc9	2d 00					.word 45
>6fcb	40 6a					.word xt_x3d
>6fcd	49 64					.word xt_x28branch0x29
>6fcf	d9 6f					.word l_272
>6fd1	8d 45					.word xt_1
>6fd3	ca 5c					.word xt_x3er
>6fd5	25 64					.word xt_x28branchx29
>6fd7	e1 6f					.word l_273
.6fd9					l_272:
>6fd9	71 45					.word xt_0
>6fdb	ca 5c					.word xt_x3er
>6fdd	8d 45					.word xt_1
>6fdf	a1 5f					.word xt_x2b
.6fe1					l_273:
>6fe1	c9 45					.word xt_x2d1
.6fe3					l_274:
>6fe3	d0 68					.word xt_dpl
>6fe5	3d 5d					.word xt_x21
>6fe7	54 6f					.word xt_x28numberx29
>6fe9	fc 5b					.word xt_dup
>6feb	af 5d					.word xt_cx40
>6fed	b0 67					.word xt_bl
>6fef	2c 60					.word xt_x2d
>6ff1	49 64					.word xt_x28branch0x29
>6ff3	0f 70					.word l_275
>6ff5	fc 5b					.word xt_dup
>6ff7	af 5d					.word xt_cx40
>6ff9	05 46					.word xt_x28literalx29
>6ffb	2e 00					.word 46
>6ffd	2c 60					.word xt_x2d
>6fff	49 64					.word xt_x28branch0x29
>7001	09 70					.word l_276
>7003	05 46					.word xt_x28literalx29
>7005	f3 ff					.word 65523
>7007	94 6f					.word xt_x3ferror
.7009					l_276:
>7009	71 45					.word xt_0
>700b	25 64					.word xt_x28branchx29
>700d	e3 6f					.word l_274
.700f					l_275:
>700f	e4 5b					.word xt_drop
>7011	e8 5c					.word xt_rx3e
>7013	49 64					.word xt_x28branch0x29
>7015	1f 70					.word l_277
>7017	71 45					.word xt_0
>7019	71 45					.word xt_0
>701b	42 5c					.word xt_2swap
>701d	f9 5f					.word xt_dx2d
.701f					l_277:
>701f	db 42					.word xt_exit
.7021					w_x3cx23:
>7021	02					.byte $02
>7022	3c 23					.text '<#'
>7024						.fill 14
>7032	a7 6f					.word w_number
.7034					xt_x3cx23:
.7034	4c f7 42	jmp $42f7		jmp xt_enter
>7037	30 69					.word xt_pad
>7039	e8 68					.word xt_hld
>703b	3d 5d					.word xt_x21
>703d	db 42					.word xt_exit
.703f					w_hold:
>703f	04					.byte $04
>7040	68 6f 6c 64				.text 'hold'
>7044						.fill 12
>7050	21 70					.word w_x3cx23
.7052					xt_hold:
.7052	4c f7 42	jmp $42f7		jmp xt_enter
>7055	c9 45					.word xt_x2d1
>7057	e8 68					.word xt_hld
>7059	06 5e					.word xt_x2bx21
>705b	e8 68					.word xt_hld
>705d	69 5d					.word xt_x40
>705f	91 5d					.word xt_cx21
>7061	db 42					.word xt_exit
.7063					w_x23:
>7063	01					.byte $01
>7064	23					.text '#'
>7065						.fill 15
>7074	3f 70					.word w_hold
.7076					xt_x23:
.7076	4c f7 42	jmp $42f7		jmp xt_enter
>7079	f8 67					.word xt_base
>707b	69 5d					.word xt_x40
>707d	86 61					.word xt_umx2fmod
>707f	e1 61					.word xt_sx3ed
>7081	b0 69					.word xt_rot
>7083	05 46					.word xt_x28literalx29
>7085	09 00					.word 9
>7087	80 5c					.word xt_over
>7089	08 6a					.word xt_x3c
>708b	49 64					.word xt_x28branch0x29
>708d	95 70					.word l_278
>708f	05 46					.word xt_x28literalx29
>7091	07 00					.word 7
>7093	a1 5f					.word xt_x2b
.7095					l_278:
>7095	05 46					.word xt_x28literalx29
>7097	30 00					.word 48
>7099	a1 5f					.word xt_x2b
>709b	52 70					.word xt_hold
>709d	db 42					.word xt_exit
.709f					w_x23s:
>709f	02					.byte $02
>70a0	23 73					.text '#s'
>70a2						.fill 14
>70b0	63 70					.word w_x23
.70b2					xt_x23s:
.70b2	4c f7 42	jmp $42f7		jmp xt_enter
.70b5					l_279:
>70b5	76 70					.word xt_x23
>70b7	80 5c					.word xt_over
>70b9	80 5c					.word xt_over
>70bb	b4 62					.word xt_or
>70bd	45 63					.word xt_0x3d
>70bf	49 64					.word xt_x28branch0x29
>70c1	b5 70					.word l_279
.70c3					l_280:
>70c3	db 42					.word xt_exit
.70c5					w_sign:
>70c5	04					.byte $04
>70c6	73 69 67 6e				.text 'sign'
>70ca						.fill 12
>70d6	9f 70					.word w_x23s
.70d8					xt_sign:
.70d8	4c f7 42	jmp $42f7		jmp xt_enter
>70db	b0 69					.word xt_rot
>70dd	1e 63					.word xt_0x3c
>70df	49 64					.word xt_x28branch0x29
>70e1	e9 70					.word l_281
>70e3	05 46					.word xt_x28literalx29
>70e5	2d 00					.word 45
>70e7	52 70					.word xt_hold
.70e9					l_281:
>70e9	db 42					.word xt_exit
.70eb					w_x23x3e:
>70eb	02					.byte $02
>70ec	23 3e					.text '#>'
>70ee						.fill 14
>70fc	c5 70					.word w_sign
.70fe					xt_x23x3e:
.70fe	4c f7 42	jmp $42f7		jmp xt_enter
>7101	ec 69					.word xt_2drop
>7103	e8 68					.word xt_hld
>7105	69 5d					.word xt_x40
>7107	30 69					.word xt_pad
>7109	80 5c					.word xt_over
>710b	2c 60					.word xt_x2d
>710d	db 42					.word xt_exit
.710f					w_dx2er:
>710f	03					.byte $03
>7110	64 2e 72				.text 'd.r'
>7113						.fill 13
>7120	eb 70					.word w_x23x3e
.7122					xt_dx2er:
.7122	4c f7 42	jmp $42f7		jmp xt_enter
>7125	ca 5c					.word xt_x3er
>7127	80 5c					.word xt_over
>7129	1c 5c					.word xt_swap
>712b	a0 6a					.word xt_dabs
>712d	34 70					.word xt_x3cx23
>712f	b2 70					.word xt_x23s
>7131	d8 70					.word xt_sign
>7133	fe 70					.word xt_x23x3e
>7135	e8 5c					.word xt_rx3e
>7137	80 5c					.word xt_over
>7139	2c 60					.word xt_x2d
>713b	44 6d					.word xt_spaces
>713d	bc 6c					.word xt_type
>713f	db 42					.word xt_exit
.7141					w_dx2e:
>7141	02					.byte $02
>7142	64 2e					.text 'd.'
>7144						.fill 14
>7152	0f 71					.word w_dx2er
.7154					xt_dx2e:
.7154	4c f7 42	jmp $42f7		jmp xt_enter
>7157	71 45					.word xt_0
>7159	22 71					.word xt_dx2er
>715b	db 42					.word xt_exit
.715d					w_x2er:
>715d	02					.byte $02
>715e	2e 72					.text '.r'
>7160						.fill 14
>716e	41 71					.word w_dx2e
.7170					xt_x2er:
.7170	4c f7 42	jmp $42f7		jmp xt_enter
>7173	ca 5c					.word xt_x3er
>7175	e1 61					.word xt_sx3ed
>7177	e8 5c					.word xt_rx3e
>7179	22 71					.word xt_dx2er
>717b	db 42					.word xt_exit
.717d					w_x3f:
>717d	01					.byte $01
>717e	3f					.text '?'
>717f						.fill 15
>718e	5d 71					.word w_x2er
.7190					xt_x3f:
.7190	4c f7 42	jmp $42f7		jmp xt_enter
>7193	69 5d					.word xt_x40
>7195	38 6f					.word xt_x2e
>7197	db 42					.word xt_exit
.7199					w_dump:
>7199	04					.byte $04
>719a	64 75 6d 70				.text 'dump'
>719e						.fill 12
>71aa	7d 71					.word w_x3f
.71ac					xt_dump:
.71ac	4c f7 42	jmp $42f7		jmp xt_enter
>71af	71 45					.word xt_0
>71b1	86 64					.word xt_x28dox29
.71b3					l_282:
>71b3	54 45					.word xt_cr
>71b5	fc 5b					.word xt_dup
>71b7	71 45					.word xt_0
>71b9	1c 5c					.word xt_swap
>71bb	05 46					.word xt_x28literalx29
>71bd	05 00					.word 5
>71bf	22 71					.word xt_dx2er
>71c1	05 46					.word xt_x28literalx29
>71c3	3a 00					.word 58
>71c5	e5 44					.word xt_emit
>71c7	05 46					.word xt_x28literalx29
>71c9	08 00					.word 8
>71cb	71 45					.word xt_0
>71cd	86 64					.word xt_x28dox29
.71cf					l_284:
>71cf	fc 5b					.word xt_dup
>71d1	69 5d					.word xt_x40
>71d3	71 45					.word xt_0
>71d5	1c 5c					.word xt_swap
>71d7	05 46					.word xt_x28literalx29
>71d9	05 00					.word 5
>71db	22 71					.word xt_dx2er
>71dd	2c 62					.word xt_2x2b
>71df	03 65					.word xt_x28loopx29
>71e1	cf 71					.word l_284
.71e3					l_285:
>71e3	05 46					.word xt_x28literalx29
>71e5	08 00					.word 8
>71e7	64 65					.word xt_x28x2bloopx29
>71e9	b3 71					.word l_282
.71eb					l_283:
>71eb	e4 5b					.word xt_drop
>71ed	db 42					.word xt_exit
.71ef					w_interpret:
>71ef	09					.byte $09
>71f0	69 6e 74 65 72 70 72 65			.text 'interpret'
>71f8	74
>71f9						.fill 7
>7200	99 71					.word w_dump
.7202					xt_interpret:
.7202	4c f7 42	jmp $42f7		jmp xt_enter
.7205					l_296:
>7205	88 68					.word xt_tib
>7207	69 5d					.word xt_x40
>7209	70 68					.word xt_x3ein
>720b	69 5d					.word xt_x40
>720d	a1 5f					.word xt_x2b
>720f	af 5d					.word xt_cx40
>7211	49 64					.word xt_x28branch0x29
>7213	53 72					.word l_297
>7215	a2 6e					.word xt_x2dfind
>7217	49 64					.word xt_x28branch0x29
>7219	35 72					.word l_298
>721b	10 68					.word xt_state
>721d	69 5d					.word xt_x40
>721f	08 6a					.word xt_x3c
>7221	49 64					.word xt_x28branch0x29
>7223	2d 72					.word l_299
>7225	8c 6b					.word xt_cfa
>7227	1e 6c					.word xt_x2c
>7229	25 64					.word xt_x28branchx29
>722b	31 72					.word l_300
.722d					l_299:
>722d	8c 6b					.word xt_cfa
>722f	45 66					.word xt_execute
.7231					l_300:
>7231	25 64					.word xt_x28branchx29
>7233	4f 72					.word l_301
.7235					l_298:
>7235	e6 6b					.word xt_here
>7237	ba 6f					.word xt_number
>7239	1c 5c					.word xt_swap
>723b	e4 5b					.word xt_drop
>723d	10 68					.word xt_state
>723f	69 5d					.word xt_x40
>7241	49 64					.word xt_x28branch0x29
>7243	4f 72					.word l_302
>7245	05 46					.word xt_x28literalx29
>7247	05 46					.word xt_x28literalx29
>7249	1e 6c					.word xt_x2c
>724b	1e 6c					.word xt_x2c
>724d	c1 43					.word xt_halt
.724f					l_302:
.724f					l_301:
>724f	25 64					.word xt_x28branchx29
>7251	05 72					.word l_296
.7253					l_297:
>7253	db 42					.word xt_exit
.7255					w_catch:
>7255	05					.byte $05
>7256	63 61 74 63 68				.text 'catch'
>725b						.fill 11
>7266	ef 71					.word w_interpret
.7268					xt_catch:
.7268	4c f7 42	jmp $42f7		jmp xt_enter
>726b	ad 44					.word xt_spx40
>726d	ca 5c					.word xt_x3er
>726f	00 69					.word xt_handler
>7271	69 5d					.word xt_x40
>7273	ca 5c					.word xt_x3er
>7275	66 44					.word xt_rpx40
>7277	00 69					.word xt_handler
>7279	3d 5d					.word xt_x21
>727b	45 66					.word xt_execute
>727d	e8 5c					.word xt_rx3e
>727f	00 69					.word xt_handler
>7281	3d 5d					.word xt_x21
>7283	e8 5c					.word xt_rx3e
>7285	e4 5b					.word xt_drop
>7287	71 45					.word xt_0
>7289	db 42					.word xt_exit
.728b					w_throw:
>728b	05					.byte $05
>728c	74 68 72 6f 77				.text 'throw'
>7291						.fill 11
>729c	55 72					.word w_catch
.729e					xt_throw:
.729e	4c f7 42	jmp $42f7		jmp xt_enter
>72a1	90 69					.word xt_x3fdup
>72a3	49 64					.word xt_x28branch0x29
>72a5	bf 72					.word l_286
>72a7	00 69					.word xt_handler
>72a9	69 5d					.word xt_x40
>72ab	8d 44					.word xt_rpx21
>72ad	e8 5c					.word xt_rx3e
>72af	00 69					.word xt_handler
>72b1	3d 5d					.word xt_x21
>72b3	e8 5c					.word xt_rx3e
>72b5	1c 5c					.word xt_swap
>72b7	ca 5c					.word xt_x3er
>72b9	cc 44					.word xt_spx21
>72bb	e4 5b					.word xt_drop
>72bd	e8 5c					.word xt_rx3e
.72bf					l_286:
>72bf	db 42					.word xt_exit
.72c1					w_quit:
>72c1	04					.byte $04
>72c2	71 75 69 74				.text 'quit'
>72c6						.fill 12
>72d2	8b 72					.word w_throw
.72d4					xt_quit:
.72d4	4c f7 42	jmp $42f7		jmp xt_enter
>72d7	97 66					.word xt_forth
>72d9	5e 6c					.word xt_definitions
>72db	71 45					.word xt_0
>72dd	10 68					.word xt_state
>72df	3d 5d					.word xt_x21
.72e1					l_287:
>72e1	54 45					.word xt_cr
>72e3	10 68					.word xt_state
>72e5	69 5d					.word xt_x40
>72e7	45 63					.word xt_0x3d
>72e9	49 64					.word xt_x28branch0x29
>72eb	f9 72					.word l_289
>72ed	54 45					.word xt_cr
>72ef	05 46					.word xt_x28literalx29
>72f1	3e 00					.word 62
>72f3	e5 44					.word xt_emit
>72f5	b0 67					.word xt_bl
>72f7	e5 44					.word xt_emit
.72f9					l_289:
>72f9	f2 6d					.word xt_query
>72fb	54 45					.word xt_cr
>72fd	02 72					.word xt_interpret
>72ff	25 64					.word xt_x28branchx29
>7301	e1 72					.word l_287
.7303					l_288:
>7303	db 42					.word xt_exit
.7305					w_error:
>7305	05					.byte $05
>7306	65 72 72 6f 72				.text 'error'
>730b						.fill 11
>7316	c1 72					.word w_quit
.7318					xt_error:
.7318	4c f7 42	jmp $42f7		jmp xt_enter
>731b	fc 5b					.word xt_dup
>731d	45 63					.word xt_0x3d
>731f	fc 62					.word xt_not
>7321	49 64					.word xt_x28branch0x29
>7323	36 73					.word l_290
>7325	e6 6b					.word xt_here
>7327	9c 6c					.word xt_count
>7329	bc 6c					.word xt_type
>732b	fe 6c					.word xt_x28x2ex22x29
>732d	06 3f 20 4d 53 47 23			.ptext "? MSG#"
>7334	38 6f					.word xt_x2e
.7336					l_290:
>7336	d4 72					.word xt_quit
>7338	db 42					.word xt_exit
.733a					w_x3fcsp:
>733a	04					.byte $04
>733b	3f 63 73 70				.text '?csp'
>733f						.fill 12
>734b	05 73					.word w_error
.734d					xt_x3fcsp:
.734d	4c f7 42	jmp $42f7		jmp xt_enter
>7350	18 69					.word xt_csp
>7352	69 5d					.word xt_x40
>7354	ad 44					.word xt_spx40
>7356	2c 60					.word xt_x2d
>7358	49 64					.word xt_x28branch0x29
>735a	66 73					.word l_295
>735c	71 45					.word xt_0
>735e	05 46					.word xt_x28literalx29
>7360	19 00					.word 25
>7362	2c 60					.word xt_x2d
>7364	18 73					.word xt_error
.7366					l_295:
>7366	db 42					.word xt_exit
.7368					w_create:
>7368	06					.byte $06
>7369	63 72 65 61 74 65			.text 'create'
>736f						.fill 10
>7379	3a 73					.word w_x3fcsp
.737b					xt_create:
.737b	4c f7 42	jmp $42f7		jmp xt_enter
>737e	b0 67					.word xt_bl
>7380	52 6e					.word xt_word
>7382	7e 6c					.word xt_latest
>7384	1e 6c					.word xt_x2c
>7386	e6 6b					.word xt_here
>7388	40 68					.word xt_current
>738a	69 5d					.word xt_x40
>738c	3d 5d					.word xt_x21
>738e	db 42					.word xt_exit
.7390					w_x3a:
>7390	01					.byte $01
>7391	3a					.text ':'
>7392						.fill 15
>73a1	68 73					.word w_create
.73a3					xt_x3a:
.73a3	4c f7 42	jmp $42f7		jmp xt_enter
>73a6	ad 44					.word xt_spx40
>73a8	18 69					.word xt_csp
>73aa	3d 5d					.word xt_x21
>73ac	40 68					.word xt_current
>73ae	69 5d					.word xt_x40
>73b0	28 68					.word xt_context
>73b2	3d 5d					.word xt_x21
>73b4	7b 73					.word xt_create
>73b6	70 69					.word xt_x5d
>73b8	05 46					.word xt_x28literalx29
>73ba	4c 00					.word 76
>73bc	3e 6c					.word xt_cx2c
>73be	05 46					.word xt_x28literalx29
>73c0	f7 42					.word xt_enter
>73c2	1e 6c					.word xt_x2c
>73c4	1e 6c					.word xt_x2c
>73c6	db 42					.word xt_exit
.73c8					w_x3b:
>73c8	c1					.byte $C1
>73c9	3b					.text ';'
>73ca						.fill 15
>73d9	90 73					.word w_x3a
.73db					xt_x3b:
.73db	4c f7 42	jmp $42f7		jmp xt_enter
>73de	4d 73					.word xt_x3fcsp
>73e0	05 46					.word xt_x28literalx29
>73e2	db 42					.word xt_exit
>73e4	1e 6c					.word xt_x2c
>73e6	52 69					.word xt_x5b
>73e8	db 42					.word xt_exit
.73ea					w_initrandom:
>73ea	0a					.byte $0A
>73eb	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>73f3	6f 6d
>73f5						.fill 6
>73fb	c8 73					.word w_x3b
.73fd					xt_initrandom:
.73fd	4c f7 42	jmp $42f7		jmp xt_enter
>7400	8d 45					.word xt_1
>7402	05 46					.word xt_x28literalx29
>7404	a6 d6					.word 54950
>7406	91 5d					.word xt_cx21
>7408	db 42					.word xt_exit
.740a					w_random:
>740a	06					.byte $06
>740b	72 61 6e 64 6f 6d			.text 'random'
>7411						.fill 10
>741b	ea 73					.word w_initrandom
.741d					xt_random:
.741d	4c f7 42	jmp $42f7		jmp xt_enter
>7420	05 46					.word xt_x28literalx29
>7422	a4 d6					.word 54948
>7424	69 5d					.word xt_x40
>7426	db 42					.word xt_exit
.7428					w_iox2dpage:
>7428	07					.byte $07
>7429	69 6f 2d 70 61 67 65			.text 'io-page'
>7430						.fill 9
>7439	0a 74					.word w_random
.743b					xt_iox2dpage:
.743b	4c c2 63	jmp $63c2		jmp xt_x28constantx29
>743e	01 00					.word 0001
.7440					w_setx2diox2dtext:
>7440	0b					.byte $0B
>7441	73 65 74 2d 69 6f 2d 74			.text 'set-io-text'
>7449	65 78 74
>744c						.fill 5
>7451	28 74					.word w_iox2dpage
.7453					xt_setx2diox2dtext:
.7453	4c f7 42	jmp $42f7		jmp xt_enter
>7456	ab 45					.word xt_2
>7458	3b 74					.word xt_iox2dpage
>745a	91 5d					.word xt_cx21
>745c	db 42					.word xt_exit
.745e					w_setx2diox2dcolor:
>745e	0c					.byte $0C
>745f	73 65 74 2d 69 6f 2d 63			.text 'set-io-color'
>7467	6f 6c 6f 72
>746b						.fill 4
>746f	40 74					.word w_setx2diox2dtext
.7471					xt_setx2diox2dcolor:
.7471	4c f7 42	jmp $42f7		jmp xt_enter
>7474	05 46					.word xt_x28literalx29
>7476	03 00					.word 3
>7478	3b 74					.word xt_iox2dpage
>747a	91 5d					.word xt_cx21
>747c	db 42					.word xt_exit
.747e					w_defx2dtextx2dfgx2dcolor:
>747e	10					.byte $10
>747f	64 65 66 2d 74 65 78 74			.text 'def-text-fg-colo'
>7487	2d 66 67 2d 63 6f 6c 6f
>748f						.fill 0
>748f	5e 74					.word w_setx2diox2dcolor
.7491					xt_defx2dtextx2dfgx2dcolor:
.7491	4c f7 42	jmp $42f7		jmp xt_enter
>7494	05 46					.word xt_x28literalx29
>7496	0f 00					.word 15
>7498	90 62					.word xt_and
>749a	3b 74					.word xt_iox2dpage
>749c	af 5d					.word xt_cx40
>749e	ca 5c					.word xt_x3er
>74a0	71 45					.word xt_0
>74a2	3b 74					.word xt_iox2dpage
>74a4	91 5d					.word xt_cx21
>74a6	05 46					.word xt_x28literalx29
>74a8	04 00					.word 4
>74aa	89 60					.word xt_x2a
>74ac	05 46					.word xt_x28literalx29
>74ae	00 d8					.word 55296
>74b0	a1 5f					.word xt_x2b
>74b2	fc 5b					.word xt_dup
>74b4	05 46					.word xt_x28literalx29
>74b6	03 00					.word 3
>74b8	a1 5f					.word xt_x2b
>74ba	1c 5c					.word xt_swap
>74bc	86 64					.word xt_x28dox29
.74be					l_303:
>74be	d8 65					.word xt_i
>74c0	91 5d					.word xt_cx21
>74c2	03 65					.word xt_x28loopx29
>74c4	be 74					.word l_303
.74c6					l_304:
>74c6	e8 5c					.word xt_rx3e
>74c8	3b 74					.word xt_iox2dpage
>74ca	91 5d					.word xt_cx21
>74cc	db 42					.word xt_exit
.74ce					w_defx2dtextx2dbgx2dcolor:
>74ce	10					.byte $10
>74cf	64 65 66 2d 74 65 78 74			.text 'def-text-bg-colo'
>74d7	2d 62 67 2d 63 6f 6c 6f
>74df						.fill 0
>74df	7e 74					.word w_defx2dtextx2dfgx2dcolor
.74e1					xt_defx2dtextx2dbgx2dcolor:
.74e1	4c f7 42	jmp $42f7		jmp xt_enter
>74e4	05 46					.word xt_x28literalx29
>74e6	0f 00					.word 15
>74e8	90 62					.word xt_and
>74ea	3b 74					.word xt_iox2dpage
>74ec	af 5d					.word xt_cx40
>74ee	ca 5c					.word xt_x3er
>74f0	71 45					.word xt_0
>74f2	3b 74					.word xt_iox2dpage
>74f4	91 5d					.word xt_cx21
>74f6	05 46					.word xt_x28literalx29
>74f8	04 00					.word 4
>74fa	89 60					.word xt_x2a
>74fc	05 46					.word xt_x28literalx29
>74fe	40 d8					.word 55360
>7500	a1 5f					.word xt_x2b
>7502	fc 5b					.word xt_dup
>7504	05 46					.word xt_x28literalx29
>7506	03 00					.word 3
>7508	a1 5f					.word xt_x2b
>750a	1c 5c					.word xt_swap
>750c	86 64					.word xt_x28dox29
.750e					l_305:
>750e	d8 65					.word xt_i
>7510	91 5d					.word xt_cx21
>7512	03 65					.word xt_x28loopx29
>7514	0e 75					.word l_305
.7516					l_306:
>7516	e8 5c					.word xt_rx3e
>7518	3b 74					.word xt_iox2dpage
>751a	91 5d					.word xt_cx21
>751c	db 42					.word xt_exit
.751e					w_setx2dborderx2dcolor:
>751e	10					.byte $10
>751f	73 65 74 2d 62 6f 72 64			.text 'set-border-color'
>7527	65 72 2d 63 6f 6c 6f 72
>752f						.fill 0
>752f	ce 74					.word w_defx2dtextx2dbgx2dcolor
.7531					xt_setx2dborderx2dcolor:
.7531	4c f7 42	jmp $42f7		jmp xt_enter
>7534	3b 74					.word xt_iox2dpage
>7536	af 5d					.word xt_cx40
>7538	ca 5c					.word xt_x3er
>753a	71 45					.word xt_0
>753c	3b 74					.word xt_iox2dpage
>753e	91 5d					.word xt_cx21
>7540	05 46					.word xt_x28literalx29
>7542	05 d0					.word 53253
>7544	91 5d					.word xt_cx21
>7546	05 46					.word xt_x28literalx29
>7548	06 d0					.word 53254
>754a	91 5d					.word xt_cx21
>754c	05 46					.word xt_x28literalx29
>754e	07 d0					.word 53255
>7550	91 5d					.word xt_cx21
>7552	e8 5c					.word xt_rx3e
>7554	3b 74					.word xt_iox2dpage
>7556	91 5d					.word xt_cx21
>7558	db 42					.word xt_exit
.755a					w_setx2dborderx2dsize:
>755a	0f					.byte $0F
>755b	73 65 74 2d 62 6f 72 64			.text 'set-border-size'
>7563	65 72 2d 73 69 7a 65
>756a						.fill 1
>756b	1e 75					.word w_setx2dborderx2dcolor
.756d					xt_setx2dborderx2dsize:
.756d	4c f7 42	jmp $42f7		jmp xt_enter
>7570	3b 74					.word xt_iox2dpage
>7572	af 5d					.word xt_cx40
>7574	ca 5c					.word xt_x3er
>7576	71 45					.word xt_0
>7578	3b 74					.word xt_iox2dpage
>757a	91 5d					.word xt_cx21
>757c	80 5c					.word xt_over
>757e	80 5c					.word xt_over
>7580	b4 62					.word xt_or
>7582	49 64					.word xt_x28branch0x29
>7584	b4 75					.word l_307
>7586	05 46					.word xt_x28literalx29
>7588	1f 00					.word 31
>758a	90 62					.word xt_and
>758c	05 46					.word xt_x28literalx29
>758e	09 d0					.word 53257
>7590	91 5d					.word xt_cx21
>7592	05 46					.word xt_x28literalx29
>7594	1f 00					.word 31
>7596	90 62					.word xt_and
>7598	05 46					.word xt_x28literalx29
>759a	08 d0					.word 53256
>759c	91 5d					.word xt_cx21
>759e	05 46					.word xt_x28literalx29
>75a0	04 d0					.word 53252
>75a2	af 5d					.word xt_cx40
>75a4	05 46					.word xt_x28literalx29
>75a6	01 00					.word 1
>75a8	b4 62					.word xt_or
>75aa	05 46					.word xt_x28literalx29
>75ac	04 d0					.word 53252
>75ae	91 5d					.word xt_cx21
>75b0	25 64					.word xt_x28branchx29
>75b2	c8 75					.word l_308
.75b4					l_307:
>75b4	05 46					.word xt_x28literalx29
>75b6	04 d0					.word 53252
>75b8	af 5d					.word xt_cx40
>75ba	05 46					.word xt_x28literalx29
>75bc	fe 00					.word 254
>75be	90 62					.word xt_and
>75c0	05 46					.word xt_x28literalx29
>75c2	04 d0					.word 53252
>75c4	91 5d					.word xt_cx21
>75c6	ec 69					.word xt_2drop
.75c8					l_308:
>75c8	e8 5c					.word xt_rx3e
>75ca	3b 74					.word xt_iox2dpage
>75cc	91 5d					.word xt_cx21
>75ce	db 42					.word xt_exit
.75d0					w_maze:
>75d0	04					.byte $04
>75d1	6d 61 7a 65				.text 'maze'
>75d5						.fill 12
>75e1	5a 75					.word w_setx2dborderx2dsize
.75e3					xt_maze:
.75e3	4c f7 42	jmp $42f7		jmp xt_enter
>75e6	fd 73					.word xt_initrandom
.75e8					l_309:
>75e8	1d 74					.word xt_random
>75ea	8d 45					.word xt_1
>75ec	90 62					.word xt_and
>75ee	05 46					.word xt_x28literalx29
>75f0	cd 00					.word 205
>75f2	a1 5f					.word xt_x2b
>75f4	e5 44					.word xt_emit
>75f6	25 64					.word xt_x28branchx29
>75f8	e8 75					.word l_309
.75fa					l_310:
>75fa	db 42					.word xt_exit
.75fc					w_cold:
>75fc	04					.byte $04
>75fd	63 6f 6c 64				.text 'cold'
>7601						.fill 12
>760d	d0 75					.word w_maze
.760f					xt_cold:
.760f	4c f7 42	jmp $42f7		jmp xt_enter
>7612	97 66					.word xt_forth
>7614	5e 6c					.word xt_definitions
>7616	c8 67					.word xt_s0
>7618	69 5d					.word xt_x40
>761a	cc 44					.word xt_spx21
>761c	e0 67					.word xt_r0
>761e	69 5d					.word xt_x40
>7620	8d 44					.word xt_rpx21
>7622	71 45					.word xt_0
>7624	b8 68					.word xt_blk
>7626	3d 5d					.word xt_x21
>7628	05 46					.word xt_x28literalx29
>762a	00 08					.word 2048
>762c	58 68					.word xt_dp
>762e	3d 5d					.word xt_x21
>7630	d8 6e					.word xt_decimal
>7632	fe 6c					.word xt_x28x2ex22x29
>7634	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>763c	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>764c	30 2e 30 30 2e 30 30
>7653	54 45					.word xt_cr
>7655	d4 72					.word xt_quit
>7657	db 42					.word xt_exit

;******  Processing file: mf_post_65c02.asm

.7659					endcode:

;******  Return to file: forth.asm


;******  End of listing
