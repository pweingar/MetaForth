
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Feb 22 13:48:31 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$a000					USERAREA = $A000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa	cc 0a				vnmi:       .word <>h_nmi
>fffc	00 b0				vreset:     .word <>boot
>fffe	cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
>0020					shell_start .word ?                 ; Address for the recognized shell program
>0022					cur_line    .word ?                 ; Address of the current line on the text screen
>0024					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200					curs_color  .byte ?                 ; Current color for printing
>0201					curs_x      .byte ?                 ; Current column for the text cursor
>0202					curs_y      .byte ?                 ; Current row for the text cursor
>0203					old_y       .byte ?                 ; Previous cursor row
>0204					curs_width  .byte ?                 ; Width of the screen in text columns
>0205					curs_height .byte ?                 ; Height of the screen in text columns
.b000	4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003	4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006	4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009	4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c	4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f	4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012	4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015	4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018	4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800	a9 f1		lda #$f1	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802	a0 15		ldy #$15	            ldy #>start
.0804	20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807	4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a					isetshell:
.080a	84 21		sty $21		            sty shell_start+1
.080c	85 20		sta $20		            sta shell_start
.080e	60		rts		            rts
.080f					iwarm:
.080f	78		sei		            sei                     ; Disable IRQs
.0810	d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811	a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813	9a		txs		            txs
.0814	a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816	85 01		sta $01		            sta MMU_IO_CTRL
.0818	20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b	20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e	20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821	6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824					inittext:
.0824	a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826	8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829	9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c	a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e	8d 04 02	sta $0204	            sta curs_width
.0831	a9 3c		lda #$3c	            lda #60
.0833	8d 05 02	sta $0205	            sta curs_height
.0836	a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838	8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b	a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d	8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840	a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842	8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845	a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847	8d 00 02	sta $0200	            sta curs_color
.084a	a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c	8d 03 02	sta $0203	            sta old_y
.084f	20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852	20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855	20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858	60		rts		            rts
.0859					initint:
.0859	a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b	8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e	a9 ff		lda #$ff	            lda #$ff
.0860	8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863	8d 60 d6	sta $d660	            sta INT_PEND_0
.0866	8d 61 d6	sta $d661	            sta INT_PEND_1
.0869	58		cli		            cli
.086a	60		rts		            rts
=$7f					CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b					initfont:
.086b	48		pha		            pha
.086c	da		phx		            phx
.086d	5a		phy		            phy
.086e	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870	48		pha		            pha
.0871	a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873	85 01		sta $01		            sta MMU_IO_CTRL
.0875	a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877	85 24		sta $24		            sta src_ptr
.0879	a9 0a		lda #$0a	            lda #>bios_font
.087b	85 25		sta $25		            sta src_ptr+1
.087d	a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f	85 26		sta $26		            sta dst_ptr
.0881	a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883	85 27		sta $27		            sta dst_ptr+1
.0885	a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887	a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889	b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b	91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d	c8		iny		            iny                     ; Move to the next byte
.088e	d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890	e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892	e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894	ca		dex		            dex                     ; Count down the pages moved
.0895	d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897	68		pla		            pla
.0898	85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a	7a		ply		            ply
.089b	fa		plx		            plx
.089c	68		pla		            pla
.089d	60		rts		            rts
=$f4					DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e					initlut:
.089e	48		pha		            pha
.089f	5a		phy		            phy
.08a0	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2	48		pha		            pha
.08a3	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5	85 01		sta $01		            sta MMU_IO_CTRL
.08a7	a0 00		ldy #$00	            ldy #0
.08a9	b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2	c8		iny		            iny
.08b3	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5	d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7	68		pla		            pla
.08b8	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba	7a		ply		            ply
.08bb	68		pla		            pla
.08bc	60		rts		            rts
>08bd	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd					consclr:
.08fd	48		pha		            pha
.08fe	da		phx		            phx
.08ff	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901	85 22		sta $22		            sta cur_line
.0903	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905	85 23		sta $23		            sta cur_line+1
.0907	a0 00		ldy #$00	            ldy #0
.0909	20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c	c8		iny		            iny                     ; Move to the next line
.090d	cc 05 02	cpy $0205	            cpy curs_height
.0910	f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913	a5 22		lda $22		            lda cur_line
.0915	6d 04 02	adc $0204	            adc curs_width
.0918	85 22		sta $22		            sta cur_line
.091a	a5 23		lda $23		            lda cur_line+1
.091c	69 00		adc #$00	            adc #0
.091e	85 23		sta $23		            sta cur_line+1
.0920	80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922	9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925	9c 02 02	stz $0202	            stz curs_y
.0928	20 2e 09	jsr $092e	            jsr cursset
.092b	fa		plx		            plx
.092c	68		pla		            pla
.092d	60		rts		            rts
.092e					cursset:
.092e	48		pha		            pha
.092f	5a		phy		            phy
.0930	ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933	cd 04 02	cmp $0204	            cmp curs_width
.0936	90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938	9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b	ee 02 02	inc $0202	            inc curs_y
.093e					chk_row:
.093e	ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941	cd 05 02	cmp $0205	            cmp curs_height
.0944	90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946	ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949	3a		dec a		            dec a
.094a	8d 02 02	sta $0202	            sta curs_y
.094d	20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950	ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953	8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959	ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962	ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965	cd 02 02	cmp $0202	            cmp curs_y
.0968	f0 21		beq $098b	            beq done                ; Yes: we are done
.096a	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c	85 22		sta $22		            sta cur_line
.096e	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970	85 23		sta $23		            sta cur_line+1
.0972	ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975	8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978	f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a	18		clc		loop:       clc                     ; Move cur_line to the next line
.097b	a5 22		lda $22		            lda cur_line
.097d	6d 04 02	adc $0204	            adc curs_width
.0980	85 22		sta $22		            sta cur_line
.0982	a5 23		lda $23		            lda cur_line+1
.0984	69 00		adc #$00	            adc #0
.0986	85 23		sta $23		            sta cur_line+1
.0988	88		dey		            dey                     ; Decrement line counter
.0989	d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b	7a		ply		done:       ply
.098c	68		pla		            pla
.098d	60		rts		            rts
.098e					consscroll:
.098e	48		pha		            pha
.098f	da		phx		            phx
.0990	a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992	48		pha		            pha
.0993	a5 22		lda $22		            lda cur_line
.0995	48		pha		            pha
.0996	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998	48		pha		            pha
.0999	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b	85 26		sta $26		            sta dst_ptr
.099d	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f	85 27		sta $27		            sta dst_ptr+1
.09a1	18		clc		            clc                     ; src_ptr is the second line
.09a2	a5 26		lda $26		            lda dst_ptr
.09a4	6d 04 02	adc $0204	            adc curs_width
.09a7	85 24		sta $24		            sta src_ptr
.09a9	a5 27		lda $27		            lda dst_ptr+1
.09ab	69 00		adc #$00	            adc #0
.09ad	85 25		sta $25		            sta src_ptr+1
.09af	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3	85 01		sta $01		            sta MMU_IO_CTRL
.09b5	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7	b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9	91 26		sta ($26),y	            sta (dst_ptr),y
.09bb	c8		iny		            iny
.09bc	cc 04 02	cpy $0204	            cpy curs_width
.09bf	d0 f6		bne $09b7	            bne loop1
.09c1	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3	85 01		sta $01		            sta MMU_IO_CTRL
.09c5	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7	b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9	91 26		sta ($26),y	            sta (dst_ptr),y
.09cb	c8		iny		            iny
.09cc	cc 04 02	cpy $0204	            cpy curs_width
.09cf	d0 f6		bne $09c7	            bne loop2
.09d1	a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3	85 26		sta $26		            sta dst_ptr
.09d5	a5 25		lda $25		            lda src_ptr+1
.09d7	85 27		sta $27		            sta dst_ptr+1
.09d9	18		clc		            clc                     ; Move src_ptr to the next line
.09da	a5 24		lda $24		            lda src_ptr
.09dc	6d 04 02	adc $0204	            adc curs_width
.09df	85 24		sta $24		            sta src_ptr
.09e1	a5 25		lda $25		            lda src_ptr+1
.09e3	69 00		adc #$00	            adc #0
.09e5	85 25		sta $25		            sta src_ptr+1
.09e7	e8		inx		            inx                     ; Move src line number to the next row
.09e8	ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb	d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed	a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef	85 22		sta $22		            sta cur_line
.09f1	a5 27		lda $27		            lda dst_ptr+1
.09f3	85 22		sta $22		            sta cur_line
.09f5	20 04 0a	jsr $0a04	            jsr clrline
.09f8	68		pla		            pla                     ; Restore the original I/O page
.09f9	85 01		sta $01		            sta MMU_IO_CTRL
.09fb	68		pla		            pla                     ; Restore the current line
.09fc	85 22		sta $22		            sta cur_line
.09fe	68		pla		            pla
.09ff	85 23		sta $23		            sta cur_line+1
.0a01	fa		plx		            plx
.0a02	68		pla		            pla
.0a03	60		rts		            rts
.0a04					clrline:
.0a04	48		pha		            pha
.0a05	5a		phy		            phy
.0a06	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08	48		pha		            pha
.0a09	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b	85 01		sta $01		            sta MMU_IO_CTRL
.0a0d	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f	a9 20		lda #$20	            lda #' '
.0a11	91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13	c8		iny		            iny
.0a14	cc 04 02	cpy $0204	            cpy curs_width
.0a17	d0 f8		bne $0a11	            bne loop1
.0a19	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b	85 01		sta $01		            sta MMU_IO_CTRL
.0a1d	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f	ad 00 02	lda $0200	            lda curs_color
.0a22	91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24	c8		iny		            iny
.0a25	cc 04 02	cpy $0204	            cpy curs_width
.0a28	d0 f8		bne $0a22	            bne loop2
.0a2a	68		pla		            pla                     ; Restore the original I/O page
.0a2b	85 01		sta $01		            sta MMU_IO_CTRL
.0a2d	7a		ply		            ply
.0a2e	68		pla		            pla
.0a2f	60		rts		            rts
.0a30					iconout:
.0a30	5a		phy		            phy
.0a31	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33	d0 0b		bne $0a40	            bne not_cr
.0a35	9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38	ee 02 02	inc $0202	            inc curs_y
.0a3b	20 2e 09	jsr $092e	            jsr cursset
.0a3e	80 44		bra $0a84	            bra done
.0a40	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42	d0 05		bne $0a49	            bne not_ff
.0a44	20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47	80 3b		bra $0a84	            bra done
.0a49	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b	d0 15		bne $0a62	            bne not_bs
.0a4d	ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50	f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52	3a		dec a		            dec a                   ; No: move it back one
.0a53	8d 01 02	sta $0201	            sta curs_x
.0a56	20 2e 09	jsr $092e	            jsr cursset
.0a59					bs_leftmost:
.0a59	a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60	80 22		bra $0a84	            bra done
.0a62	85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66	48		pha		            pha
.0a67	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69	85 01		sta $01		            sta MMU_IO_CTRL
.0a6b	a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74	85 01		sta $01		            sta MMU_IO_CTRL
.0a76	ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79	91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b	68		pla		            pla                     ; Restore the I/O page
.0a7c	85 01		sta $01		            sta MMU_IO_CTRL
.0a7e	ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81	20 2e 09	jsr $092e	            jsr cursset
.0a84	7a		ply		done:       ply
.0a85	60		rts		            rts
.0a86					iprintah:
.0a86	da		phx		            phx
.0a87	48		pha		            pha
.0a88	4a		lsr a		            lsr a
.0a89	4a		lsr a		            lsr a
.0a8a	4a		lsr a		            lsr a
.0a8b	4a		lsr a		            lsr a
.0a8c	29 0f		and #$0f	            and #$0f
.0a8e	aa		tax		            tax                     ; Convert it to an index
.0a8f	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95	68		pla		            pla
.0a96	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98	aa		tax		            tax                     ; Convert it to an index
.0a99	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f	fa		plx		            plx
.0aa0	60		rts		            rts
.0aa1					iprintyah:
.0aa1	48		pha		            pha
.0aa2	98		tya		            tya
.0aa3	20 12 b0	jsr $b012	            jsr printah
.0aa6	68		pla		            pla
.0aa7	20 12 b0	jsr $b012	            jsr printah
.0aaa	60		rts		            rts
>0aab	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3	38 39 41 42 43 44 45 46
.0abb					iprints:
.0abb	48		pha		            pha
.0abc	5a		phy		            phy
.0abd	a0 00		ldy #$00	            ldy #0
.0abf	b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1	f0 06		beq $0ac9	            beq done
.0ac3	20 09 b0	jsr $b009	            jsr conout
.0ac6	c8		iny		            iny
.0ac7	d0 f6		bne $0abf	            bne loop
.0ac9	7a		ply		done:       ply
.0aca	68		pla		            pla
.0acb	60		rts		            rts
.0acc					h_nmi:
.0acc	40		rti		            rti                     ; Just return
.0acd					h_irq:
.0acd	48		pha		            pha
.0ace	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0	48		pha		            pha
.0ad1	64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3	ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6	89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8	f0 03		beq $0add	            beq done                ; No: we're done
.0ada	20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add					done:
.0add	a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf	8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2	8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5	68		pla		            pla                     ; Restore the IO page settings
.0ae6	85 01		sta $01		            sta MMU_IO_CTRL
.0ae8	68		pla		            pla
.0ae9	40		rti		            rti                     ; Just return
>0aea	00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2	7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02	00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12	38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32	00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52	30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62	10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72	04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82	48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92	1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2	10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2	10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2	00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2	00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2	00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2	10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02	28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12	60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22	08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32	10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52	00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62	00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72	10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92	7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2	7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2	38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2	00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2	00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2	38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2	10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02	18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12	7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22	38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32	38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42	44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52	44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62	38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72	38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82	38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92	44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2	44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2	44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2	3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2	00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2	00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02	00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12	00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22	00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32	00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42	40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52	00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62	00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72	00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82	00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92	00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2	00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2	00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2	0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2	30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2	7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2	48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02	10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12	20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22	00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32	28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42	28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52	20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62	10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72	00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82	10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92	20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2	20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2	28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2	00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2	44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2	18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2	10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002	10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012	14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022	10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032	00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042	42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052	10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062	00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072	cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082	10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092	10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2	00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2	28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2	00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2	28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2	00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2	10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102	10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112	10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122	28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132	00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142	00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152	00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162	10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172	00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182	28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192	00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2	28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2	10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2	ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2	00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202	00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212	00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222	00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232	38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242	3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252	00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262	38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272	10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282	08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292	10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2	00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2	00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2	1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2	38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2	00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642					KBD_SCAN = $d642
=$d644					KBD_STAT = $d644
=$01					KBD_RDY = $01
=$01					KBD_ST_F0 = $01
=$02					KBD_ST_E0 = $02
=$80					KBD_SHIFT = $80
=$81					KBD_CTRL = $81
=$82					KBD_ALT = $82
=$83					KBD_OS = $83
=$84					KBD_CAP = $84
=$01					KBD_MOD_SHIFT = $01
=$02					KBD_MOD_CTRL = $02
=$04					KBD_MOD_ALT = $04
=$08					KBD_MOD_OS = $08
=$10					KBD_MOD_CAP = $10
=80					KBD_BUFFER_SIZE = 80
>0206					kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207					kbd_mods    .byte ?         ; The current state of the modifier keys
>0208					kbd_buffer  .fill 80        ; Keyboard buffer
>0258					kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea					initkbd:
.12ea	9c 06 02	stz $0206	            stz kbd_state
.12ed	9c 07 02	stz $0207	            stz kbd_mods
.12f0	9c 58 02	stz $0258	            stz kbd_head
.12f3	60		rts		            rts
.12f4					kbd_status:
.12f4	ad 58 02	lda $0258	            lda kbd_head
.12f7	f0 03		beq $12fc	            beq is_empty
.12f9	a9 01		lda #$01	            lda #1
.12fb	60		rts		            rts
.12fc					is_empty:
.12fc	60		rts		            rts
.12fd					kbd_enqueue:
.12fd	da		phx		            phx
.12fe	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301	e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303	b0 07		bcs $130c	            bge done
.1305	9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308	e8		inx		            inx
.1309	8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c					done:
.130c	fa		plx		            plx
.130d	60		rts		            rts
.130e					kbd_dequeue:
.130e	da		phx		            phx
.130f	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312	f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314	ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317	48		pha		            pha                     ; Save it temporarily to the stack
.1318	a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a					loop:
.131a	bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d	9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320	e8		inx		            inx                     ; Move to the next character
.1321	ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324	d0 f4		bne $131a	            bne loop
.1326	ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329	68		pla		            pla                     ; Get the character back and return
.132a	80 02		bra $132e	            bra done
.132c					is_empty:
.132c	a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e					done:
.132e	fa		plx		            plx
.132f	60		rts		            rts
.1330					handlekbd:
.1330	ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333	29 01		and #$01	            and #KBD_RDY
.1335	d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337	ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a	f0 08		beq $1344	            beq st_0        ; If base state...
.133c	c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e	f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340	9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343					done:
.1343	60		rts		            rts
.1344					st_0:
.1344	ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347	c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349	d0 07		bne $1352	            bne not_f0
.134b	a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d	8d 06 02	sta $0206	            sta kbd_state
.1350	80 f1		bra $1343	            bra done
.1352	c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354	d0 07		bne $135d	            bne not_f0e0
.1356	a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358	8d 06 02	sta $0206	            sta kbd_state
.135b	80 e6		bra $1343	            bra done
.135d					not_f0e0:
.135d	48		pha		            pha
.135e	ad 07 02	lda $0207	            lda kbd_mods
.1361	89 10		bit #$10	            bit #KBD_MOD_CAP
.1363	d0 0b		bne $1370	            bne read_caps
.1365	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367	d0 19		bne $1382	            bne read_shift
.1369	68		pla		            pla
.136a	aa		tax		            tax
.136b	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e	80 17		bra $1387	            bra proc_ascii
.1370					read_caps:
.1370	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372	d0 07		bne $137b	            bne read_caps_shift
.1374	68		pla		            pla
.1375	aa		tax		            tax
.1376	bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379	80 0c		bra $1387	            bra proc_ascii
.137b					read_caps_shift:
.137b	68		pla		            pla
.137c	aa		tax		            tax
.137d	bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380	80 05		bra $1387	            bra proc_ascii
.1382					read_shift:
.1382	68		pla		            pla
.1383	aa		tax		            tax
.1384	bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387					proc_ascii:
.1387	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389	f0 09		beq $1394	            beq raise_shift
.138b	c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d	f0 0f		beq $139e	            beq toggle_caps
.138f	20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392	80 af		bra $1343	            bra done
.1394					raise_shift:
.1394	ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397	09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399	8d 07 02	sta $0207	            sta kbd_mods
.139c	80 a5		bra $1343	            bra done
.139e					toggle_caps:
.139e	ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1	49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3	8d 07 02	sta $0207	            sta kbd_mods
.13a6	80 9b		bra $1343	            bra done
.13a8					st_f0:
.13a8	ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab	aa		tax		            tax
.13ac	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1	d0 08		bne $13bb	            bne exit_f0
.13b3	ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6	29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8	8d 07 02	sta $0207	            sta kbd_mods
.13bb					exit_f0:
.13bb	9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be	80 83		bra $1343	            bra done
>13c0	00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8	00 00 00 00 00 08 60 00
>13d0	00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8	00 00 7a 73 61 77 32 00
>13e0	00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8	00 20 76 66 74 72 35 00
>13f0	00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8	00 00 6d 6a 75 37 38 00
>1400	00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408	00 2e 2f 6c 3b 70 2d 00
>1410	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418	84 80 0d 5d 00 5c 00 00
>1420	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428	00 00 00 00 00 00 00 00
>1430	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438	00 00 00 00 00 00 00 00
>1440	00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448	00 00 00 00 00 08 7e 00
>1450	00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458	00 00 5a 53 41 57 40 00
>1460	00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468	00 20 56 46 54 52 25 00
>1470	00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478	00 00 4d 4a 55 26 2a 00
>1480	00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488	00 3e 3f 4c 3a 50 5f 00
>1490	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498	84 80 0d 7d 00 7c 00 00
>14a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8	00 00 00 00 00 00 00 00
>14b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8	00 00 00 00 00 00 00 00
>14c0	00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8	00 00 00 00 00 08 60 00
>14d0	00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8	00 00 5a 53 41 57 32 00
>14e0	00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8	00 20 56 46 54 52 35 00
>14f0	00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8	00 00 4d 4a 55 37 38 00
>1500	00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508	00 2e 2f 4c 3b 50 2d 00
>1510	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518	84 80 0d 5d 00 5c 00 00
>1520	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528	00 00 00 00 00 00 00 00
>1530	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538	00 00 00 00 00 00 00 00
>1540	00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548	00 00 00 00 00 08 7e 00
>1550	00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558	00 00 7a 73 61 77 40 00
>1560	00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568	00 20 76 66 74 72 25 00
>1570	00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578	00 00 6d 6a 75 26 2a 00
>1580	00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588	00 3e 3f 6c 3a 70 5f 00
>1590	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598	84 80 0d 7d 00 7c 00 00
>15a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8	00 00 00 00 00 00 00 00
>15b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8	00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028					ip      .word ?         ; Instruction pointer
>002a					wp      .word ?         ; Word pointer
>002c					up      .word ?         ; User pointer
>002e					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030					test    .word ?         ; Pointer to the current test name
>0032					tmp     .fill 4
>0036					savex   .byte ?
>0037					counter .byte ?         ; A counter used for some code
>0038					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0	4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8	68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5					init_user:
>15d5	6e 00				        .word $006e     ; Initial PSP (S0)
>15d7	ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9	0a 00				        .word 10        ; Initial BASE
>15db	00 00				        .word 0         ; Initial STATE
>15dd	00 00				        .word 0         ; Initial CONTEXT
>15df	00 00				        .word 0         ; Initial CURRENT
>15e1	c1 48				        .word <>endcode ; Initial DP
>15e3	00 00				        .word 0         ; Initial >IN
>15e5	00 bf				        .word $bf00     ; Initial TIB
>15e7	00 00				        .word 0         ; Initial SOURCE-ID
>15e9	00 00				        .word 0         ; Initial BLK
>15eb	ff ff				        .word $ffff     ; Initial DPL
>15ed	00 00				        .word 0         ; Initial HLD
>15ef	00 00				        .word 0         ; Initial HANDLER
.15f1					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
=20					user_blk = 20
=22					user_dpl = 22
=24					user_hld = 24
=26					user_handler = 26
.15f1	a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15f3	9a		txs		        txs
.15f4	a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15f6	a9 15		lda #$15	        lda #<vstart
.15f8	85 28		sta $28		        sta ip
.15fa	a9 16		lda #$16	        lda #>vstart
.15fc	85 29		sta $29		        sta ip+1
.15fe	a9 00		lda #$00	        lda #<USERAREA
.1600	85 2c		sta $2c		        sta up
.1602	a9 a0		lda #$a0	        lda #>USERAREA
.1604	85 2d		sta $2d		        sta up+1
.1606	a0 00		ldy #$00	        ldy #0
.1608					init_user_loop:
.1608	b9 d5 15	lda $15d5,y	        lda init_user,y
.160b	91 2c		sta ($2c),y	        sta (up),y
.160d	c8		iny		        iny
.160e	c0 1c		cpy #$1c	        cpy #(init_user_end - init_user)
.1610	d0 f6		bne $1608	        bne init_user_loop
.1612	4c 37 16	jmp $1637	        jmp next
>1615	49 48				vstart  .word xt_cold
>1617	05 17				        .word xt_halt
.1619	6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.161c	68		pla		i_exit  pla             ; ip := pop()
.161d	85 28		sta $28		        sta ip
.161f	68		pla		        pla
.1620	85 29		sta $29		        sta ip+1
.1622	80 13		bra $1637	        bra next        ; jmp next
.1624	a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1626	48		pha		        pha
.1627	a5 28		lda $28		        lda ip
.1629	48		pha		        pha
.162a	18		clc		        clc             ; ip := wp + 3
.162b	a5 2a		lda $2a		        lda wp
.162d	69 03		adc #$03	        adc #3
.162f	85 28		sta $28		        sta ip
.1631	a5 2b		lda $2b		        lda wp+1
.1633	69 00		adc #$00	        adc #0
.1635	85 29		sta $29		        sta ip+1
.1637	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1639	b2 28		lda ($28)	        lda (ip)
.163b	85 2a		sta $2a		        sta wp
.163d	b1 28		lda ($28),y	        lda (ip),y
.163f	85 2b		sta $2b		        sta wp+1
.1641	18		clc		        clc             ; ip := ip + 2
.1642	a5 28		lda $28		        lda ip
.1644	69 02		adc #$02	        adc #2
.1646	85 28		sta $28		        sta ip
.1648	a5 29		lda $29		        lda ip+1
.164a	69 00		adc #$00	        adc #0
.164c	85 29		sta $29		        sta ip+1
.164e	6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.1651					w_testname:
>1651	08					.byte $08
>1652	74 65 73 74 6e 61 6d 65			.text 'testname'
>165a						.fill 8
>1662	00 00					.word 0
.1664					xt_testname:
.1664	b5 02		lda $02,x		lda pstack+2,x
.1666	85 30		sta $30			sta test
.1668	b5 03		lda $03,x		lda pstack+3,x
.166a	85 31		sta $31			sta test+1
.166c	e8		inx			inx
.166d	e8		inx			inx
.166e	4c 37 16	jmp $1637		jmp next
.1671					w_assertx3d:
>1671	07					.byte $07
>1672	61 73 73 65 72 74 3d			.text 'assert='
>1679						.fill 9
>1682	51 16					.word w_testname
.1684					xt_assertx3d:
.1684	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1686	d5 04		cmp $04,x		cmp pstack+4,x
.1688	d0 0e		bne $1698		bne fail            ; If not, fail
.168a	b5 03		lda $03,x		lda pstack+3,x
.168c	d5 05		cmp $05,x		cmp pstack+5,x
.168e	d0 08		bne $1698		bne fail
.1690	8a		txa			txa                 ; If so, clean up the stack
.1691	18		clc			clc
.1692	69 04		adc #$04		adc #4
.1694	aa		tax			tax
.1695	4c 37 16	jmp $1637		jmp next            ; And continue
.1698						fail:
.1698	a9 d5		lda #$d5		lda #<leadin        ; Print the failure message
.169a	85 24		sta $24			sta src_ptr
.169c	a9 16		lda #$16		lda #>leadin
.169e	85 25		sta $25			sta src_ptr+1
.16a0	20 18 b0	jsr $b018		jsr prints
.16a3	a5 30		lda $30			lda test            ; Print the name of the test
.16a5	85 24		sta $24			sta src_ptr
.16a7	a5 31		lda $31			lda test+1
.16a9	85 25		sta $25			sta src_ptr+1
.16ab	20 18 b0	jsr $b018		jsr prints
.16ae	a9 e8		lda #$e8		lda #<actual        ; Print the "Actual" label
.16b0	85 24		sta $24			sta src_ptr
.16b2	a9 16		lda #$16		lda #>actual
.16b4	85 25		sta $25			sta src_ptr+1
.16b6	20 18 b0	jsr $b018		jsr prints
.16b9	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.16bb	b5 04		lda $04,x		lda pstack+4,x
.16bd	20 15 b0	jsr $b015		jsr printyah
.16c0	a9 dc		lda #$dc		lda #<expected      ; Print the "Expected" label
.16c2	85 24		sta $24			sta src_ptr
.16c4	a9 16		lda #$16		lda #>expected
.16c6	85 25		sta $25			sta src_ptr+1
.16c8	20 18 b0	jsr $b018		jsr prints
.16cb	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16cd	b5 02		lda $02,x		lda pstack+2,x
.16cf	20 15 b0	jsr $b015		jsr printyah
.16d2						lock:
.16d2	ea		nop			nop                 ; Lock up
.16d3	80 fd		bra $16d2		bra lock
.16d5						leadin:
>16d5	46 41 49 4c 3a 20 00			.null "FAIL: "
.16dc						expected:
>16dc	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16e4	44 3a 20 00
.16e8						actual:
>16e8	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16f0	20 00
.16f2					w_halt:
>16f2	04					.byte $04
>16f3	68 61 6c 74				.text 'halt'
>16f7						.fill 12
>1703	71 16					.word w_assertx3d
.1705					xt_halt:
.1705	a9 69		lda #$69		lda #<registers         ; Print register banner
.1707	85 24		sta $24			sta src_ptr
.1709	a9 17		lda #$17		lda #>registers
.170b	85 25		sta $25			sta src_ptr+1
.170d	20 18 b0	jsr $b018		jsr prints
.1710	a4 29		ldy $29			ldy ip+1                ; Print the IP
.1712	a5 28		lda $28			lda ip
.1714	20 15 b0	jsr $b015		jsr printyah
.1717	a9 20		lda #$20		lda #' '
.1719	20 09 b0	jsr $b009		jsr conout
.171c	a4 2b		ldy $2b			ldy wp+1                ; Print the WP
.171e	a5 2a		lda $2a			lda wp
.1720	20 15 b0	jsr $b015		jsr printyah
.1723	a9 20		lda #$20		lda #' '
.1725	20 09 b0	jsr $b009		jsr conout
.1728	86 36		stx $36			stx savex               ; Print the return stack pointer
.172a	a0 01		ldy #$01		ldy #$01
.172c	ba		tsx			tsx
.172d	8a		txa			txa
.172e	20 15 b0	jsr $b015		jsr printyah
.1731	a6 36		ldx $36			ldx savex
.1733	a9 20		lda #$20		lda #' '
.1735	20 09 b0	jsr $b009		jsr conout
.1738	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.173a	8a		txa			txa
.173b	20 15 b0	jsr $b015		jsr printyah
.173e	a9 0d		lda #$0d		lda #13
.1740	20 09 b0	jsr $b009		jsr conout
.1743	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.1745	b0 1f		bcs $1766		bge lock
.1747	a9 17		lda #$17		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.1749	85 25		sta $25			sta src_ptr+1
.174b	a9 84		lda #$84		lda #<stackmsg
.174d	85 24		sta $24			sta src_ptr
.174f	20 18 b0	jsr $b018		jsr prints
.1752						loop:
.1752	e0 6e		cpx #$6e		cpx #$6e
.1754	b0 10		bcs $1766		bge lock
.1756	b4 03		ldy $03,x		ldy pstack+3,x
.1758	b5 02		lda $02,x		lda pstack+2,x
.175a	e8		inx			inx
.175b	e8		inx			inx
.175c	20 15 b0	jsr $b015		jsr printyah
.175f	a9 20		lda #$20		lda #' '
.1761	20 09 b0	jsr $b009		jsr conout
.1764	80 ec		bra $1752		bra loop
.1766						lock:
.1766						wait:
.1766	ea		nop			nop
.1767	80 fd		bra $1766		bra wait
>1769	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>1771	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>1781	7c 20 00				.null "| "
>1784	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>178c	65 72 20 53 74 61 63 6b 3a 0d 00
.1797					w_rpx40:
>1797	03					.byte $03
>1798	72 70 40				.text 'rp@'
>179b						.fill 13
>17a8	f2 16					.word w_halt
.17aa					xt_rpx40:
.17aa	86 36		stx $36			stx savex           ; Save the parameter stack pointer
.17ac	ba		tsx			tsx                 ; Get the return stack pointer
.17ad	85 32		sta $32			sta tmp             ; Save it for later
.17af	a6 36		ldx $36			ldx savex           ; Recover the parameter stack pointer
.17b1	a9 01		lda #$01		lda #$01            ; Get the high byte of the RSP
.17b3	95 01		sta $01,x		sta pstack+1,x      ; Save it to the parameter stack
.17b5	a5 32		lda $32			lda tmp             ; Get the low byte of the RSP
.17b7	95 00		sta $00,x		sta pstack,x        ; Save it to the parameter stack
.17b9	ca		dex			dex
.17ba	ca		dex			dex
.17bb	4c 37 16	jmp $1637		jmp next
.17be					w_rpx21:
>17be	03					.byte $03
>17bf	72 70 21				.text 'rp!'
>17c2						.fill 13
>17cf	97 17					.word w_rpx40
.17d1					xt_rpx21:
.17d1	86 36		stx $36			stx savex           ; Save the parameter stack pointer
.17d3	b5 02		lda $02,x		lda pstack+2,x      ; Get the new RSP from the parameter stack
.17d5	aa		tax			tax
.17d6	9a		txs			txs                 ; Set the RSP
.17d7	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.17d9	e8		inx			inx
.17da	e8		inx			inx
.17db	4c 37 16	jmp $1637		jmp next
.17de					w_spx40:
>17de	03					.byte $03
>17df	73 70 40				.text 'sp@'
>17e2						.fill 13
>17ef	be 17					.word w_rpx21
.17f1					xt_spx40:
.17f1	a9 00		lda #$00		lda #>pstack        ; Get the high byte of the stack address
.17f3	95 01		sta $01,x		sta pstack+1,x      ; And push it to the stack
.17f5	8a		txa			txa                 ; Get the low byte of the stack address
.17f6	95 00		sta $00,x		sta pstack,x        ; And push it to the stack
.17f8	ca		dex			dex
.17f9	ca		dex			dex
.17fa	4c 37 16	jmp $1637		jmp next
.17fd					w_spx21:
>17fd	03					.byte $03
>17fe	73 70 21				.text 'sp!'
>1801						.fill 13
>180e	de 17					.word w_spx40
.1810					xt_spx21:
.1810	b5 02		lda $02,x		lda pstack+2,x      ; Get the address from the stack
.1812	aa		tax			tax                 ; And set the stack pointer
.1813	4c 37 16	jmp $1637		jmp next
.1816					w_emit:
>1816	04					.byte $04
>1817	65 6d 69 74				.text 'emit'
>181b						.fill 12
>1827	fd 17					.word w_spx21
.1829					xt_emit:
.1829	b5 02		lda $02,x		lda pstack+2,x
.182b	da		phx			phx
.182c	20 09 b0	jsr $b009		jsr conout
.182f	fa		plx			plx
.1830	e8		inx			inx
.1831	e8		inx			inx
.1832	4c 37 16	jmp $1637		jmp next
.1835					w_keyx3f:
>1835	04					.byte $04
>1836	6b 65 79 3f				.text 'key?'
>183a						.fill 12
>1846	16 18					.word w_emit
.1848					xt_keyx3f:
.1848	20 0c b0	jsr $b00c		jsr constat
.184b	29 01		and #$01		and #1
.184d	f0 06		beq $1855		beq waiting
.184f	74 00		stz $00,x		stz pstack,x
.1851	74 01		stz $01,x		stz pstack+1,x
.1853	80 06		bra $185b		bra done
.1855						waiting:
.1855	a9 ff		lda #$ff		lda #$ff
.1857	95 00		sta $00,x		sta pstack,x
.1859	95 01		sta $01,x		sta pstack+1,x
.185b						done:
.185b	ca		dex			dex
.185c	ca		dex			dex
.185d	4c 37 16	jmp $1637		jmp next
.1860					w_key:
>1860	03					.byte $03
>1861	6b 65 79				.text 'key'
>1864						.fill 13
>1871	35 18					.word w_keyx3f
.1873					xt_key:
.1873	da		phx			phx
.1874						wait:
.1874	20 0f b0	jsr $b00f		jsr conin
.1877	c9 00		cmp #$00		cmp #0
.1879	f0 f9		beq $1874		beq wait
.187b	fa		plx			plx
.187c	95 00		sta $00,x		sta pstack,x
.187e	74 01		stz $01,x		stz pstack+1,x
.1880	ca		dex			dex
.1881	ca		dex			dex
.1882	4c 37 16	jmp $1637		jmp next
.1885					w_cr:
>1885	02					.byte $02
>1886	63 72					.text 'cr'
>1888						.fill 14
>1896	60 18					.word w_key
.1898					xt_cr:
.1898	da		phx			phx
.1899	a9 0d		lda #$0d		lda #$0d
.189b	20 09 b0	jsr $b009		jsr conout
.189e	fa		plx			plx
.189f	4c 37 16	jmp $1637		jmp next
.18a2					w_0:
>18a2	01					.byte $01
>18a3	30					.text '0'
>18a4						.fill 15
>18b3	85 18					.word w_cr
.18b5					xt_0:
.18b5	74 01		stz $01,x		stz pstack+1,x
.18b7	74 00		stz $00,x		stz pstack,x
.18b9	ca		dex			dex
.18ba	ca		dex			dex
.18bb	4c 37 16	jmp $1637		jmp next
.18be					w_1:
>18be	01					.byte $01
>18bf	31					.text '1'
>18c0						.fill 15
>18cf	a2 18					.word w_0
.18d1					xt_1:
.18d1	74 01		stz $01,x		stz pstack+1,x
.18d3	a9 01		lda #$01		lda #1
.18d5	95 00		sta $00,x		sta pstack,x
.18d7	ca		dex			dex
.18d8	ca		dex			dex
.18d9	4c 37 16	jmp $1637		jmp next
.18dc					w_2:
>18dc	01					.byte $01
>18dd	32					.text '2'
>18de						.fill 15
>18ed	be 18					.word w_1
.18ef					xt_2:
.18ef	74 01		stz $01,x		stz pstack+1,x
.18f1	a9 02		lda #$02		lda #2
.18f3	95 00		sta $00,x		sta pstack,x
.18f5	ca		dex			dex
.18f6	ca		dex			dex
.18f7	4c 37 16	jmp $1637		jmp next
.18fa					w_x2d1:
>18fa	02					.byte $02
>18fb	2d 31					.text '-1'
>18fd						.fill 14
>190b	dc 18					.word w_2
.190d					xt_x2d1:
.190d	a9 ff		lda #$ff		lda #$ff
.190f	95 01		sta $01,x		sta pstack+1,x
.1911	95 00		sta $00,x		sta pstack,x
.1913	ca		dex			dex
.1914	ca		dex			dex
.1915	4c 37 16	jmp $1637		jmp next
.1918					w_x2d2:
>1918	02					.byte $02
>1919	2d 32					.text '-2'
>191b						.fill 14
>1929	fa 18					.word w_x2d1
.192b					xt_x2d2:
.192b	a9 fe		lda #$fe		lda #$fe
.192d	95 01		sta $01,x		sta pstack+1,x
.192f	95 00		sta $00,x		sta pstack,x
.1931	ca		dex			dex
.1932	ca		dex			dex
.1933	4c 37 16	jmp $1637		jmp next
.1936					w_x28literalx29:
>1936	09					.byte $09
>1937	28 6c 69 74 65 72 61 6c			.text '(literal)'
>193f	29
>1940						.fill 7
>1947	18 19					.word w_x2d2
.1949					xt_x28literalx29:
.1949	a0 01		ldy #$01		ldy #1
.194b	b2 28		lda ($28)		lda (ip)
.194d	95 00		sta $00,x		sta pstack,x
.194f	b1 28		lda ($28),y		lda (ip),y
.1951	95 01		sta $01,x		sta pstack+1,x
.1953	ca		dex			dex
.1954	ca		dex			dex
.1955	18		clc			clc
.1956	a5 28		lda $28			lda ip
.1958	69 02		adc #$02		adc #2
.195a	85 28		sta $28			sta ip
.195c	a5 29		lda $29			lda ip+1
.195e	69 00		adc #$00		adc #0
.1960	85 29		sta $29			sta ip+1
.1962	4c 37 16	jmp $1637		jmp next
.1965					w_x28dliteralx29:
>1965	0a					.byte $0A
>1966	28 64 6c 69 74 65 72 61			.text '(dliteral)'
>196e	6c 29
>1970						.fill 6
>1976	36 19					.word w_x28literalx29
.1978					xt_x28dliteralx29:
.1978	a0 01		ldy #$01		ldy #1
.197a	b2 28		lda ($28)		lda (ip)
.197c	95 00		sta $00,x		sta pstack,x
.197e	b1 28		lda ($28),y		lda (ip),y
.1980	95 01		sta $01,x		sta pstack+1,x
.1982	c8		iny			iny
.1983	95 02		sta $02,x		sta pstack+2,x
.1985	c8		iny			iny
.1986	95 03		sta $03,x		sta pstack+3,x
.1988	ca		dex			dex
.1989	ca		dex			dex
.198a	ca		dex			dex
.198b	ca		dex			dex
.198c	18		clc			clc
.198d	a5 28		lda $28			lda ip
.198f	69 02		adc #$02		adc #2
.1991	85 28		sta $28			sta ip
.1993	a5 29		lda $29			lda ip+1
.1995	69 00		adc #$00		adc #0
.1997	85 29		sta $29			sta ip+1
.1999	4c 37 16	jmp $1637		jmp next
.199c					w_depth:
>199c	05					.byte $05
>199d	64 65 70 74 68				.text 'depth'
>19a2						.fill 11
>19ad	65 19					.word w_x28dliteralx29
.19af					xt_depth:
.19af	86 32		stx $32			stx tmp
.19b1	38		sec			sec
.19b2	a9 6e		lda #$6e		lda #$6e
.19b4	e5 32		sbc $32			sbc tmp
.19b6	4a		lsr a			lsr a
.19b7	74 01		stz $01,x		stz pstack+1,x
.19b9	95 00		sta $00,x		sta pstack,x
.19bb	ca		dex			dex
.19bc	ca		dex			dex
.19bd	4c 37 16	jmp $1637		jmp next
.19c0					w_unittest:
>19c0	08					.byte $08
>19c1	75 6e 69 74 74 65 73 74			.text 'unittest'
>19c9						.fill 8
>19d1	9c 19					.word w_depth
.19d3					xt_unittest:
.19d3	4c 24 16	jmp $1624		jmp i_enter
>19d6	49 19					.word xt_x28literalx29
>19d8	de 19					.word l_2
>19da	69 37					.word xt_x28branchx29
>19dc	ea 19					.word l_3
.19de					l_2:
>19de	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>19e6	3e 20 30 00
.19ea					l_3:
>19ea	64 16					.word xt_testname
>19ec	af 19					.word xt_depth
>19ee	b5 18					.word xt_0
>19f0	84 16					.word xt_assertx3d
>19f2	49 19					.word xt_x28literalx29
>19f4	fa 19					.word l_4
>19f6	69 37					.word xt_x28branchx29
>19f8	0a 1a					.word l_5
.19fa					l_4:
>19fa	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>1a02	2d 2d 3e 20 30 20 31 00
.1a0a					l_5:
>1a0a	64 16					.word xt_testname
>1a0c	b5 18					.word xt_0
>1a0e	af 19					.word xt_depth
>1a10	d1 18					.word xt_1
>1a12	84 16					.word xt_assertx3d
>1a14	b5 18					.word xt_0
>1a16	84 16					.word xt_assertx3d
>1a18	49 19					.word xt_x28literalx29
>1a1a	20 1a					.word l_6
>1a1c	69 37					.word xt_x28branchx29
>1a1e	38 1a					.word l_7
.1a20					l_6:
>1a20	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>1a28	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.1a38					l_7:
>1a38	64 16					.word xt_testname
>1a3a	d1 18					.word xt_1
>1a3c	d1 18					.word xt_1
>1a3e	d1 18					.word xt_1
>1a40	af 19					.word xt_depth
>1a42	49 19					.word xt_x28literalx29
>1a44	03 00					.word 3
>1a46	84 16					.word xt_assertx3d
>1a48	d1 18					.word xt_1
>1a4a	84 16					.word xt_assertx3d
>1a4c	d1 18					.word xt_1
>1a4e	84 16					.word xt_assertx3d
>1a50	d1 18					.word xt_1
>1a52	84 16					.word xt_assertx3d
>1a54	49 19					.word xt_x28literalx29
>1a56	5c 1a					.word l_8
>1a58	69 37					.word xt_x28branchx29
>1a5a	6b 1a					.word l_9
.1a5c					l_8:
>1a5c	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>1a64	20 2d 2d 3e 20 31 00
.1a6b					l_9:
>1a6b	64 16					.word xt_testname
>1a6d	d1 18					.word xt_1
>1a6f	ef 18					.word xt_2
>1a71	28 2f					.word xt_drop
>1a73	d1 18					.word xt_1
>1a75	84 16					.word xt_assertx3d
>1a77	49 19					.word xt_x28literalx29
>1a79	7f 1a					.word l_10
>1a7b	69 37					.word xt_x28branchx29
>1a7d	92 1a					.word l_11
.1a7f					l_10:
>1a7f	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1a87	6f 70 20 2d 2d 3e 20 31 20 32 00
.1a92					l_11:
>1a92	64 16					.word xt_testname
>1a94	d1 18					.word xt_1
>1a96	ef 18					.word xt_2
>1a98	49 19					.word xt_x28literalx29
>1a9a	03 00					.word 3
>1a9c	28 2f					.word xt_drop
>1a9e	ef 18					.word xt_2
>1aa0	84 16					.word xt_assertx3d
>1aa2	d1 18					.word xt_1
>1aa4	84 16					.word xt_assertx3d
>1aa6	49 19					.word xt_x28literalx29
>1aa8	ae 1a					.word l_12
>1aaa	69 37					.word xt_x28branchx29
>1aac	bc 1a					.word l_13
.1aae					l_12:
>1aae	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1ab6	3e 20 31 20 31 00
.1abc					l_13:
>1abc	64 16					.word xt_testname
>1abe	d1 18					.word xt_1
>1ac0	40 2f					.word xt_dup
>1ac2	d1 18					.word xt_1
>1ac4	84 16					.word xt_assertx3d
>1ac6	d1 18					.word xt_1
>1ac8	84 16					.word xt_assertx3d
>1aca	49 19					.word xt_x28literalx29
>1acc	d2 1a					.word l_14
>1ace	69 37					.word xt_x28branchx29
>1ad0	e4 1a					.word l_15
.1ad2					l_14:
>1ad2	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1ada	2d 2d 3e 20 31 20 32 20 32 00
.1ae4					l_15:
>1ae4	64 16					.word xt_testname
>1ae6	d1 18					.word xt_1
>1ae8	ef 18					.word xt_2
>1aea	40 2f					.word xt_dup
>1aec	ef 18					.word xt_2
>1aee	84 16					.word xt_assertx3d
>1af0	ef 18					.word xt_2
>1af2	84 16					.word xt_assertx3d
>1af4	d1 18					.word xt_1
>1af6	84 16					.word xt_assertx3d
>1af8	49 19					.word xt_x28literalx29
>1afa	00 1b					.word l_16
>1afc	69 37					.word xt_x28branchx29
>1afe	15 1b					.word l_17
.1b00					l_16:
>1b00	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1b08	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1b15					l_17:
>1b15	64 16					.word xt_testname
>1b17	d1 18					.word xt_1
>1b19	ef 18					.word xt_2
>1b1b	49 19					.word xt_x28literalx29
>1b1d	03 00					.word 3
>1b1f	60 2f					.word xt_swap
>1b21	ef 18					.word xt_2
>1b23	84 16					.word xt_assertx3d
>1b25	49 19					.word xt_x28literalx29
>1b27	03 00					.word 3
>1b29	84 16					.word xt_assertx3d
>1b2b	d1 18					.word xt_1
>1b2d	84 16					.word xt_assertx3d
>1b2f	49 19					.word xt_x28literalx29
>1b31	37 1b					.word l_18
>1b33	69 37					.word xt_x28branchx29
>1b35	51 1b					.word l_19
.1b37					l_18:
>1b37	31 20 32 20 33 20 34 20			.null "1 2 3 4 2swap --> 3 4 1 2"
>1b3f	32 73 77 61 70 20 2d 2d 3e 20 33 20 34 20 31 20
>1b4f	32 00
.1b51					l_19:
>1b51	64 16					.word xt_testname
>1b53	d1 18					.word xt_1
>1b55	ef 18					.word xt_2
>1b57	49 19					.word xt_x28literalx29
>1b59	03 00					.word 3
>1b5b	49 19					.word xt_x28literalx29
>1b5d	04 00					.word 4
>1b5f	86 2f					.word xt_2swap
>1b61	ef 18					.word xt_2
>1b63	84 16					.word xt_assertx3d
>1b65	d1 18					.word xt_1
>1b67	84 16					.word xt_assertx3d
>1b69	49 19					.word xt_x28literalx29
>1b6b	04 00					.word 4
>1b6d	84 16					.word xt_assertx3d
>1b6f	49 19					.word xt_x28literalx29
>1b71	03 00					.word 3
>1b73	84 16					.word xt_assertx3d
>1b75	49 19					.word xt_x28literalx29
>1b77	7d 1b					.word l_20
>1b79	69 37					.word xt_x28branchx29
>1b7b	90 1b					.word l_21
.1b7d					l_20:
>1b7d	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>1b85	20 2d 2d 3e 20 31 20 32 20 31 00
.1b90					l_21:
>1b90	64 16					.word xt_testname
>1b92	d1 18					.word xt_1
>1b94	ef 18					.word xt_2
>1b96	c4 2f					.word xt_over
>1b98	d1 18					.word xt_1
>1b9a	84 16					.word xt_assertx3d
>1b9c	ef 18					.word xt_2
>1b9e	84 16					.word xt_assertx3d
>1ba0	d1 18					.word xt_1
>1ba2	84 16					.word xt_assertx3d
>1ba4	49 19					.word xt_x28literalx29
>1ba6	ac 1b					.word l_22
>1ba8	69 37					.word xt_x28branchx29
>1baa	ca 1b					.word l_23
.1bac					l_22:
>1bac	31 20 32 20 33 20 34 20			.null "1 2 3 4 2over --> 1 2 3 4 1 2"
>1bb4	32 6f 76 65 72 20 2d 2d 3e 20 31 20 32 20 33 20
>1bc4	34 20 31 20 32 00
.1bca					l_23:
>1bca	64 16					.word xt_testname
>1bcc	d1 18					.word xt_1
>1bce	ef 18					.word xt_2
>1bd0	49 19					.word xt_x28literalx29
>1bd2	03 00					.word 3
>1bd4	49 19					.word xt_x28literalx29
>1bd6	04 00					.word 4
>1bd8	e4 2f					.word xt_2over
>1bda	ef 18					.word xt_2
>1bdc	84 16					.word xt_assertx3d
>1bde	d1 18					.word xt_1
>1be0	84 16					.word xt_assertx3d
>1be2	49 19					.word xt_x28literalx29
>1be4	04 00					.word 4
>1be6	84 16					.word xt_assertx3d
>1be8	49 19					.word xt_x28literalx29
>1bea	03 00					.word 3
>1bec	84 16					.word xt_assertx3d
>1bee	ef 18					.word xt_2
>1bf0	84 16					.word xt_assertx3d
>1bf2	d1 18					.word xt_1
>1bf4	84 16					.word xt_assertx3d
>1bf6	49 19					.word xt_x28literalx29
>1bf8	fe 1b					.word l_24
>1bfa	69 37					.word xt_x28branchx29
>1bfc	1e 1c					.word l_25
.1bfe					l_24:
>1bfe	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1c06	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1c16	3e 20 35 35 35 35 68 00
.1c1e					l_25:
>1c1e	64 16					.word xt_testname
>1c20	49 19					.word xt_x28literalx29
>1c22	55 55					.word 21845
>1c24	49 19					.word xt_x28literalx29
>1c26	04 00					.word 4
>1c28	81 30					.word xt_x21
>1c2a	49 19					.word xt_x28literalx29
>1c2c	04 00					.word 4
>1c2e	ad 30					.word xt_x40
>1c30	49 19					.word xt_x28literalx29
>1c32	55 55					.word 21845
>1c34	84 16					.word xt_assertx3d
>1c36	49 19					.word xt_x28literalx29
>1c38	3e 1c					.word l_26
>1c3a	69 37					.word xt_x28branchx29
>1c3c	5e 1c					.word l_27
.1c3e					l_26:
>1c3e	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1c46	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1c56	3e 20 61 61 61 61 68 00
.1c5e					l_27:
>1c5e	64 16					.word xt_testname
>1c60	49 19					.word xt_x28literalx29
>1c62	aa aa					.word 43690
>1c64	49 19					.word xt_x28literalx29
>1c66	04 00					.word 4
>1c68	81 30					.word xt_x21
>1c6a	49 19					.word xt_x28literalx29
>1c6c	04 00					.word 4
>1c6e	ad 30					.word xt_x40
>1c70	49 19					.word xt_x28literalx29
>1c72	aa aa					.word 43690
>1c74	84 16					.word xt_assertx3d
>1c76	49 19					.word xt_x28literalx29
>1c78	7e 1c					.word l_28
>1c7a	69 37					.word xt_x28branchx29
>1c7c	9c 1c					.word l_29
.1c7e					l_28:
>1c7e	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1c86	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1c96	3e 20 35 35 68 00
.1c9c					l_29:
>1c9c	64 16					.word xt_testname
>1c9e	49 19					.word xt_x28literalx29
>1ca0	55 00					.word 85
>1ca2	49 19					.word xt_x28literalx29
>1ca4	03 00					.word 3
>1ca6	d5 30					.word xt_cx21
>1ca8	49 19					.word xt_x28literalx29
>1caa	03 00					.word 3
>1cac	f3 30					.word xt_cx40
>1cae	49 19					.word xt_x28literalx29
>1cb0	55 00					.word 85
>1cb2	84 16					.word xt_assertx3d
>1cb4	49 19					.word xt_x28literalx29
>1cb6	bc 1c					.word l_30
>1cb8	69 37					.word xt_x28branchx29
>1cba	da 1c					.word l_31
.1cbc					l_30:
>1cbc	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1cc4	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1cd4	3e 20 61 61 68 00
.1cda					l_31:
>1cda	64 16					.word xt_testname
>1cdc	49 19					.word xt_x28literalx29
>1cde	aa 00					.word 170
>1ce0	49 19					.word xt_x28literalx29
>1ce2	03 00					.word 3
>1ce4	d5 30					.word xt_cx21
>1ce6	49 19					.word xt_x28literalx29
>1ce8	03 00					.word 3
>1cea	f3 30					.word xt_cx40
>1cec	49 19					.word xt_x28literalx29
>1cee	aa 00					.word 170
>1cf0	84 16					.word xt_assertx3d
>1cf2	49 19					.word xt_x28literalx29
>1cf4	fa 1c					.word l_32
>1cf6	69 37					.word xt_x28branchx29
>1cf8	06 1d					.word l_33
.1cfa					l_32:
>1cfa	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1d02	3e 20 31 00
.1d06					l_33:
>1d06	64 16					.word xt_testname
>1d08	d1 18					.word xt_1
>1d0a	b5 18					.word xt_0
>1d0c	e5 32					.word xt_x2b
>1d0e	d1 18					.word xt_1
>1d10	84 16					.word xt_assertx3d
>1d12	49 19					.word xt_x28literalx29
>1d14	1a 1d					.word l_34
>1d16	69 37					.word xt_x28branchx29
>1d18	26 1d					.word l_35
.1d1a					l_34:
>1d1a	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1d22	3e 20 32 00
.1d26					l_35:
>1d26	64 16					.word xt_testname
>1d28	d1 18					.word xt_1
>1d2a	d1 18					.word xt_1
>1d2c	e5 32					.word xt_x2b
>1d2e	ef 18					.word xt_2
>1d30	84 16					.word xt_assertx3d
>1d32	49 19					.word xt_x28literalx29
>1d34	3a 1d					.word l_36
>1d36	69 37					.word xt_x28branchx29
>1d38	48 1d					.word l_37
.1d3a					l_36:
>1d3a	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1d42	2d 3e 20 31 33 00
.1d48					l_37:
>1d48	64 16					.word xt_testname
>1d4a	49 19					.word xt_x28literalx29
>1d4c	03 00					.word 3
>1d4e	49 19					.word xt_x28literalx29
>1d50	0a 00					.word 10
>1d52	e5 32					.word xt_x2b
>1d54	49 19					.word xt_x28literalx29
>1d56	0d 00					.word 13
>1d58	84 16					.word xt_assertx3d
>1d5a	49 19					.word xt_x28literalx29
>1d5c	62 1d					.word l_38
>1d5e	69 37					.word xt_x28branchx29
>1d60	72 1d					.word l_39
.1d62					l_38:
>1d62	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1d6a	2b 20 2d 2d 3e 20 34 00
.1d72					l_39:
>1d72	64 16					.word xt_testname
>1d74	49 19					.word xt_x28literalx29
>1d76	ff ff					.word 65535
>1d78	49 19					.word xt_x28literalx29
>1d7a	05 00					.word 5
>1d7c	e5 32					.word xt_x2b
>1d7e	49 19					.word xt_x28literalx29
>1d80	04 00					.word 4
>1d82	84 16					.word xt_assertx3d
>1d84	49 19					.word xt_x28literalx29
>1d86	8c 1d					.word l_40
>1d88	69 37					.word xt_x28branchx29
>1d8a	b7 1d					.word l_41
.1d8c					l_40:
>1d8c	31 32 33 34 68 20 35 36			.null "1234h 5678h 1111h 1111h d+ --> 2345h 6789h"
>1d94	37 38 68 20 31 31 31 31 68 20 31 31 31 31 68 20
>1da4	64 2b 20 2d 2d 3e 20 32 33 34 35 68 20 36 37 38
>1db4	39 68 00
.1db7					l_41:
>1db7	64 16					.word xt_testname
>1db9	49 19					.word xt_x28literalx29
>1dbb	34 12					.word 4660
>1dbd	49 19					.word xt_x28literalx29
>1dbf	78 56					.word 22136
>1dc1	49 19					.word xt_x28literalx29
>1dc3	11 11					.word 4369
>1dc5	49 19					.word xt_x28literalx29
>1dc7	11 11					.word 4369
>1dc9	0a 33					.word xt_dx2b
>1dcb	49 19					.word xt_x28literalx29
>1dcd	89 67					.word 26505
>1dcf	84 16					.word xt_assertx3d
>1dd1	49 19					.word xt_x28literalx29
>1dd3	45 23					.word 9029
>1dd5	84 16					.word xt_assertx3d
>1dd7	49 19					.word xt_x28literalx29
>1dd9	df 1d					.word l_42
>1ddb	69 37					.word xt_x28branchx29
>1ddd	0a 1e					.word l_43
.1ddf					l_42:
>1ddf	30 30 30 30 68 20 31 31			.null "0000h 1111h 0000h eeefh d+ --> 0001h 0000h"
>1de7	31 31 68 20 30 30 30 30 68 20 65 65 65 66 68 20
>1df7	64 2b 20 2d 2d 3e 20 30 30 30 31 68 20 30 30 30
>1e07	30 68 00
.1e0a					l_43:
>1e0a	64 16					.word xt_testname
>1e0c	49 19					.word xt_x28literalx29
>1e0e	00 00					.word 0
>1e10	49 19					.word xt_x28literalx29
>1e12	11 11					.word 4369
>1e14	49 19					.word xt_x28literalx29
>1e16	00 00					.word 0
>1e18	49 19					.word xt_x28literalx29
>1e1a	ef ee					.word 61167
>1e1c	0a 33					.word xt_dx2b
>1e1e	49 19					.word xt_x28literalx29
>1e20	00 00					.word 0
>1e22	84 16					.word xt_assertx3d
>1e24	49 19					.word xt_x28literalx29
>1e26	01 00					.word 1
>1e28	84 16					.word xt_assertx3d
>1e2a	49 19					.word xt_x28literalx29
>1e2c	32 1e					.word l_44
>1e2e	69 37					.word xt_x28branchx29
>1e30	3e 1e					.word l_45
.1e32					l_44:
>1e32	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1e3a	3e 20 31 00
.1e3e					l_45:
>1e3e	64 16					.word xt_testname
>1e40	49 19					.word xt_x28literalx29
>1e42	04 00					.word 4
>1e44	49 19					.word xt_x28literalx29
>1e46	03 00					.word 3
>1e48	70 33					.word xt_x2d
>1e4a	d1 18					.word xt_1
>1e4c	84 16					.word xt_assertx3d
>1e4e	49 19					.word xt_x28literalx29
>1e50	56 1e					.word l_46
>1e52	69 37					.word xt_x28branchx29
>1e54	66 1e					.word l_47
.1e56					l_46:
>1e56	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1e5e	3e 20 66 66 66 66 68 00
.1e66					l_47:
>1e66	64 16					.word xt_testname
>1e68	49 19					.word xt_x28literalx29
>1e6a	03 00					.word 3
>1e6c	49 19					.word xt_x28literalx29
>1e6e	04 00					.word 4
>1e70	70 33					.word xt_x2d
>1e72	49 19					.word xt_x28literalx29
>1e74	ff ff					.word 65535
>1e76	84 16					.word xt_assertx3d
>1e78	49 19					.word xt_x28literalx29
>1e7a	80 1e					.word l_48
>1e7c	69 37					.word xt_x28branchx29
>1e7e	8d 1e					.word l_49
.1e80					l_48:
>1e80	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1e88	2d 3e 20 35 00
.1e8d					l_49:
>1e8d	64 16					.word xt_testname
>1e8f	49 19					.word xt_x28literalx29
>1e91	0a 00					.word 10
>1e93	49 19					.word xt_x28literalx29
>1e95	05 00					.word 5
>1e97	70 33					.word xt_x2d
>1e99	49 19					.word xt_x28literalx29
>1e9b	05 00					.word 5
>1e9d	84 16					.word xt_assertx3d
>1e9f	49 19					.word xt_x28literalx29
>1ea1	a7 1e					.word l_50
>1ea3	69 37					.word xt_x28branchx29
>1ea5	b4 1e					.word l_51
.1ea7					l_50:
>1ea7	32 20 33 20 75 2a 20 2d			.null "2 3 u* --> 6"
>1eaf	2d 3e 20 36 00
.1eb4					l_51:
>1eb4	64 16					.word xt_testname
>1eb6	ef 18					.word xt_2
>1eb8	49 19					.word xt_x28literalx29
>1eba	03 00					.word 3
>1ebc	95 33					.word xt_ux2a
>1ebe	49 19					.word xt_x28literalx29
>1ec0	06 00					.word 6
>1ec2	84 16					.word xt_assertx3d
>1ec4	49 19					.word xt_x28literalx29
>1ec6	cc 1e					.word l_52
>1ec8	69 37					.word xt_x28branchx29
>1eca	db 1e					.word l_53
.1ecc					l_52:
>1ecc	31 30 20 34 20 75 2a 20			.null "10 4 u* --> 40"
>1ed4	2d 2d 3e 20 34 30 00
.1edb					l_53:
>1edb	64 16					.word xt_testname
>1edd	49 19					.word xt_x28literalx29
>1edf	0a 00					.word 10
>1ee1	49 19					.word xt_x28literalx29
>1ee3	04 00					.word 4
>1ee5	95 33					.word xt_ux2a
>1ee7	49 19					.word xt_x28literalx29
>1ee9	28 00					.word 40
>1eeb	84 16					.word xt_assertx3d
>1eed	49 19					.word xt_x28literalx29
>1eef	f5 1e					.word l_54
>1ef1	69 37					.word xt_x28branchx29
>1ef3	01 1f					.word l_55
.1ef5					l_54:
>1ef5	32 20 33 20 2a 20 2d 2d			.null "2 3 * --> 6"
>1efd	3e 20 36 00
.1f01					l_55:
>1f01	64 16					.word xt_testname
>1f03	ef 18					.word xt_2
>1f05	49 19					.word xt_x28literalx29
>1f07	03 00					.word 3
>1f09	cd 33					.word xt_x2a
>1f0b	49 19					.word xt_x28literalx29
>1f0d	06 00					.word 6
>1f0f	84 16					.word xt_assertx3d
>1f11	49 19					.word xt_x28literalx29
>1f13	19 1f					.word l_56
>1f15	69 37					.word xt_x28branchx29
>1f17	27 1f					.word l_57
.1f19					l_56:
>1f19	31 30 20 34 20 2a 20 2d			.null "10 4 * --> 40"
>1f21	2d 3e 20 34 30 00
.1f27					l_57:
>1f27	64 16					.word xt_testname
>1f29	49 19					.word xt_x28literalx29
>1f2b	0a 00					.word 10
>1f2d	49 19					.word xt_x28literalx29
>1f2f	04 00					.word 4
>1f31	cd 33					.word xt_x2a
>1f33	49 19					.word xt_x28literalx29
>1f35	28 00					.word 40
>1f37	84 16					.word xt_assertx3d
>1f39	49 19					.word xt_x28literalx29
>1f3b	41 1f					.word l_58
>1f3d	69 37					.word xt_x28branchx29
>1f3f	55 1f					.word l_59
.1f41					l_58:
>1f41	66 66 66 65 68 20 33 20			.null "fffeh 3 * --> fffah"
>1f49	2a 20 2d 2d 3e 20 66 66 66 61 68 00
.1f55					l_59:
>1f55	64 16					.word xt_testname
>1f57	49 19					.word xt_x28literalx29
>1f59	fe ff					.word 65534
>1f5b	49 19					.word xt_x28literalx29
>1f5d	03 00					.word 3
>1f5f	cd 33					.word xt_x2a
>1f61	49 19					.word xt_x28literalx29
>1f63	fa ff					.word 65530
>1f65	84 16					.word xt_assertx3d
>1f67	49 19					.word xt_x28literalx29
>1f69	6f 1f					.word l_60
>1f6b	69 37					.word xt_x28branchx29
>1f6d	84 1f					.word l_61
.1f6f					l_60:
>1f6f	30 20 31 20 33 20 75 6d			.null "0 1 3 um/mod --> 1 0"
>1f77	2f 6d 6f 64 20 2d 2d 3e 20 31 20 30 00
.1f84					l_61:
>1f84	64 16					.word xt_testname
>1f86	b5 18					.word xt_0
>1f88	d1 18					.word xt_1
>1f8a	49 19					.word xt_x28literalx29
>1f8c	03 00					.word 3
>1f8e	ca 34					.word xt_umx2fmod
>1f90	b5 18					.word xt_0
>1f92	84 16					.word xt_assertx3d
>1f94	d1 18					.word xt_1
>1f96	84 16					.word xt_assertx3d
>1f98	49 19					.word xt_x28literalx29
>1f9a	a0 1f					.word l_62
>1f9c	69 37					.word xt_x28branchx29
>1f9e	b5 1f					.word l_63
.1fa0					l_62:
>1fa0	30 20 32 20 33 20 75 6d			.null "0 2 3 um/mod --> 2 0"
>1fa8	2f 6d 6f 64 20 2d 2d 3e 20 32 20 30 00
.1fb5					l_63:
>1fb5	64 16					.word xt_testname
>1fb7	b5 18					.word xt_0
>1fb9	ef 18					.word xt_2
>1fbb	49 19					.word xt_x28literalx29
>1fbd	03 00					.word 3
>1fbf	ca 34					.word xt_umx2fmod
>1fc1	b5 18					.word xt_0
>1fc3	84 16					.word xt_assertx3d
>1fc5	ef 18					.word xt_2
>1fc7	84 16					.word xt_assertx3d
>1fc9	49 19					.word xt_x28literalx29
>1fcb	d1 1f					.word l_64
>1fcd	69 37					.word xt_x28branchx29
>1fcf	e6 1f					.word l_65
.1fd1					l_64:
>1fd1	30 20 33 20 33 20 75 6d			.null "0 3 3 um/mod --> 0 1"
>1fd9	2f 6d 6f 64 20 2d 2d 3e 20 30 20 31 00
.1fe6					l_65:
>1fe6	64 16					.word xt_testname
>1fe8	b5 18					.word xt_0
>1fea	49 19					.word xt_x28literalx29
>1fec	03 00					.word 3
>1fee	49 19					.word xt_x28literalx29
>1ff0	03 00					.word 3
>1ff2	ca 34					.word xt_umx2fmod
>1ff4	d1 18					.word xt_1
>1ff6	84 16					.word xt_assertx3d
>1ff8	b5 18					.word xt_0
>1ffa	84 16					.word xt_assertx3d
>1ffc	49 19					.word xt_x28literalx29
>1ffe	04 20					.word l_66
>2000	69 37					.word xt_x28branchx29
>2002	19 20					.word l_67
.2004					l_66:
>2004	30 20 34 20 33 20 75 6d			.null "0 4 3 um/mod --> 1 1"
>200c	2f 6d 6f 64 20 2d 2d 3e 20 31 20 31 00
.2019					l_67:
>2019	64 16					.word xt_testname
>201b	b5 18					.word xt_0
>201d	49 19					.word xt_x28literalx29
>201f	04 00					.word 4
>2021	49 19					.word xt_x28literalx29
>2023	03 00					.word 3
>2025	ca 34					.word xt_umx2fmod
>2027	d1 18					.word xt_1
>2029	84 16					.word xt_assertx3d
>202b	d1 18					.word xt_1
>202d	84 16					.word xt_assertx3d
>202f	49 19					.word xt_x28literalx29
>2031	37 20					.word l_68
>2033	69 37					.word xt_x28branchx29
>2035	4c 20					.word l_69
.2037					l_68:
>2037	30 20 36 20 33 20 75 6d			.null "0 6 3 um/mod --> 0 2"
>203f	2f 6d 6f 64 20 2d 2d 3e 20 30 20 32 00
.204c					l_69:
>204c	64 16					.word xt_testname
>204e	b5 18					.word xt_0
>2050	49 19					.word xt_x28literalx29
>2052	06 00					.word 6
>2054	49 19					.word xt_x28literalx29
>2056	03 00					.word 3
>2058	ca 34					.word xt_umx2fmod
>205a	ef 18					.word xt_2
>205c	84 16					.word xt_assertx3d
>205e	b5 18					.word xt_0
>2060	84 16					.word xt_assertx3d
>2062	49 19					.word xt_x28literalx29
>2064	6a 20					.word l_70
>2066	69 37					.word xt_x28branchx29
>2068	84 20					.word l_71
.206a					l_70:
>206a	31 32 33 34 68 20 73 3e			.null "1234h s>d --> 0000h 1234h"
>2072	64 20 2d 2d 3e 20 30 30 30 30 68 20 31 32 33 34
>2082	68 00
.2084					l_71:
>2084	64 16					.word xt_testname
>2086	49 19					.word xt_x28literalx29
>2088	34 12					.word 4660
>208a	25 35					.word xt_sx3ed
>208c	49 19					.word xt_x28literalx29
>208e	34 12					.word 4660
>2090	84 16					.word xt_assertx3d
>2092	49 19					.word xt_x28literalx29
>2094	00 00					.word 0
>2096	84 16					.word xt_assertx3d
>2098	49 19					.word xt_x28literalx29
>209a	a0 20					.word l_72
>209c	69 37					.word xt_x28branchx29
>209e	ba 20					.word l_73
.20a0					l_72:
>20a0	66 66 66 66 68 20 73 3e			.null "ffffh s>d --> ffffh ffffh"
>20a8	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 66
>20b8	68 00
.20ba					l_73:
>20ba	64 16					.word xt_testname
>20bc	49 19					.word xt_x28literalx29
>20be	ff ff					.word 65535
>20c0	25 35					.word xt_sx3ed
>20c2	49 19					.word xt_x28literalx29
>20c4	ff ff					.word 65535
>20c6	84 16					.word xt_assertx3d
>20c8	49 19					.word xt_x28literalx29
>20ca	ff ff					.word 65535
>20cc	84 16					.word xt_assertx3d
>20ce	49 19					.word xt_x28literalx29
>20d0	d6 20					.word l_74
>20d2	69 37					.word xt_x28branchx29
>20d4	f0 20					.word l_75
.20d6					l_74:
>20d6	66 66 66 65 68 20 73 3e			.null "fffeh s>d --> ffffh fffeh"
>20de	64 20 2d 2d 3e 20 66 66 66 66 68 20 66 66 66 65
>20ee	68 00
.20f0					l_75:
>20f0	64 16					.word xt_testname
>20f2	49 19					.word xt_x28literalx29
>20f4	fe ff					.word 65534
>20f6	25 35					.word xt_sx3ed
>20f8	49 19					.word xt_x28literalx29
>20fa	fe ff					.word 65534
>20fc	84 16					.word xt_assertx3d
>20fe	49 19					.word xt_x28literalx29
>2100	ff ff					.word 65535
>2102	84 16					.word xt_assertx3d
>2104	49 19					.word xt_x28literalx29
>2106	0c 21					.word l_76
>2108	69 37					.word xt_x28branchx29
>210a	17 21					.word l_77
.210c					l_76:
>210c	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>2114	20 32 00
.2117					l_77:
>2117	64 16					.word xt_testname
>2119	d1 18					.word xt_1
>211b	54 35					.word xt_1x2b
>211d	ef 18					.word xt_2
>211f	84 16					.word xt_assertx3d
>2121	49 19					.word xt_x28literalx29
>2123	29 21					.word l_78
>2125	69 37					.word xt_x28branchx29
>2127	34 21					.word l_79
.2129					l_78:
>2129	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>2131	20 31 00
.2134					l_79:
>2134	64 16					.word xt_testname
>2136	b5 18					.word xt_0
>2138	54 35					.word xt_1x2b
>213a	d1 18					.word xt_1
>213c	84 16					.word xt_assertx3d
>213e	49 19					.word xt_x28literalx29
>2140	46 21					.word l_80
>2142	69 37					.word xt_x28branchx29
>2144	53 21					.word l_81
.2146					l_80:
>2146	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>214e	3e 20 32 31 00
.2153					l_81:
>2153	64 16					.word xt_testname
>2155	49 19					.word xt_x28literalx29
>2157	14 00					.word 20
>2159	54 35					.word xt_1x2b
>215b	49 19					.word xt_x28literalx29
>215d	15 00					.word 21
>215f	84 16					.word xt_assertx3d
>2161	49 19					.word xt_x28literalx29
>2163	69 21					.word l_82
>2165	69 37					.word xt_x28branchx29
>2167	78 21					.word l_83
.2169					l_82:
>2169	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>2171	20 2d 2d 3e 20 30 00
.2178					l_83:
>2178	64 16					.word xt_testname
>217a	49 19					.word xt_x28literalx29
>217c	ff ff					.word 65535
>217e	54 35					.word xt_1x2b
>2180	b5 18					.word xt_0
>2182	84 16					.word xt_assertx3d
>2184	49 19					.word xt_x28literalx29
>2186	8c 21					.word l_84
>2188	69 37					.word xt_x28branchx29
>218a	97 21					.word l_85
.218c					l_84:
>218c	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>2194	20 33 00
.2197					l_85:
>2197	64 16					.word xt_testname
>2199	d1 18					.word xt_1
>219b	70 35					.word xt_2x2b
>219d	49 19					.word xt_x28literalx29
>219f	03 00					.word 3
>21a1	84 16					.word xt_assertx3d
>21a3	49 19					.word xt_x28literalx29
>21a5	ab 21					.word l_86
>21a7	69 37					.word xt_x28branchx29
>21a9	b6 21					.word l_87
.21ab					l_86:
>21ab	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>21b3	20 32 00
.21b6					l_87:
>21b6	64 16					.word xt_testname
>21b8	b5 18					.word xt_0
>21ba	70 35					.word xt_2x2b
>21bc	ef 18					.word xt_2
>21be	84 16					.word xt_assertx3d
>21c0	49 19					.word xt_x28literalx29
>21c2	c8 21					.word l_88
>21c4	69 37					.word xt_x28branchx29
>21c6	d5 21					.word l_89
.21c8					l_88:
>21c8	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>21d0	3e 20 32 32 00
.21d5					l_89:
>21d5	64 16					.word xt_testname
>21d7	49 19					.word xt_x28literalx29
>21d9	14 00					.word 20
>21db	70 35					.word xt_2x2b
>21dd	49 19					.word xt_x28literalx29
>21df	16 00					.word 22
>21e1	84 16					.word xt_assertx3d
>21e3	49 19					.word xt_x28literalx29
>21e5	eb 21					.word l_90
>21e7	69 37					.word xt_x28branchx29
>21e9	fa 21					.word l_91
.21eb					l_90:
>21eb	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>21f3	20 2d 2d 3e 20 30 00
.21fa					l_91:
>21fa	64 16					.word xt_testname
>21fc	49 19					.word xt_x28literalx29
>21fe	fe ff					.word 65534
>2200	70 35					.word xt_2x2b
>2202	b5 18					.word xt_0
>2204	84 16					.word xt_assertx3d
>2206	49 19					.word xt_x28literalx29
>2208	0e 22					.word l_92
>220a	69 37					.word xt_x28branchx29
>220c	19 22					.word l_93
.220e					l_92:
>220e	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>2216	20 30 00
.2219					l_93:
>2219	64 16					.word xt_testname
>221b	d1 18					.word xt_1
>221d	93 35					.word xt_1x2d
>221f	b5 18					.word xt_0
>2221	84 16					.word xt_assertx3d
>2223	49 19					.word xt_x28literalx29
>2225	2b 22					.word l_94
>2227	69 37					.word xt_x28branchx29
>2229	3a 22					.word l_95
.222b					l_94:
>222b	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>2233	20 66 66 66 66 68 00
.223a					l_95:
>223a	64 16					.word xt_testname
>223c	b5 18					.word xt_0
>223e	93 35					.word xt_1x2d
>2240	49 19					.word xt_x28literalx29
>2242	ff ff					.word 65535
>2244	84 16					.word xt_assertx3d
>2246	49 19					.word xt_x28literalx29
>2248	4e 22					.word l_96
>224a	69 37					.word xt_x28branchx29
>224c	5b 22					.word l_97
.224e					l_96:
>224e	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>2256	3e 20 31 39 00
.225b					l_97:
>225b	64 16					.word xt_testname
>225d	49 19					.word xt_x28literalx29
>225f	14 00					.word 20
>2261	93 35					.word xt_1x2d
>2263	49 19					.word xt_x28literalx29
>2265	13 00					.word 19
>2267	84 16					.word xt_assertx3d
>2269	49 19					.word xt_x28literalx29
>226b	71 22					.word l_98
>226d	69 37					.word xt_x28branchx29
>226f	84 22					.word l_99
.2271					l_98:
>2271	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>2279	20 2d 2d 3e 20 66 66 66 65 68 00
.2284					l_99:
>2284	64 16					.word xt_testname
>2286	49 19					.word xt_x28literalx29
>2288	ff ff					.word 65535
>228a	93 35					.word xt_1x2d
>228c	49 19					.word xt_x28literalx29
>228e	fe ff					.word 65534
>2290	84 16					.word xt_assertx3d
>2292	49 19					.word xt_x28literalx29
>2294	9a 22					.word l_100
>2296	69 37					.word xt_x28branchx29
>2298	a9 22					.word l_101
.229a					l_100:
>229a	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>22a2	20 66 66 66 66 68 00
.22a9					l_101:
>22a9	64 16					.word xt_testname
>22ab	d1 18					.word xt_1
>22ad	b1 35					.word xt_2x2d
>22af	49 19					.word xt_x28literalx29
>22b1	ff ff					.word 65535
>22b3	84 16					.word xt_assertx3d
>22b5	49 19					.word xt_x28literalx29
>22b7	bd 22					.word l_102
>22b9	69 37					.word xt_x28branchx29
>22bb	cc 22					.word l_103
.22bd					l_102:
>22bd	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>22c5	20 66 66 66 65 68 00
.22cc					l_103:
>22cc	64 16					.word xt_testname
>22ce	b5 18					.word xt_0
>22d0	b1 35					.word xt_2x2d
>22d2	49 19					.word xt_x28literalx29
>22d4	fe ff					.word 65534
>22d6	84 16					.word xt_assertx3d
>22d8	49 19					.word xt_x28literalx29
>22da	e0 22					.word l_104
>22dc	69 37					.word xt_x28branchx29
>22de	ed 22					.word l_105
.22e0					l_104:
>22e0	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>22e8	3e 20 31 38 00
.22ed					l_105:
>22ed	64 16					.word xt_testname
>22ef	49 19					.word xt_x28literalx29
>22f1	14 00					.word 20
>22f3	b1 35					.word xt_2x2d
>22f5	49 19					.word xt_x28literalx29
>22f7	12 00					.word 18
>22f9	84 16					.word xt_assertx3d
>22fb	49 19					.word xt_x28literalx29
>22fd	03 23					.word l_106
>22ff	69 37					.word xt_x28branchx29
>2301	16 23					.word l_107
.2303					l_106:
>2303	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>230b	20 2d 2d 3e 20 66 66 66 64 68 00
.2316					l_107:
>2316	64 16					.word xt_testname
>2318	49 19					.word xt_x28literalx29
>231a	ff ff					.word 65535
>231c	b1 35					.word xt_2x2d
>231e	49 19					.word xt_x28literalx29
>2320	fd ff					.word 65533
>2322	84 16					.word xt_assertx3d
>2324	49 19					.word xt_x28literalx29
>2326	2c 23					.word l_108
>2328	69 37					.word xt_x28branchx29
>232a	46 23					.word l_109
.232c					l_108:
>232c	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>2334	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>2344	68 00
.2346					l_109:
>2346	64 16					.word xt_testname
>2348	49 19					.word xt_x28literalx29
>234a	00 00					.word 0
>234c	49 19					.word xt_x28literalx29
>234e	00 00					.word 0
>2350	d4 35					.word xt_and
>2352	49 19					.word xt_x28literalx29
>2354	00 00					.word 0
>2356	84 16					.word xt_assertx3d
>2358	49 19					.word xt_x28literalx29
>235a	60 23					.word l_110
>235c	69 37					.word xt_x28branchx29
>235e	7a 23					.word l_111
.2360					l_110:
>2360	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>2368	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>2378	68 00
.237a					l_111:
>237a	64 16					.word xt_testname
>237c	49 19					.word xt_x28literalx29
>237e	00 00					.word 0
>2380	49 19					.word xt_x28literalx29
>2382	ff ff					.word 65535
>2384	d4 35					.word xt_and
>2386	49 19					.word xt_x28literalx29
>2388	00 00					.word 0
>238a	84 16					.word xt_assertx3d
>238c	49 19					.word xt_x28literalx29
>238e	94 23					.word l_112
>2390	69 37					.word xt_x28branchx29
>2392	ae 23					.word l_113
.2394					l_112:
>2394	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>239c	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>23ac	68 00
.23ae					l_113:
>23ae	64 16					.word xt_testname
>23b0	49 19					.word xt_x28literalx29
>23b2	ff ff					.word 65535
>23b4	49 19					.word xt_x28literalx29
>23b6	00 00					.word 0
>23b8	d4 35					.word xt_and
>23ba	49 19					.word xt_x28literalx29
>23bc	00 00					.word 0
>23be	84 16					.word xt_assertx3d
>23c0	49 19					.word xt_x28literalx29
>23c2	c8 23					.word l_114
>23c4	69 37					.word xt_x28branchx29
>23c6	e2 23					.word l_115
.23c8					l_114:
>23c8	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>23d0	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>23e0	68 00
.23e2					l_115:
>23e2	64 16					.word xt_testname
>23e4	49 19					.word xt_x28literalx29
>23e6	ff ff					.word 65535
>23e8	49 19					.word xt_x28literalx29
>23ea	ff ff					.word 65535
>23ec	d4 35					.word xt_and
>23ee	49 19					.word xt_x28literalx29
>23f0	ff ff					.word 65535
>23f2	84 16					.word xt_assertx3d
>23f4	49 19					.word xt_x28literalx29
>23f6	fc 23					.word l_116
>23f8	69 37					.word xt_x28branchx29
>23fa	15 24					.word l_117
.23fc					l_116:
>23fc	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>2404	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>2414	00
.2415					l_117:
>2415	64 16					.word xt_testname
>2417	49 19					.word xt_x28literalx29
>2419	00 00					.word 0
>241b	49 19					.word xt_x28literalx29
>241d	00 00					.word 0
>241f	f8 35					.word xt_or
>2421	49 19					.word xt_x28literalx29
>2423	00 00					.word 0
>2425	84 16					.word xt_assertx3d
>2427	49 19					.word xt_x28literalx29
>2429	2f 24					.word l_118
>242b	69 37					.word xt_x28branchx29
>242d	48 24					.word l_119
.242f					l_118:
>242f	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>2437	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2447	00
.2448					l_119:
>2448	64 16					.word xt_testname
>244a	49 19					.word xt_x28literalx29
>244c	00 00					.word 0
>244e	49 19					.word xt_x28literalx29
>2450	ff ff					.word 65535
>2452	f8 35					.word xt_or
>2454	49 19					.word xt_x28literalx29
>2456	ff ff					.word 65535
>2458	84 16					.word xt_assertx3d
>245a	49 19					.word xt_x28literalx29
>245c	62 24					.word l_120
>245e	69 37					.word xt_x28branchx29
>2460	7b 24					.word l_121
.2462					l_120:
>2462	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>246a	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>247a	00
.247b					l_121:
>247b	64 16					.word xt_testname
>247d	49 19					.word xt_x28literalx29
>247f	ff ff					.word 65535
>2481	49 19					.word xt_x28literalx29
>2483	00 00					.word 0
>2485	f8 35					.word xt_or
>2487	49 19					.word xt_x28literalx29
>2489	ff ff					.word 65535
>248b	84 16					.word xt_assertx3d
>248d	49 19					.word xt_x28literalx29
>248f	95 24					.word l_122
>2491	69 37					.word xt_x28branchx29
>2493	ae 24					.word l_123
.2495					l_122:
>2495	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>249d	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>24ad	00
.24ae					l_123:
>24ae	64 16					.word xt_testname
>24b0	49 19					.word xt_x28literalx29
>24b2	ff ff					.word 65535
>24b4	49 19					.word xt_x28literalx29
>24b6	ff ff					.word 65535
>24b8	f8 35					.word xt_or
>24ba	49 19					.word xt_x28literalx29
>24bc	ff ff					.word 65535
>24be	84 16					.word xt_assertx3d
>24c0	49 19					.word xt_x28literalx29
>24c2	c8 24					.word l_124
>24c4	69 37					.word xt_x28branchx29
>24c6	e2 24					.word l_125
.24c8					l_124:
>24c8	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>24d0	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>24e0	68 00
.24e2					l_125:
>24e2	64 16					.word xt_testname
>24e4	49 19					.word xt_x28literalx29
>24e6	00 00					.word 0
>24e8	49 19					.word xt_x28literalx29
>24ea	00 00					.word 0
>24ec	1c 36					.word xt_xor
>24ee	49 19					.word xt_x28literalx29
>24f0	00 00					.word 0
>24f2	84 16					.word xt_assertx3d
>24f4	49 19					.word xt_x28literalx29
>24f6	fc 24					.word l_126
>24f8	69 37					.word xt_x28branchx29
>24fa	16 25					.word l_127
.24fc					l_126:
>24fc	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>2504	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>2514	68 00
.2516					l_127:
>2516	64 16					.word xt_testname
>2518	49 19					.word xt_x28literalx29
>251a	00 00					.word 0
>251c	49 19					.word xt_x28literalx29
>251e	ff ff					.word 65535
>2520	1c 36					.word xt_xor
>2522	49 19					.word xt_x28literalx29
>2524	ff ff					.word 65535
>2526	84 16					.word xt_assertx3d
>2528	49 19					.word xt_x28literalx29
>252a	30 25					.word l_128
>252c	69 37					.word xt_x28branchx29
>252e	4a 25					.word l_129
.2530					l_128:
>2530	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>2538	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>2548	68 00
.254a					l_129:
>254a	64 16					.word xt_testname
>254c	49 19					.word xt_x28literalx29
>254e	ff ff					.word 65535
>2550	49 19					.word xt_x28literalx29
>2552	00 00					.word 0
>2554	1c 36					.word xt_xor
>2556	49 19					.word xt_x28literalx29
>2558	ff ff					.word 65535
>255a	84 16					.word xt_assertx3d
>255c	49 19					.word xt_x28literalx29
>255e	64 25					.word l_130
>2560	69 37					.word xt_x28branchx29
>2562	7e 25					.word l_131
.2564					l_130:
>2564	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>256c	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>257c	68 00
.257e					l_131:
>257e	64 16					.word xt_testname
>2580	49 19					.word xt_x28literalx29
>2582	ff ff					.word 65535
>2584	49 19					.word xt_x28literalx29
>2586	ff ff					.word 65535
>2588	1c 36					.word xt_xor
>258a	49 19					.word xt_x28literalx29
>258c	00 00					.word 0
>258e	84 16					.word xt_assertx3d
>2590	49 19					.word xt_x28literalx29
>2592	98 25					.word l_132
>2594	69 37					.word xt_x28branchx29
>2596	ac 25					.word l_133
.2598					l_132:
>2598	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>25a0	74 20 2d 2d 3e 20 66 66 66 66 68 00
.25ac					l_133:
>25ac	64 16					.word xt_testname
>25ae	49 19					.word xt_x28literalx29
>25b0	00 00					.word 0
>25b2	40 36					.word xt_not
>25b4	49 19					.word xt_x28literalx29
>25b6	ff ff					.word 65535
>25b8	84 16					.word xt_assertx3d
>25ba	49 19					.word xt_x28literalx29
>25bc	c2 25					.word l_134
>25be	69 37					.word xt_x28branchx29
>25c0	d6 25					.word l_135
.25c2					l_134:
>25c2	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>25ca	74 20 2d 2d 3e 20 30 30 30 30 68 00
.25d6					l_135:
>25d6	64 16					.word xt_testname
>25d8	49 19					.word xt_x28literalx29
>25da	ff ff					.word 65535
>25dc	40 36					.word xt_not
>25de	49 19					.word xt_x28literalx29
>25e0	00 00					.word 0
>25e2	84 16					.word xt_assertx3d
>25e4	49 19					.word xt_x28literalx29
>25e6	ec 25					.word l_136
>25e8	69 37					.word xt_x28branchx29
>25ea	fb 25					.word l_137
.25ec					l_136:
>25ec	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>25f4	20 30 30 30 30 68 00
.25fb					l_137:
>25fb	64 16					.word xt_testname
>25fd	b5 18					.word xt_0
>25ff	62 36					.word xt_0x3c
>2601	49 19					.word xt_x28literalx29
>2603	00 00					.word 0
>2605	84 16					.word xt_assertx3d
>2607	49 19					.word xt_x28literalx29
>2609	0f 26					.word l_138
>260b	69 37					.word xt_x28branchx29
>260d	1e 26					.word l_139
.260f					l_138:
>260f	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>2617	20 30 30 30 30 68 00
.261e					l_139:
>261e	64 16					.word xt_testname
>2620	49 19					.word xt_x28literalx29
>2622	03 00					.word 3
>2624	62 36					.word xt_0x3c
>2626	49 19					.word xt_x28literalx29
>2628	00 00					.word 0
>262a	84 16					.word xt_assertx3d
>262c	49 19					.word xt_x28literalx29
>262e	34 26					.word l_140
>2630	69 37					.word xt_x28branchx29
>2632	47 26					.word l_141
.2634					l_140:
>2634	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>263c	20 2d 2d 3e 20 66 66 66 66 68 00
.2647					l_141:
>2647	64 16					.word xt_testname
>2649	49 19					.word xt_x28literalx29
>264b	ff ff					.word 65535
>264d	62 36					.word xt_0x3c
>264f	49 19					.word xt_x28literalx29
>2651	ff ff					.word 65535
>2653	84 16					.word xt_assertx3d
>2655	49 19					.word xt_x28literalx29
>2657	5d 26					.word l_142
>2659	69 37					.word xt_x28branchx29
>265b	6c 26					.word l_143
.265d					l_142:
>265d	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>2665	20 66 66 66 66 68 00
.266c					l_143:
>266c	64 16					.word xt_testname
>266e	b5 18					.word xt_0
>2670	89 36					.word xt_0x3d
>2672	49 19					.word xt_x28literalx29
>2674	ff ff					.word 65535
>2676	84 16					.word xt_assertx3d
>2678	49 19					.word xt_x28literalx29
>267a	80 26					.word l_144
>267c	69 37					.word xt_x28branchx29
>267e	8f 26					.word l_145
.2680					l_144:
>2680	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>2688	20 30 30 30 30 68 00
.268f					l_145:
>268f	64 16					.word xt_testname
>2691	49 19					.word xt_x28literalx29
>2693	03 00					.word 3
>2695	89 36					.word xt_0x3d
>2697	49 19					.word xt_x28literalx29
>2699	00 00					.word 0
>269b	84 16					.word xt_assertx3d
>269d	49 19					.word xt_x28literalx29
>269f	a5 26					.word l_146
>26a1	69 37					.word xt_x28branchx29
>26a3	b8 26					.word l_147
.26a5					l_146:
>26a5	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>26ad	20 2d 2d 3e 20 30 30 30 30 68 00
.26b8					l_147:
>26b8	64 16					.word xt_testname
>26ba	49 19					.word xt_x28literalx29
>26bc	ff ff					.word 65535
>26be	89 36					.word xt_0x3d
>26c0	49 19					.word xt_x28literalx29
>26c2	00 00					.word 0
>26c4	84 16					.word xt_assertx3d
>26c6	49 19					.word xt_x28literalx29
>26c8	ce 26					.word l_148
>26ca	69 37					.word xt_x28branchx29
>26cc	dd 26					.word l_149
.26ce					l_148:
>26ce	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>26d6	20 30 30 30 30 68 00
.26dd					l_149:
>26dd	64 16					.word xt_testname
>26df	b5 18					.word xt_0
>26e1	b4 36					.word xt_0x3e
>26e3	49 19					.word xt_x28literalx29
>26e5	00 00					.word 0
>26e7	84 16					.word xt_assertx3d
>26e9	49 19					.word xt_x28literalx29
>26eb	f1 26					.word l_150
>26ed	69 37					.word xt_x28branchx29
>26ef	00 27					.word l_151
.26f1					l_150:
>26f1	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>26f9	20 66 66 66 66 68 00
.2700					l_151:
>2700	64 16					.word xt_testname
>2702	49 19					.word xt_x28literalx29
>2704	03 00					.word 3
>2706	b4 36					.word xt_0x3e
>2708	49 19					.word xt_x28literalx29
>270a	ff ff					.word 65535
>270c	84 16					.word xt_assertx3d
>270e	49 19					.word xt_x28literalx29
>2710	16 27					.word l_152
>2712	69 37					.word xt_x28branchx29
>2714	29 27					.word l_153
.2716					l_152:
>2716	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>271e	20 2d 2d 3e 20 30 30 30 30 68 00
.2729					l_153:
>2729	64 16					.word xt_testname
>272b	49 19					.word xt_x28literalx29
>272d	ff ff					.word 65535
>272f	b4 36					.word xt_0x3e
>2731	49 19					.word xt_x28literalx29
>2733	00 00					.word 0
>2735	84 16					.word xt_assertx3d
>2737	49 19					.word xt_x28literalx29
>2739	3f 27					.word l_154
>273b	69 37					.word xt_x28branchx29
>273d	56 27					.word l_155
.273f					l_154:
>273f	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>2747	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2756					l_155:
>2756	64 16					.word xt_testname
>2758	29 37					.word xt_cells
>275a	ef 18					.word xt_2
>275c	70 33					.word xt_x2d
>275e	89 36					.word xt_0x3d
>2760	49 19					.word xt_x28literalx29
>2762	ff ff					.word 65535
>2764	84 16					.word xt_assertx3d
>2766	49 19					.word xt_x28literalx29
>2768	6e 27					.word l_156
>276a	69 37					.word xt_x28branchx29
>276c	80 27					.word l_157
.276e					l_156:
>276e	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>2776	75 74 65 20 2d 2d 3e 20 31 00
.2780					l_157:
>2780	64 16					.word xt_testname
>2782	49 19					.word xt_x28literalx29
>2784	d1 18					.word xt_1
>2786	89 39					.word xt_execute
>2788	d1 18					.word xt_1
>278a	84 16					.word xt_assertx3d
>278c	49 19					.word xt_x28literalx29
>278e	94 27					.word l_158
>2790	69 37					.word xt_x28branchx29
>2792	aa 27					.word l_159
.2794					l_158:
>2794	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>279c	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.27aa					l_159:
>27aa	64 16					.word xt_testname
>27ac	d1 18					.word xt_1
>27ae	ef 18					.word xt_2
>27b0	49 19					.word xt_x28literalx29
>27b2	e5 32					.word xt_x2b
>27b4	89 39					.word xt_execute
>27b6	49 19					.word xt_x28literalx29
>27b8	03 00					.word 3
>27ba	84 16					.word xt_assertx3d
>27bc	49 19					.word xt_x28literalx29
>27be	c4 27					.word l_160
>27c0	69 37					.word xt_x28branchx29
>27c2	dd 27					.word l_161
.27c4					l_160:
>27c4	33 30 68 20 31 30 20 64			.null "30h 10 digit --> 0 ffffh"
>27cc	69 67 69 74 20 2d 2d 3e 20 30 20 66 66 66 66 68
>27dc	00
.27dd					l_161:
>27dd	64 16					.word xt_testname
>27df	49 19					.word xt_x28literalx29
>27e1	30 00					.word 48
>27e3	49 19					.word xt_x28literalx29
>27e5	0a 00					.word 10
>27e7	72 3a					.word xt_digit
>27e9	49 19					.word xt_x28literalx29
>27eb	ff ff					.word 65535
>27ed	84 16					.word xt_assertx3d
>27ef	b5 18					.word xt_0
>27f1	84 16					.word xt_assertx3d
>27f3	49 19					.word xt_x28literalx29
>27f5	fb 27					.word l_162
>27f7	69 37					.word xt_x28branchx29
>27f9	14 28					.word l_163
.27fb					l_162:
>27fb	33 31 68 20 31 30 20 64			.null "31h 10 digit --> 1 ffffh"
>2803	69 67 69 74 20 2d 2d 3e 20 31 20 66 66 66 66 68
>2813	00
.2814					l_163:
>2814	64 16					.word xt_testname
>2816	49 19					.word xt_x28literalx29
>2818	31 00					.word 49
>281a	49 19					.word xt_x28literalx29
>281c	0a 00					.word 10
>281e	72 3a					.word xt_digit
>2820	49 19					.word xt_x28literalx29
>2822	ff ff					.word 65535
>2824	84 16					.word xt_assertx3d
>2826	d1 18					.word xt_1
>2828	84 16					.word xt_assertx3d
>282a	49 19					.word xt_x28literalx29
>282c	32 28					.word l_164
>282e	69 37					.word xt_x28branchx29
>2830	4b 28					.word l_165
.2832					l_164:
>2832	33 39 68 20 31 30 20 64			.null "39h 10 digit --> 9 ffffh"
>283a	69 67 69 74 20 2d 2d 3e 20 39 20 66 66 66 66 68
>284a	00
.284b					l_165:
>284b	64 16					.word xt_testname
>284d	49 19					.word xt_x28literalx29
>284f	39 00					.word 57
>2851	49 19					.word xt_x28literalx29
>2853	0a 00					.word 10
>2855	72 3a					.word xt_digit
>2857	49 19					.word xt_x28literalx29
>2859	ff ff					.word 65535
>285b	84 16					.word xt_assertx3d
>285d	49 19					.word xt_x28literalx29
>285f	09 00					.word 9
>2861	84 16					.word xt_assertx3d
>2863	49 19					.word xt_x28literalx29
>2865	6b 28					.word l_166
>2867	69 37					.word xt_x28branchx29
>2869	7e 28					.word l_167
.286b					l_166:
>286b	34 31 68 20 31 30 20 64			.null "41h 10 digit --> 0"
>2873	69 67 69 74 20 2d 2d 3e 20 30 00
.287e					l_167:
>287e	64 16					.word xt_testname
>2880	49 19					.word xt_x28literalx29
>2882	41 00					.word 65
>2884	49 19					.word xt_x28literalx29
>2886	0a 00					.word 10
>2888	72 3a					.word xt_digit
>288a	b5 18					.word xt_0
>288c	84 16					.word xt_assertx3d
>288e	49 19					.word xt_x28literalx29
>2890	96 28					.word l_168
>2892	69 37					.word xt_x28branchx29
>2894	a9 28					.word l_169
.2896					l_168:
>2896	36 31 68 20 31 30 20 64			.null "61h 10 digit --> 0"
>289e	69 67 69 74 20 2d 2d 3e 20 30 00
.28a9					l_169:
>28a9	64 16					.word xt_testname
>28ab	49 19					.word xt_x28literalx29
>28ad	61 00					.word 97
>28af	49 19					.word xt_x28literalx29
>28b1	0a 00					.word 10
>28b3	72 3a					.word xt_digit
>28b5	b5 18					.word xt_0
>28b7	84 16					.word xt_assertx3d
>28b9	49 19					.word xt_x28literalx29
>28bb	c1 28					.word l_170
>28bd	69 37					.word xt_x28branchx29
>28bf	db 28					.word l_171
.28c1					l_170:
>28c1	34 31 68 20 31 36 20 64			.null "41h 16 digit --> 10 ffffh"
>28c9	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>28d9	68 00
.28db					l_171:
>28db	64 16					.word xt_testname
>28dd	49 19					.word xt_x28literalx29
>28df	41 00					.word 65
>28e1	49 19					.word xt_x28literalx29
>28e3	10 00					.word 16
>28e5	72 3a					.word xt_digit
>28e7	49 19					.word xt_x28literalx29
>28e9	ff ff					.word 65535
>28eb	84 16					.word xt_assertx3d
>28ed	49 19					.word xt_x28literalx29
>28ef	0a 00					.word 10
>28f1	84 16					.word xt_assertx3d
>28f3	49 19					.word xt_x28literalx29
>28f5	fb 28					.word l_172
>28f7	69 37					.word xt_x28branchx29
>28f9	15 29					.word l_173
.28fb					l_172:
>28fb	36 31 68 20 31 36 20 64			.null "61h 16 digit --> 10 ffffh"
>2903	69 67 69 74 20 2d 2d 3e 20 31 30 20 66 66 66 66
>2913	68 00
.2915					l_173:
>2915	64 16					.word xt_testname
>2917	49 19					.word xt_x28literalx29
>2919	61 00					.word 97
>291b	49 19					.word xt_x28literalx29
>291d	10 00					.word 16
>291f	72 3a					.word xt_digit
>2921	49 19					.word xt_x28literalx29
>2923	ff ff					.word 65535
>2925	84 16					.word xt_assertx3d
>2927	49 19					.word xt_x28literalx29
>2929	0a 00					.word 10
>292b	84 16					.word xt_assertx3d
>292d	49 19					.word xt_x28literalx29
>292f	35 29					.word l_174
>2931	69 37					.word xt_x28branchx29
>2933	4f 29					.word l_175
.2935					l_174:
>2935	34 36 68 20 31 36 20 64			.null "46h 16 digit --> fh ffffh"
>293d	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>294d	68 00
.294f					l_175:
>294f	64 16					.word xt_testname
>2951	49 19					.word xt_x28literalx29
>2953	46 00					.word 70
>2955	49 19					.word xt_x28literalx29
>2957	10 00					.word 16
>2959	72 3a					.word xt_digit
>295b	49 19					.word xt_x28literalx29
>295d	ff ff					.word 65535
>295f	84 16					.word xt_assertx3d
>2961	49 19					.word xt_x28literalx29
>2963	0f 00					.word 15
>2965	84 16					.word xt_assertx3d
>2967	49 19					.word xt_x28literalx29
>2969	6f 29					.word l_176
>296b	69 37					.word xt_x28branchx29
>296d	89 29					.word l_177
.296f					l_176:
>296f	36 36 68 20 31 36 20 64			.null "66h 16 digit --> fh ffffh"
>2977	69 67 69 74 20 2d 2d 3e 20 66 68 20 66 66 66 66
>2987	68 00
.2989					l_177:
>2989	64 16					.word xt_testname
>298b	49 19					.word xt_x28literalx29
>298d	66 00					.word 102
>298f	49 19					.word xt_x28literalx29
>2991	10 00					.word 16
>2993	72 3a					.word xt_digit
>2995	49 19					.word xt_x28literalx29
>2997	ff ff					.word 65535
>2999	84 16					.word xt_assertx3d
>299b	49 19					.word xt_x28literalx29
>299d	0f 00					.word 15
>299f	84 16					.word xt_assertx3d
>29a1	49 19					.word xt_x28literalx29
>29a3	a9 29					.word l_179
>29a5	69 37					.word xt_x28branchx29
>29a7	b6 29					.word l_180
.29a9					l_179:
>29a9	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>29b1	2d 3e 20 30 00
.29b6					l_180:
>29b6	64 16					.word xt_testname
>29b8	b5 18					.word xt_0
>29ba	7a 3c					.word xt_x3fdup
>29bc	b5 18					.word xt_0
>29be	84 16					.word xt_assertx3d
>29c0	49 19					.word xt_x28literalx29
>29c2	c8 29					.word l_181
>29c4	69 37					.word xt_x28branchx29
>29c6	d7 29					.word l_182
.29c8					l_181:
>29c8	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>29d0	2d 3e 20 31 20 31 00
.29d7					l_182:
>29d7	64 16					.word xt_testname
>29d9	d1 18					.word xt_1
>29db	7a 3c					.word xt_x3fdup
>29dd	d1 18					.word xt_1
>29df	84 16					.word xt_assertx3d
>29e1	d1 18					.word xt_1
>29e3	84 16					.word xt_assertx3d
>29e5	49 19					.word xt_x28literalx29
>29e7	ed 29					.word l_183
>29e9	69 37					.word xt_x28branchx29
>29eb	01 2a					.word l_184
.29ed					l_183:
>29ed	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>29f5	74 20 2d 2d 3e 20 32 20 33 20 31 00
.2a01					l_184:
>2a01	64 16					.word xt_testname
>2a03	d1 18					.word xt_1
>2a05	ef 18					.word xt_2
>2a07	49 19					.word xt_x28literalx29
>2a09	03 00					.word 3
>2a0b	9a 3c					.word xt_rot
>2a0d	d1 18					.word xt_1
>2a0f	84 16					.word xt_assertx3d
>2a11	49 19					.word xt_x28literalx29
>2a13	03 00					.word 3
>2a15	84 16					.word xt_assertx3d
>2a17	ef 18					.word xt_2
>2a19	84 16					.word xt_assertx3d
>2a1b	49 19					.word xt_x28literalx29
>2a1d	23 2a					.word l_185
>2a1f	69 37					.word xt_x28branchx29
>2a21	38 2a					.word l_186
.2a23					l_185:
>2a23	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>2a2b	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.2a38					l_186:
>2a38	64 16					.word xt_testname
>2a3a	d1 18					.word xt_1
>2a3c	ef 18					.word xt_2
>2a3e	ba 3c					.word xt_2dup
>2a40	ef 18					.word xt_2
>2a42	84 16					.word xt_assertx3d
>2a44	d1 18					.word xt_1
>2a46	84 16					.word xt_assertx3d
>2a48	ef 18					.word xt_2
>2a4a	84 16					.word xt_assertx3d
>2a4c	d1 18					.word xt_1
>2a4e	84 16					.word xt_assertx3d
>2a50	49 19					.word xt_x28literalx29
>2a52	58 2a					.word l_187
>2a54	69 37					.word xt_x28branchx29
>2a56	6e 2a					.word l_188
.2a58					l_187:
>2a58	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>2a60	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.2a6e					l_188:
>2a6e	64 16					.word xt_testname
>2a70	d1 18					.word xt_1
>2a72	ef 18					.word xt_2
>2a74	49 19					.word xt_x28literalx29
>2a76	03 00					.word 3
>2a78	49 19					.word xt_x28literalx29
>2a7a	04 00					.word 4
>2a7c	d6 3c					.word xt_2drop
>2a7e	ef 18					.word xt_2
>2a80	84 16					.word xt_assertx3d
>2a82	d1 18					.word xt_1
>2a84	84 16					.word xt_assertx3d
>2a86	49 19					.word xt_x28literalx29
>2a88	8e 2a					.word l_189
>2a8a	69 37					.word xt_x28branchx29
>2a8c	9e 2a					.word l_190
.2a8e					l_189:
>2a8e	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>2a96	3e 20 66 66 66 66 68 00
.2a9e					l_190:
>2a9e	64 16					.word xt_testname
>2aa0	d1 18					.word xt_1
>2aa2	ef 18					.word xt_2
>2aa4	f2 3c					.word xt_x3c
>2aa6	49 19					.word xt_x28literalx29
>2aa8	ff ff					.word 65535
>2aaa	84 16					.word xt_assertx3d
>2aac	49 19					.word xt_x28literalx29
>2aae	b4 2a					.word l_191
>2ab0	69 37					.word xt_x28branchx29
>2ab2	c4 2a					.word l_192
.2ab4					l_191:
>2ab4	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>2abc	3e 20 30 30 30 30 68 00
.2ac4					l_192:
>2ac4	64 16					.word xt_testname
>2ac6	ef 18					.word xt_2
>2ac8	d1 18					.word xt_1
>2aca	f2 3c					.word xt_x3c
>2acc	49 19					.word xt_x28literalx29
>2ace	00 00					.word 0
>2ad0	84 16					.word xt_assertx3d
>2ad2	49 19					.word xt_x28literalx29
>2ad4	da 2a					.word l_193
>2ad6	69 37					.word xt_x28branchx29
>2ad8	ee 2a					.word l_194
.2ada					l_193:
>2ada	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2ae2	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.2aee					l_194:
>2aee	64 16					.word xt_testname
>2af0	b5 18					.word xt_0
>2af2	49 19					.word xt_x28literalx29
>2af4	ff ff					.word 65535
>2af6	f2 3c					.word xt_x3c
>2af8	49 19					.word xt_x28literalx29
>2afa	00 00					.word 0
>2afc	84 16					.word xt_assertx3d
>2afe	49 19					.word xt_x28literalx29
>2b00	06 2b					.word l_195
>2b02	69 37					.word xt_x28branchx29
>2b04	1a 2b					.word l_196
.2b06					l_195:
>2b06	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>2b0e	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2b1a					l_196:
>2b1a	64 16					.word xt_testname
>2b1c	49 19					.word xt_x28literalx29
>2b1e	ff ff					.word 65535
>2b20	b5 18					.word xt_0
>2b22	f2 3c					.word xt_x3c
>2b24	49 19					.word xt_x28literalx29
>2b26	ff ff					.word 65535
>2b28	84 16					.word xt_assertx3d
>2b2a	49 19					.word xt_x28literalx29
>2b2c	32 2b					.word l_197
>2b2e	69 37					.word xt_x28branchx29
>2b30	42 2b					.word l_198
.2b32					l_197:
>2b32	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2b3a	3e 20 30 30 30 30 68 00
.2b42					l_198:
>2b42	64 16					.word xt_testname
>2b44	d1 18					.word xt_1
>2b46	ef 18					.word xt_2
>2b48	0e 3d					.word xt_x3e
>2b4a	49 19					.word xt_x28literalx29
>2b4c	00 00					.word 0
>2b4e	84 16					.word xt_assertx3d
>2b50	49 19					.word xt_x28literalx29
>2b52	58 2b					.word l_199
>2b54	69 37					.word xt_x28branchx29
>2b56	68 2b					.word l_200
.2b58					l_199:
>2b58	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>2b60	3e 20 66 66 66 66 68 00
.2b68					l_200:
>2b68	64 16					.word xt_testname
>2b6a	ef 18					.word xt_2
>2b6c	d1 18					.word xt_1
>2b6e	0e 3d					.word xt_x3e
>2b70	49 19					.word xt_x28literalx29
>2b72	ff ff					.word 65535
>2b74	84 16					.word xt_assertx3d
>2b76	49 19					.word xt_x28literalx29
>2b78	7e 2b					.word l_201
>2b7a	69 37					.word xt_x28branchx29
>2b7c	92 2b					.word l_202
.2b7e					l_201:
>2b7e	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2b86	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2b92					l_202:
>2b92	64 16					.word xt_testname
>2b94	b5 18					.word xt_0
>2b96	49 19					.word xt_x28literalx29
>2b98	ff ff					.word 65535
>2b9a	0e 3d					.word xt_x3e
>2b9c	49 19					.word xt_x28literalx29
>2b9e	ff ff					.word 65535
>2ba0	84 16					.word xt_assertx3d
>2ba2	49 19					.word xt_x28literalx29
>2ba4	aa 2b					.word l_203
>2ba6	69 37					.word xt_x28branchx29
>2ba8	be 2b					.word l_204
.2baa					l_203:
>2baa	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2bb2	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.2bbe					l_204:
>2bbe	64 16					.word xt_testname
>2bc0	49 19					.word xt_x28literalx29
>2bc2	ff ff					.word 65535
>2bc4	b5 18					.word xt_0
>2bc6	0e 3d					.word xt_x3e
>2bc8	49 19					.word xt_x28literalx29
>2bca	00 00					.word 0
>2bcc	84 16					.word xt_assertx3d
>2bce	49 19					.word xt_x28literalx29
>2bd0	d6 2b					.word l_205
>2bd2	69 37					.word xt_x28branchx29
>2bd4	e6 2b					.word l_206
.2bd6					l_205:
>2bd6	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>2bde	3e 20 30 30 30 30 68 00
.2be6					l_206:
>2be6	64 16					.word xt_testname
>2be8	d1 18					.word xt_1
>2bea	b5 18					.word xt_0
>2bec	2a 3d					.word xt_x3d
>2bee	49 19					.word xt_x28literalx29
>2bf0	00 00					.word 0
>2bf2	84 16					.word xt_assertx3d
>2bf4	49 19					.word xt_x28literalx29
>2bf6	fc 2b					.word l_207
>2bf8	69 37					.word xt_x28branchx29
>2bfa	0c 2c					.word l_208
.2bfc					l_207:
>2bfc	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2c04	3e 20 66 66 66 66 68 00
.2c0c					l_208:
>2c0c	64 16					.word xt_testname
>2c0e	d1 18					.word xt_1
>2c10	d1 18					.word xt_1
>2c12	2a 3d					.word xt_x3d
>2c14	49 19					.word xt_x28literalx29
>2c16	ff ff					.word 65535
>2c18	84 16					.word xt_assertx3d
>2c1a	49 19					.word xt_x28literalx29
>2c1c	22 2c					.word l_209
>2c1e	69 37					.word xt_x28branchx29
>2c20	36 2c					.word l_210
.2c22					l_209:
>2c22	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2c2a	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2c36					l_210:
>2c36	64 16					.word xt_testname
>2c38	49 19					.word xt_x28literalx29
>2c3a	ff ff					.word 65535
>2c3c	b5 18					.word xt_0
>2c3e	2a 3d					.word xt_x3d
>2c40	49 19					.word xt_x28literalx29
>2c42	00 00					.word 0
>2c44	84 16					.word xt_assertx3d
>2c46	49 19					.word xt_x28literalx29
>2c48	4e 2c					.word l_211
>2c4a	69 37					.word xt_x28branchx29
>2c4c	66 2c					.word l_212
.2c4e					l_211:
>2c4e	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2c56	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2c66					l_212:
>2c66	64 16					.word xt_testname
>2c68	49 19					.word xt_x28literalx29
>2c6a	ff ff					.word 65535
>2c6c	49 19					.word xt_x28literalx29
>2c6e	ff ff					.word 65535
>2c70	2a 3d					.word xt_x3d
>2c72	49 19					.word xt_x28literalx29
>2c74	ff ff					.word 65535
>2c76	84 16					.word xt_assertx3d
>2c78	49 19					.word xt_x28literalx29
>2c7a	80 2c					.word l_213
>2c7c	69 37					.word xt_x28branchx29
>2c7e	90 2c					.word l_214
.2c80					l_213:
>2c80	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2c88	3e 20 66 66 66 66 68 00
.2c90					l_214:
>2c90	64 16					.word xt_testname
>2c92	b5 18					.word xt_0
>2c94	b5 18					.word xt_0
>2c96	2a 3d					.word xt_x3d
>2c98	49 19					.word xt_x28literalx29
>2c9a	ff ff					.word 65535
>2c9c	84 16					.word xt_assertx3d
>2c9e	49 19					.word xt_x28literalx29
>2ca0	a6 2c					.word l_216
>2ca2	69 37					.word xt_x28branchx29
>2ca4	b2 2c					.word l_217
.2ca6					l_216:
>2ca6	31 20 61 62 73 20 2d 2d			.null "1 abs --> 1"
>2cae	3e 20 31 00
.2cb2					l_217:
>2cb2	64 16					.word xt_testname
>2cb4	d1 18					.word xt_1
>2cb6	64 3d					.word xt_abs
>2cb8	d1 18					.word xt_1
>2cba	84 16					.word xt_assertx3d
>2cbc	49 19					.word xt_x28literalx29
>2cbe	c4 2c					.word l_218
>2cc0	69 37					.word xt_x28branchx29
>2cc2	d4 2c					.word l_219
.2cc4					l_218:
>2cc4	66 66 66 66 68 20 61 62			.null "ffffh abs --> 1"
>2ccc	73 20 2d 2d 3e 20 31 00
.2cd4					l_219:
>2cd4	64 16					.word xt_testname
>2cd6	49 19					.word xt_x28literalx29
>2cd8	ff ff					.word 65535
>2cda	64 3d					.word xt_abs
>2cdc	d1 18					.word xt_1
>2cde	84 16					.word xt_assertx3d
>2ce0	49 19					.word xt_x28literalx29
>2ce2	e8 2c					.word l_220
>2ce4	69 37					.word xt_x28branchx29
>2ce6	f4 2c					.word l_221
.2ce8					l_220:
>2ce8	30 20 61 62 73 20 2d 2d			.null "0 abs --> 0"
>2cf0	3e 20 30 00
.2cf4					l_221:
>2cf4	64 16					.word xt_testname
>2cf6	b5 18					.word xt_0
>2cf8	64 3d					.word xt_abs
>2cfa	b5 18					.word xt_0
>2cfc	84 16					.word xt_assertx3d
>2cfe	49 19					.word xt_x28literalx29
>2d00	06 2d					.word l_223
>2d02	69 37					.word xt_x28branchx29
>2d04	17 2d					.word l_224
.2d06					l_223:
>2d06	31 20 32 20 64 61 62 73			.null "1 2 dabs --> 1 2"
>2d0e	20 2d 2d 3e 20 31 20 32 00
.2d17					l_224:
>2d17	64 16					.word xt_testname
>2d19	d1 18					.word xt_1
>2d1b	ef 18					.word xt_2
>2d1d	8a 3d					.word xt_dabs
>2d1f	ef 18					.word xt_2
>2d21	84 16					.word xt_assertx3d
>2d23	d1 18					.word xt_1
>2d25	84 16					.word xt_assertx3d
>2d27	49 19					.word xt_x28literalx29
>2d29	2f 2d					.word l_225
>2d2b	69 37					.word xt_x28branchx29
>2d2d	48 2d					.word l_226
.2d2f					l_225:
>2d2f	66 66 66 66 68 20 66 66			.null "ffffh ffffh dabs --> 0 1"
>2d37	66 66 68 20 64 61 62 73 20 2d 2d 3e 20 30 20 31
>2d47	00
.2d48					l_226:
>2d48	64 16					.word xt_testname
>2d4a	49 19					.word xt_x28literalx29
>2d4c	ff ff					.word 65535
>2d4e	49 19					.word xt_x28literalx29
>2d50	ff ff					.word 65535
>2d52	8a 3d					.word xt_dabs
>2d54	d1 18					.word xt_1
>2d56	84 16					.word xt_assertx3d
>2d58	b5 18					.word xt_0
>2d5a	84 16					.word xt_assertx3d
>2d5c	49 19					.word xt_x28literalx29
>2d5e	64 2d					.word l_227
>2d60	69 37					.word xt_x28branchx29
>2d62	75 2d					.word l_228
.2d64					l_227:
>2d64	30 20 30 20 64 61 62 73			.null "0 0 dabs --> 0 0"
>2d6c	20 2d 2d 3e 20 30 20 30 00
.2d75					l_228:
>2d75	64 16					.word xt_testname
>2d77	b5 18					.word xt_0
>2d79	b5 18					.word xt_0
>2d7b	8a 3d					.word xt_dabs
>2d7d	b5 18					.word xt_0
>2d7f	84 16					.word xt_assertx3d
>2d81	b5 18					.word xt_0
>2d83	84 16					.word xt_assertx3d
>2d85	49 19					.word xt_x28literalx29
>2d87	8d 2d					.word l_229
>2d89	69 37					.word xt_x28branchx29
>2d8b	99 2d					.word l_230
.2d8d					l_229:
>2d8d	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>2d95	3e 20 32 00
.2d99					l_230:
>2d99	64 16					.word xt_testname
>2d9b	49 19					.word xt_x28literalx29
>2d9d	06 00					.word 6
>2d9f	49 19					.word xt_x28literalx29
>2da1	03 00					.word 3
>2da3	ca 3d					.word xt_x2f
>2da5	ef 18					.word xt_2
>2da7	84 16					.word xt_assertx3d
>2da9	49 19					.word xt_x28literalx29
>2dab	b1 2d					.word l_231
>2dad	69 37					.word xt_x28branchx29
>2daf	be 2d					.word l_232
.2db1					l_231:
>2db1	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2db9	2d 3e 20 33 00
.2dbe					l_232:
>2dbe	64 16					.word xt_testname
>2dc0	49 19					.word xt_x28literalx29
>2dc2	0a 00					.word 10
>2dc4	49 19					.word xt_x28literalx29
>2dc6	03 00					.word 3
>2dc8	ca 3d					.word xt_x2f
>2dca	49 19					.word xt_x28literalx29
>2dcc	03 00					.word 3
>2dce	84 16					.word xt_assertx3d
>2dd0	49 19					.word xt_x28literalx29
>2dd2	d8 2d					.word l_233
>2dd4	69 37					.word xt_x28branchx29
>2dd6	e6 2d					.word l_234
.2dd8					l_233:
>2dd8	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2de0	2d 2d 3e 20 30 00
.2de6					l_234:
>2de6	64 16					.word xt_testname
>2de8	49 19					.word xt_x28literalx29
>2dea	06 00					.word 6
>2dec	49 19					.word xt_x28literalx29
>2dee	03 00					.word 3
>2df0	e8 3d					.word xt_mod
>2df2	b5 18					.word xt_0
>2df4	84 16					.word xt_assertx3d
>2df6	49 19					.word xt_x28literalx29
>2df8	fe 2d					.word l_235
>2dfa	69 37					.word xt_x28branchx29
>2dfc	0d 2e					.word l_236
.2dfe					l_235:
>2dfe	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>2e06	20 2d 2d 3e 20 31 00
.2e0d					l_236:
>2e0d	64 16					.word xt_testname
>2e0f	49 19					.word xt_x28literalx29
>2e11	0a 00					.word 10
>2e13	49 19					.word xt_x28literalx29
>2e15	03 00					.word 3
>2e17	e8 3d					.word xt_mod
>2e19	d1 18					.word xt_1
>2e1b	84 16					.word xt_assertx3d
>2e1d	49 19					.word xt_x28literalx29
>2e1f	25 2e					.word l_239
>2e21	69 37					.word xt_x28branchx29
>2e23	33 2e					.word l_240
.2e25					l_239:
>2e25	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2e2d	2d 2d 3e 20 32 00
.2e33					l_240:
>2e33	64 16					.word xt_testname
>2e35	d1 18					.word xt_1
>2e37	ef 18					.word xt_2
>2e39	04 3e					.word xt_max
>2e3b	ef 18					.word xt_2
>2e3d	84 16					.word xt_assertx3d
>2e3f	49 19					.word xt_x28literalx29
>2e41	47 2e					.word l_241
>2e43	69 37					.word xt_x28branchx29
>2e45	55 2e					.word l_242
.2e47					l_241:
>2e47	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2e4f	2d 2d 3e 20 33 00
.2e55					l_242:
>2e55	64 16					.word xt_testname
>2e57	49 19					.word xt_x28literalx29
>2e59	03 00					.word 3
>2e5b	b5 18					.word xt_0
>2e5d	04 3e					.word xt_max
>2e5f	49 19					.word xt_x28literalx29
>2e61	03 00					.word 3
>2e63	84 16					.word xt_assertx3d
>2e65	49 19					.word xt_x28literalx29
>2e67	6d 2e					.word l_243
>2e69	69 37					.word xt_x28branchx29
>2e6b	87 2e					.word l_244
.2e6d					l_243:
>2e6d	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>2e75	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>2e85	68 00
.2e87					l_244:
>2e87	64 16					.word xt_testname
>2e89	49 19					.word xt_x28literalx29
>2e8b	fe ff					.word 65534
>2e8d	49 19					.word xt_x28literalx29
>2e8f	ff ff					.word 65535
>2e91	04 3e					.word xt_max
>2e93	49 19					.word xt_x28literalx29
>2e95	ff ff					.word 65535
>2e97	84 16					.word xt_assertx3d
>2e99	49 19					.word xt_x28literalx29
>2e9b	a1 2e					.word l_247
>2e9d	69 37					.word xt_x28branchx29
>2e9f	af 2e					.word l_248
.2ea1					l_247:
>2ea1	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2ea9	2d 2d 3e 20 31 00
.2eaf					l_248:
>2eaf	64 16					.word xt_testname
>2eb1	d1 18					.word xt_1
>2eb3	ef 18					.word xt_2
>2eb5	2e 3e					.word xt_min
>2eb7	d1 18					.word xt_1
>2eb9	84 16					.word xt_assertx3d
>2ebb	49 19					.word xt_x28literalx29
>2ebd	c3 2e					.word l_249
>2ebf	69 37					.word xt_x28branchx29
>2ec1	d1 2e					.word l_250
.2ec3					l_249:
>2ec3	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2ecb	2d 2d 3e 20 30 00
.2ed1					l_250:
>2ed1	64 16					.word xt_testname
>2ed3	49 19					.word xt_x28literalx29
>2ed5	03 00					.word 3
>2ed7	b5 18					.word xt_0
>2ed9	2e 3e					.word xt_min
>2edb	b5 18					.word xt_0
>2edd	84 16					.word xt_assertx3d
>2edf	49 19					.word xt_x28literalx29
>2ee1	e7 2e					.word l_251
>2ee3	69 37					.word xt_x28branchx29
>2ee5	01 2f					.word l_252
.2ee7					l_251:
>2ee7	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2eef	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2eff	68 00
.2f01					l_252:
>2f01	64 16					.word xt_testname
>2f03	49 19					.word xt_x28literalx29
>2f05	fe ff					.word 65534
>2f07	49 19					.word xt_x28literalx29
>2f09	ff ff					.word 65535
>2f0b	2e 3e					.word xt_min
>2f0d	49 19					.word xt_x28literalx29
>2f0f	fe ff					.word 65534
>2f11	84 16					.word xt_assertx3d
>2f13	1c 16					.word i_exit
.2f15					w_drop:
>2f15	04					.byte $04
>2f16	64 72 6f 70				.text 'drop'
>2f1a						.fill 12
>2f26	c0 19					.word w_unittest
.2f28					xt_drop:
.2f28	e8		inx			inx
.2f29	e8		inx			inx
.2f2a	4c 37 16	jmp $1637		jmp next
.2f2d					w_dup:
>2f2d	03					.byte $03
>2f2e	64 75 70				.text 'dup'
>2f31						.fill 13
>2f3e	15 2f					.word w_drop
.2f40					xt_dup:
.2f40	b5 02		lda $02,x		lda pstack+2,x
.2f42	95 00		sta $00,x		sta pstack,x
.2f44	b5 03		lda $03,x		lda pstack+3,x
.2f46	95 01		sta $01,x		sta pstack+1,x
.2f48	ca		dex			dex
.2f49	ca		dex			dex
.2f4a	4c 37 16	jmp $1637		jmp next
.2f4d					w_swap:
>2f4d	04					.byte $04
>2f4e	73 77 61 70				.text 'swap'
>2f52						.fill 12
>2f5e	2d 2f					.word w_dup
.2f60					xt_swap:
.2f60	b5 02		lda $02,x		lda pstack+2,x
.2f62	b4 04		ldy $04,x		ldy pstack+4,x
.2f64	94 02		sty $02,x		sty pstack+2,x
.2f66	95 04		sta $04,x		sta pstack+4,x
.2f68	b5 03		lda $03,x		lda pstack+3,x
.2f6a	b4 05		ldy $05,x		ldy pstack+5,x
.2f6c	94 03		sty $03,x		sty pstack+3,x
.2f6e	95 05		sta $05,x		sta pstack+5,x
.2f70	4c 37 16	jmp $1637		jmp next
.2f73					w_2swap:
>2f73	05					.byte $05
>2f74	32 73 77 61 70				.text '2swap'
>2f79						.fill 11
>2f84	4d 2f					.word w_swap
.2f86					xt_2swap:
.2f86	b5 05		lda $05,x		lda pstack+5,x
.2f88	48		pha			pha
.2f89	b5 04		lda $04,x		lda pstack+4,x
.2f8b	48		pha			pha
.2f8c	b5 03		lda $03,x		lda pstack+3,x
.2f8e	48		pha			pha
.2f8f	b5 02		lda $02,x		lda pstack+2,x
.2f91	48		pha			pha
.2f92	b5 09		lda $09,x		lda pstack+9,x
.2f94	95 05		sta $05,x		sta pstack+5,x
.2f96	b5 08		lda $08,x		lda pstack+8,x
.2f98	95 04		sta $04,x		sta pstack+4,x
.2f9a	b5 07		lda $07,x		lda pstack+7,x
.2f9c	95 03		sta $03,x		sta pstack+3,x
.2f9e	b5 06		lda $06,x		lda pstack+6,x
.2fa0	95 02		sta $02,x		sta pstack+2,x
.2fa2	68		pla			pla
.2fa3	95 06		sta $06,x		sta pstack+6,x
.2fa5	68		pla			pla
.2fa6	95 07		sta $07,x		sta pstack+7,x
.2fa8	68		pla			pla
.2fa9	95 08		sta $08,x		sta pstack+8,x
.2fab	68		pla			pla
.2fac	95 09		sta $09,x		sta pstack+9,x
.2fae	4c 37 16	jmp $1637		jmp next
.2fb1					w_over:
>2fb1	04					.byte $04
>2fb2	6f 76 65 72				.text 'over'
>2fb6						.fill 12
>2fc2	73 2f					.word w_2swap
.2fc4					xt_over:
.2fc4	b5 04		lda $04,x		lda pstack+4,x
.2fc6	95 00		sta $00,x		sta pstack,x
.2fc8	b5 05		lda $05,x		lda pstack+5,x
.2fca	95 01		sta $01,x		sta pstack+1,x
.2fcc	ca		dex			dex
.2fcd	ca		dex			dex
.2fce	4c 37 16	jmp $1637		jmp next
.2fd1					w_2over:
>2fd1	05					.byte $05
>2fd2	32 6f 76 65 72				.text '2over'
>2fd7						.fill 11
>2fe2	b1 2f					.word w_over
.2fe4					xt_2over:
.2fe4	ca		dex			dex
.2fe5	ca		dex			dex
.2fe6	ca		dex			dex
.2fe7	ca		dex			dex
.2fe8	b5 0d		lda $0d,x		lda pstack+13,x
.2fea	95 05		sta $05,x		sta pstack+5,x
.2fec	b5 0c		lda $0c,x		lda pstack+12,x
.2fee	95 04		sta $04,x		sta pstack+4,x
.2ff0	b5 0b		lda $0b,x		lda pstack+11,x
.2ff2	95 03		sta $03,x		sta pstack+3,x
.2ff4	b5 0a		lda $0a,x		lda pstack+10,x
.2ff6	95 02		sta $02,x		sta pstack+2,x
.2ff8	4c 37 16	jmp $1637		jmp next
.2ffb					w_x3er:
>2ffb	02					.byte $02
>2ffc	3e 72					.text '>r'
>2ffe						.fill 14
>300c	d1 2f					.word w_2over
.300e					xt_x3er:
.300e	b5 03		lda $03,x		lda pstack+3,x
.3010	48		pha			pha
.3011	b5 02		lda $02,x		lda pstack+2,x
.3013	48		pha			pha
.3014	e8		inx			inx
.3015	e8		inx			inx
.3016	4c 37 16	jmp $1637		jmp next
.3019					w_rx3e:
>3019	02					.byte $02
>301a	72 3e					.text 'r>'
>301c						.fill 14
>302a	fb 2f					.word w_x3er
.302c					xt_rx3e:
.302c	68		pla			pla
.302d	95 00		sta $00,x		sta pstack,x
.302f	68		pla			pla
.3030	95 01		sta $01,x		sta pstack+1,x
.3032	ca		dex			dex
.3033	ca		dex			dex
.3034	4c 37 16	jmp $1637		jmp next
.3037					w_r:
>3037	01					.byte $01
>3038	72					.text 'r'
>3039						.fill 15
>3048	19 30					.word w_rx3e
.304a					xt_r:
.304a	68		pla			pla
.304b	95 00		sta $00,x		sta pstack,x
.304d	68		pla			pla
.304e	95 01		sta $01,x		sta pstack+1,x
.3050	48		pha			pha
.3051	b5 00		lda $00,x		lda pstack,x
.3053	48		pha			pha
.3054	ca		dex			dex
.3055	ca		dex			dex
.3056	4c 37 16	jmp $1637		jmp next
.3059					w_rdrop:
>3059	05					.byte $05
>305a	72 64 72 6f 70				.text 'rdrop'
>305f						.fill 11
>306a	37 30					.word w_r
.306c					xt_rdrop:
.306c	68		pla			pla
.306d	68		pla			pla
.306e					w_x21:
>306e	01					.byte $01
>306f	21					.text '!'
>3070						.fill 15
>307f	59 30					.word w_rdrop
.3081					xt_x21:
.3081	b5 02		lda $02,x		lda pstack+2,x
.3083	85 32		sta $32			sta tmp
.3085	b5 03		lda $03,x		lda pstack+3,x
.3087	85 33		sta $33			sta tmp+1
.3089	a0 01		ldy #$01		ldy #1
.308b	b5 04		lda $04,x		lda pstack+4,x
.308d	92 32		sta ($32)		sta (tmp)
.308f	b5 05		lda $05,x		lda pstack+5,x
.3091	91 32		sta ($32),y		sta (tmp),y
.3093	e8		inx			inx
.3094	e8		inx			inx
.3095	e8		inx			inx
.3096	e8		inx			inx
.3097	4c 37 16	jmp $1637		jmp next
.309a					w_x40:
>309a	01					.byte $01
>309b	40					.text '@'
>309c						.fill 15
>30ab	6e 30					.word w_x21
.30ad					xt_x40:
.30ad	b5 02		lda $02,x		lda pstack+2,x
.30af	85 32		sta $32			sta tmp
.30b1	b5 03		lda $03,x		lda pstack+3,x
.30b3	85 33		sta $33			sta tmp+1
.30b5	a0 01		ldy #$01		ldy #1
.30b7	b2 32		lda ($32)		lda (tmp)
.30b9	95 02		sta $02,x		sta pstack+2,x
.30bb	b1 32		lda ($32),y		lda (tmp),y
.30bd	95 03		sta $03,x		sta pstack+3,x
.30bf	4c 37 16	jmp $1637		jmp next
.30c2					w_cx21:
>30c2	02					.byte $02
>30c3	63 21					.text 'c!'
>30c5						.fill 14
>30d3	9a 30					.word w_x40
.30d5					xt_cx21:
.30d5	b5 04		lda $04,x		lda pstack+4,x
.30d7	81 02		sta ($02,x)		sta (pstack+2,x)
.30d9	e8		inx			inx
.30da	e8		inx			inx
.30db	e8		inx			inx
.30dc	e8		inx			inx
.30dd	4c 37 16	jmp $1637		jmp next
.30e0					w_cx40:
>30e0	02					.byte $02
>30e1	63 40					.text 'c@'
>30e3						.fill 14
>30f1	c2 30					.word w_cx21
.30f3					xt_cx40:
.30f3	a1 02		lda ($02,x)		lda (pstack+2,x)
.30f5	95 02		sta $02,x		sta pstack+2,x
.30f7	74 03		stz $03,x		stz pstack+3,x
.30f9	4c 37 16	jmp $1637		jmp next
.30fc					w_fill:
>30fc	04					.byte $04
>30fd	66 69 6c 6c				.text 'fill'
>3101						.fill 12
>310d	e0 30					.word w_cx40
.310f					xt_fill:
.310f						loop:
.310f	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.3111	d0 04		bne $3117		bne do_write
.3113	b5 04		lda $04,x		lda pstack+4,x
.3115	f0 19		beq $3130		beq done                ; Yes: we're done...
.3117						do_write:
.3117	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.3119	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.311b	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.311d	d0 02		bne $3121		bne deccount
.311f	f6 06		inc $06,x		inc pstack+6,x
.3121						deccount:
.3121	38		sec			sec                     ; Decrement the count
.3122	b5 03		lda $03,x		lda pstack+3,x
.3124	e9 01		sbc #$01		sbc #1
.3126	95 03		sta $03,x		sta pstack+3,x
.3128	b5 04		lda $04,x		lda pstack+4,x
.312a	e9 00		sbc #$00		sbc #0
.312c	95 04		sta $04,x		sta pstack+4,x
.312e	80 df		bra $310f		bra loop                ; And check again
.3130						done:
.3130	8a		txa			txa                     ; Clean up the parameter stack
.3131	69 06		adc #$06		adc #6
.3133	aa		tax			tax
.3134	4c 37 16	jmp $1637		jmp next
.3137					w_x2bx21:
>3137	02					.byte $02
>3138	2b 21					.text '+!'
>313a						.fill 14
>3148	fc 30					.word w_fill
.314a					xt_x2bx21:
.314a	b5 03		lda $03,x		lda pstack+3,x
.314c	85 33		sta $33			sta tmp+1
.314e	b5 02		lda $02,x		lda pstack+2,x
.3150	85 32		sta $32			sta tmp
.3152	18		clc			clc
.3153	a0 01		ldy #$01		ldy #1
.3155	b2 32		lda ($32)		lda (tmp)
.3157	75 04		adc $04,x		adc pstack+4,x
.3159	92 32		sta ($32)		sta (tmp)
.315b	b1 32		lda ($32),y		lda (tmp),y
.315d	75 05		adc $05,x		adc pstack+5,x
.315f	91 32		sta ($32),y		sta (tmp),y
.3161						done:
.3161	e8		inx			inx                     ; Clean up the stack
.3162	e8		inx			inx
.3163	e8		inx			inx
.3164	e8		inx			inx
.3165	4c 37 16	jmp $1637		jmp next
.3168					w_enclose:
>3168	07					.byte $07
>3169	65 6e 63 6c 6f 73 65			.text 'enclose'
>3170						.fill 9
>3179	37 31					.word w_x2bx21
.317b					xt_enclose:
.317b	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.317d	85 25		sta $25			sta src_ptr+1
.317f	b5 04		lda $04,x		lda pstack+4,x
.3181	85 24		sta $24			sta src_ptr
.3183	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.3185	85 32		sta $32			sta tmp
.3187	8a		txa			txa
.3188	38		sec			sec
.3189	e9 04		sbc #$04		sbc #4
.318b	aa		tax			tax
.318c	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.318e	74 06		stz $06,x		stz pstack+6,x
.3190	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.3192	74 04		stz $04,x		stz pstack+4,x
.3194	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.3196	74 02		stz $02,x		stz pstack+2,x
.3198	a0 00		ldy #$00		ldy #0
.319a						loop1:
.319a	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.319c	d0 03		bne $31a1		bne chk_delim1          ; NUL? No:; check it against the delimiter
.319e						none:
.319e	4c 37 16	jmp $1637		jmp next                ; Yes: we want to return 0s
.31a1						chk_delim1:
.31a1	c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.31a3	f0 13		beq $31b8		beq skip2               ; Yes: skip the character
.31a5	a5 32		lda $32			lda tmp                 ; Check the delimiter
.31a7	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.31a9	d0 0b		bne $31b6		bne found               ; No: ok, we've found the first character;
.31ab	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.31ad	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.31af	d0 05		bne $31b6		bne found               ; No: we found the first character
.31b1	c8		iny			iny                     ; Move to the next character
.31b2	f0 ea		beq $319e		beq none                ; If we've rolled over, we found nothing
.31b4	80 e4		bra $319a		bra loop1               ; Otherwise: check the next character
.31b6						found:
.31b6	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.31b8						skip2:
.31b8	c8		iny			iny                     ; Go to the next character
.31b9	f0 1c		beq $31d7		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.31bb						loop2:
.31bb	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.31bd	f0 18		beq $31d7		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.31bf	c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.31c1	f0 0c		beq $31cf		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.31c3	a5 32		lda $32			lda tmp                 ; Get the delimiter
.31c5	c9 20		cmp #$20		cmp #' '                ; Is it space?
.31c7	d0 ef		bne $31b8		bne skip2               ; No: go to the next character
.31c9	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.31cb	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.31cd	d0 e9		bne $31b8		bne skip2               ; No: go to the next character
.31cf						found_delim:
.31cf	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.31d1	c8		iny			iny
.31d2	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.31d4	4c 37 16	jmp $1637		jmp next                ; And we're done
.31d7						found_nul:
.31d7	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.31d9	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.31db	4c 37 16	jmp $1637		jmp next                ; And we're done
.31de					w_cmove:
>31de	05					.byte $05
>31df	63 6d 6f 76 65				.text 'cmove'
>31e4						.fill 11
>31ef	68 31					.word w_enclose
.31f1					xt_cmove:
.31f1	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.31f3	85 33		sta $33			sta tmp+1
.31f5	b5 02		lda $02,x		lda pstack+2,x
.31f7	85 32		sta $32			sta tmp
.31f9	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.31fb	85 27		sta $27			sta dst_ptr+1
.31fd	b5 04		lda $04,x		lda pstack+4,x
.31ff	85 26		sta $26			sta dst_ptr
.3201	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.3203	85 25		sta $25			sta src_ptr+1
.3205	b5 06		lda $06,x		lda pstack+6,x
.3207	85 24		sta $24			sta src_ptr
.3209	8a		txa			txa                     ; Clean up the stack
.320a	18		clc			clc
.320b	69 06		adc #$06		adc #6
.320d	85 36		sta $36			sta savex               ; And save it for later restoration
.320f	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.3211	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.3213						loop:
.3213	e4 33		cpx $33			cpx tmp+1               ; is tmp == X:Y?
.3215	d0 04		bne $321b		bne copy
.3217	c4 32		cpy $32			cpy tmp
.3219	f0 0e		beq $3229		beq done                ; Yes: we're done
.321b						copy:
.321b	b1 24		lda ($24),y		lda (src_ptr),y         ; Copy the byte
.321d	91 26		sta ($26),y		sta (dst_ptr),y
.321f	c8		iny			iny                     ; Move to the next byte
.3220	d0 f1		bne $3213		bne loop                ; Repeat for 256 bytes
.3222	e8		inx			inx                     ; Move to the next block of 256
.3223	e6 25		inc $25			inc src_ptr+1
.3225	e6 27		inc $27			inc dst_ptr+1
.3227	80 ea		bra $3213		bra loop                ; And continue the loop
.3229						done:
.3229	a6 36		ldx $36			ldx savex
.322b	4c 37 16	jmp $1637		jmp next
.322e					w_move:
>322e	04					.byte $04
>322f	6d 6f 76 65				.text 'move'
>3233						.fill 12
>323f	de 31					.word w_cmove
.3241					xt_move:
.3241	38		sec			sec                     ; Compare addr1 and addr2
.3242	b5 06		lda $06,x		lda pstack+6,x
.3244	f5 04		sbc $04,x		sbc pstack+4,x
.3246	85 32		sta $32			sta tmp
.3248	b5 07		lda $07,x		lda pstack+7,x
.324a	f5 05		sbc $05,x		sbc pstack+5,x
.324c	85 33		sta $33			sta tmp+1
.324e	30 24		bmi $3274		bmi a1less
.3250	f0 72		beq $32c4		beq chklo
.3252						a1greater:
.3252	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.3254	d0 50		bne $32a6		bne docopy1
.3256	b5 03		lda $03,x		lda pstack+3,x
.3258	f0 72		beq $32cc		beq done                ; Yes: we're done;
.325a	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.325c	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.325e	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.3260	d0 02		bne $3264		bne inc2
.3262	f6 07		inc $07,x		inc pstack+7,x
.3264						inc2:
.3264	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.3266	d0 02		bne $326a		bne dec_count
.3268	f6 03		inc $03,x		inc pstack+3,x
.326a						dec_count:
.326a	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.326c	d0 02		bne $3270		bne l1
.326e	d6 03		dec $03,x		dec pstack+3,x
.3270						l1:
.3270	d6 02		dec $02,x		dec pstack+2,x
.3272	80 de		bra $3252		bra a1greater
.3274						a1less:
.3274	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.3276	d0 02		bne $327a		bne l2
.3278	d6 05		dec $05,x		dec pstack+5,x
.327a						l2:
.327a	d6 04		dec $04,x		dec pstack+4,x
.327c	18		clc			clc                     ; addr2 := addr2 + u
.327d	b5 04		lda $04,x		lda pstack+4,x
.327f	75 02		adc $02,x		adc pstack+2,x
.3281	95 04		sta $04,x		sta pstack+4,x
.3283	b5 05		lda $05,x		lda pstack+5,x
.3285	75 03		adc $03,x		adc pstack+3,x
.3287	95 05		sta $05,x		sta pstack+5,x
.3289	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.328b	d0 02		bne $328f		bne l3
.328d	d6 07		dec $07,x		dec pstack+7,x
.328f						l3:
.328f	d6 06		dec $06,x		dec pstack+6,x
.3291	18		clc			clc                     ; addr1 := addr1 + u
.3292	b5 06		lda $06,x		lda pstack+6,x
.3294	75 02		adc $02,x		adc pstack+2,x
.3296	95 06		sta $06,x		sta pstack+6,x
.3298	b5 07		lda $07,x		lda pstack+7,x
.329a	75 03		adc $03,x		adc pstack+3,x
.329c	95 07		sta $07,x		sta pstack+7,x
.329e						loop2:
.329e	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.32a0	d0 04		bne $32a6		bne docopy1
.32a2	b5 03		lda $03,x		lda pstack+3,x
.32a4	f0 26		beq $32cc		beq done                ; Yes: we're done;
.32a6						docopy1:
.32a6	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.32a8	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.32aa	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.32ac	d0 02		bne $32b0		bne l4
.32ae	d6 07		dec $07,x		dec pstack+7,x
.32b0						l4:
.32b0	d6 06		dec $06,x		dec pstack+6,x
.32b2	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.32b4	d0 02		bne $32b8		bne l5
.32b6	d6 05		dec $05,x		dec pstack+5,x
.32b8						l5:
.32b8	d6 04		dec $04,x		dec pstack+4,x
.32ba	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.32bc	d0 02		bne $32c0		bne l6
.32be	d6 03		dec $03,x		dec pstack+3,x
.32c0						l6:
.32c0	d6 02		dec $02,x		dec pstack+2,x
.32c2	80 da		bra $329e		bra loop2
.32c4						chklo:
.32c4	a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.32c6	30 ac		bmi $3274		bmi a1less
.32c8	f0 02		beq $32cc		beq done                ; If equal, we don't need to move the data
.32ca	80 86		bra $3252		bra a1greater
.32cc						done:
.32cc	8a		txa			txa
.32cd	18		clc			clc
.32ce	69 06		adc #$06		adc #6
.32d0	aa		tax			tax
.32d1	60		rts			rts
.32d2					w_x2b:
>32d2	01					.byte $01
>32d3	2b					.text '+'
>32d4						.fill 15
>32e3	2e 32					.word w_move
.32e5					xt_x2b:
.32e5	18		clc			clc
.32e6	b5 04		lda $04,x		lda pstack+4,x
.32e8	75 02		adc $02,x		adc pstack+2,x
.32ea	95 04		sta $04,x		sta pstack+4,x
.32ec	b5 05		lda $05,x		lda pstack+5,x
.32ee	75 03		adc $03,x		adc pstack+3,x
.32f0	95 05		sta $05,x		sta pstack+5,x
.32f2	e8		inx			inx
.32f3	e8		inx			inx
.32f4	4c 37 16	jmp $1637		jmp next
.32f7					w_dx2b:
>32f7	02					.byte $02
>32f8	64 2b					.text 'd+'
>32fa						.fill 14
>3308	d2 32					.word w_x2b
.330a					xt_dx2b:
.330a	18		clc			clc
.330b	b5 06		lda $06,x		lda pstack+6,x
.330d	75 02		adc $02,x		adc pstack+2,x
.330f	95 06		sta $06,x		sta pstack+6,x
.3311	b5 07		lda $07,x		lda pstack+7,x
.3313	75 03		adc $03,x		adc pstack+3,x
.3315	95 07		sta $07,x		sta pstack+7,x
.3317	b5 08		lda $08,x		lda pstack+8,x
.3319	75 04		adc $04,x		adc pstack+4,x
.331b	95 08		sta $08,x		sta pstack+8,x
.331d	b5 09		lda $09,x		lda pstack+9,x
.331f	75 05		adc $05,x		adc pstack+5,x
.3321	95 09		sta $09,x		sta pstack+9,x
.3323	e8		inx			inx
.3324	e8		inx			inx
.3325	e8		inx			inx
.3326	e8		inx			inx
.3327	4c 37 16	jmp $1637		jmp next
.332a					w_dx2d:
>332a	02					.byte $02
>332b	64 2d					.text 'd-'
>332d						.fill 14
>333b	f7 32					.word w_dx2b
.333d					xt_dx2d:
.333d	38		sec			sec
.333e	b5 06		lda $06,x		lda pstack+6,x
.3340	f5 02		sbc $02,x		sbc pstack+2,x
.3342	95 06		sta $06,x		sta pstack+6,x
.3344	b5 07		lda $07,x		lda pstack+7,x
.3346	f5 03		sbc $03,x		sbc pstack+3,x
.3348	95 07		sta $07,x		sta pstack+7,x
.334a	b5 08		lda $08,x		lda pstack+8,x
.334c	f5 04		sbc $04,x		sbc pstack+4,x
.334e	95 08		sta $08,x		sta pstack+8,x
.3350	b5 09		lda $09,x		lda pstack+9,x
.3352	f5 05		sbc $05,x		sbc pstack+5,x
.3354	95 09		sta $09,x		sta pstack+9,x
.3356	e8		inx			inx
.3357	e8		inx			inx
.3358	e8		inx			inx
.3359	e8		inx			inx
.335a	4c 37 16	jmp $1637		jmp next
.335d					w_x2d:
>335d	01					.byte $01
>335e	2d					.text '-'
>335f						.fill 15
>336e	2a 33					.word w_dx2d
.3370					xt_x2d:
.3370	38		sec			sec
.3371	b5 04		lda $04,x		lda pstack+4,x
.3373	f5 02		sbc $02,x		sbc pstack+2,x
.3375	95 04		sta $04,x		sta pstack+4,x
.3377	b5 05		lda $05,x		lda pstack+5,x
.3379	f5 03		sbc $03,x		sbc pstack+3,x
.337b	95 05		sta $05,x		sta pstack+5,x
.337d	e8		inx			inx
.337e	e8		inx			inx
.337f	4c 37 16	jmp $1637		jmp next
.3382					w_ux2a:
>3382	02					.byte $02
>3383	75 2a					.text 'u*'
>3385						.fill 14
>3393	5d 33					.word w_x2d
.3395					xt_ux2a:
.3395	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.3397	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.3399	8d 01 de	sta $de01		sta $de01
.339c	b5 04		lda $04,x		lda pstack+4,x
.339e	8d 00 de	sta $de00		sta $de00
.33a1	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.33a3	8d 03 de	sta $de03		sta $de03
.33a6	b5 02		lda $02,x		lda pstack+2,x
.33a8	8d 02 de	sta $de02		sta $de02
.33ab	e8		inx			inx
.33ac	e8		inx			inx
.33ad	ad 05 de	lda $de05		lda $de05       ; Read the coprocessor unsigned multiplication result
.33b0	95 03		sta $03,x		sta pstack+3,x
.33b2	ad 04 de	lda $de04		lda $de04
.33b5	95 02		sta $02,x		sta pstack+2,x
.33b7	4c 37 16	jmp $1637		jmp next
.33ba					w_x2a:
>33ba	01					.byte $01
>33bb	2a					.text '*'
>33bc						.fill 15
>33cb	82 33					.word w_ux2a
.33cd					xt_x2a:
.33cd	64 01		stz $01			stz MMU_IO_CTRL ; Go to I/O page #0
.33cf	b5 05		lda $05,x		lda pstack+5,x  ; Set coprocessor unsigned A argument
.33d1	8d 05 de	sta $de05		sta $de05
.33d4	b5 04		lda $04,x		lda pstack+4,x
.33d6	8d 04 de	sta $de04		sta $de04
.33d9	b5 03		lda $03,x		lda pstack+3,x  ; Set coprocessor unsigned B argument
.33db	8d 07 de	sta $de07		sta $de07
.33de	b5 02		lda $02,x		lda pstack+2,x
.33e0	8d 06 de	sta $de06		sta $de06
.33e3	e8		inx			inx
.33e4	e8		inx			inx
.33e5	ad 0d de	lda $de0d		lda $de0d       ; Read the coprocessor unsigned multiplication result
.33e8	95 03		sta $03,x		sta pstack+3,x
.33ea	ad 0c de	lda $de0c		lda $de0c
.33ed	95 02		sta $02,x		sta pstack+2,x
.33ef	4c 37 16	jmp $1637		jmp next
.33f2					w_ux2ax2dsoft:
>33f2	07					.byte $07
>33f3	75 2a 2d 73 6f 66 74			.text 'u*-soft'
>33fa						.fill 9
>3403	ba 33					.word w_x2a
.3405					xt_ux2ax2dsoft:
.3405	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.3407	85 34		sta $34			sta tmp+2
.3409	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.340b						l1:
.340b	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.340d	76 02		ror $02,x		ror pstack+2,x
.340f	90 0b		bcc $341c		bcc l2          ; 0 or 1?
.3411	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.3412	18		clc			clc
.3413	b5 04		lda $04,x		lda pstack+4,x
.3415	65 34		adc $34			adc tmp+2
.3417	85 34		sta $34			sta tmp+2
.3419	98		tya			tya
.341a	75 05		adc $05,x		adc pstack+5,x
.341c						l2:
.341c	6a		ror a			ror A
.341d	66 34		ror $34			ror tmp+2
.341f	66 33		ror $33			ror tmp+1
.3421	66 32		ror $32			ror tmp
.3423	3a		dec a			dec a
.3424	d0 e5		bne $340b		bne l1
.3426	85 35		sta $35			sta tmp+3
.3428	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.342a	95 04		sta $04,x		sta pstack+4,x
.342c	a5 33		lda $33			lda tmp+1
.342e	95 05		sta $05,x		sta pstack+5,x
.3430	e8		inx			inx             ; Clean up parameter stack
.3431	e8		inx			inx
.3432	4c 37 16	jmp $1637		jmp next
.3435					w_x2ax2dsoft:
>3435	06					.byte $06
>3436	2a 2d 73 6f 66 74			.text '*-soft'
>343c						.fill 10
>3446	f2 33					.word w_ux2ax2dsoft
.3448					xt_x2ax2dsoft:
.3448	64 38		stz $38			stz sign
.344a	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.344c	10 11		bpl $345f		bpl chk_n2
.344e	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.3450	85 38		sta $38			sta sign
.3452	38		sec			sec             ; Negate n1
.3453	a9 00		lda #$00		lda #0
.3455	f5 04		sbc $04,x		sbc pstack+4,x
.3457	95 04		sta $04,x		sta pstack+4,x
.3459	a9 00		lda #$00		lda #0
.345b	f5 05		sbc $05,x		sbc pstack+5,x
.345d	95 05		sta $05,x		sta pstack+5,x
.345f						chk_n2:
.345f	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.3461	10 13		bpl $3476		bpl init_tmp
.3463	a5 38		lda $38			lda sign        ; Flip the sign bit, if so
.3465	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.3467	85 38		sta $38			sta sign
.3469	38		sec			sec             ; Negate n2
.346a	a9 00		lda #$00		lda #0
.346c	f5 02		sbc $02,x		sbc pstack+2,x
.346e	95 02		sta $02,x		sta pstack+2,x
.3470	a9 00		lda #$00		lda #0
.3472	f5 03		sbc $03,x		sbc pstack+3,x
.3474	95 03		sta $03,x		sta pstack+3,x
.3476						init_tmp:
.3476	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.3478	85 34		sta $34			sta tmp+2
.347a	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.347c						l1:
.347c	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.347e	76 02		ror $02,x		ror pstack+2,x
.3480	90 0b		bcc $348d		bcc l2          ; 0 or 1?
.3482	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.3483	18		clc			clc
.3484	b5 04		lda $04,x		lda pstack+4,x
.3486	65 34		adc $34			adc tmp+2
.3488	85 34		sta $34			sta tmp+2
.348a	98		tya			tya
.348b	75 05		adc $05,x		adc pstack+5,x
.348d						l2:
.348d	6a		ror a			ror A
.348e	66 34		ror $34			ror tmp+2
.3490	66 33		ror $33			ror tmp+1
.3492	66 32		ror $32			ror tmp
.3494	3a		dec a			dec a
.3495	d0 e5		bne $347c		bne l1
.3497	85 35		sta $35			sta tmp+3
.3499	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.349b	95 04		sta $04,x		sta pstack+4,x
.349d	a5 33		lda $33			lda tmp+1
.349f	95 05		sta $05,x		sta pstack+5,x
.34a1	e8		inx			inx             ; Clean up parameter stack
.34a2	e8		inx			inx
.34a3	a5 38		lda $38			lda sign        ; Check the sign
.34a5	10 0d		bpl $34b4		bpl done
.34a7	38		sec			sec             ; If negative, negate result
.34a8	a9 00		lda #$00		lda #0
.34aa	f5 02		sbc $02,x		sbc pstack+2,x
.34ac	95 02		sta $02,x		sta pstack+2,x
.34ae	a9 00		lda #$00		lda #0
.34b0	f5 03		sbc $03,x		sbc pstack+3,x
.34b2	95 03		sta $03,x		sta pstack+3,x
.34b4						done:
.34b4	4c 37 16	jmp $1637		jmp next
.34b7					w_umx2fmod:
>34b7	06					.byte $06
>34b8	75 6d 2f 6d 6f 64			.text 'um/mod'
>34be						.fill 10
>34c8	35 34					.word w_x2ax2dsoft
.34ca					xt_umx2fmod:
.34ca	38		sec			sec
.34cb	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract hi cell of dividend by
.34cd	f5 02		sbc $02,x		sbc     pstack+2,x          ; divisor to see if there's an overflow condition.
.34cf	b5 07		lda $07,x		lda     pstack+7,x
.34d1	f5 03		sbc $03,x		sbc     pstack+3,x
.34d3	b0 2e		bcs $3503		bcs     overflow            ; Branch if /0 or overflow.
.34d5	a9 11		lda #$11		lda     #$11                ; Loop 17x.
.34d7	85 32		sta $32			sta     tmp                 ; Use tmp for loop counter.
.34d9						loop:
.34d9	36 04		rol $04,x		rol     pstack+4,x          ; Rotate dividend lo cell left one bit.
.34db	36 05		rol $05,x		rol     pstack+5,x
.34dd	c6 32		dec $32			dec     tmp                 ; Decrement loop counter.
.34df	f0 2c		beq $350d		beq     done                ; If we're done, then branch to end.
.34e1	36 06		rol $06,x		rol     pstack+6,x          ; Otherwise rotate dividend hi cell left one bit.
.34e3	36 07		rol $07,x		rol     pstack+7,x
.34e5	64 33		stz $33			stz     tmp+1
.34e7	26 33		rol $33			rol     tmp+1               ; Rotate the bit carried out of above into tmp+1.
.34e9	38		sec			sec
.34ea	b5 06		lda $06,x		lda     pstack+6,x          ; Subtract dividend hi cell minus divisor.
.34ec	f5 02		sbc $02,x		sbc     pstack+2,x
.34ee	85 34		sta $34			sta     tmp+2               ; Put result temporarily in tmp+2 (lo byte)
.34f0	b5 07		lda $07,x		lda     pstack+7,x
.34f2	f5 03		sbc $03,x		sbc     pstack+3,x
.34f4	a8		tay			tay                         ; and Y (hi byte).
.34f5	a5 33		lda $33			lda     tmp+1               ; Remember now to bring in the bit carried out above.
.34f7	e9 00		sbc #$00		sbc     #0
.34f9	90 de		bcc $34d9		bcc     loop
.34fb	a5 34		lda $34			lda     tmp+2               ; If that didn't cause a borrow,
.34fd	95 06		sta $06,x		sta     pstack+6,x          ; make the result from above to
.34ff	94 07		sty $07,x		sty     pstack+7,x          ; be the new dividend hi cell
.3501	80 d6		bra $34d9		bra     loop                ; and then brach up.  (NMOS 6502 can use BCS here.)
.3503						overflow:
.3503	a9 ff		lda #$ff		lda     #$ff                ; If overflow or /0 condition found,
.3505	95 06		sta $06,x		sta     pstack+6,x          ; just put FFFF in both the remainder
.3507	95 07		sta $07,x		sta     pstack+7,x
.3509	95 04		sta $04,x		sta     pstack+4,x          ; and the quotient.
.350b	95 05		sta $05,x		sta     pstack+5,x
.350d						done:
.350d	e8		inx			inx
.350e	e8		inx			inx
.350f	4c 37 16	jmp $1637		jmp next
.3512					w_sx3ed:
>3512	03					.byte $03
>3513	73 3e 64				.text 's>d'
>3516						.fill 13
>3523	b7 34					.word w_umx2fmod
.3525					xt_sx3ed:
.3525	ca		dex			dex
.3526	ca		dex			dex
.3527	b5 04		lda $04,x		lda pstack+4,x
.3529	95 02		sta $02,x		sta pstack+2,x
.352b	b5 05		lda $05,x		lda pstack+5,x
.352d	95 03		sta $03,x		sta pstack+3,x
.352f	30 07		bmi $3538		bmi is_neg
.3531	74 04		stz $04,x		stz pstack+4,x
.3533	74 05		stz $05,x		stz pstack+5,x
.3535	4c 37 16	jmp $1637		jmp next
.3538						is_neg:
.3538	a9 ff		lda #$ff		lda #$ff
.353a	95 04		sta $04,x		sta pstack+4,x
.353c	95 05		sta $05,x		sta pstack+5,x
.353e	4c 37 16	jmp $1637		jmp next
.3541					w_1x2b:
>3541	02					.byte $02
>3542	31 2b					.text '1+'
>3544						.fill 14
>3552	12 35					.word w_sx3ed
.3554					xt_1x2b:
.3554	f6 02		inc $02,x		inc pstack+2,x
.3556	d0 02		bne $355a		bne skip
.3558	f6 03		inc $03,x		inc pstack+3,x
.355a						skip:
.355a	4c 37 16	jmp $1637		jmp next
.355d					w_2x2b:
>355d	02					.byte $02
>355e	32 2b					.text '2+'
>3560						.fill 14
>356e	41 35					.word w_1x2b
.3570					xt_2x2b:
.3570	18		clc			clc
.3571	b5 02		lda $02,x		lda pstack+2,x
.3573	69 02		adc #$02		adc #2
.3575	95 02		sta $02,x		sta pstack+2,x
.3577	b5 03		lda $03,x		lda pstack+3,x
.3579	69 00		adc #$00		adc #0
.357b	95 03		sta $03,x		sta pstack+3,x
.357d	4c 37 16	jmp $1637		jmp next
.3580					w_1x2d:
>3580	02					.byte $02
>3581	31 2d					.text '1-'
>3583						.fill 14
>3591	5d 35					.word w_2x2b
.3593					xt_1x2d:
.3593	b5 02		lda $02,x		lda pstack+2,x
.3595	d0 02		bne $3599		bne l1
.3597	d6 03		dec $03,x		dec pstack+3,x
.3599						l1:
.3599	d6 02		dec $02,x		dec pstack+2,x
.359b	4c 37 16	jmp $1637		jmp next
.359e					w_2x2d:
>359e	02					.byte $02
>359f	32 2d					.text '2-'
>35a1						.fill 14
>35af	80 35					.word w_1x2d
.35b1					xt_2x2d:
.35b1	38		sec			sec
.35b2	b5 02		lda $02,x		lda pstack+2,x
.35b4	e9 02		sbc #$02		sbc #2
.35b6	95 02		sta $02,x		sta pstack+2,x
.35b8	b5 03		lda $03,x		lda pstack+3,x
.35ba	e9 00		sbc #$00		sbc #0
.35bc	95 03		sta $03,x		sta pstack+3,x
.35be	4c 37 16	jmp $1637		jmp next
.35c1					w_and:
>35c1	03					.byte $03
>35c2	61 6e 64				.text 'and'
>35c5						.fill 13
>35d2	9e 35					.word w_2x2d
.35d4					xt_and:
.35d4	b5 02		lda $02,x		lda pstack+2,x
.35d6	35 04		and $04,x		and pstack+4,x
.35d8	95 04		sta $04,x		sta pstack+4,x
.35da	b5 03		lda $03,x		lda pstack+3,x
.35dc	35 05		and $05,x		and pstack+5,x
.35de	95 05		sta $05,x		sta pstack+5,x
.35e0	e8		inx			inx
.35e1	e8		inx			inx
.35e2	4c 37 16	jmp $1637		jmp next
.35e5					w_or:
>35e5	02					.byte $02
>35e6	6f 72					.text 'or'
>35e8						.fill 14
>35f6	c1 35					.word w_and
.35f8					xt_or:
.35f8	b5 02		lda $02,x		lda pstack+2,x
.35fa	15 04		ora $04,x		ora pstack+4,x
.35fc	95 04		sta $04,x		sta pstack+4,x
.35fe	b5 03		lda $03,x		lda pstack+3,x
.3600	15 05		ora $05,x		ora pstack+5,x
.3602	95 05		sta $05,x		sta pstack+5,x
.3604	e8		inx			inx
.3605	e8		inx			inx
.3606	4c 37 16	jmp $1637		jmp next
.3609					w_xor:
>3609	03					.byte $03
>360a	78 6f 72				.text 'xor'
>360d						.fill 13
>361a	e5 35					.word w_or
.361c					xt_xor:
.361c	b5 02		lda $02,x		lda pstack+2,x
.361e	55 04		eor $04,x		eor pstack+4,x
.3620	95 04		sta $04,x		sta pstack+4,x
.3622	b5 03		lda $03,x		lda pstack+3,x
.3624	55 05		eor $05,x		eor pstack+5,x
.3626	95 05		sta $05,x		sta pstack+5,x
.3628	e8		inx			inx
.3629	e8		inx			inx
.362a	4c 37 16	jmp $1637		jmp next
.362d					w_not:
>362d	03					.byte $03
>362e	6e 6f 74				.text 'not'
>3631						.fill 13
>363e	09 36					.word w_xor
.3640					xt_not:
.3640	b5 02		lda $02,x		lda pstack+2,x
.3642	49 ff		eor #$ff		eor #$ff
.3644	95 02		sta $02,x		sta pstack+2,x
.3646	b5 03		lda $03,x		lda pstack+3,x
.3648	49 ff		eor #$ff		eor #$ff
.364a	95 03		sta $03,x		sta pstack+3,x
.364c	4c 37 16	jmp $1637		jmp next
.364f					w_0x3c:
>364f	02					.byte $02
>3650	30 3c					.text '0<'
>3652						.fill 14
>3660	2d 36					.word w_not
.3662					xt_0x3c:
.3662	b5 03		lda $03,x		lda pstack+3,x
.3664	30 07		bmi $366d		bmi istrue
.3666	74 02		stz $02,x		stz pstack+2,x
.3668	74 03		stz $03,x		stz pstack+3,x
.366a	4c 37 16	jmp $1637		jmp next
.366d						istrue:
.366d	a9 ff		lda #$ff		lda #$ff
.366f	95 02		sta $02,x		sta pstack+2,x
.3671	95 03		sta $03,x		sta pstack+3,x
.3673	4c 37 16	jmp $1637		jmp next
.3676					w_0x3d:
>3676	02					.byte $02
>3677	30 3d					.text '0='
>3679						.fill 14
>3687	4f 36					.word w_0x3c
.3689					xt_0x3d:
.3689	b5 02		lda $02,x		lda pstack+2,x
.368b	d0 0d		bne $369a		bne isfalse
.368d	b5 03		lda $03,x		lda pstack+3,x
.368f	d0 09		bne $369a		bne isfalse
.3691	a9 ff		lda #$ff		lda #$ff
.3693	95 02		sta $02,x		sta pstack+2,x
.3695	95 03		sta $03,x		sta pstack+3,x
.3697	4c 37 16	jmp $1637		jmp next
.369a						isfalse:
.369a	74 02		stz $02,x		stz pstack+2,x
.369c	74 03		stz $03,x		stz pstack+3,x
.369e	4c 37 16	jmp $1637		jmp next
.36a1					w_0x3e:
>36a1	02					.byte $02
>36a2	30 3e					.text '0>'
>36a4						.fill 14
>36b2	76 36					.word w_0x3d
.36b4					xt_0x3e:
.36b4	b5 03		lda $03,x		lda pstack+3,x
.36b6	30 0f		bmi $36c7		bmi isfalse
.36b8	d0 04		bne $36be		bne istrue
.36ba	b5 02		lda $02,x		lda pstack+2,x
.36bc	f0 09		beq $36c7		beq isfalse
.36be						istrue:
.36be	a9 ff		lda #$ff		lda #$ff
.36c0	95 02		sta $02,x		sta pstack+2,x
.36c2	95 03		sta $03,x		sta pstack+3,x
.36c4	4c 37 16	jmp $1637		jmp next
.36c7						isfalse:
.36c7	74 02		stz $02,x		stz pstack+2,x
.36c9	74 03		stz $03,x		stz pstack+3,x
.36cb	4c 37 16	jmp $1637		jmp next
.36ce					w_x28variablex29:
>36ce	0a					.byte $0A
>36cf	28 76 61 72 69 61 62 6c			.text '(variable)'
>36d7	65 29
>36d9						.fill 6
>36df	a1 36					.word w_0x3e
.36e1					xt_x28variablex29:
.36e1	18		clc			clc                     ; push(wp + 3)
.36e2	a5 2a		lda $2a			lda wp
.36e4	69 03		adc #$03		adc #3
.36e6	95 00		sta $00,x		sta pstack,x
.36e8	a5 2b		lda $2b			lda wp+1
.36ea	69 00		adc #$00		adc #0
.36ec	95 01		sta $01,x		sta pstack+1,x
.36ee	ca		dex			dex
.36ef	ca		dex			dex
.36f0	4c 37 16	jmp $1637		jmp next
.36f3					w_x28constantx29:
>36f3	0a					.byte $0A
>36f4	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>36fc	74 29
>36fe						.fill 6
>3704	ce 36					.word w_x28variablex29
.3706					xt_x28constantx29:
.3706	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.3708	b1 2a		lda ($2a),y		lda (wp),y
.370a	95 00		sta $00,x		sta pstack,x
.370c	c8		iny			iny
.370d	b1 2a		lda ($2a),y		lda (wp),y
.370f	95 01		sta $01,x		sta pstack+1,x
.3711	ca		dex			dex
.3712	ca		dex			dex
.3713	4c 37 16	jmp $1637		jmp next
.3716					w_cells:
>3716	05					.byte $05
>3717	63 65 6c 6c 73				.text 'cells'
>371c						.fill 11
>3727	f3 36					.word w_x28constantx29
.3729					xt_cells:
.3729	4c 06 37	jmp $3706		jmp xt_x28constantx29
>372c	02 00					.word 2
.372e					w_x28userx29:
>372e	06					.byte $06
>372f	28 75 73 65 72 29			.text '(user)'
>3735						.fill 10
>373f	16 37					.word w_cells
.3741					xt_x28userx29:
.3741	18		clc			clc                     ; push(up + memory(wp + 3))
.3742	a0 03		ldy #$03		ldy #3
.3744	a5 2c		lda $2c			lda up
.3746	71 2a		adc ($2a),y		adc (wp),y
.3748	95 00		sta $00,x		sta pstack,x
.374a	c8		iny			iny
.374b	a5 2d		lda $2d			lda up+1
.374d	71 2a		adc ($2a),y		adc (wp),y
.374f	95 01		sta $01,x		sta pstack+1,x
.3751	ca		dex			dex
.3752	ca		dex			dex
.3753	4c 37 16	jmp $1637		jmp next
.3756					w_x28branchx29:
>3756	08					.byte $08
>3757	28 62 72 61 6e 63 68 29			.text '(branch)'
>375f						.fill 8
>3767	2e 37					.word w_x28userx29
.3769					xt_x28branchx29:
.3769	a0 01		ldy #$01		ldy #1              ; ip := branch address
.376b	b2 28		lda ($28)		lda (ip)
.376d	85 32		sta $32			sta tmp
.376f	b1 28		lda ($28),y		lda (ip),y
.3771	85 29		sta $29			sta ip+1
.3773	a5 32		lda $32			lda tmp
.3775	85 28		sta $28			sta ip
.3777	4c 37 16	jmp $1637		jmp next
.377a					w_x28branch0x29:
>377a	09					.byte $09
>377b	28 62 72 61 6e 63 68 30			.text '(branch0)'
>3783	29
>3784						.fill 7
>378b	56 37					.word w_x28branchx29
.378d					xt_x28branch0x29:
.378d	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.378f	d0 04		bne $3795		bne nobranch        ; No: skip over the branch address
.3791	b5 03		lda $03,x		lda pstack+3,x
.3793	f0 0f		beq $37a4		beq dobranch        ; Yes: take the branch
.3795						nobranch:
.3795	18		clc			clc                 ; No: skip over the branch address
.3796	a5 28		lda $28			lda ip
.3798	69 02		adc #$02		adc #2
.379a	85 28		sta $28			sta ip
.379c	a5 29		lda $29			lda ip+1
.379e	69 00		adc #$00		adc #0
.37a0	85 29		sta $29			sta ip+1
.37a2	80 0e		bra $37b2		bra done
.37a4						dobranch:
.37a4	a0 01		ldy #$01		ldy #1              ; ip := branch address
.37a6	b2 28		lda ($28)		lda (ip)
.37a8	85 32		sta $32			sta tmp
.37aa	b1 28		lda ($28),y		lda (ip),y
.37ac	85 29		sta $29			sta ip+1
.37ae	a5 32		lda $32			lda tmp
.37b0	85 28		sta $28			sta ip
.37b2						done:
.37b2	e8		inx			inx                 ; clean up the parameter stack
.37b3	e8		inx			inx
.37b4	4c 37 16	jmp $1637		jmp next
.37b7					w_x28dox29:
>37b7	04					.byte $04
>37b8	28 64 6f 29				.text '(do)'
>37bc						.fill 12
>37c8	7a 37					.word w_x28branch0x29
.37ca					xt_x28dox29:
.37ca	b5 03		lda $03,x		lda pstack+3,x
.37cc	48		pha			pha
.37cd	b5 02		lda $02,x		lda pstack+2,x
.37cf	48		pha			pha
.37d0	b5 05		lda $05,x		lda pstack+5,x
.37d2	48		pha			pha
.37d3	b5 04		lda $04,x		lda pstack+4,x
.37d5	48		pha			pha
.37d6	18		clc			clc
.37d7	8a		txa			txa
.37d8	69 04		adc #$04		adc #4
.37da	aa		tax			tax
.37db	4c 37 16	jmp $1637		jmp next
.37de					w_x3ei:
>37de	02					.byte $02
>37df	3e 69					.text '>i'
>37e1						.fill 14
>37ef	b7 37					.word w_x28dox29
.37f1					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.37f1	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.37f3	85 33		sta $33			sta tmp+1
.37f5	b5 02		lda $02,x		lda pstack+2,x
.37f7	85 32		sta $32			sta tmp
.37f9	e8		inx			inx
.37fa	e8		inx			inx
.37fb	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.37fd	ba		tsx			tsx
.37fe	a5 33		lda $33			lda tmp+1           ; current := tmp = n
.3800	9d 04 01	sta $0104,x		sta current+1
.3803	a5 32		lda $32			lda tmp
.3805	9d 03 01	sta $0103,x		sta current
.3808	a6 36		ldx $36			ldx savex
.380a	4c 37 16	jmp $1637		jmp next
.380d					w_leave:
>380d	05					.byte $05
>380e	6c 65 61 76 65				.text 'leave'
>3813						.fill 11
>381e	de 37					.word w_x3ei
.3820					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.3820	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3822	ba		tsx			tsx
.3823	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.3826	9d 02 01	sta $0102,x		sta limit+1
.3829	bd 03 01	lda $0103,x		lda current
.382c	9d 01 01	sta $0101,x		sta limit
.382f	a6 36		ldx $36			ldx savex
.3831	4c 37 16	jmp $1637		jmp next
.3834					w_x28loopx29:
>3834	06					.byte $06
>3835	28 6c 6f 6f 70 29			.text '(loop)'
>383b						.fill 10
>3845	0d 38					.word w_leave
.3847					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.3847	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.3849	ba		tsx			tsx
.384a	fe 03 01	inc $0103,x		inc current         ; Increment current
.384d	d0 03		bne $3852		bne chk_current
.384f	fe 04 01	inc $0104,x		inc current+1
.3852						chk_current:
.3852	38		sec			sec
.3853	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.3856	fd 02 01	sbc $0102,x		sbc limit+1
.3859	50 02		bvc $385d		bvc label1          ; the equality comparison is in the Z flag here
.385b	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.385d						label1:
.385d	30 23		bmi $3882		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.385f	50 02		bvc $3863		bvc label2          ; the Z flag was affected only if V is 1
.3861	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc NUM2H
.3863						label2:
.3863	d0 08		bne $386d		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.3865	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.3868	fd 01 01	sbc $0101,x		sbc limit
.386b	90 15		bcc $3882		bcc dobranch        ; if current < limit then current < limit
.386d						nobranch:
.386d	8a		txa			txa                 ; Yes: Remove the context from the return stack
.386e	18		clc			clc
.386f	69 04		adc #$04		adc #4
.3871	aa		tax			tax
.3872	9a		txs			txs
.3873	18		clc			clc                 ; And skip over the branch address
.3874	a5 28		lda $28			lda ip
.3876	69 02		adc #$02		adc #2
.3878	85 28		sta $28			sta ip
.387a	a5 29		lda $29			lda ip+1
.387c	69 00		adc #$00		adc #0
.387e	85 29		sta $29			sta ip+1
.3880	80 0e		bra $3890		bra done
.3882						dobranch:
.3882	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.3884	b2 28		lda ($28)		lda (ip)
.3886	85 32		sta $32			sta tmp
.3888	b1 28		lda ($28),y		lda (ip),y
.388a	85 29		sta $29			sta ip+1
.388c	a5 32		lda $32			lda tmp
.388e	85 28		sta $28			sta ip
.3890						done:
.3890	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.3892	4c 37 16	jmp $1637		jmp next
.3895					w_x28x2bloopx29:
>3895	07					.byte $07
>3896	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>389d						.fill 9
>38a6	34 38					.word w_x28loopx29
.38a8					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.38a8	b5 03		lda $03,x		lda pstack+3,x      ; Pop n from the stack
.38aa	85 33		sta $33			sta tmp+1
.38ac	b5 02		lda $02,x		lda pstack+2,x
.38ae	85 32		sta $32			sta tmp
.38b0	e8		inx			inx
.38b1	e8		inx			inx
.38b2	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.38b4	ba		tsx			tsx
.38b5	18		clc			clc                 ; Increment current by n
.38b6	bd 03 01	lda $0103,x		lda current
.38b9	65 32		adc $32			adc tmp
.38bb	9d 03 01	sta $0103,x		sta current
.38be	bd 04 01	lda $0104,x		lda current+1
.38c1	65 33		adc $33			adc tmp+1
.38c3	9d 04 01	sta $0104,x		sta current+1
.38c6						chk_current:
.38c6	38		sec			sec
.38c7	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.38ca	fd 02 01	sbc $0102,x		sbc limit+1
.38cd	50 02		bvc $38d1		bvc label1          ; the equality comparison is in the Z flag here
.38cf	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.38d1						label1:
.38d1	30 23		bmi $38f6		bmi dobranch        ; if current+1 < limit+1 then current < limit
.38d3	50 02		bvc $38d7		bvc label2          ; the Z flag was affected only if V is 1
.38d5	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after sbc current+1
.38d7						label2:
.38d7	d0 08		bne $38e1		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.38d9	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.38dc	fd 01 01	sbc $0101,x		sbc limit
.38df	90 15		bcc $38f6		bcc dobranch        ; if current < limit then current < limit
.38e1						nobranch:
.38e1	8a		txa			txa                 ; Yes: Remove the context from the return stack
.38e2	18		clc			clc
.38e3	69 04		adc #$04		adc #4
.38e5	aa		tax			tax
.38e6	9a		txs			txs
.38e7	18		clc			clc                 ; And skip over the branch address
.38e8	a5 28		lda $28			lda ip
.38ea	69 02		adc #$02		adc #2
.38ec	85 28		sta $28			sta ip
.38ee	a5 29		lda $29			lda ip+1
.38f0	69 00		adc #$00		adc #0
.38f2	85 29		sta $29			sta ip+1
.38f4	80 0e		bra $3904		bra done
.38f6						dobranch:
.38f6	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.38f8	b2 28		lda ($28)		lda (ip)
.38fa	85 32		sta $32			sta tmp
.38fc	b1 28		lda ($28),y		lda (ip),y
.38fe	85 29		sta $29			sta ip+1
.3900	a5 32		lda $32			lda tmp
.3902	85 28		sta $28			sta ip
.3904						done:
.3904	a6 36		ldx $36			ldx savex           ; Restore the parameter stack pointer
.3906	4c 37 16	jmp $1637		jmp next
.3909					w_i:
>3909	01					.byte $01
>390a	69					.text 'i'
>390b						.fill 15
>391a	95 38					.word w_x28x2bloopx29
.391c					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.391c	86 36		stx $36			stx savex           ; Point X to the return stack temporarily
.391e	ba		tsx			tsx
.391f	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.3922	bd 03 01	lda $0103,x		lda current
.3925	a6 36		ldx $36			ldx savex           ; Restore the PSP
.3927	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.3929	95 00		sta $00,x		sta pstack,x
.392b	ca		dex			dex
.392c	ca		dex			dex
.392d	4c 37 16	jmp $1637		jmp next
.3930					w_x28ofx29:
>3930	04					.byte $04
>3931	28 6f 66 29				.text '(of)'
>3935						.fill 12
>3941	09 39					.word w_i
.3943					xt_x28ofx29:
.3943	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.3945	d5 04		cmp $04,x		cmp pstack+4,x
.3947	d0 1a		bne $3963		bne not_eq
.3949	b5 03		lda $03,x		lda pstack+3,x
.394b	d5 05		cmp $05,x		cmp pstack+5,x
.394d	d0 14		bne $3963		bne not_eq
.394f	e8		inx			inx
.3950	e8		inx			inx
.3951	e8		inx			inx
.3952	e8		inx			inx
.3953	18		clc			clc                 ; Skip over the branch target
.3954	a5 28		lda $28			lda ip
.3956	69 02		adc #$02		adc #2
.3958	85 28		sta $28			sta ip
.395a	a5 29		lda $29			lda ip+1
.395c	69 00		adc #$00		adc #0
.395e	85 29		sta $29			sta ip+1
.3960	4c 37 16	jmp $1637		jmp next
.3963						not_eq:
.3963	e8		inx			inx                 ; Remove n2 from stack
.3964	e8		inx			inx
.3965	a0 01		ldy #$01		ldy #1              ; Take the branch target
.3967	b2 28		lda ($28)		lda (ip)
.3969	85 32		sta $32			sta tmp
.396b	b1 28		lda ($28),y		lda (ip),y
.396d	85 29		sta $29			sta ip+1
.396f	a5 32		lda $32			lda tmp
.3971	85 28		sta $28			sta ip
.3973	4c 37 16	jmp $1637		jmp next
.3976					w_execute:
>3976	07					.byte $07
>3977	65 78 65 63 75 74 65			.text 'execute'
>397e						.fill 9
>3987	30 39					.word w_x28ofx29
.3989					xt_execute:
.3989	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.398b	85 2a		sta $2a			sta wp
.398d	b5 03		lda $03,x		lda pstack+3,x
.398f	85 2b		sta $2b			sta wp+1
.3991	e8		inx			inx                 ; Clean up stack
.3992	e8		inx			inx
.3993	6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.3996					w_x28vocabularyx29:
>3996	0c					.byte $0C
>3997	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>399f	61 72 79 29
>39a3						.fill 4
>39a7	76 39					.word w_execute
.39a9					xt_x28vocabularyx29:
.39a9	18		clc			clc                 ; tmp := up + user_context
.39aa	a5 2c		lda $2c			lda up
.39ac	69 08		adc #$08		adc #user_context
.39ae	85 32		sta $32			sta tmp
.39b0	a5 2d		lda $2d			lda up+1
.39b2	69 00		adc #$00		adc #0
.39b4	85 33		sta $33			sta tmp+1
.39b6	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.39b8	18		clc			clc
.39b9	a5 2a		lda $2a			lda wp
.39bb	69 03		adc #$03		adc #3
.39bd	92 32		sta ($32)		sta (tmp)
.39bf	a5 2b		lda $2b			lda wp+1
.39c1	69 00		adc #$00		adc #0
.39c3	91 32		sta ($32),y		sta (tmp),y
.39c5	4c 37 16	jmp $1637		jmp next
.39c8					w_forth:
>39c8	05					.byte $05
>39c9	66 6f 72 74 68				.text 'forth'
>39ce						.fill 11
>39d9	96 39					.word w_x28vocabularyx29
.39db					xt_forth:
.39db	4c a9 39	jmp $39a9		jmp xt_x28vocabularyx29
>39de	36 48					.word <>w_cold
.39e0					w_x28findx29:
>39e0	06					.byte $06
>39e1	28 66 69 6e 64 29			.text '(find)'
>39e7						.fill 10
>39f1	c8 39					.word w_forth
.39f3					xt_x28findx29:
.39f3	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.39f5	85 25		sta $25			sta src_ptr+1
.39f7	b5 02		lda $02,x		lda pstack+2,x
.39f9	85 24		sta $24			sta src_ptr
.39fb	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.39fd	85 27		sta $27			sta dst_ptr+1
.39ff	b5 04		lda $04,x		lda pstack+4,x
.3a01	85 26		sta $26			sta dst_ptr
.3a03						loop:
.3a03	a5 24		lda $24			lda src_ptr             ; Check to see if src_ptr = NULL
.3a05	d0 0d		bne $3a14		bne not_eod
.3a07	a5 25		lda $25			lda src_ptr+1
.3a09	d0 09		bne $3a14		bne not_eod
.3a0b	e8		inx			inx                     ; Clean up the stack
.3a0c	e8		inx			inx
.3a0d	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.3a0f	74 02		stz $02,x		stz pstack+2,x
.3a11	4c 37 16	jmp $1637		jmp next
.3a14						not_eod:
.3a14	b2 24		lda ($24)		lda (src_ptr)           ; Get the size of the word in the dictionary
.3a16	29 3f		and #$3f		and #$3f                ; Filter out the flags
.3a18	d2 26		cmp ($26)		cmp (dst_ptr)           ; Check it against the word to search
.3a1a	f0 1b		beq $3a37		beq chk_chars           ; If they match, check the characters
.3a1c						next_word:
.3a1c	18		clc			clc                     ; Move src_ptr to the link field
.3a1d	a5 24		lda $24			lda src_ptr
.3a1f	69 11		adc #$11		adc #17
.3a21	85 24		sta $24			sta src_ptr
.3a23	a5 25		lda $25			lda src_ptr+1
.3a25	69 00		adc #$00		adc #0
.3a27	85 25		sta $25			sta src_ptr+1
.3a29	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.3a2b	b2 24		lda ($24)		lda (src_ptr)
.3a2d	48		pha			pha
.3a2e	b1 24		lda ($24),y		lda (src_ptr),y
.3a30	85 25		sta $25			sta src_ptr+1
.3a32	68		pla			pla
.3a33	85 24		sta $24			sta src_ptr
.3a35	80 cc		bra $3a03		bra loop                ; And check that word
.3a37						chk_chars:
.3a37	a8		tay			tay                     ; y := index to character to check
.3a38						char_loop:
.3a38	b1 24		lda ($24),y		lda (src_ptr),y         ; Check the yth character
.3a3a	d1 26		cmp ($26),y		cmp (dst_ptr),y
.3a3c	d0 de		bne $3a1c		bne next_word           ; If they are not equal, go to the next word in the dictionary
.3a3e	88		dey			dey                     ; Move to the previous character in the words
.3a3f	d0 f7		bne $3a38		bne char_loop           ; Are we back at the size? No: keep checking
.3a41	ca		dex			dex                     ; Make room for all the return values
.3a42	ca		dex			dex
.3a43	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.3a45	74 03		stz $03,x		stz pstack+3,x
.3a47	95 02		sta $02,x		sta pstack+2,x
.3a49	b2 26		lda ($26)		lda (dst_ptr)           ; Then the length of the word
.3a4b	74 05		stz $05,x		stz pstack+5,x
.3a4d	95 04		sta $04,x		sta pstack+4,x
.3a4f	18		clc			clc                     ; Then the pfa pointer
.3a50	a5 24		lda $24			lda src_ptr
.3a52	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.3a54	95 06		sta $06,x		sta pstack+6,x
.3a56	a5 25		lda $25			lda src_ptr+1
.3a58	69 00		adc #$00		adc #0
.3a5a	95 07		sta $07,x		sta pstack+7,x
.3a5c	4c 37 16	jmp $1637		jmp next
.3a5f					w_digit:
>3a5f	05					.byte $05
>3a60	64 69 67 69 74				.text 'digit'
>3a65						.fill 11
>3a70	e0 39					.word w_x28findx29
.3a72					xt_digit:
.3a72	b5 04		lda $04,x		lda pstack+4,x          ; Get the character in A
.3a74	c9 61		cmp #$61		cmp #'a'
.3a76	90 06		bcc $3a7e		blt get_base
.3a78	c9 7b		cmp #$7b		cmp #'z'+1
.3a7a	b0 02		bcs $3a7e		bge get_base
.3a7c	29 df		and #$df		and #$df               ; Turn off the case bit
.3a7e						get_base:
.3a7e	b4 02		ldy $02,x		ldy pstack+2,x          ; Get the base into Y
.3a80	88		dey			dey
.3a81						loop:
.3a81	d9 a1 3a	cmp $3aa1,y		cmp digits,y            ; Check to see if we have a match
.3a84	f0 0e		beq $3a94		beq found               ; If so: return the number
.3a86	88		dey			dey                     ; Move to the previous digit
.3a87	c0 ff		cpy #$ff		cpy #$ff                ; Have we checked the first digit?
.3a89	d0 f6		bne $3a81		bne loop                ; No: check against this digit
.3a8b						not_found:
.3a8b	e8		inx			inx                     ; Clean up the stack
.3a8c	e8		inx			inx
.3a8d	74 03		stz $03,x		stz pstack+3,x          ; Return false
.3a8f	74 02		stz $02,x		stz pstack+2,x
.3a91	4c 37 16	jmp $1637		jmp next
.3a94						found:
.3a94	74 05		stz $05,x		stz pstack+5,x          ; Return the value of the digit
.3a96	94 04		sty $04,x		sty pstack+4,x
.3a98	a9 ff		lda #$ff		lda #$ff                ; And the true flag
.3a9a	95 03		sta $03,x		sta pstack+3,x
.3a9c	95 02		sta $02,x		sta pstack+2,x
.3a9e	4c 37 16	jmp $1637		jmp next
.3aa1						digits:
>3aa1	30 31 32 33 34 35 36 37			.text "0123456789ABCDEF"
>3aa9	38 39 41 42 43 44 45 46
.3ab1					w_pad:
>3ab1	03					.byte $03
>3ab2	70 61 64				.text 'pad'
>3ab5						.fill 13
>3ac2	5f 3a					.word w_digit
.3ac4					xt_pad:
.3ac4	a9 90		lda #$90		lda #$90
.3ac6	95 01		sta $01,x		sta pstack+1,x
.3ac8	74 00		stz $00,x		stz pstack,x
.3aca	ca		dex			dex
.3acb	ca		dex			dex
.3acc	4c 37 16	jmp $1637		jmp next
.3acf					w_bs:
>3acf	02					.byte $02
>3ad0	62 73					.text 'bs'
>3ad2						.fill 14
>3ae0	b1 3a					.word w_pad
.3ae2					xt_bs:
.3ae2	4c 06 37	jmp $3706		jmp xt_x28constantx29
>3ae5	08 00					.word 8
.3ae7					w_nl:
>3ae7	02					.byte $02
>3ae8	6e 6c					.text 'nl'
>3aea						.fill 14
>3af8	cf 3a					.word w_bs
.3afa					xt_nl:
.3afa	4c 06 37	jmp $3706		jmp xt_x28constantx29
>3afd	0d 00					.word 13
.3aff					w_bl:
>3aff	02					.byte $02
>3b00	62 6c					.text 'bl'
>3b02						.fill 14
>3b10	e7 3a					.word w_nl
.3b12					xt_bl:
.3b12	4c 06 37	jmp $3706		jmp xt_x28constantx29
>3b15	20 00					.word 32
.3b17					w_s0:
>3b17	02					.byte $02
>3b18	73 30					.text 's0'
>3b1a						.fill 14
>3b28	ff 3a					.word w_bl
.3b2a					xt_s0:
.3b2a	4c 41 37	jmp $3741		jmp xt_x28userx29
>3b2d	00 00					.word 0
.3b2f					w_r0:
>3b2f	02					.byte $02
>3b30	72 30					.text 'r0'
>3b32						.fill 14
>3b40	17 3b					.word w_s0
.3b42					xt_r0:
.3b42	4c 41 37	jmp $3741		jmp xt_x28userx29
>3b45	02 00					.word 2
.3b47					w_base:
>3b47	04					.byte $04
>3b48	62 61 73 65				.text 'base'
>3b4c						.fill 12
>3b58	2f 3b					.word w_r0
.3b5a					xt_base:
.3b5a	4c 41 37	jmp $3741		jmp xt_x28userx29
>3b5d	04 00					.word 4
.3b5f					w_state:
>3b5f	05					.byte $05
>3b60	73 74 61 74 65				.text 'state'
>3b65						.fill 11
>3b70	47 3b					.word w_base
.3b72					xt_state:
.3b72	4c 41 37	jmp $3741		jmp xt_x28userx29
>3b75	06 00					.word 6
.3b77					w_context:
>3b77	07					.byte $07
>3b78	63 6f 6e 74 65 78 74			.text 'context'
>3b7f						.fill 9
>3b88	5f 3b					.word w_state
.3b8a					xt_context:
.3b8a	4c 41 37	jmp $3741		jmp xt_x28userx29
>3b8d	08 00					.word 8
.3b8f					w_current:
>3b8f	07					.byte $07
>3b90	63 75 72 72 65 6e 74			.text 'current'
>3b97						.fill 9
>3ba0	77 3b					.word w_context
.3ba2					xt_current:
.3ba2	4c 41 37	jmp $3741		jmp xt_x28userx29
>3ba5	0a 00					.word 10
.3ba7					w_dp:
>3ba7	02					.byte $02
>3ba8	64 70					.text 'dp'
>3baa						.fill 14
>3bb8	8f 3b					.word w_current
.3bba					xt_dp:
.3bba	4c 41 37	jmp $3741		jmp xt_x28userx29
>3bbd	0c 00					.word 12
.3bbf					w_x3ein:
>3bbf	03					.byte $03
>3bc0	3e 69 6e				.text '>in'
>3bc3						.fill 13
>3bd0	a7 3b					.word w_dp
.3bd2					xt_x3ein:
.3bd2	4c 41 37	jmp $3741		jmp xt_x28userx29
>3bd5	0e 00					.word 14
.3bd7					w_tib:
>3bd7	03					.byte $03
>3bd8	74 69 62				.text 'tib'
>3bdb						.fill 13
>3be8	bf 3b					.word w_x3ein
.3bea					xt_tib:
.3bea	4c 41 37	jmp $3741		jmp xt_x28userx29
>3bed	10 00					.word 16
.3bef					w_sourcex2did:
>3bef	09					.byte $09
>3bf0	73 6f 75 72 63 65 2d 69			.text 'source-id'
>3bf8	64
>3bf9						.fill 7
>3c00	d7 3b					.word w_tib
.3c02					xt_sourcex2did:
.3c02	4c 41 37	jmp $3741		jmp xt_x28userx29
>3c05	12 00					.word 18
.3c07					w_blk:
>3c07	03					.byte $03
>3c08	62 6c 6b				.text 'blk'
>3c0b						.fill 13
>3c18	ef 3b					.word w_sourcex2did
.3c1a					xt_blk:
.3c1a	4c 41 37	jmp $3741		jmp xt_x28userx29
>3c1d	14 00					.word 20
.3c1f					w_dpl:
>3c1f	03					.byte $03
>3c20	64 70 6c				.text 'dpl'
>3c23						.fill 13
>3c30	07 3c					.word w_blk
.3c32					xt_dpl:
.3c32	4c 41 37	jmp $3741		jmp xt_x28userx29
>3c35	16 00					.word 22
.3c37					w_hld:
>3c37	03					.byte $03
>3c38	68 6c 64				.text 'hld'
>3c3b						.fill 13
>3c48	1f 3c					.word w_dpl
.3c4a					xt_hld:
.3c4a	4c 41 37	jmp $3741		jmp xt_x28userx29
>3c4d	18 00					.word 24
.3c4f					w_handler:
>3c4f	07					.byte $07
>3c50	68 61 6e 64 6c 65 72			.text 'handler'
>3c57						.fill 9
>3c60	37 3c					.word w_hld
.3c62					xt_handler:
.3c62	4c 41 37	jmp $3741		jmp xt_x28userx29
>3c65	1a 00					.word 26
.3c67					w_x3fdup:
>3c67	04					.byte $04
>3c68	3f 64 75 70				.text '?dup'
>3c6c						.fill 12
>3c78	4f 3c					.word w_handler
.3c7a					xt_x3fdup:
.3c7a	4c 24 16	jmp $1624		jmp i_enter
>3c7d	40 2f					.word xt_dup
>3c7f	8d 37					.word xt_x28branch0x29
>3c81	85 3c					.word l_178
>3c83	40 2f					.word xt_dup
.3c85					l_178:
>3c85	1c 16					.word i_exit
.3c87					w_rot:
>3c87	03					.byte $03
>3c88	72 6f 74				.text 'rot'
>3c8b						.fill 13
>3c98	67 3c					.word w_x3fdup
.3c9a					xt_rot:
.3c9a	4c 24 16	jmp $1624		jmp i_enter
>3c9d	0e 30					.word xt_x3er
>3c9f	60 2f					.word xt_swap
>3ca1	2c 30					.word xt_rx3e
>3ca3	60 2f					.word xt_swap
>3ca5	1c 16					.word i_exit
.3ca7					w_2dup:
>3ca7	04					.byte $04
>3ca8	32 64 75 70				.text '2dup'
>3cac						.fill 12
>3cb8	87 3c					.word w_rot
.3cba					xt_2dup:
.3cba	4c 24 16	jmp $1624		jmp i_enter
>3cbd	c4 2f					.word xt_over
>3cbf	c4 2f					.word xt_over
>3cc1	1c 16					.word i_exit
.3cc3					w_2drop:
>3cc3	05					.byte $05
>3cc4	32 64 72 6f 70				.text '2drop'
>3cc9						.fill 11
>3cd4	a7 3c					.word w_2dup
.3cd6					xt_2drop:
.3cd6	4c 24 16	jmp $1624		jmp i_enter
>3cd9	28 2f					.word xt_drop
>3cdb	28 2f					.word xt_drop
>3cdd	1c 16					.word i_exit
.3cdf					w_x3c:
>3cdf	01					.byte $01
>3ce0	3c					.text '<'
>3ce1						.fill 15
>3cf0	c3 3c					.word w_2drop
.3cf2					xt_x3c:
.3cf2	4c 24 16	jmp $1624		jmp i_enter
>3cf5	70 33					.word xt_x2d
>3cf7	62 36					.word xt_0x3c
>3cf9	1c 16					.word i_exit
.3cfb					w_x3e:
>3cfb	01					.byte $01
>3cfc	3e					.text '>'
>3cfd						.fill 15
>3d0c	df 3c					.word w_x3c
.3d0e					xt_x3e:
.3d0e	4c 24 16	jmp $1624		jmp i_enter
>3d11	70 33					.word xt_x2d
>3d13	b4 36					.word xt_0x3e
>3d15	1c 16					.word i_exit
.3d17					w_x3d:
>3d17	01					.byte $01
>3d18	3d					.text '='
>3d19						.fill 15
>3d28	fb 3c					.word w_x3e
.3d2a					xt_x3d:
.3d2a	4c 24 16	jmp $1624		jmp i_enter
>3d2d	70 33					.word xt_x2d
>3d2f	89 36					.word xt_0x3d
>3d31	1c 16					.word i_exit
.3d33					w_dx3c:
>3d33	02					.byte $02
>3d34	64 3c					.text 'd<'
>3d36						.fill 14
>3d44	17 3d					.word w_x3d
.3d46					xt_dx3c:
.3d46	4c 24 16	jmp $1624		jmp i_enter
>3d49	3d 33					.word xt_dx2d
>3d4b	28 2f					.word xt_drop
>3d4d	62 36					.word xt_0x3c
>3d4f	1c 16					.word i_exit
.3d51					w_abs:
>3d51	03					.byte $03
>3d52	61 62 73				.text 'abs'
>3d55						.fill 13
>3d62	33 3d					.word w_dx3c
.3d64					xt_abs:
.3d64	4c 24 16	jmp $1624		jmp i_enter
>3d67	40 2f					.word xt_dup
>3d69	62 36					.word xt_0x3c
>3d6b	8d 37					.word xt_x28branch0x29
>3d6d	75 3d					.word l_215
>3d6f	b5 18					.word xt_0
>3d71	60 2f					.word xt_swap
>3d73	70 33					.word xt_x2d
.3d75					l_215:
>3d75	1c 16					.word i_exit
.3d77					w_dabs:
>3d77	04					.byte $04
>3d78	64 61 62 73				.text 'dabs'
>3d7c						.fill 12
>3d88	51 3d					.word w_abs
.3d8a					xt_dabs:
.3d8a	4c 24 16	jmp $1624		jmp i_enter
>3d8d	c4 2f					.word xt_over
>3d8f	62 36					.word xt_0x3c
>3d91	8d 37					.word xt_x28branch0x29
>3d93	9d 3d					.word l_222
>3d95	b5 18					.word xt_0
>3d97	b5 18					.word xt_0
>3d99	86 2f					.word xt_2swap
>3d9b	3d 33					.word xt_dx2d
.3d9d					l_222:
>3d9d	1c 16					.word i_exit
.3d9f					w_x2fmod:
>3d9f	04					.byte $04
>3da0	2f 6d 6f 64				.text '/mod'
>3da4						.fill 12
>3db0	77 3d					.word w_dabs
.3db2					xt_x2fmod:
.3db2	4c 24 16	jmp $1624		jmp i_enter
>3db5	1c 16					.word i_exit
.3db7					w_x2f:
>3db7	01					.byte $01
>3db8	2f					.text '/'
>3db9						.fill 15
>3dc8	9f 3d					.word w_x2fmod
.3dca					xt_x2f:
.3dca	4c 24 16	jmp $1624		jmp i_enter
>3dcd	b2 3d					.word xt_x2fmod
>3dcf	60 2f					.word xt_swap
>3dd1	28 2f					.word xt_drop
>3dd3	1c 16					.word i_exit
.3dd5					w_mod:
>3dd5	03					.byte $03
>3dd6	6d 6f 64				.text 'mod'
>3dd9						.fill 13
>3de6	b7 3d					.word w_x2f
.3de8					xt_mod:
.3de8	4c 24 16	jmp $1624		jmp i_enter
>3deb	b2 3d					.word xt_x2fmod
>3ded	28 2f					.word xt_drop
>3def	1c 16					.word i_exit
.3df1					w_max:
>3df1	03					.byte $03
>3df2	6d 61 78				.text 'max'
>3df5						.fill 13
>3e02	d5 3d					.word w_mod
.3e04					xt_max:
.3e04	4c 24 16	jmp $1624		jmp i_enter
>3e07	ba 3c					.word xt_2dup
>3e09	f2 3c					.word xt_x3c
>3e0b	8d 37					.word xt_x28branch0x29
>3e0d	17 3e					.word l_237
>3e0f	c4 2f					.word xt_over
>3e11	28 2f					.word xt_drop
>3e13	69 37					.word xt_x28branchx29
>3e15	19 3e					.word l_238
.3e17					l_237:
>3e17	28 2f					.word xt_drop
.3e19					l_238:
>3e19	1c 16					.word i_exit
.3e1b					w_min:
>3e1b	03					.byte $03
>3e1c	6d 69 6e				.text 'min'
>3e1f						.fill 13
>3e2c	f1 3d					.word w_max
.3e2e					xt_min:
.3e2e	4c 24 16	jmp $1624		jmp i_enter
>3e31	ba 3c					.word xt_2dup
>3e33	0e 3d					.word xt_x3e
>3e35	8d 37					.word xt_x28branch0x29
>3e37	41 3e					.word l_245
>3e39	c4 2f					.word xt_over
>3e3b	28 2f					.word xt_drop
>3e3d	69 37					.word xt_x28branchx29
>3e3f	43 3e					.word l_246
.3e41					l_245:
>3e41	28 2f					.word xt_drop
.3e43					l_246:
>3e43	1c 16					.word i_exit
.3e45					w_lfa:
>3e45	03					.byte $03
>3e46	6c 66 61				.text 'lfa'
>3e49						.fill 13
>3e56	1b 3e					.word w_min
.3e58					xt_lfa:
.3e58	4c 24 16	jmp $1624		jmp i_enter
>3e5b	49 19					.word xt_x28literalx29
>3e5d	05 00					.word 5
>3e5f	70 33					.word xt_x2d
>3e61	1c 16					.word i_exit
.3e63					w_cfa:
>3e63	03					.byte $03
>3e64	63 66 61				.text 'cfa'
>3e67						.fill 13
>3e74	45 3e					.word w_lfa
.3e76					xt_cfa:
.3e76	4c 24 16	jmp $1624		jmp i_enter
>3e79	49 19					.word xt_x28literalx29
>3e7b	03 00					.word 3
>3e7d	70 33					.word xt_x2d
>3e7f	1c 16					.word i_exit
.3e81					w_nfa:
>3e81	03					.byte $03
>3e82	6e 66 61				.text 'nfa'
>3e85						.fill 13
>3e92	63 3e					.word w_cfa
.3e94					xt_nfa:
.3e94	4c 24 16	jmp $1624		jmp i_enter
>3e97	49 19					.word xt_x28literalx29
>3e99	16 00					.word 22
>3e9b	70 33					.word xt_x2d
>3e9d	1c 16					.word i_exit
.3e9f					w_pfa:
>3e9f	03					.byte $03
>3ea0	70 66 61				.text 'pfa'
>3ea3						.fill 13
>3eb0	81 3e					.word w_nfa
.3eb2					xt_pfa:
.3eb2	4c 24 16	jmp $1624		jmp i_enter
>3eb5	49 19					.word xt_x28literalx29
>3eb7	16 00					.word 22
>3eb9	e5 32					.word xt_x2b
>3ebb	1c 16					.word i_exit
.3ebd					w_here:
>3ebd	04					.byte $04
>3ebe	68 65 72 65				.text 'here'
>3ec2						.fill 12
>3ece	9f 3e					.word w_pfa
.3ed0					xt_here:
.3ed0	4c 24 16	jmp $1624		jmp i_enter
>3ed3	ba 3b					.word xt_dp
>3ed5	ad 30					.word xt_x40
>3ed7	1c 16					.word i_exit
.3ed9					w_allot:
>3ed9	05					.byte $05
>3eda	61 6c 6c 6f 74				.text 'allot'
>3edf						.fill 11
>3eea	bd 3e					.word w_here
.3eec					xt_allot:
.3eec	4c 24 16	jmp $1624		jmp i_enter
>3eef	ba 3b					.word xt_dp
>3ef1	4a 31					.word xt_x2bx21
>3ef3	1c 16					.word i_exit
.3ef5					w_x2c:
>3ef5	01					.byte $01
>3ef6	2c					.text ','
>3ef7						.fill 15
>3f06	d9 3e					.word w_allot
.3f08					xt_x2c:
.3f08	4c 24 16	jmp $1624		jmp i_enter
>3f0b	d0 3e					.word xt_here
>3f0d	81 30					.word xt_x21
>3f0f	ef 18					.word xt_2
>3f11	ec 3e					.word xt_allot
>3f13	1c 16					.word i_exit
.3f15					w_cx2c:
>3f15	02					.byte $02
>3f16	63 2c					.text 'c,'
>3f18						.fill 14
>3f26	f5 3e					.word w_x2c
.3f28					xt_cx2c:
.3f28	4c 24 16	jmp $1624		jmp i_enter
>3f2b	d0 3e					.word xt_here
>3f2d	d5 30					.word xt_cx21
>3f2f	d1 18					.word xt_1
>3f31	ec 3e					.word xt_allot
>3f33	1c 16					.word i_exit
.3f35					w_definitions:
>3f35	0b					.byte $0B
>3f36	64 65 66 69 6e 69 74 69			.text 'definitions'
>3f3e	6f 6e 73
>3f41						.fill 5
>3f46	15 3f					.word w_cx2c
.3f48					xt_definitions:
.3f48	4c 24 16	jmp $1624		jmp i_enter
>3f4b	8a 3b					.word xt_context
>3f4d	ad 30					.word xt_x40
>3f4f	a2 3b					.word xt_current
>3f51	81 30					.word xt_x21
>3f53	1c 16					.word i_exit
.3f55					w_latest:
>3f55	06					.byte $06
>3f56	6c 61 74 65 73 74			.text 'latest'
>3f5c						.fill 10
>3f66	35 3f					.word w_definitions
.3f68					xt_latest:
.3f68	4c 24 16	jmp $1624		jmp i_enter
>3f6b	a2 3b					.word xt_current
>3f6d	ad 30					.word xt_x40
>3f6f	ad 30					.word xt_x40
>3f71	1c 16					.word i_exit
.3f73					w_count:
>3f73	05					.byte $05
>3f74	63 6f 75 6e 74				.text 'count'
>3f79						.fill 11
>3f84	55 3f					.word w_latest
.3f86					xt_count:
.3f86	4c 24 16	jmp $1624		jmp i_enter
>3f89	40 2f					.word xt_dup
>3f8b	54 35					.word xt_1x2b
>3f8d	60 2f					.word xt_swap
>3f8f	f3 30					.word xt_cx40
>3f91	1c 16					.word i_exit
.3f93					w_type:
>3f93	04					.byte $04
>3f94	74 79 70 65				.text 'type'
>3f98						.fill 12
>3fa4	73 3f					.word w_count
.3fa6					xt_type:
.3fa6	4c 24 16	jmp $1624		jmp i_enter
>3fa9	7a 3c					.word xt_x3fdup
>3fab	8d 37					.word xt_x28branch0x29
>3fad	d1 3f					.word l_253
>3faf	c4 2f					.word xt_over
>3fb1	e5 32					.word xt_x2b
>3fb3	60 2f					.word xt_swap
>3fb5	ca 37					.word xt_x28dox29
.3fb7					l_254:
>3fb7	1c 39					.word xt_i
>3fb9	f3 30					.word xt_cx40
>3fbb	7a 3c					.word xt_x3fdup
>3fbd	8d 37					.word xt_x28branch0x29
>3fbf	c7 3f					.word l_256
>3fc1	29 18					.word xt_emit
>3fc3	69 37					.word xt_x28branchx29
>3fc5	c9 3f					.word l_257
.3fc7					l_256:
>3fc7	20 38					.word xt_leave
.3fc9					l_257:
>3fc9	47 38					.word xt_x28loopx29
>3fcb	b7 3f					.word l_254
.3fcd					l_255:
>3fcd	69 37					.word xt_x28branchx29
>3fcf	d3 3f					.word l_258
.3fd1					l_253:
>3fd1	28 2f					.word xt_drop
.3fd3					l_258:
>3fd3	1c 16					.word i_exit
.3fd5					w_x28x2ex22x29:
>3fd5	04					.byte $04
>3fd6	28 2e 22 29				.text '(.")'
>3fda						.fill 12
>3fe6	93 3f					.word w_type
.3fe8					xt_x28x2ex22x29:
.3fe8	4c 24 16	jmp $1624		jmp i_enter
>3feb	4a 30					.word xt_r
>3fed	86 3f					.word xt_count
>3fef	40 2f					.word xt_dup
>3ff1	54 35					.word xt_1x2b
>3ff3	2c 30					.word xt_rx3e
>3ff5	e5 32					.word xt_x2b
>3ff7	0e 30					.word xt_x3er
>3ff9	a6 3f					.word xt_type
>3ffb	1c 16					.word i_exit
.3ffd					w_space:
>3ffd	05					.byte $05
>3ffe	73 70 61 63 65				.text 'space'
>4003						.fill 11
>400e	d5 3f					.word w_x28x2ex22x29
.4010					xt_space:
.4010	4c 24 16	jmp $1624		jmp i_enter
>4013	49 19					.word xt_x28literalx29
>4015	20 00					.word 32
>4017	29 18					.word xt_emit
>4019	1c 16					.word i_exit
.401b					w_spaces:
>401b	06					.byte $06
>401c	73 70 61 63 65 73			.text 'spaces'
>4022						.fill 10
>402c	fd 3f					.word w_space
.402e					xt_spaces:
.402e	4c 24 16	jmp $1624		jmp i_enter
>4031	40 2f					.word xt_dup
>4033	b4 36					.word xt_0x3e
>4035	8d 37					.word xt_x28branch0x29
>4037	47 40					.word l_259
>4039	b5 18					.word xt_0
>403b	ca 37					.word xt_x28dox29
.403d					l_260:
>403d	10 40					.word xt_space
>403f	47 38					.word xt_x28loopx29
>4041	3d 40					.word l_260
.4043					l_261:
>4043	69 37					.word xt_x28branchx29
>4045	49 40					.word l_262
.4047					l_259:
>4047	28 2f					.word xt_drop
.4049					l_262:
>4049	1c 16					.word i_exit
.404b					w_expect:
>404b	06					.byte $06
>404c	65 78 70 65 63 74			.text 'expect'
>4052						.fill 10
>405c	1b 40					.word w_spaces
.405e					xt_expect:
.405e	4c 24 16	jmp $1624		jmp i_enter
>4061	c4 2f					.word xt_over
>4063	e5 32					.word xt_x2b
>4065	c4 2f					.word xt_over
>4067	ca 37					.word xt_x28dox29
.4069					l_263:
>4069	73 18					.word xt_key
>406b	e2 3a					.word xt_bs
>406d	43 39					.word xt_x28ofx29
>406f	9b 40					.word l_266
>4071	40 2f					.word xt_dup
>4073	1c 39					.word xt_i
>4075	2a 3d					.word xt_x3d
>4077	40 36					.word xt_not
>4079	8d 37					.word xt_x28branch0x29
>407b	97 40					.word l_267
>407d	e2 3a					.word xt_bs
>407f	29 18					.word xt_emit
>4081	12 3b					.word xt_bl
>4083	29 18					.word xt_emit
>4085	e2 3a					.word xt_bs
>4087	29 18					.word xt_emit
>4089	b5 18					.word xt_0
>408b	1c 39					.word xt_i
>408d	93 35					.word xt_1x2d
>408f	d5 30					.word xt_cx21
>4091	1c 39					.word xt_i
>4093	b1 35					.word xt_2x2d
>4095	f1 37					.word xt_x3ei
.4097					l_267:
>4097	69 37					.word xt_x28branchx29
>4099	c1 40					.word l_265
.409b					l_266:
>409b	fa 3a					.word xt_nl
>409d	43 39					.word xt_x28ofx29
>409f	ad 40					.word l_268
>40a1	b5 18					.word xt_0
>40a3	1c 39					.word xt_i
>40a5	d5 30					.word xt_cx21
>40a7	20 38					.word xt_leave
>40a9	69 37					.word xt_x28branchx29
>40ab	c1 40					.word l_265
.40ad					l_268:
>40ad	40 2f					.word xt_dup
>40af	40 2f					.word xt_dup
>40b1	1c 39					.word xt_i
>40b3	d5 30					.word xt_cx21
>40b5	b5 18					.word xt_0
>40b7	1c 39					.word xt_i
>40b9	54 35					.word xt_1x2b
>40bb	d5 30					.word xt_cx21
>40bd	29 18					.word xt_emit
>40bf	28 2f					.word xt_drop
.40c1					l_265:
>40c1	47 38					.word xt_x28loopx29
>40c3	69 40					.word l_263
.40c5					l_264:
>40c5	28 2f					.word xt_drop
>40c7	1c 16					.word i_exit
.40c9					w_query:
>40c9	05					.byte $05
>40ca	71 75 65 72 79				.text 'query'
>40cf						.fill 11
>40da	4b 40					.word w_expect
.40dc					xt_query:
.40dc	4c 24 16	jmp $1624		jmp i_enter
>40df	ea 3b					.word xt_tib
>40e1	ad 30					.word xt_x40
>40e3	49 19					.word xt_x28literalx29
>40e5	50 00					.word 80
>40e7	5e 40					.word xt_expect
>40e9	b5 18					.word xt_0
>40eb	d2 3b					.word xt_x3ein
>40ed	81 30					.word xt_x21
>40ef	1c 16					.word i_exit
.40f1					w_erase:
>40f1	05					.byte $05
>40f2	65 72 61 73 65				.text 'erase'
>40f7						.fill 11
>4102	c9 40					.word w_query
.4104					xt_erase:
.4104	4c 24 16	jmp $1624		jmp i_enter
>4107	b5 18					.word xt_0
>4109	0f 31					.word xt_fill
>410b	1c 16					.word i_exit
.410d					w_blanks:
>410d	06					.byte $06
>410e	62 6c 61 6e 6b 73			.text 'blanks'
>4114						.fill 10
>411e	f1 40					.word w_erase
.4120					xt_blanks:
.4120	4c 24 16	jmp $1624		jmp i_enter
>4123	12 3b					.word xt_bl
>4125	0f 31					.word xt_fill
>4127	1c 16					.word i_exit
.4129					w_word:
>4129	04					.byte $04
>412a	77 6f 72 64				.text 'word'
>412e						.fill 12
>413a	0d 41					.word w_blanks
.413c					xt_word:
.413c	4c 24 16	jmp $1624		jmp i_enter
>413f	ea 3b					.word xt_tib
>4141	ad 30					.word xt_x40
>4143	d2 3b					.word xt_x3ein
>4145	ad 30					.word xt_x40
>4147	e5 32					.word xt_x2b
>4149	60 2f					.word xt_swap
>414b	7b 31					.word xt_enclose
>414d	b5 18					.word xt_0
>414f	d0 3e					.word xt_here
>4151	81 30					.word xt_x21
>4153	d2 3b					.word xt_x3ein
>4155	4a 31					.word xt_x2bx21
>4157	c4 2f					.word xt_over
>4159	70 33					.word xt_x2d
>415b	0e 30					.word xt_x3er
>415d	4a 30					.word xt_r
>415f	d0 3e					.word xt_here
>4161	d5 30					.word xt_cx21
>4163	e5 32					.word xt_x2b
>4165	d0 3e					.word xt_here
>4167	54 35					.word xt_1x2b
>4169	2c 30					.word xt_rx3e
>416b	f1 31					.word xt_cmove
>416d	12 3b					.word xt_bl
>416f	d0 3e					.word xt_here
>4171	86 3f					.word xt_count
>4173	e5 32					.word xt_x2b
>4175	d5 30					.word xt_cx21
>4177	1c 16					.word i_exit
.4179					w_x2dfind:
>4179	05					.byte $05
>417a	2d 66 69 6e 64				.text '-find'
>417f						.fill 11
>418a	29 41					.word w_word
.418c					xt_x2dfind:
.418c	4c 24 16	jmp $1624		jmp i_enter
>418f	12 3b					.word xt_bl
>4191	3c 41					.word xt_word
>4193	d0 3e					.word xt_here
>4195	8a 3b					.word xt_context
>4197	ad 30					.word xt_x40
>4199	ad 30					.word xt_x40
>419b	f3 39					.word xt_x28findx29
>419d	40 2f					.word xt_dup
>419f	89 36					.word xt_0x3d
>41a1	8d 37					.word xt_x28branch0x29
>41a3	ad 41					.word l_269
>41a5	28 2f					.word xt_drop
>41a7	d0 3e					.word xt_here
>41a9	68 3f					.word xt_latest
>41ab	f3 39					.word xt_x28findx29
.41ad					l_269:
>41ad	1c 16					.word i_exit
.41af					w_decimal:
>41af	07					.byte $07
>41b0	64 65 63 69 6d 61 6c			.text 'decimal'
>41b7						.fill 9
>41c0	79 41					.word w_x2dfind
.41c2					xt_decimal:
.41c2	4c 24 16	jmp $1624		jmp i_enter
>41c5	49 19					.word xt_x28literalx29
>41c7	0a 00					.word 10
>41c9	5a 3b					.word xt_base
>41cb	81 30					.word xt_x21
>41cd	1c 16					.word i_exit
.41cf					w_hex:
>41cf	03					.byte $03
>41d0	68 65 78				.text 'hex'
>41d3						.fill 13
>41e0	af 41					.word w_decimal
.41e2					xt_hex:
.41e2	4c 24 16	jmp $1624		jmp i_enter
>41e5	49 19					.word xt_x28literalx29
>41e7	10 00					.word 16
>41e9	5a 3b					.word xt_base
>41eb	81 30					.word xt_x21
>41ed	1c 16					.word i_exit
.41ef					w_octal:
>41ef	05					.byte $05
>41f0	6f 63 74 61 6c				.text 'octal'
>41f5						.fill 11
>4200	cf 41					.word w_hex
.4202					xt_octal:
.4202	4c 24 16	jmp $1624		jmp i_enter
>4205	49 19					.word xt_x28literalx29
>4207	08 00					.word 8
>4209	5a 3b					.word xt_base
>420b	81 30					.word xt_x21
>420d	1c 16					.word i_exit
.420f					w_x2e:
>420f	01					.byte $01
>4210	2e					.text '.'
>4211						.fill 15
>4220	ef 41					.word w_octal
.4222					xt_x2e:
.4222	4c 24 16	jmp $1624		jmp i_enter
>4225	25 35					.word xt_sx3ed
>4227	3e 44					.word xt_dx2e
>4229	1c 16					.word i_exit
.422b					w_x28numberx29:
>422b	08					.byte $08
>422c	28 6e 75 6d 62 65 72 29			.text '(number)'
>4234						.fill 8
>423c	0f 42					.word w_x2e
.423e					xt_x28numberx29:
.423e	4c 24 16	jmp $1624		jmp i_enter
.4241					l_270:
>4241	40 2f					.word xt_dup
>4243	0e 30					.word xt_x3er
>4245	f3 30					.word xt_cx40
>4247	5a 3b					.word xt_base
>4249	ad 30					.word xt_x40
>424b	72 3a					.word xt_digit
>424d	8d 37					.word xt_x28branch0x29
>424f	67 42					.word l_271
>4251	0e 30					.word xt_x3er
>4253	5a 3b					.word xt_base
>4255	ad 30					.word xt_x40
>4257	95 33					.word xt_ux2a
>4259	2c 30					.word xt_rx3e
>425b	25 35					.word xt_sx3ed
>425d	0a 33					.word xt_dx2b
>425f	2c 30					.word xt_rx3e
>4261	54 35					.word xt_1x2b
>4263	69 37					.word xt_x28branchx29
>4265	41 42					.word l_270
.4267					l_271:
>4267	2c 30					.word xt_rx3e
>4269	1c 16					.word i_exit
.426b					w_x3ferror:
>426b	06					.byte $06
>426c	3f 65 72 72 6f 72			.text '?error'
>4272						.fill 10
>427c	2b 42					.word w_x28numberx29
.427e					xt_x3ferror:
.427e	4c 24 16	jmp $1624		jmp i_enter
>4281	60 2f					.word xt_swap
>4283	8d 37					.word xt_x28branch0x29
>4285	8d 42					.word l_293
>4287	02 46					.word xt_error
>4289	69 37					.word xt_x28branchx29
>428b	8f 42					.word l_294
.428d					l_293:
>428d	28 2f					.word xt_drop
.428f					l_294:
>428f	1c 16					.word i_exit
.4291					w_number:
>4291	06					.byte $06
>4292	6e 75 6d 62 65 72			.text 'number'
>4298						.fill 10
>42a2	6b 42					.word w_x3ferror
.42a4					xt_number:
.42a4	4c 24 16	jmp $1624		jmp i_enter
>42a7	b5 18					.word xt_0
>42a9	b5 18					.word xt_0
>42ab	9a 3c					.word xt_rot
>42ad	40 2f					.word xt_dup
>42af	f3 30					.word xt_cx40
>42b1	49 19					.word xt_x28literalx29
>42b3	2d 00					.word 45
>42b5	2a 3d					.word xt_x3d
>42b7	8d 37					.word xt_x28branch0x29
>42b9	c3 42					.word l_272
>42bb	d1 18					.word xt_1
>42bd	0e 30					.word xt_x3er
>42bf	69 37					.word xt_x28branchx29
>42c1	cb 42					.word l_273
.42c3					l_272:
>42c3	b5 18					.word xt_0
>42c5	0e 30					.word xt_x3er
>42c7	d1 18					.word xt_1
>42c9	e5 32					.word xt_x2b
.42cb					l_273:
>42cb	0d 19					.word xt_x2d1
.42cd					l_274:
>42cd	32 3c					.word xt_dpl
>42cf	81 30					.word xt_x21
>42d1	3e 42					.word xt_x28numberx29
>42d3	40 2f					.word xt_dup
>42d5	f3 30					.word xt_cx40
>42d7	12 3b					.word xt_bl
>42d9	70 33					.word xt_x2d
>42db	8d 37					.word xt_x28branch0x29
>42dd	f9 42					.word l_275
>42df	40 2f					.word xt_dup
>42e1	f3 30					.word xt_cx40
>42e3	49 19					.word xt_x28literalx29
>42e5	2e 00					.word 46
>42e7	70 33					.word xt_x2d
>42e9	8d 37					.word xt_x28branch0x29
>42eb	f3 42					.word l_276
>42ed	49 19					.word xt_x28literalx29
>42ef	f3 ff					.word 65523
>42f1	7e 42					.word xt_x3ferror
.42f3					l_276:
>42f3	b5 18					.word xt_0
>42f5	69 37					.word xt_x28branchx29
>42f7	cd 42					.word l_274
.42f9					l_275:
>42f9	28 2f					.word xt_drop
>42fb	2c 30					.word xt_rx3e
>42fd	8d 37					.word xt_x28branch0x29
>42ff	09 43					.word l_277
>4301	b5 18					.word xt_0
>4303	b5 18					.word xt_0
>4305	86 2f					.word xt_2swap
>4307	3d 33					.word xt_dx2d
.4309					l_277:
>4309	1c 16					.word i_exit
.430b					w_x3cx23:
>430b	02					.byte $02
>430c	3c 23					.text '<#'
>430e						.fill 14
>431c	91 42					.word w_number
.431e					xt_x3cx23:
.431e	4c 24 16	jmp $1624		jmp i_enter
>4321	c4 3a					.word xt_pad
>4323	4a 3c					.word xt_hld
>4325	81 30					.word xt_x21
>4327	1c 16					.word i_exit
.4329					w_hold:
>4329	04					.byte $04
>432a	68 6f 6c 64				.text 'hold'
>432e						.fill 12
>433a	0b 43					.word w_x3cx23
.433c					xt_hold:
.433c	4c 24 16	jmp $1624		jmp i_enter
>433f	0d 19					.word xt_x2d1
>4341	4a 3c					.word xt_hld
>4343	4a 31					.word xt_x2bx21
>4345	4a 3c					.word xt_hld
>4347	ad 30					.word xt_x40
>4349	d5 30					.word xt_cx21
>434b	1c 16					.word i_exit
.434d					w_x23:
>434d	01					.byte $01
>434e	23					.text '#'
>434f						.fill 15
>435e	29 43					.word w_hold
.4360					xt_x23:
.4360	4c 24 16	jmp $1624		jmp i_enter
>4363	5a 3b					.word xt_base
>4365	ad 30					.word xt_x40
>4367	ca 34					.word xt_umx2fmod
>4369	25 35					.word xt_sx3ed
>436b	9a 3c					.word xt_rot
>436d	49 19					.word xt_x28literalx29
>436f	09 00					.word 9
>4371	c4 2f					.word xt_over
>4373	f2 3c					.word xt_x3c
>4375	8d 37					.word xt_x28branch0x29
>4377	7f 43					.word l_278
>4379	49 19					.word xt_x28literalx29
>437b	07 00					.word 7
>437d	e5 32					.word xt_x2b
.437f					l_278:
>437f	49 19					.word xt_x28literalx29
>4381	30 00					.word 48
>4383	e5 32					.word xt_x2b
>4385	3c 43					.word xt_hold
>4387	1c 16					.word i_exit
.4389					w_x23s:
>4389	02					.byte $02
>438a	23 73					.text '#s'
>438c						.fill 14
>439a	4d 43					.word w_x23
.439c					xt_x23s:
.439c	4c 24 16	jmp $1624		jmp i_enter
.439f					l_279:
>439f	60 43					.word xt_x23
>43a1	c4 2f					.word xt_over
>43a3	c4 2f					.word xt_over
>43a5	f8 35					.word xt_or
>43a7	89 36					.word xt_0x3d
>43a9	8d 37					.word xt_x28branch0x29
>43ab	9f 43					.word l_279
.43ad					l_280:
>43ad	1c 16					.word i_exit
.43af					w_sign:
>43af	04					.byte $04
>43b0	73 69 67 6e				.text 'sign'
>43b4						.fill 12
>43c0	89 43					.word w_x23s
.43c2					xt_sign:
.43c2	4c 24 16	jmp $1624		jmp i_enter
>43c5	9a 3c					.word xt_rot
>43c7	62 36					.word xt_0x3c
>43c9	8d 37					.word xt_x28branch0x29
>43cb	d3 43					.word l_281
>43cd	49 19					.word xt_x28literalx29
>43cf	2d 00					.word 45
>43d1	3c 43					.word xt_hold
.43d3					l_281:
>43d3	1c 16					.word i_exit
.43d5					w_x23x3e:
>43d5	02					.byte $02
>43d6	23 3e					.text '#>'
>43d8						.fill 14
>43e6	af 43					.word w_sign
.43e8					xt_x23x3e:
.43e8	4c 24 16	jmp $1624		jmp i_enter
>43eb	d6 3c					.word xt_2drop
>43ed	4a 3c					.word xt_hld
>43ef	ad 30					.word xt_x40
>43f1	c4 3a					.word xt_pad
>43f3	c4 2f					.word xt_over
>43f5	70 33					.word xt_x2d
>43f7	1c 16					.word i_exit
.43f9					w_dx2er:
>43f9	03					.byte $03
>43fa	64 2e 72				.text 'd.r'
>43fd						.fill 13
>440a	d5 43					.word w_x23x3e
.440c					xt_dx2er:
.440c	4c 24 16	jmp $1624		jmp i_enter
>440f	0e 30					.word xt_x3er
>4411	c4 2f					.word xt_over
>4413	60 2f					.word xt_swap
>4415	8a 3d					.word xt_dabs
>4417	1e 43					.word xt_x3cx23
>4419	9c 43					.word xt_x23s
>441b	c2 43					.word xt_sign
>441d	e8 43					.word xt_x23x3e
>441f	2c 30					.word xt_rx3e
>4421	c4 2f					.word xt_over
>4423	70 33					.word xt_x2d
>4425	2e 40					.word xt_spaces
>4427	a6 3f					.word xt_type
>4429	1c 16					.word i_exit
.442b					w_dx2e:
>442b	02					.byte $02
>442c	64 2e					.text 'd.'
>442e						.fill 14
>443c	f9 43					.word w_dx2er
.443e					xt_dx2e:
.443e	4c 24 16	jmp $1624		jmp i_enter
>4441	b5 18					.word xt_0
>4443	0c 44					.word xt_dx2er
>4445	1c 16					.word i_exit
.4447					w_x2er:
>4447	02					.byte $02
>4448	2e 72					.text '.r'
>444a						.fill 14
>4458	2b 44					.word w_dx2e
.445a					xt_x2er:
.445a	4c 24 16	jmp $1624		jmp i_enter
>445d	0e 30					.word xt_x3er
>445f	25 35					.word xt_sx3ed
>4461	2c 30					.word xt_rx3e
>4463	0c 44					.word xt_dx2er
>4465	1c 16					.word i_exit
.4467					w_x3f:
>4467	01					.byte $01
>4468	3f					.text '?'
>4469						.fill 15
>4478	47 44					.word w_x2er
.447a					xt_x3f:
.447a	4c 24 16	jmp $1624		jmp i_enter
>447d	ad 30					.word xt_x40
>447f	22 42					.word xt_x2e
>4481	1c 16					.word i_exit
.4483					w_dump:
>4483	04					.byte $04
>4484	64 75 6d 70				.text 'dump'
>4488						.fill 12
>4494	67 44					.word w_x3f
.4496					xt_dump:
.4496	4c 24 16	jmp $1624		jmp i_enter
>4499	b5 18					.word xt_0
>449b	ca 37					.word xt_x28dox29
.449d					l_282:
>449d	98 18					.word xt_cr
>449f	40 2f					.word xt_dup
>44a1	b5 18					.word xt_0
>44a3	60 2f					.word xt_swap
>44a5	49 19					.word xt_x28literalx29
>44a7	05 00					.word 5
>44a9	0c 44					.word xt_dx2er
>44ab	49 19					.word xt_x28literalx29
>44ad	3a 00					.word 58
>44af	29 18					.word xt_emit
>44b1	49 19					.word xt_x28literalx29
>44b3	08 00					.word 8
>44b5	b5 18					.word xt_0
>44b7	ca 37					.word xt_x28dox29
.44b9					l_284:
>44b9	40 2f					.word xt_dup
>44bb	ad 30					.word xt_x40
>44bd	b5 18					.word xt_0
>44bf	60 2f					.word xt_swap
>44c1	49 19					.word xt_x28literalx29
>44c3	05 00					.word 5
>44c5	0c 44					.word xt_dx2er
>44c7	70 35					.word xt_2x2b
>44c9	47 38					.word xt_x28loopx29
>44cb	b9 44					.word l_284
.44cd					l_285:
>44cd	49 19					.word xt_x28literalx29
>44cf	08 00					.word 8
>44d1	a8 38					.word xt_x28x2bloopx29
>44d3	9d 44					.word l_282
.44d5					l_283:
>44d5	28 2f					.word xt_drop
>44d7	1c 16					.word i_exit
.44d9					w_interpret:
>44d9	09					.byte $09
>44da	69 6e 74 65 72 70 72 65			.text 'interpret'
>44e2	74
>44e3						.fill 7
>44ea	83 44					.word w_dump
.44ec					xt_interpret:
.44ec	4c 24 16	jmp $1624		jmp i_enter
.44ef					l_295:
>44ef	ea 3b					.word xt_tib
>44f1	ad 30					.word xt_x40
>44f3	d2 3b					.word xt_x3ein
>44f5	ad 30					.word xt_x40
>44f7	e5 32					.word xt_x2b
>44f9	f3 30					.word xt_cx40
>44fb	8d 37					.word xt_x28branch0x29
>44fd	3d 45					.word l_296
>44ff	8c 41					.word xt_x2dfind
>4501	8d 37					.word xt_x28branch0x29
>4503	1f 45					.word l_297
>4505	72 3b					.word xt_state
>4507	ad 30					.word xt_x40
>4509	f2 3c					.word xt_x3c
>450b	8d 37					.word xt_x28branch0x29
>450d	17 45					.word l_298
>450f	76 3e					.word xt_cfa
>4511	08 3f					.word xt_x2c
>4513	69 37					.word xt_x28branchx29
>4515	1b 45					.word l_299
.4517					l_298:
>4517	76 3e					.word xt_cfa
>4519	89 39					.word xt_execute
.451b					l_299:
>451b	69 37					.word xt_x28branchx29
>451d	39 45					.word l_300
.451f					l_297:
>451f	d0 3e					.word xt_here
>4521	a4 42					.word xt_number
>4523	60 2f					.word xt_swap
>4525	28 2f					.word xt_drop
>4527	72 3b					.word xt_state
>4529	ad 30					.word xt_x40
>452b	8d 37					.word xt_x28branch0x29
>452d	39 45					.word l_301
>452f	49 19					.word xt_x28literalx29
>4531	49 19					.word xt_x28literalx29
>4533	08 3f					.word xt_x2c
>4535	08 3f					.word xt_x2c
>4537	05 17					.word xt_halt
.4539					l_301:
.4539					l_300:
>4539	69 37					.word xt_x28branchx29
>453b	ef 44					.word l_295
.453d					l_296:
>453d	1c 16					.word i_exit
.453f					w_catch:
>453f	05					.byte $05
>4540	63 61 74 63 68				.text 'catch'
>4545						.fill 11
>4550	d9 44					.word w_interpret
.4552					xt_catch:
.4552	4c 24 16	jmp $1624		jmp i_enter
>4555	f1 17					.word xt_spx40
>4557	0e 30					.word xt_x3er
>4559	62 3c					.word xt_handler
>455b	ad 30					.word xt_x40
>455d	0e 30					.word xt_x3er
>455f	aa 17					.word xt_rpx40
>4561	62 3c					.word xt_handler
>4563	81 30					.word xt_x21
>4565	89 39					.word xt_execute
>4567	2c 30					.word xt_rx3e
>4569	62 3c					.word xt_handler
>456b	81 30					.word xt_x21
>456d	2c 30					.word xt_rx3e
>456f	28 2f					.word xt_drop
>4571	b5 18					.word xt_0
>4573	1c 16					.word i_exit
.4575					w_throw:
>4575	05					.byte $05
>4576	74 68 72 6f 77				.text 'throw'
>457b						.fill 11
>4586	3f 45					.word w_catch
.4588					xt_throw:
.4588	4c 24 16	jmp $1624		jmp i_enter
>458b	7a 3c					.word xt_x3fdup
>458d	8d 37					.word xt_x28branch0x29
>458f	a9 45					.word l_286
>4591	62 3c					.word xt_handler
>4593	ad 30					.word xt_x40
>4595	d1 17					.word xt_rpx21
>4597	2c 30					.word xt_rx3e
>4599	62 3c					.word xt_handler
>459b	81 30					.word xt_x21
>459d	2c 30					.word xt_rx3e
>459f	60 2f					.word xt_swap
>45a1	0e 30					.word xt_x3er
>45a3	10 18					.word xt_spx21
>45a5	28 2f					.word xt_drop
>45a7	2c 30					.word xt_rx3e
.45a9					l_286:
>45a9	1c 16					.word i_exit
.45ab					w_quit:
>45ab	04					.byte $04
>45ac	71 75 69 74				.text 'quit'
>45b0						.fill 12
>45bc	75 45					.word w_throw
.45be					xt_quit:
.45be	4c 24 16	jmp $1624		jmp i_enter
>45c1	db 39					.word xt_forth
>45c3	48 3f					.word xt_definitions
>45c5	b5 18					.word xt_0
>45c7	72 3b					.word xt_state
>45c9	81 30					.word xt_x21
.45cb					l_287:
>45cb	98 18					.word xt_cr
>45cd	72 3b					.word xt_state
>45cf	ad 30					.word xt_x40
>45d1	89 36					.word xt_0x3d
>45d3	8d 37					.word xt_x28branch0x29
>45d5	e3 45					.word l_289
>45d7	98 18					.word xt_cr
>45d9	49 19					.word xt_x28literalx29
>45db	3e 00					.word 62
>45dd	29 18					.word xt_emit
>45df	12 3b					.word xt_bl
>45e1	29 18					.word xt_emit
.45e3					l_289:
>45e3	dc 40					.word xt_query
>45e5	98 18					.word xt_cr
>45e7	ec 44					.word xt_interpret
>45e9	69 37					.word xt_x28branchx29
>45eb	cb 45					.word l_287
.45ed					l_288:
>45ed	1c 16					.word i_exit
.45ef					w_error:
>45ef	05					.byte $05
>45f0	65 72 72 6f 72				.text 'error'
>45f5						.fill 11
>4600	ab 45					.word w_quit
.4602					xt_error:
.4602	4c 24 16	jmp $1624		jmp i_enter
>4605	40 2f					.word xt_dup
>4607	89 36					.word xt_0x3d
>4609	40 36					.word xt_not
>460b	8d 37					.word xt_x28branch0x29
>460d	20 46					.word l_290
>460f	d0 3e					.word xt_here
>4611	86 3f					.word xt_count
>4613	a6 3f					.word xt_type
>4615	e8 3f					.word xt_x28x2ex22x29
>4617	06 3f 20 4d 53 47 23			.ptext "? MSG#"
>461e	22 42					.word xt_x2e
.4620					l_290:
>4620	be 45					.word xt_quit
>4622	1c 16					.word i_exit
.4624					w_initrandom:
>4624	0a					.byte $0A
>4625	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>462d	6f 6d
>462f						.fill 6
>4635	ef 45					.word w_error
.4637					xt_initrandom:
.4637	4c 24 16	jmp $1624		jmp i_enter
>463a	d1 18					.word xt_1
>463c	49 19					.word xt_x28literalx29
>463e	a6 d6					.word 54950
>4640	d5 30					.word xt_cx21
>4642	1c 16					.word i_exit
.4644					w_random:
>4644	06					.byte $06
>4645	72 61 6e 64 6f 6d			.text 'random'
>464b						.fill 10
>4655	24 46					.word w_initrandom
.4657					xt_random:
.4657	4c 24 16	jmp $1624		jmp i_enter
>465a	49 19					.word xt_x28literalx29
>465c	a4 d6					.word 54948
>465e	ad 30					.word xt_x40
>4660	1c 16					.word i_exit
.4662					w_iox2dpage:
>4662	07					.byte $07
>4663	69 6f 2d 70 61 67 65			.text 'io-page'
>466a						.fill 9
>4673	44 46					.word w_random
.4675					xt_iox2dpage:
.4675	4c 06 37	jmp $3706		jmp xt_x28constantx29
>4678	01 00					.word 0001
.467a					w_setx2diox2dtext:
>467a	0b					.byte $0B
>467b	73 65 74 2d 69 6f 2d 74			.text 'set-io-text'
>4683	65 78 74
>4686						.fill 5
>468b	62 46					.word w_iox2dpage
.468d					xt_setx2diox2dtext:
.468d	4c 24 16	jmp $1624		jmp i_enter
>4690	ef 18					.word xt_2
>4692	75 46					.word xt_iox2dpage
>4694	d5 30					.word xt_cx21
>4696	1c 16					.word i_exit
.4698					w_setx2diox2dcolor:
>4698	0c					.byte $0C
>4699	73 65 74 2d 69 6f 2d 63			.text 'set-io-color'
>46a1	6f 6c 6f 72
>46a5						.fill 4
>46a9	7a 46					.word w_setx2diox2dtext
.46ab					xt_setx2diox2dcolor:
.46ab	4c 24 16	jmp $1624		jmp i_enter
>46ae	49 19					.word xt_x28literalx29
>46b0	03 00					.word 3
>46b2	75 46					.word xt_iox2dpage
>46b4	d5 30					.word xt_cx21
>46b6	1c 16					.word i_exit
.46b8					w_defx2dtextx2dfgx2dcolor:
>46b8	10					.byte $10
>46b9	64 65 66 2d 74 65 78 74			.text 'def-text-fg-colo'
>46c1	2d 66 67 2d 63 6f 6c 6f
>46c9						.fill 0
>46c9	98 46					.word w_setx2diox2dcolor
.46cb					xt_defx2dtextx2dfgx2dcolor:
.46cb	4c 24 16	jmp $1624		jmp i_enter
>46ce	49 19					.word xt_x28literalx29
>46d0	0f 00					.word 15
>46d2	d4 35					.word xt_and
>46d4	75 46					.word xt_iox2dpage
>46d6	f3 30					.word xt_cx40
>46d8	0e 30					.word xt_x3er
>46da	b5 18					.word xt_0
>46dc	75 46					.word xt_iox2dpage
>46de	d5 30					.word xt_cx21
>46e0	49 19					.word xt_x28literalx29
>46e2	04 00					.word 4
>46e4	cd 33					.word xt_x2a
>46e6	49 19					.word xt_x28literalx29
>46e8	00 d8					.word 55296
>46ea	e5 32					.word xt_x2b
>46ec	40 2f					.word xt_dup
>46ee	49 19					.word xt_x28literalx29
>46f0	03 00					.word 3
>46f2	e5 32					.word xt_x2b
>46f4	60 2f					.word xt_swap
>46f6	ca 37					.word xt_x28dox29
.46f8					l_302:
>46f8	1c 39					.word xt_i
>46fa	d5 30					.word xt_cx21
>46fc	47 38					.word xt_x28loopx29
>46fe	f8 46					.word l_302
.4700					l_303:
>4700	2c 30					.word xt_rx3e
>4702	75 46					.word xt_iox2dpage
>4704	d5 30					.word xt_cx21
>4706	1c 16					.word i_exit
.4708					w_defx2dtextx2dbgx2dcolor:
>4708	10					.byte $10
>4709	64 65 66 2d 74 65 78 74			.text 'def-text-bg-colo'
>4711	2d 62 67 2d 63 6f 6c 6f
>4719						.fill 0
>4719	b8 46					.word w_defx2dtextx2dfgx2dcolor
.471b					xt_defx2dtextx2dbgx2dcolor:
.471b	4c 24 16	jmp $1624		jmp i_enter
>471e	49 19					.word xt_x28literalx29
>4720	0f 00					.word 15
>4722	d4 35					.word xt_and
>4724	75 46					.word xt_iox2dpage
>4726	f3 30					.word xt_cx40
>4728	0e 30					.word xt_x3er
>472a	b5 18					.word xt_0
>472c	75 46					.word xt_iox2dpage
>472e	d5 30					.word xt_cx21
>4730	49 19					.word xt_x28literalx29
>4732	04 00					.word 4
>4734	cd 33					.word xt_x2a
>4736	49 19					.word xt_x28literalx29
>4738	40 d8					.word 55360
>473a	e5 32					.word xt_x2b
>473c	40 2f					.word xt_dup
>473e	49 19					.word xt_x28literalx29
>4740	03 00					.word 3
>4742	e5 32					.word xt_x2b
>4744	60 2f					.word xt_swap
>4746	ca 37					.word xt_x28dox29
.4748					l_304:
>4748	1c 39					.word xt_i
>474a	d5 30					.word xt_cx21
>474c	47 38					.word xt_x28loopx29
>474e	48 47					.word l_304
.4750					l_305:
>4750	2c 30					.word xt_rx3e
>4752	75 46					.word xt_iox2dpage
>4754	d5 30					.word xt_cx21
>4756	1c 16					.word i_exit
.4758					w_setx2dborderx2dcolor:
>4758	10					.byte $10
>4759	73 65 74 2d 62 6f 72 64			.text 'set-border-color'
>4761	65 72 2d 63 6f 6c 6f 72
>4769						.fill 0
>4769	08 47					.word w_defx2dtextx2dbgx2dcolor
.476b					xt_setx2dborderx2dcolor:
.476b	4c 24 16	jmp $1624		jmp i_enter
>476e	75 46					.word xt_iox2dpage
>4770	f3 30					.word xt_cx40
>4772	0e 30					.word xt_x3er
>4774	b5 18					.word xt_0
>4776	75 46					.word xt_iox2dpage
>4778	d5 30					.word xt_cx21
>477a	49 19					.word xt_x28literalx29
>477c	05 d0					.word 53253
>477e	d5 30					.word xt_cx21
>4780	49 19					.word xt_x28literalx29
>4782	06 d0					.word 53254
>4784	d5 30					.word xt_cx21
>4786	49 19					.word xt_x28literalx29
>4788	07 d0					.word 53255
>478a	d5 30					.word xt_cx21
>478c	2c 30					.word xt_rx3e
>478e	75 46					.word xt_iox2dpage
>4790	d5 30					.word xt_cx21
>4792	1c 16					.word i_exit
.4794					w_setx2dborderx2dsize:
>4794	0f					.byte $0F
>4795	73 65 74 2d 62 6f 72 64			.text 'set-border-size'
>479d	65 72 2d 73 69 7a 65
>47a4						.fill 1
>47a5	58 47					.word w_setx2dborderx2dcolor
.47a7					xt_setx2dborderx2dsize:
.47a7	4c 24 16	jmp $1624		jmp i_enter
>47aa	75 46					.word xt_iox2dpage
>47ac	f3 30					.word xt_cx40
>47ae	0e 30					.word xt_x3er
>47b0	b5 18					.word xt_0
>47b2	75 46					.word xt_iox2dpage
>47b4	d5 30					.word xt_cx21
>47b6	c4 2f					.word xt_over
>47b8	c4 2f					.word xt_over
>47ba	f8 35					.word xt_or
>47bc	8d 37					.word xt_x28branch0x29
>47be	ee 47					.word l_306
>47c0	49 19					.word xt_x28literalx29
>47c2	1f 00					.word 31
>47c4	d4 35					.word xt_and
>47c6	49 19					.word xt_x28literalx29
>47c8	09 d0					.word 53257
>47ca	d5 30					.word xt_cx21
>47cc	49 19					.word xt_x28literalx29
>47ce	1f 00					.word 31
>47d0	d4 35					.word xt_and
>47d2	49 19					.word xt_x28literalx29
>47d4	08 d0					.word 53256
>47d6	d5 30					.word xt_cx21
>47d8	49 19					.word xt_x28literalx29
>47da	04 d0					.word 53252
>47dc	f3 30					.word xt_cx40
>47de	49 19					.word xt_x28literalx29
>47e0	01 00					.word 1
>47e2	f8 35					.word xt_or
>47e4	49 19					.word xt_x28literalx29
>47e6	04 d0					.word 53252
>47e8	d5 30					.word xt_cx21
>47ea	69 37					.word xt_x28branchx29
>47ec	02 48					.word l_307
.47ee					l_306:
>47ee	49 19					.word xt_x28literalx29
>47f0	04 d0					.word 53252
>47f2	f3 30					.word xt_cx40
>47f4	49 19					.word xt_x28literalx29
>47f6	fe 00					.word 254
>47f8	d4 35					.word xt_and
>47fa	49 19					.word xt_x28literalx29
>47fc	04 d0					.word 53252
>47fe	d5 30					.word xt_cx21
>4800	d6 3c					.word xt_2drop
.4802					l_307:
>4802	2c 30					.word xt_rx3e
>4804	75 46					.word xt_iox2dpage
>4806	d5 30					.word xt_cx21
>4808	1c 16					.word i_exit
.480a					w_maze:
>480a	04					.byte $04
>480b	6d 61 7a 65				.text 'maze'
>480f						.fill 12
>481b	94 47					.word w_setx2dborderx2dsize
.481d					xt_maze:
.481d	4c 24 16	jmp $1624		jmp i_enter
>4820	37 46					.word xt_initrandom
.4822					l_308:
>4822	57 46					.word xt_random
>4824	d1 18					.word xt_1
>4826	d4 35					.word xt_and
>4828	49 19					.word xt_x28literalx29
>482a	cd 00					.word 205
>482c	e5 32					.word xt_x2b
>482e	29 18					.word xt_emit
>4830	69 37					.word xt_x28branchx29
>4832	22 48					.word l_308
.4834					l_309:
>4834	1c 16					.word i_exit
.4836					w_cold:
>4836	04					.byte $04
>4837	63 6f 6c 64				.text 'cold'
>483b						.fill 12
>4847	0a 48					.word w_maze
.4849					xt_cold:
.4849	4c 24 16	jmp $1624		jmp i_enter
>484c	db 39					.word xt_forth
>484e	48 3f					.word xt_definitions
>4850	2a 3b					.word xt_s0
>4852	ad 30					.word xt_x40
>4854	10 18					.word xt_spx21
>4856	42 3b					.word xt_r0
>4858	ad 30					.word xt_x40
>485a	d1 17					.word xt_rpx21
>485c	b5 18					.word xt_0
>485e	1a 3c					.word xt_blk
>4860	81 30					.word xt_x21
>4862	49 19					.word xt_x28literalx29
>4864	00 50					.word 20480
>4866	ba 3b					.word xt_dp
>4868	81 30					.word xt_x21
>486a	49 19					.word xt_x28literalx29
>486c	00 bf					.word 48896
>486e	ea 3b					.word xt_tib
>4870	81 30					.word xt_x21
>4872	c2 41					.word xt_decimal
>4874	e8 3f					.word xt_x28x2ex22x29
>4876	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>487e	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>488e	30 2e 30 30 2e 30 30
>4895	98 18					.word xt_cr
>4897	49 19					.word xt_x28literalx29
>4899	ff 00					.word 255
>489b	49 19					.word xt_x28literalx29
>489d	ff 00					.word 255
>489f	b5 18					.word xt_0
>48a1	49 19					.word xt_x28literalx29
>48a3	0f 00					.word 15
>48a5	cb 46					.word xt_defx2dtextx2dfgx2dcolor
>48a7	49 19					.word xt_x28literalx29
>48a9	80 00					.word 128
>48ab	49 19					.word xt_x28literalx29
>48ad	80 00					.word 128
>48af	b5 18					.word xt_0
>48b1	6b 47					.word xt_setx2dborderx2dcolor
>48b3	49 19					.word xt_x28literalx29
>48b5	0a 00					.word 10
>48b7	49 19					.word xt_x28literalx29
>48b9	0a 00					.word 10
>48bb	a7 47					.word xt_setx2dborderx2dsize
>48bd	be 45					.word xt_quit
>48bf	1c 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.48c1					endcode:

;******  Return to file: forth.asm


;******  End of listing
