
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Jan 11 14:03:58 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000						pstack = $0000          ; Location of the "bottom" of the parameter stack
=$1000						USERAREA = $1000        ; Area for user variables
=9						CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa		cc 0a				vnmi:       .word <>h_nmi
>fffc		00 b0				vreset:     .word <>boot
>fffe		cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000						MMU_MEM_CTRL = $0000
=$0001						MMU_IO_CTRL = $0001
=$00						MMU_IO_PAGE_0 = $00
=$01						MMU_IO_PAGE_1 = $01
=$02						MMU_IO_PAGE_TEXT = $02
=$03						MMU_IO_PAGE_COLOR = $03
=$d000						VKY_MST_CTRL_0 = $d000
=$01						VKY_MST_TEXT = $01
=$02						VKY_MST_OVLY = $02
=$04						VKY_MST_GRAPHICS = $04
=$08						VKY_MST_BITMAP = $08
=$10						VKY_MST_TILE = $10
=$20						VKY_MST_SPRITE = $20
=$40						VKY_MST_GAMMA = $40
=$d001						VKY_MST_CTRL_1 = $d001
=$01						VKY_MST_RES_400 = $01
=$02						VKY_MST_DBL_X = $02
=$04						VKY_MST_DBL_Y = $04
=$08						VKY_MST_SLEEP = $08
=$10						VKY_MST_OVLY_TRANS = $10
=$d004						VKY_BRD_CTRL = $d004
=$d005						VKY_BRD_BLUE = $d005
=$d006						VKY_BRD_GREEN = $d006
=$d007						VKY_BRD_RED = $d007
=$d008						VKY_BRD_SIZE_X = $d008
=$d009						VKY_BRD_SIZE_Y = $d009
=$d010						VKY_CURS_CTRL = $d010
=$01						VKY_CURS_ENABLE = $01
=$08						VKY_CURS_FLASH_1S = $08
=$0a						VKY_CURS_FLASH_0_5S = $0a
=$0c						VKY_CURS_FLASH_0_25S = $0c
=$0d						VKY_CURS_FLASH_0_125S = $0d
=$d012						VKY_CURS_CHAR = $d012
=$d014						VKY_CURS_X = $d014
=$d016						VKY_CURS_Y = $d016
=$c000						VKY_TEXT_MATRIX = $c000
=$d800						VKY_TEXT_FG_LUT = $d800
=$d840						VKY_TEXT_BG_LUT = $d840
=$c000						VKY_TEXT_FONT = $c000
=$d66c						INT_MASK_0 = $D66C
=$d660						INT_PEND_0 = $D660
=$d66d						INT_MASK_1 = $D66D
=$d661						INT_PEND_1 = $D661
=$04						INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8						CHAR_BS = 8                         ; Backspace
=12						CHAR_FF = 12                        ; Form feed character
=13						CHAR_NL = 13                        ; Newline character
>0020						shell_start .word ?                 ; Address for the recognized shell program
>0022						cur_line    .word ?                 ; Address of the current line on the text screen
>0024						src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026						dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200						curs_color  .byte ?                 ; Current color for printing
>0201						curs_x      .byte ?                 ; Current column for the text cursor
>0202						curs_y      .byte ?                 ; Current row for the text cursor
>0203						old_y       .byte ?                 ; Previous cursor row
>0204						curs_width  .byte ?                 ; Width of the screen in text columns
>0205						curs_height .byte ?                 ; Height of the screen in text columns
.b000		4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003		4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006		4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009		4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c		4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f		4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012		4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015		4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018		4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800		a9 e9		lda #$e9	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802		a0 15		ldy #$15	            ldy #>start
.0804		20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807		4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a						isetshell:
.080a		84 21		sty $21		            sty shell_start+1
.080c		85 20		sta $20		            sta shell_start
.080e		60		rts		            rts
.080f						iwarm:
.080f		78		sei		            sei                     ; Disable IRQs
.0810		d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811		a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813		9a		txs		            txs
.0814		a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816		85 01		sta $01		            sta MMU_IO_CTRL
.0818		20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b		20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e		20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821		6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824						inittext:
.0824		a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826		8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829		9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c		a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e		8d 04 02	sta $0204	            sta curs_width
.0831		a9 3c		lda #$3c	            lda #60
.0833		8d 05 02	sta $0205	            sta curs_height
.0836		a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838		8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b		a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d		8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840		a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842		8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845		a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847		8d 00 02	sta $0200	            sta curs_color
.084a		a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c		8d 03 02	sta $0203	            sta old_y
.084f		20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852		20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855		20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858		60		rts		            rts
.0859						initint:
.0859		a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b		8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e		a9 ff		lda #$ff	            lda #$ff
.0860		8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863		8d 60 d6	sta $d660	            sta INT_PEND_0
.0866		8d 61 d6	sta $d661	            sta INT_PEND_1
.0869		58		cli		            cli
.086a		60		rts		            rts
=$7f						CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b						initfont:
.086b		48		pha		            pha
.086c		da		phx		            phx
.086d		5a		phy		            phy
.086e		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870		48		pha		            pha
.0871		a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873		85 01		sta $01		            sta MMU_IO_CTRL
.0875		a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877		85 24		sta $24		            sta src_ptr
.0879		a9 0a		lda #$0a	            lda #>bios_font
.087b		85 25		sta $25		            sta src_ptr+1
.087d		a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f		85 26		sta $26		            sta dst_ptr
.0881		a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883		85 27		sta $27		            sta dst_ptr+1
.0885		a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887		a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889		b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b		91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d		c8		iny		            iny                     ; Move to the next byte
.088e		d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890		e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892		e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894		ca		dex		            dex                     ; Count down the pages moved
.0895		d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897		68		pla		            pla
.0898		85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a		7a		ply		            ply
.089b		fa		plx		            plx
.089c		68		pla		            pla
.089d		60		rts		            rts
=$f4						DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e						initlut:
.089e		48		pha		            pha
.089f		5a		phy		            phy
.08a0		a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2		48		pha		            pha
.08a3		a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5		85 01		sta $01		            sta MMU_IO_CTRL
.08a7		a0 00		ldy #$00	            ldy #0
.08a9		b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac		99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af		99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2		c8		iny		            iny
.08b3		c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5		d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7		68		pla		            pla
.08b8		85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba		7a		ply		            ply
.08bb		68		pla		            pla
.08bc		60		rts		            rts
>08bd		00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1		00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5		00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9		00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd		80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1		80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5		80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9		8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd		80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1		00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5		00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9		00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed		ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1		ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5		ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9		ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd						consclr:
.08fd		48		pha		            pha
.08fe		da		phx		            phx
.08ff		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901		85 22		sta $22		            sta cur_line
.0903		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905		85 23		sta $23		            sta cur_line+1
.0907		a0 00		ldy #$00	            ldy #0
.0909		20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c		c8		iny		            iny                     ; Move to the next line
.090d		cc 05 02	cpy $0205	            cpy curs_height
.0910		f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912		18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913		a5 22		lda $22		            lda cur_line
.0915		6d 04 02	adc $0204	            adc curs_width
.0918		85 22		sta $22		            sta cur_line
.091a		a5 23		lda $23		            lda cur_line+1
.091c		69 00		adc #$00	            adc #0
.091e		85 23		sta $23		            sta cur_line+1
.0920		80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922		9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925		9c 02 02	stz $0202	            stz curs_y
.0928		20 2e 09	jsr $092e	            jsr cursset
.092b		fa		plx		            plx
.092c		68		pla		            pla
.092d		60		rts		            rts
.092e						cursset:
.092e		48		pha		            pha
.092f		5a		phy		            phy
.0930		ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933		cd 04 02	cmp $0204	            cmp curs_width
.0936		90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938		9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b		ee 02 02	inc $0202	            inc curs_y
.093e						chk_row:
.093e		ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941		cd 05 02	cmp $0205	            cmp curs_height
.0944		90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946		ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949		3a		dec a		            dec a
.094a		8d 02 02	sta $0202	            sta curs_y
.094d		20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950		ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953		8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956		9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959		ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c		8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f		9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962		ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965		cd 02 02	cmp $0202	            cmp curs_y
.0968		f0 21		beq $098b	            beq done                ; Yes: we are done
.096a		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c		85 22		sta $22		            sta cur_line
.096e		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970		85 23		sta $23		            sta cur_line+1
.0972		ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975		8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978		f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a		18		clc		loop:       clc                     ; Move cur_line to the next line
.097b		a5 22		lda $22		            lda cur_line
.097d		6d 04 02	adc $0204	            adc curs_width
.0980		85 22		sta $22		            sta cur_line
.0982		a5 23		lda $23		            lda cur_line+1
.0984		69 00		adc #$00	            adc #0
.0986		85 23		sta $23		            sta cur_line+1
.0988		88		dey		            dey                     ; Decrement line counter
.0989		d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b		7a		ply		done:       ply
.098c		68		pla		            pla
.098d		60		rts		            rts
.098e						consscroll:
.098e		48		pha		            pha
.098f		da		phx		            phx
.0990		a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992		48		pha		            pha
.0993		a5 22		lda $22		            lda cur_line
.0995		48		pha		            pha
.0996		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998		48		pha		            pha
.0999		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b		85 26		sta $26		            sta dst_ptr
.099d		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f		85 27		sta $27		            sta dst_ptr+1
.09a1		18		clc		            clc                     ; src_ptr is the second line
.09a2		a5 26		lda $26		            lda dst_ptr
.09a4		6d 04 02	adc $0204	            adc curs_width
.09a7		85 24		sta $24		            sta src_ptr
.09a9		a5 27		lda $27		            lda dst_ptr+1
.09ab		69 00		adc #$00	            adc #0
.09ad		85 25		sta $25		            sta src_ptr+1
.09af		a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1		a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3		85 01		sta $01		            sta MMU_IO_CTRL
.09b5		a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7		b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9		91 26		sta ($26),y	            sta (dst_ptr),y
.09bb		c8		iny		            iny
.09bc		cc 04 02	cpy $0204	            cpy curs_width
.09bf		d0 f6		bne $09b7	            bne loop1
.09c1		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3		85 01		sta $01		            sta MMU_IO_CTRL
.09c5		a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7		b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9		91 26		sta ($26),y	            sta (dst_ptr),y
.09cb		c8		iny		            iny
.09cc		cc 04 02	cpy $0204	            cpy curs_width
.09cf		d0 f6		bne $09c7	            bne loop2
.09d1		a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3		85 26		sta $26		            sta dst_ptr
.09d5		a5 25		lda $25		            lda src_ptr+1
.09d7		85 27		sta $27		            sta dst_ptr+1
.09d9		18		clc		            clc                     ; Move src_ptr to the next line
.09da		a5 24		lda $24		            lda src_ptr
.09dc		6d 04 02	adc $0204	            adc curs_width
.09df		85 24		sta $24		            sta src_ptr
.09e1		a5 25		lda $25		            lda src_ptr+1
.09e3		69 00		adc #$00	            adc #0
.09e5		85 25		sta $25		            sta src_ptr+1
.09e7		e8		inx		            inx                     ; Move src line number to the next row
.09e8		ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb		d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed		a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef		85 22		sta $22		            sta cur_line
.09f1		a5 27		lda $27		            lda dst_ptr+1
.09f3		85 22		sta $22		            sta cur_line
.09f5		20 04 0a	jsr $0a04	            jsr clrline
.09f8		68		pla		            pla                     ; Restore the original I/O page
.09f9		85 01		sta $01		            sta MMU_IO_CTRL
.09fb		68		pla		            pla                     ; Restore the current line
.09fc		85 22		sta $22		            sta cur_line
.09fe		68		pla		            pla
.09ff		85 23		sta $23		            sta cur_line+1
.0a01		fa		plx		            plx
.0a02		68		pla		            pla
.0a03		60		rts		            rts
.0a04						clrline:
.0a04		48		pha		            pha
.0a05		5a		phy		            phy
.0a06		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08		48		pha		            pha
.0a09		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b		85 01		sta $01		            sta MMU_IO_CTRL
.0a0d		a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f		a9 20		lda #$20	            lda #' '
.0a11		91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13		c8		iny		            iny
.0a14		cc 04 02	cpy $0204	            cpy curs_width
.0a17		d0 f8		bne $0a11	            bne loop1
.0a19		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b		85 01		sta $01		            sta MMU_IO_CTRL
.0a1d		a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f		ad 00 02	lda $0200	            lda curs_color
.0a22		91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24		c8		iny		            iny
.0a25		cc 04 02	cpy $0204	            cpy curs_width
.0a28		d0 f8		bne $0a22	            bne loop2
.0a2a		68		pla		            pla                     ; Restore the original I/O page
.0a2b		85 01		sta $01		            sta MMU_IO_CTRL
.0a2d		7a		ply		            ply
.0a2e		68		pla		            pla
.0a2f		60		rts		            rts
.0a30						iconout:
.0a30		5a		phy		            phy
.0a31		c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33		d0 0b		bne $0a40	            bne not_cr
.0a35		9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38		ee 02 02	inc $0202	            inc curs_y
.0a3b		20 2e 09	jsr $092e	            jsr cursset
.0a3e		80 44		bra $0a84	            bra done
.0a40		c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42		d0 05		bne $0a49	            bne not_ff
.0a44		20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47		80 3b		bra $0a84	            bra done
.0a49		c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b		d0 15		bne $0a62	            bne not_bs
.0a4d		ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50		f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52		3a		dec a		            dec a                   ; No: move it back one
.0a53		8d 01 02	sta $0201	            sta curs_x
.0a56		20 2e 09	jsr $092e	            jsr cursset
.0a59						bs_leftmost:
.0a59		a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60		80 22		bra $0a84	            bra done
.0a62		85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66		48		pha		            pha
.0a67		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69		85 01		sta $01		            sta MMU_IO_CTRL
.0a6b		a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74		85 01		sta $01		            sta MMU_IO_CTRL
.0a76		ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79		91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b		68		pla		            pla                     ; Restore the I/O page
.0a7c		85 01		sta $01		            sta MMU_IO_CTRL
.0a7e		ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81		20 2e 09	jsr $092e	            jsr cursset
.0a84		7a		ply		done:       ply
.0a85		60		rts		            rts
.0a86						iprintah:
.0a86		da		phx		            phx
.0a87		48		pha		            pha
.0a88		4a		lsr a		            lsr a
.0a89		4a		lsr a		            lsr a
.0a8a		4a		lsr a		            lsr a
.0a8b		4a		lsr a		            lsr a
.0a8c		29 0f		and #$0f	            and #$0f
.0a8e		aa		tax		            tax                     ; Convert it to an index
.0a8f		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95		68		pla		            pla
.0a96		29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98		aa		tax		            tax                     ; Convert it to an index
.0a99		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f		fa		plx		            plx
.0aa0		60		rts		            rts
.0aa1						iprintyah:
.0aa1		48		pha		            pha
.0aa2		98		tya		            tya
.0aa3		20 12 b0	jsr $b012	            jsr printah
.0aa6		68		pla		            pla
.0aa7		20 12 b0	jsr $b012	            jsr printah
.0aaa		60		rts		            rts
>0aab		30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3		38 39 41 42 43 44 45 46
.0abb						iprints:
.0abb		48		pha		            pha
.0abc		5a		phy		            phy
.0abd		a0 00		ldy #$00	            ldy #0
.0abf		b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1		f0 06		beq $0ac9	            beq done
.0ac3		20 09 b0	jsr $b009	            jsr conout
.0ac6		c8		iny		            iny
.0ac7		d0 f6		bne $0abf	            bne loop
.0ac9		7a		ply		done:       ply
.0aca		68		pla		            pla
.0acb		60		rts		            rts
.0acc						h_nmi:
.0acc		40		rti		            rti                     ; Just return
.0acd						h_irq:
.0acd		48		pha		            pha
.0ace		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0		48		pha		            pha
.0ad1		64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3		ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6		89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8		f0 03		beq $0add	            beq done                ; No: we're done
.0ada		20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add						done:
.0add		a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf		8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2		8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5		68		pla		            pla                     ; Restore the IO page settings
.0ae6		85 01		sta $01		            sta MMU_IO_CTRL
.0ae8		68		pla		            pla
.0ae9		40		rti		            rti                     ; Just return
>0aea		00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2		7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02		00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12		38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22		00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32		00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52		30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62		10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72		04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82		48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92		1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2		10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2		10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2		00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2		00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2		00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2		10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02		28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12		60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22		08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32		10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52		00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62		00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72		10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92		7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2		7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2		38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2		00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2		00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2		38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2		10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02		18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12		7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22		38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32		38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42		44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52		44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62		38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72		38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82		38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92		44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2		44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2		44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2		3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2		00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2		00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02		00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12		00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22		00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32		00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42		40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52		00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62		00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72		00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82		00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92		00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2		00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2		00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2		0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2		30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2		7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2		48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02		10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12		20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22		00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32		28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42		28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52		20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62		10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72		00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82		10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92		20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2		20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2		28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2		00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2		44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2		18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2		10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002		10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012		14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022		10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032		00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042		42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052		10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062		00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072		cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082		10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092		10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2		00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2		28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2		00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2		28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2		00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2		10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102		10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112		10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122		28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132		00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142		00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152		00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162		10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172		00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182		28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192		00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2		28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2		10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2		ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2		00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202		00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212		00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222		00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232		38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242		3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252		00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262		38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272		10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282		08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292		10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2		00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2		00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2		1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2		38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2		00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642						KBD_SCAN = $d642
=$d644						KBD_STAT = $d644
=$01						KBD_RDY = $01
=$01						KBD_ST_F0 = $01
=$02						KBD_ST_E0 = $02
=$80						KBD_SHIFT = $80
=$81						KBD_CTRL = $81
=$82						KBD_ALT = $82
=$83						KBD_OS = $83
=$84						KBD_CAP = $84
=$01						KBD_MOD_SHIFT = $01
=$02						KBD_MOD_CTRL = $02
=$04						KBD_MOD_ALT = $04
=$08						KBD_MOD_OS = $08
=$10						KBD_MOD_CAP = $10
=80						KBD_BUFFER_SIZE = 80
>0206						kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207						kbd_mods    .byte ?         ; The current state of the modifier keys
>0208						kbd_buffer  .fill 80        ; Keyboard buffer
>0258						kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea						initkbd:
.12ea		9c 06 02	stz $0206	            stz kbd_state
.12ed		9c 07 02	stz $0207	            stz kbd_mods
.12f0		9c 58 02	stz $0258	            stz kbd_head
.12f3		60		rts		            rts
.12f4						kbd_status:
.12f4		ad 58 02	lda $0258	            lda kbd_head
.12f7		f0 03		beq $12fc	            beq is_empty
.12f9		a9 01		lda #$01	            lda #1
.12fb		60		rts		            rts
.12fc						is_empty:
.12fc		60		rts		            rts
.12fd						kbd_enqueue:
.12fd		da		phx		            phx
.12fe		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301		e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303		b0 07		bcs $130c	            bge done
.1305		9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308		e8		inx		            inx
.1309		8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c						done:
.130c		fa		plx		            plx
.130d		60		rts		            rts
.130e						kbd_dequeue:
.130e		da		phx		            phx
.130f		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312		f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314		ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317		48		pha		            pha                     ; Save it temporarily to the stack
.1318		a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a						loop:
.131a		bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d		9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320		e8		inx		            inx                     ; Move to the next character
.1321		ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324		d0 f4		bne $131a	            bne loop
.1326		ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329		68		pla		            pla                     ; Get the character back and return
.132a		80 02		bra $132e	            bra done
.132c						is_empty:
.132c		a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e						done:
.132e		fa		plx		            plx
.132f		60		rts		            rts
.1330						handlekbd:
.1330		ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333		29 01		and #$01	            and #KBD_RDY
.1335		d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337		ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a		f0 08		beq $1344	            beq st_0        ; If base state...
.133c		c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e		f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340		9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343						done:
.1343		60		rts		            rts
.1344						st_0:
.1344		ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347		c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349		d0 07		bne $1352	            bne not_f0
.134b		a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d		8d 06 02	sta $0206	            sta kbd_state
.1350		80 f1		bra $1343	            bra done
.1352		c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354		d0 07		bne $135d	            bne not_f0e0
.1356		a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358		8d 06 02	sta $0206	            sta kbd_state
.135b		80 e6		bra $1343	            bra done
.135d						not_f0e0:
.135d		48		pha		            pha
.135e		ad 07 02	lda $0207	            lda kbd_mods
.1361		89 10		bit #$10	            bit #KBD_MOD_CAP
.1363		d0 0b		bne $1370	            bne read_caps
.1365		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367		d0 19		bne $1382	            bne read_shift
.1369		68		pla		            pla
.136a		aa		tax		            tax
.136b		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e		80 17		bra $1387	            bra proc_ascii
.1370						read_caps:
.1370		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372		d0 07		bne $137b	            bne read_caps_shift
.1374		68		pla		            pla
.1375		aa		tax		            tax
.1376		bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379		80 0c		bra $1387	            bra proc_ascii
.137b						read_caps_shift:
.137b		68		pla		            pla
.137c		aa		tax		            tax
.137d		bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380		80 05		bra $1387	            bra proc_ascii
.1382						read_shift:
.1382		68		pla		            pla
.1383		aa		tax		            tax
.1384		bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387						proc_ascii:
.1387		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389		f0 09		beq $1394	            beq raise_shift
.138b		c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d		f0 0f		beq $139e	            beq toggle_caps
.138f		20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392		80 af		bra $1343	            bra done
.1394						raise_shift:
.1394		ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397		09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399		8d 07 02	sta $0207	            sta kbd_mods
.139c		80 a5		bra $1343	            bra done
.139e						toggle_caps:
.139e		ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1		49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3		8d 07 02	sta $0207	            sta kbd_mods
.13a6		80 9b		bra $1343	            bra done
.13a8						st_f0:
.13a8		ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab		aa		tax		            tax
.13ac		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1		d0 08		bne $13bb	            bne exit_f0
.13b3		ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6		29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8		8d 07 02	sta $0207	            sta kbd_mods
.13bb						exit_f0:
.13bb		9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be		80 83		bra $1343	            bra done
>13c0		00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8		00 00 00 00 00 08 60 00
>13d0		00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8		00 00 7a 73 61 77 32 00
>13e0		00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8		00 20 76 66 74 72 35 00
>13f0		00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8		00 00 6d 6a 75 37 38 00
>1400		00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408		00 2e 2f 6c 3b 70 2d 00
>1410		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418		84 80 0d 5d 00 5c 00 00
>1420		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428		00 00 00 00 00 00 00 00
>1430		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438		00 00 00 00 00 00 00 00
>1440		00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448		00 00 00 00 00 08 7e 00
>1450		00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458		00 00 5a 53 41 57 40 00
>1460		00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468		00 20 56 46 54 52 25 00
>1470		00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478		00 00 4d 4a 55 26 2a 00
>1480		00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488		00 3e 3f 4c 3a 50 5f 00
>1490		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498		84 80 0d 7d 00 7c 00 00
>14a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8		00 00 00 00 00 00 00 00
>14b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8		00 00 00 00 00 00 00 00
>14c0		00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8		00 00 00 00 00 08 60 00
>14d0		00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8		00 00 5a 53 41 57 32 00
>14e0		00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8		00 20 56 46 54 52 35 00
>14f0		00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8		00 00 4d 4a 55 37 38 00
>1500		00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508		00 2e 2f 4c 3b 50 2d 00
>1510		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518		84 80 0d 5d 00 5c 00 00
>1520		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528		00 00 00 00 00 00 00 00
>1530		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538		00 00 00 00 00 00 00 00
>1540		00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548		00 00 00 00 00 08 7e 00
>1550		00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558		00 00 7a 73 61 77 40 00
>1560		00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568		00 20 76 66 74 72 25 00
>1570		00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578		00 00 6d 6a 75 26 2a 00
>1580		00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588		00 3e 3f 6c 3a 70 5f 00
>1590		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598		84 80 0d 7d 00 7c 00 00
>15a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8		00 00 00 00 00 00 00 00
>15b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8		00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028						ip      .word ?         ; Instruction pointer
>002a						wp      .word ?         ; Word pointer
>002c						up      .word ?         ; User pointer
>002e						donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030						test    .word ?         ; Pointer to the current test name
>0032						tmp     .word ?
>0034						savex   .byte ?
>0035						counter .byte ?         ; A counter used for some code
>0036						sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0		4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8		68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5						init_user:
>15d5		6e 00				        .word $006e     ; Initial PSP (S0)
>15d7		ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9		0a 00				        .word 10        ; Initial BASE
>15db		00 00				        .word 0         ; Initial STATE
>15dd		00 00				        .word 0         ; Initial CONTEXT
>15df		00 00				        .word 0         ; Initial CURRENT
>15e1		00 00				        .word <>endcode ; Initial DP
>15e3		00 00				        .word 0         ; Initial >IN
>15e5		00 00				        .word 0         ; Initial TIB
>15e7		00 00				        .word 0         ; Initial SOURCE-ID
.15e9						init_user_end:
=0						user_s0 = 0
=2						user_r0 = 2
=4						user_base = 4
=6						user_state = 6
=8						user_context = 8
=10						user_current = 10
=12						user_dp = 12
=14						user_in = 14
=16						user_tib = 16
=18						user_source_id = 18
.15e9		a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15eb		9a		txs		        txs
.15ec		a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15ee		a9 01		lda #$01	        lda #<vstart
.15f0		85 28		sta $28		        sta ip
.15f2		a9 16		lda #$16	        lda #>vstart
.15f4		85 29		sta $29		        sta ip+1
.15f6		a9 00		lda #$00	        lda #<USERAREA
.15f8		85 2c		sta $2c		        sta up
.15fa		a9 10		lda #$10	        lda #>USERAREA
.15fc		85 2d		sta $2d		        sta up+1
.15fe		4c 23 16	jmp $1623	        jmp next
>1601		1a 34				vstart  .word xt_cold
>1603		d4 16				        .word xt_halt
.1605		6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.1608		68		pla		i_exit  pla             ; ip := pop()
.1609		85 28		sta $28		        sta ip
.160b		68		pla		        pla
.160c		85 29		sta $29		        sta ip+1
.160e		80 13		bra $1623	        bra next        ; jmp next
.1610		a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1612		48		pha		        pha
.1613		a5 28		lda $28		        lda ip
.1615		48		pha		        pha
.1616		18		clc		        clc             ; ip := wp + 3
.1617		a5 2a		lda $2a		        lda wp
.1619		69 03		adc #$03	        adc #3
.161b		85 28		sta $28		        sta ip
.161d		a5 2b		lda $2b		        lda wp+1
.161f		69 00		adc #$00	        adc #0
.1621		85 29		sta $29		        sta ip+1
.1623		a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1625		b2 28		lda ($28)	        lda (ip)
.1627		85 2a		sta $2a		        sta wp
.1629		b1 28		lda ($28),y	        lda (ip),y
.162b		85 2b		sta $2b		        sta wp+1
.162d		18		clc		        clc             ; ip := ip + 2
.162e		a5 28		lda $28		        lda ip
.1630		69 02		adc #$02	        adc #2
.1632		85 28		sta $28		        sta ip
.1634		a5 29		lda $29		        lda ip+1
.1636		69 00		adc #$00	        adc #0
.1638		85 29		sta $29		        sta ip+1
.163a		6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.163d						w_testname:
>163d		08					.byte $08
>163e		74 65 73 74 6e 61 6d 65			.text 'testname'
>1646		00 00					.word 0
.1648						xt_testname:
.1648		b5 02		lda $02,x		lda pstack+2,x
.164a		85 30		sta $30			sta test
.164c		b5 03		lda $03,x		lda pstack+3,x
.164e		85 31		sta $31			sta test+1
.1650		e8		inx			inx
.1651		e8		inx			inx
.1652		4c 23 16	jmp $1623		jmp next
.1655						w_assertx3d:
>1655		07					.byte $07
>1656		61 73 73 65 72 74 3d			.text 'assert='
>165d		3d 16					.word w_testname
.165f						xt_assertx3d:
.165f		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1661		d5 04		cmp $04,x		cmp pstack+4,x
.1663		d0 0e		bne $1673		bne fail            ; If not, fail
.1665		b5 03		lda $03,x		lda pstack+3,x
.1667		d5 05		cmp $05,x		cmp pstack+5,x
.1669		d0 08		bne $1673		bne fail
.166b		8a		txa			txa                 ; If so, clean up the stack
.166c		18		clc			clc
.166d		69 04		adc #$04		adc #4
.166f		aa		tax			tax
.1670		4c 23 16	jmp $1623		jmp next            ; And continue
.1673							fail:
.1673		a9 b0		lda #$b0		lda #<leadin        ; Print the failure message
.1675		85 24		sta $24			sta src_ptr
.1677		a9 16		lda #$16		lda #>leadin
.1679		85 25		sta $25			sta src_ptr+1
.167b		20 18 b0	jsr $b018		jsr prints
.167e		a5 30		lda $30			lda test            ; Print the name of the test
.1680		85 24		sta $24			sta src_ptr
.1682		a5 31		lda $31			lda test+1
.1684		85 25		sta $25			sta src_ptr+1
.1686		20 18 b0	jsr $b018		jsr prints
.1689		a9 c3		lda #$c3		lda #<actual        ; Print the "Actual" label
.168b		85 24		sta $24			sta src_ptr
.168d		a9 16		lda #$16		lda #>actual
.168f		85 25		sta $25			sta src_ptr+1
.1691		20 18 b0	jsr $b018		jsr prints
.1694		b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.1696		b5 04		lda $04,x		lda pstack+4,x
.1698		20 15 b0	jsr $b015		jsr printyah
.169b		a9 b7		lda #$b7		lda #<expected      ; Print the "Expected" label
.169d		85 24		sta $24			sta src_ptr
.169f		a9 16		lda #$16		lda #>expected
.16a1		85 25		sta $25			sta src_ptr+1
.16a3		20 18 b0	jsr $b018		jsr prints
.16a6		b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16a8		b5 02		lda $02,x		lda pstack+2,x
.16aa		20 15 b0	jsr $b015		jsr printyah
.16ad							lock:
.16ad		ea		nop			nop                 ; Lock up
.16ae		80 fd		bra $16ad		bra lock
.16b0							leadin:
>16b0		46 41 49 4c 3a 20 00			.null "FAIL: "
.16b7							expected:
>16b7		20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16bf		44 3a 20 00
.16c3							actual:
>16c3		20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16cb		20 00
.16cd						w_halt:
>16cd		04					.byte $04
>16ce		68 61 6c 74				.text 'halt'
>16d2		55 16					.word w_assertx3d
.16d4						xt_halt:
.16d4		a9 1b		lda #$1b		lda #<haltmsg
.16d6		85 24		sta $24			sta src_ptr
.16d8		a9 17		lda #$17		lda #>haltmsg
.16da		85 25		sta $25			sta src_ptr+1
.16dc		20 18 b0	jsr $b018		jsr prints
.16df		a9 2e		lda #$2e		lda #<stackmsg
.16e1		85 24		sta $24			sta src_ptr
.16e3		a9 17		lda #$17		lda #>stackmsg
.16e5		85 25		sta $25			sta src_ptr+1
.16e7		20 18 b0	jsr $b018		jsr prints
.16ea		8a		txa			txa
.16eb		20 12 b0	jsr $b012		jsr printah
.16ee		a9 36		lda #$36		lda #<stackcont
.16f0		85 24		sta $24			sta src_ptr
.16f2		a9 17		lda #$17		lda #>stackcont
.16f4		85 25		sta $25			sta src_ptr+1
.16f6		20 18 b0	jsr $b018		jsr prints
.16f9							loop:
.16f9		e0 6e		cpx #$6e		cpx #$6e
.16fb		b0 10		bcs $170d		bge lock
.16fd		b4 03		ldy $03,x		ldy pstack+3,x
.16ff		b5 02		lda $02,x		lda pstack+2,x
.1701		e8		inx			inx
.1702		e8		inx			inx
.1703		20 15 b0	jsr $b015		jsr printyah
.1706		a9 20		lda #$20		lda #' '
.1708		20 09 b0	jsr $b009		jsr conout
.170b		80 ec		bra $16f9		bra loop
.170d							lock:
.170d		a9 39		lda #$39		lda #<endmsg
.170f		85 24		sta $24			sta src_ptr
.1711		a9 17		lda #$17		lda #>endmsg
.1713		85 25		sta $25			sta src_ptr+1
.1715		20 18 b0	jsr $b018		jsr prints
.1718							wait:
.1718		ea		nop			nop
.1719		80 fd		bra $1718		bra wait
>171b		0d 53 79 73 74 65 6d 20			haltmsg:    .null 13,"System halted...",13
>1723		68 61 6c 74 65 64 2e 2e 2e 0d 00
>172e		53 74 61 63 6b 20 5b 00			stackmsg:   .null "Stack ["
>1736		5d 20 00				stackcont:  .null "] "
>1739		0d 0d 45 4e 44 2d 4f 46			endmsg:     .null 13,13,"END-OF-LINE",13
>1741		2d 4c 49 4e 45 0d 00
.1748						w_emit:
>1748		04					.byte $04
>1749		65 6d 69 74				.text 'emit'
>174d		cd 16					.word w_halt
.174f						xt_emit:
.174f		b5 02		lda $02,x		lda pstack+2,x
.1751		da		phx			phx
.1752		20 09 b0	jsr $b009		jsr conout
.1755		fa		plx			plx
.1756		e8		inx			inx
.1757		e8		inx			inx
.1758		4c 23 16	jmp $1623		jmp next
.175b						w_keyx3f:
>175b		04					.byte $04
>175c		6b 65 79 3f				.text 'key?'
>1760		48 17					.word w_emit
.1762						xt_keyx3f:
.1762		20 0c b0	jsr $b00c		jsr constat
.1765		29 01		and #$01		and #1
.1767		f0 06		beq $176f		beq waiting
.1769		74 00		stz $00,x		stz pstack,x
.176b		74 01		stz $01,x		stz pstack+1,x
.176d		80 06		bra $1775		bra done
.176f							waiting:
.176f		a9 ff		lda #$ff		lda #$ff
.1771		95 00		sta $00,x		sta pstack,x
.1773		95 01		sta $01,x		sta pstack+1,x
.1775							done:
.1775		ca		dex			dex
.1776		ca		dex			dex
.1777		4c 23 16	jmp $1623		jmp next
.177a						w_key:
>177a		03					.byte $03
>177b		6b 65 79				.text 'key'
>177e		5b 17					.word w_keyx3f
.1780						xt_key:
.1780		da		phx			phx
.1781							wait:
.1781		20 0f b0	jsr $b00f		jsr conin
.1784		c9 00		cmp #$00		cmp #0
.1786		f0 f9		beq $1781		beq wait
.1788		fa		plx			plx
.1789		95 00		sta $00,x		sta pstack,x
.178b		74 01		stz $01,x		stz pstack+1,x
.178d		ca		dex			dex
.178e		ca		dex			dex
.178f		4c 23 16	jmp $1623		jmp next
.1792						w_cr:
>1792		02					.byte $02
>1793		63 72					.text 'cr'
>1795		7a 17					.word w_key
.1797						xt_cr:
.1797		da		phx			phx
.1798		a9 0d		lda #$0d		lda #$0d
.179a		20 09 b0	jsr $b009		jsr conout
.179d		fa		plx			plx
.179e		4c 23 16	jmp $1623		jmp next
.17a1						w_0:
>17a1		01					.byte $01
>17a2		30					.text '0'
>17a3		92 17					.word w_cr
.17a5						xt_0:
.17a5		74 01		stz $01,x		stz pstack+1,x
.17a7		74 00		stz $00,x		stz pstack,x
.17a9		ca		dex			dex
.17aa		ca		dex			dex
.17ab		4c 23 16	jmp $1623		jmp next
.17ae						w_1:
>17ae		01					.byte $01
>17af		31					.text '1'
>17b0		a1 17					.word w_0
.17b2						xt_1:
.17b2		74 01		stz $01,x		stz pstack+1,x
.17b4		a9 01		lda #$01		lda #1
.17b6		95 00		sta $00,x		sta pstack,x
.17b8		ca		dex			dex
.17b9		ca		dex			dex
.17ba		4c 23 16	jmp $1623		jmp next
.17bd						w_2:
>17bd		01					.byte $01
>17be		32					.text '2'
>17bf		ae 17					.word w_1
.17c1						xt_2:
.17c1		74 01		stz $01,x		stz pstack+1,x
.17c3		a9 02		lda #$02		lda #2
.17c5		95 00		sta $00,x		sta pstack,x
.17c7		ca		dex			dex
.17c8		ca		dex			dex
.17c9		4c 23 16	jmp $1623		jmp next
.17cc						w_x2d1:
>17cc		02					.byte $02
>17cd		2d 31					.text '-1'
>17cf		bd 17					.word w_2
.17d1						xt_x2d1:
.17d1		a9 ff		lda #$ff		lda #$ff
.17d3		95 01		sta $01,x		sta pstack+1,x
.17d5		95 00		sta $00,x		sta pstack,x
.17d7		ca		dex			dex
.17d8		ca		dex			dex
.17d9		4c 23 16	jmp $1623		jmp next
.17dc						w_x2d2:
>17dc		02					.byte $02
>17dd		2d 32					.text '-2'
>17df		cc 17					.word w_x2d1
.17e1						xt_x2d2:
.17e1		a9 fe		lda #$fe		lda #$fe
.17e3		95 01		sta $01,x		sta pstack+1,x
.17e5		95 00		sta $00,x		sta pstack,x
.17e7		ca		dex			dex
.17e8		ca		dex			dex
.17e9		4c 23 16	jmp $1623		jmp next
.17ec						w_x28literalx29:
>17ec		09					.byte $09
>17ed		28 6c 69 74 65 72 61 6c			.text '(literal)'
>17f5		29
>17f6		dc 17					.word w_x2d2
.17f8						xt_x28literalx29:
.17f8		a0 01		ldy #$01		ldy #1
.17fa		b2 28		lda ($28)		lda (ip)
.17fc		95 00		sta $00,x		sta pstack,x
.17fe		b1 28		lda ($28),y		lda (ip),y
.1800		95 01		sta $01,x		sta pstack+1,x
.1802		ca		dex			dex
.1803		ca		dex			dex
.1804		18		clc			clc
.1805		a5 28		lda $28			lda ip
.1807		69 02		adc #$02		adc #2
.1809		85 28		sta $28			sta ip
.180b		a5 29		lda $29			lda ip+1
.180d		69 00		adc #$00		adc #0
.180f		85 29		sta $29			sta ip+1
.1811		4c 23 16	jmp $1623		jmp next
.1814						w_depth:
>1814		05					.byte $05
>1815		64 65 70 74 68				.text 'depth'
>181a		ec 17					.word w_x28literalx29
.181c						xt_depth:
.181c		86 32		stx $32			stx tmp
.181e		38		sec			sec
.181f		a9 6e		lda #$6e		lda #$6e
.1821		e5 32		sbc $32			sbc tmp
.1823		4a		lsr a			lsr a
.1824		74 01		stz $01,x		stz pstack+1,x
.1826		95 00		sta $00,x		sta pstack,x
.1828		ca		dex			dex
.1829		ca		dex			dex
.182a		4c 23 16	jmp $1623		jmp next
.182d						w_unittest:
>182d		08					.byte $08
>182e		75 6e 69 74 74 65 73 74			.text 'unittest'
>1836							.fill 8
>183e		14 18					.word w_depth
.1840						xt_unittest:
.1840		4c 10 16	jmp $1610		jmp i_enter
>1843		f8 17					.word xt_x28literalx29
>1845		4b 18					.word l_2
>1847		ec 2d					.word xt_x28branchx29
>1849		57 18					.word l_3
.184b						l_2:
>184b		64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1853		3e 20 30 00
.1857						l_3:
>1857		48 16					.word xt_testname
>1859		1c 18					.word xt_depth
>185b		a5 17					.word xt_0
>185d		5f 16					.word xt_assertx3d
>185f		f8 17					.word xt_x28literalx29
>1861		67 18					.word l_4
>1863		ec 2d					.word xt_x28branchx29
>1865		77 18					.word l_5
.1867						l_4:
>1867		30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>186f		2d 2d 3e 20 30 20 31 00
.1877						l_5:
>1877		48 16					.word xt_testname
>1879		a5 17					.word xt_0
>187b		1c 18					.word xt_depth
>187d		b2 17					.word xt_1
>187f		5f 16					.word xt_assertx3d
>1881		a5 17					.word xt_0
>1883		5f 16					.word xt_assertx3d
>1885		f8 17					.word xt_x28literalx29
>1887		8d 18					.word l_6
>1889		ec 2d					.word xt_x28branchx29
>188b		a5 18					.word l_7
.188d						l_6:
>188d		31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>1895		70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.18a5						l_7:
>18a5		48 16					.word xt_testname
>18a7		b2 17					.word xt_1
>18a9		b2 17					.word xt_1
>18ab		b2 17					.word xt_1
>18ad		1c 18					.word xt_depth
>18af		f8 17					.word xt_x28literalx29
>18b1		03 00					.word 3
>18b3		5f 16					.word xt_assertx3d
>18b5		b2 17					.word xt_1
>18b7		5f 16					.word xt_assertx3d
>18b9		b2 17					.word xt_1
>18bb		5f 16					.word xt_assertx3d
>18bd		b2 17					.word xt_1
>18bf		5f 16					.word xt_assertx3d
>18c1		f8 17					.word xt_x28literalx29
>18c3		c9 18					.word l_8
>18c5		ec 2d					.word xt_x28branchx29
>18c7		d8 18					.word l_9
.18c9						l_8:
>18c9		31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>18d1		20 2d 2d 3e 20 31 00
.18d8						l_9:
>18d8		48 16					.word xt_testname
>18da		b2 17					.word xt_1
>18dc		c1 17					.word xt_2
>18de		26 28					.word xt_drop
>18e0		b2 17					.word xt_1
>18e2		5f 16					.word xt_assertx3d
>18e4		f8 17					.word xt_x28literalx29
>18e6		ec 18					.word l_10
>18e8		ec 2d					.word xt_x28branchx29
>18ea		ff 18					.word l_11
.18ec						l_10:
>18ec		31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>18f4		6f 70 20 2d 2d 3e 20 31 20 32 00
.18ff						l_11:
>18ff		48 16					.word xt_testname
>1901		b2 17					.word xt_1
>1903		c1 17					.word xt_2
>1905		f8 17					.word xt_x28literalx29
>1907		03 00					.word 3
>1909		26 28					.word xt_drop
>190b		c1 17					.word xt_2
>190d		5f 16					.word xt_assertx3d
>190f		b2 17					.word xt_1
>1911		5f 16					.word xt_assertx3d
>1913		f8 17					.word xt_x28literalx29
>1915		1b 19					.word l_12
>1917		ec 2d					.word xt_x28branchx29
>1919		29 19					.word l_13
.191b						l_12:
>191b		31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1923		3e 20 31 20 31 00
.1929						l_13:
>1929		48 16					.word xt_testname
>192b		b2 17					.word xt_1
>192d		31 28					.word xt_dup
>192f		b2 17					.word xt_1
>1931		5f 16					.word xt_assertx3d
>1933		b2 17					.word xt_1
>1935		5f 16					.word xt_assertx3d
>1937		f8 17					.word xt_x28literalx29
>1939		3f 19					.word l_14
>193b		ec 2d					.word xt_x28branchx29
>193d		51 19					.word l_15
.193f						l_14:
>193f		31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1947		2d 2d 3e 20 31 20 32 20 32 00
.1951						l_15:
>1951		48 16					.word xt_testname
>1953		b2 17					.word xt_1
>1955		c1 17					.word xt_2
>1957		31 28					.word xt_dup
>1959		c1 17					.word xt_2
>195b		5f 16					.word xt_assertx3d
>195d		c1 17					.word xt_2
>195f		5f 16					.word xt_assertx3d
>1961		b2 17					.word xt_1
>1963		5f 16					.word xt_assertx3d
>1965		f8 17					.word xt_x28literalx29
>1967		6d 19					.word l_16
>1969		ec 2d					.word xt_x28branchx29
>196b		82 19					.word l_17
.196d						l_16:
>196d		31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1975		61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1982						l_17:
>1982		48 16					.word xt_testname
>1984		b2 17					.word xt_1
>1986		c1 17					.word xt_2
>1988		f8 17					.word xt_x28literalx29
>198a		03 00					.word 3
>198c		45 28					.word xt_swap
>198e		c1 17					.word xt_2
>1990		5f 16					.word xt_assertx3d
>1992		f8 17					.word xt_x28literalx29
>1994		03 00					.word 3
>1996		5f 16					.word xt_assertx3d
>1998		b2 17					.word xt_1
>199a		5f 16					.word xt_assertx3d
>199c		f8 17					.word xt_x28literalx29
>199e		a4 19					.word l_18
>19a0		ec 2d					.word xt_x28branchx29
>19a2		b7 19					.word l_19
.19a4						l_18:
>19a4		31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>19ac		20 2d 2d 3e 20 31 20 32 20 31 00
.19b7						l_19:
>19b7		48 16					.word xt_testname
>19b9		b2 17					.word xt_1
>19bb		c1 17					.word xt_2
>19bd		5f 28					.word xt_over
>19bf		b2 17					.word xt_1
>19c1		5f 16					.word xt_assertx3d
>19c3		c1 17					.word xt_2
>19c5		5f 16					.word xt_assertx3d
>19c7		b2 17					.word xt_1
>19c9		5f 16					.word xt_assertx3d
>19cb		f8 17					.word xt_x28literalx29
>19cd		d3 19					.word l_20
>19cf		ec 2d					.word xt_x28branchx29
>19d1		f3 19					.word l_21
.19d3						l_20:
>19d3		35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>19db		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>19eb		3e 20 35 35 35 35 68 00
.19f3						l_21:
>19f3		48 16					.word xt_testname
>19f5		f8 17					.word xt_x28literalx29
>19f7		55 55					.word 21845
>19f9		f8 17					.word xt_x28literalx29
>19fb		04 00					.word 4
>19fd		ad 28					.word xt_x21
>19ff		f8 17					.word xt_x28literalx29
>1a01		04 00					.word 4
>1a03		ca 28					.word xt_x40
>1a05		f8 17					.word xt_x28literalx29
>1a07		55 55					.word 21845
>1a09		5f 16					.word xt_assertx3d
>1a0b		f8 17					.word xt_x28literalx29
>1a0d		13 1a					.word l_22
>1a0f		ec 2d					.word xt_x28branchx29
>1a11		33 1a					.word l_23
.1a13						l_22:
>1a13		61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1a1b		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1a2b		3e 20 61 61 61 61 68 00
.1a33						l_23:
>1a33		48 16					.word xt_testname
>1a35		f8 17					.word xt_x28literalx29
>1a37		aa aa					.word 43690
>1a39		f8 17					.word xt_x28literalx29
>1a3b		04 00					.word 4
>1a3d		ad 28					.word xt_x21
>1a3f		f8 17					.word xt_x28literalx29
>1a41		04 00					.word 4
>1a43		ca 28					.word xt_x40
>1a45		f8 17					.word xt_x28literalx29
>1a47		aa aa					.word 43690
>1a49		5f 16					.word xt_assertx3d
>1a4b		f8 17					.word xt_x28literalx29
>1a4d		53 1a					.word l_24
>1a4f		ec 2d					.word xt_x28branchx29
>1a51		71 1a					.word l_25
.1a53						l_24:
>1a53		35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1a5b		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1a6b		3e 20 35 35 68 00
.1a71						l_25:
>1a71		48 16					.word xt_testname
>1a73		f8 17					.word xt_x28literalx29
>1a75		55 00					.word 85
>1a77		f8 17					.word xt_x28literalx29
>1a79		03 00					.word 3
>1a7b		e4 28					.word xt_cx21
>1a7d		f8 17					.word xt_x28literalx29
>1a7f		03 00					.word 3
>1a81		f4 28					.word xt_cx40
>1a83		f8 17					.word xt_x28literalx29
>1a85		55 00					.word 85
>1a87		5f 16					.word xt_assertx3d
>1a89		f8 17					.word xt_x28literalx29
>1a8b		91 1a					.word l_26
>1a8d		ec 2d					.word xt_x28branchx29
>1a8f		af 1a					.word l_27
.1a91						l_26:
>1a91		61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1a99		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1aa9		3e 20 61 61 68 00
.1aaf						l_27:
>1aaf		48 16					.word xt_testname
>1ab1		f8 17					.word xt_x28literalx29
>1ab3		aa 00					.word 170
>1ab5		f8 17					.word xt_x28literalx29
>1ab7		03 00					.word 3
>1ab9		e4 28					.word xt_cx21
>1abb		f8 17					.word xt_x28literalx29
>1abd		03 00					.word 3
>1abf		f4 28					.word xt_cx40
>1ac1		f8 17					.word xt_x28literalx29
>1ac3		aa 00					.word 170
>1ac5		5f 16					.word xt_assertx3d
>1ac7		f8 17					.word xt_x28literalx29
>1ac9		cf 1a					.word l_28
>1acb		ec 2d					.word xt_x28branchx29
>1acd		db 1a					.word l_29
.1acf						l_28:
>1acf		31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1ad7		3e 20 31 00
.1adb						l_29:
>1adb		48 16					.word xt_testname
>1add		b2 17					.word xt_1
>1adf		a5 17					.word xt_0
>1ae1		57 2a					.word xt_x2b
>1ae3		b2 17					.word xt_1
>1ae5		5f 16					.word xt_assertx3d
>1ae7		f8 17					.word xt_x28literalx29
>1ae9		ef 1a					.word l_30
>1aeb		ec 2d					.word xt_x28branchx29
>1aed		fb 1a					.word l_31
.1aef						l_30:
>1aef		31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1af7		3e 20 32 00
.1afb						l_31:
>1afb		48 16					.word xt_testname
>1afd		b2 17					.word xt_1
>1aff		b2 17					.word xt_1
>1b01		57 2a					.word xt_x2b
>1b03		c1 17					.word xt_2
>1b05		5f 16					.word xt_assertx3d
>1b07		f8 17					.word xt_x28literalx29
>1b09		0f 1b					.word l_32
>1b0b		ec 2d					.word xt_x28branchx29
>1b0d		1d 1b					.word l_33
.1b0f						l_32:
>1b0f		33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1b17		2d 3e 20 31 33 00
.1b1d						l_33:
>1b1d		48 16					.word xt_testname
>1b1f		f8 17					.word xt_x28literalx29
>1b21		03 00					.word 3
>1b23		f8 17					.word xt_x28literalx29
>1b25		0a 00					.word 10
>1b27		57 2a					.word xt_x2b
>1b29		f8 17					.word xt_x28literalx29
>1b2b		0d 00					.word 13
>1b2d		5f 16					.word xt_assertx3d
>1b2f		f8 17					.word xt_x28literalx29
>1b31		37 1b					.word l_34
>1b33		ec 2d					.word xt_x28branchx29
>1b35		47 1b					.word l_35
.1b37						l_34:
>1b37		66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1b3f		2b 20 2d 2d 3e 20 34 00
.1b47						l_35:
>1b47		48 16					.word xt_testname
>1b49		f8 17					.word xt_x28literalx29
>1b4b		ff ff					.word 65535
>1b4d		f8 17					.word xt_x28literalx29
>1b4f		05 00					.word 5
>1b51		57 2a					.word xt_x2b
>1b53		f8 17					.word xt_x28literalx29
>1b55		04 00					.word 4
>1b57		5f 16					.word xt_assertx3d
>1b59		f8 17					.word xt_x28literalx29
>1b5b		61 1b					.word l_36
>1b5d		ec 2d					.word xt_x28branchx29
>1b5f		6d 1b					.word l_37
.1b61						l_36:
>1b61		34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1b69		3e 20 31 00
.1b6d						l_37:
>1b6d		48 16					.word xt_testname
>1b6f		f8 17					.word xt_x28literalx29
>1b71		04 00					.word 4
>1b73		f8 17					.word xt_x28literalx29
>1b75		03 00					.word 3
>1b77		6d 2a					.word xt_x2d
>1b79		b2 17					.word xt_1
>1b7b		5f 16					.word xt_assertx3d
>1b7d		f8 17					.word xt_x28literalx29
>1b7f		85 1b					.word l_38
>1b81		ec 2d					.word xt_x28branchx29
>1b83		95 1b					.word l_39
.1b85						l_38:
>1b85		33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1b8d		3e 20 66 66 66 66 68 00
.1b95						l_39:
>1b95		48 16					.word xt_testname
>1b97		f8 17					.word xt_x28literalx29
>1b99		03 00					.word 3
>1b9b		f8 17					.word xt_x28literalx29
>1b9d		04 00					.word 4
>1b9f		6d 2a					.word xt_x2d
>1ba1		f8 17					.word xt_x28literalx29
>1ba3		ff ff					.word 65535
>1ba5		5f 16					.word xt_assertx3d
>1ba7		f8 17					.word xt_x28literalx29
>1ba9		af 1b					.word l_40
>1bab		ec 2d					.word xt_x28branchx29
>1bad		bc 1b					.word l_41
.1baf						l_40:
>1baf		31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1bb7		2d 3e 20 35 00
.1bbc						l_41:
>1bbc		48 16					.word xt_testname
>1bbe		f8 17					.word xt_x28literalx29
>1bc0		0a 00					.word 10
>1bc2		f8 17					.word xt_x28literalx29
>1bc4		05 00					.word 5
>1bc6		6d 2a					.word xt_x2d
>1bc8		f8 17					.word xt_x28literalx29
>1bca		05 00					.word 5
>1bcc		5f 16					.word xt_assertx3d
>1bce		f8 17					.word xt_x28literalx29
>1bd0		d6 1b					.word l_42
>1bd2		ec 2d					.word xt_x28branchx29
>1bd4		e7 1b					.word l_43
.1bd6						l_42:
>1bd6		31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>1bde		20 2d 2d 3e 20 31 20 30 00
.1be7						l_43:
>1be7		48 16					.word xt_testname
>1be9		b2 17					.word xt_1
>1beb		f8 17					.word xt_x28literalx29
>1bed		03 00					.word 3
>1bef		f9 2a					.word xt_x2fmod
>1bf1		a5 17					.word xt_0
>1bf3		5f 16					.word xt_assertx3d
>1bf5		b2 17					.word xt_1
>1bf7		5f 16					.word xt_assertx3d
>1bf9		f8 17					.word xt_x28literalx29
>1bfb		01 1c					.word l_44
>1bfd		ec 2d					.word xt_x28branchx29
>1bff		12 1c					.word l_45
.1c01						l_44:
>1c01		32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1c09		20 2d 2d 3e 20 32 20 30 00
.1c12						l_45:
>1c12		48 16					.word xt_testname
>1c14		c1 17					.word xt_2
>1c16		f8 17					.word xt_x28literalx29
>1c18		03 00					.word 3
>1c1a		f9 2a					.word xt_x2fmod
>1c1c		a5 17					.word xt_0
>1c1e		5f 16					.word xt_assertx3d
>1c20		c1 17					.word xt_2
>1c22		5f 16					.word xt_assertx3d
>1c24		f8 17					.word xt_x28literalx29
>1c26		2c 1c					.word l_46
>1c28		ec 2d					.word xt_x28branchx29
>1c2a		3d 1c					.word l_47
.1c2c						l_46:
>1c2c		33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1c34		20 2d 2d 3e 20 30 20 31 00
.1c3d						l_47:
>1c3d		48 16					.word xt_testname
>1c3f		f8 17					.word xt_x28literalx29
>1c41		03 00					.word 3
>1c43		f8 17					.word xt_x28literalx29
>1c45		03 00					.word 3
>1c47		f9 2a					.word xt_x2fmod
>1c49		b2 17					.word xt_1
>1c4b		5f 16					.word xt_assertx3d
>1c4d		a5 17					.word xt_0
>1c4f		5f 16					.word xt_assertx3d
>1c51		f8 17					.word xt_x28literalx29
>1c53		59 1c					.word l_48
>1c55		ec 2d					.word xt_x28branchx29
>1c57		6a 1c					.word l_49
.1c59						l_48:
>1c59		34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>1c61		20 2d 2d 3e 20 31 20 31 00
.1c6a						l_49:
>1c6a		48 16					.word xt_testname
>1c6c		f8 17					.word xt_x28literalx29
>1c6e		04 00					.word 4
>1c70		f8 17					.word xt_x28literalx29
>1c72		03 00					.word 3
>1c74		f9 2a					.word xt_x2fmod
>1c76		b2 17					.word xt_1
>1c78		5f 16					.word xt_assertx3d
>1c7a		b2 17					.word xt_1
>1c7c		5f 16					.word xt_assertx3d
>1c7e		f8 17					.word xt_x28literalx29
>1c80		86 1c					.word l_50
>1c82		ec 2d					.word xt_x28branchx29
>1c84		97 1c					.word l_51
.1c86						l_50:
>1c86		36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>1c8e		20 2d 2d 3e 20 30 20 32 00
.1c97						l_51:
>1c97		48 16					.word xt_testname
>1c99		f8 17					.word xt_x28literalx29
>1c9b		06 00					.word 6
>1c9d		f8 17					.word xt_x28literalx29
>1c9f		03 00					.word 3
>1ca1		f9 2a					.word xt_x2fmod
>1ca3		c1 17					.word xt_2
>1ca5		5f 16					.word xt_assertx3d
>1ca7		a5 17					.word xt_0
>1ca9		5f 16					.word xt_assertx3d
>1cab		f8 17					.word xt_x28literalx29
>1cad		b3 1c					.word l_52
>1caf		ec 2d					.word xt_x28branchx29
>1cb1		be 1c					.word l_53
.1cb3						l_52:
>1cb3		31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1cbb		20 32 00
.1cbe						l_53:
>1cbe		48 16					.word xt_testname
>1cc0		b2 17					.word xt_1
>1cc2		76 2b					.word xt_1x2b
>1cc4		c1 17					.word xt_2
>1cc6		5f 16					.word xt_assertx3d
>1cc8		f8 17					.word xt_x28literalx29
>1cca		d0 1c					.word l_54
>1ccc		ec 2d					.word xt_x28branchx29
>1cce		db 1c					.word l_55
.1cd0						l_54:
>1cd0		30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1cd8		20 31 00
.1cdb						l_55:
>1cdb		48 16					.word xt_testname
>1cdd		a5 17					.word xt_0
>1cdf		76 2b					.word xt_1x2b
>1ce1		b2 17					.word xt_1
>1ce3		5f 16					.word xt_assertx3d
>1ce5		f8 17					.word xt_x28literalx29
>1ce7		ed 1c					.word l_56
>1ce9		ec 2d					.word xt_x28branchx29
>1ceb		fa 1c					.word l_57
.1ced						l_56:
>1ced		32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1cf5		3e 20 32 31 00
.1cfa						l_57:
>1cfa		48 16					.word xt_testname
>1cfc		f8 17					.word xt_x28literalx29
>1cfe		14 00					.word 20
>1d00		76 2b					.word xt_1x2b
>1d02		f8 17					.word xt_x28literalx29
>1d04		15 00					.word 21
>1d06		5f 16					.word xt_assertx3d
>1d08		f8 17					.word xt_x28literalx29
>1d0a		10 1d					.word l_58
>1d0c		ec 2d					.word xt_x28branchx29
>1d0e		1f 1d					.word l_59
.1d10						l_58:
>1d10		66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1d18		20 2d 2d 3e 20 30 00
.1d1f						l_59:
>1d1f		48 16					.word xt_testname
>1d21		f8 17					.word xt_x28literalx29
>1d23		ff ff					.word 65535
>1d25		76 2b					.word xt_1x2b
>1d27		a5 17					.word xt_0
>1d29		5f 16					.word xt_assertx3d
>1d2b		f8 17					.word xt_x28literalx29
>1d2d		33 1d					.word l_60
>1d2f		ec 2d					.word xt_x28branchx29
>1d31		3e 1d					.word l_61
.1d33						l_60:
>1d33		31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1d3b		20 33 00
.1d3e						l_61:
>1d3e		48 16					.word xt_testname
>1d40		b2 17					.word xt_1
>1d42		84 2b					.word xt_2x2b
>1d44		f8 17					.word xt_x28literalx29
>1d46		03 00					.word 3
>1d48		5f 16					.word xt_assertx3d
>1d4a		f8 17					.word xt_x28literalx29
>1d4c		52 1d					.word l_62
>1d4e		ec 2d					.word xt_x28branchx29
>1d50		5d 1d					.word l_63
.1d52						l_62:
>1d52		30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1d5a		20 32 00
.1d5d						l_63:
>1d5d		48 16					.word xt_testname
>1d5f		a5 17					.word xt_0
>1d61		84 2b					.word xt_2x2b
>1d63		c1 17					.word xt_2
>1d65		5f 16					.word xt_assertx3d
>1d67		f8 17					.word xt_x28literalx29
>1d69		6f 1d					.word l_64
>1d6b		ec 2d					.word xt_x28branchx29
>1d6d		7c 1d					.word l_65
.1d6f						l_64:
>1d6f		32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>1d77		3e 20 32 32 00
.1d7c						l_65:
>1d7c		48 16					.word xt_testname
>1d7e		f8 17					.word xt_x28literalx29
>1d80		14 00					.word 20
>1d82		84 2b					.word xt_2x2b
>1d84		f8 17					.word xt_x28literalx29
>1d86		16 00					.word 22
>1d88		5f 16					.word xt_assertx3d
>1d8a		f8 17					.word xt_x28literalx29
>1d8c		92 1d					.word l_66
>1d8e		ec 2d					.word xt_x28branchx29
>1d90		a1 1d					.word l_67
.1d92						l_66:
>1d92		66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>1d9a		20 2d 2d 3e 20 30 00
.1da1						l_67:
>1da1		48 16					.word xt_testname
>1da3		f8 17					.word xt_x28literalx29
>1da5		fe ff					.word 65534
>1da7		84 2b					.word xt_2x2b
>1da9		a5 17					.word xt_0
>1dab		5f 16					.word xt_assertx3d
>1dad		f8 17					.word xt_x28literalx29
>1daf		b5 1d					.word l_68
>1db1		ec 2d					.word xt_x28branchx29
>1db3		c0 1d					.word l_69
.1db5						l_68:
>1db5		31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>1dbd		20 30 00
.1dc0						l_69:
>1dc0		48 16					.word xt_testname
>1dc2		b2 17					.word xt_1
>1dc4		99 2b					.word xt_1x2d
>1dc6		a5 17					.word xt_0
>1dc8		5f 16					.word xt_assertx3d
>1dca		f8 17					.word xt_x28literalx29
>1dcc		d2 1d					.word l_70
>1dce		ec 2d					.word xt_x28branchx29
>1dd0		e1 1d					.word l_71
.1dd2						l_70:
>1dd2		30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1dda		20 66 66 66 66 68 00
.1de1						l_71:
>1de1		48 16					.word xt_testname
>1de3		a5 17					.word xt_0
>1de5		99 2b					.word xt_1x2d
>1de7		f8 17					.word xt_x28literalx29
>1de9		ff ff					.word 65535
>1deb		5f 16					.word xt_assertx3d
>1ded		f8 17					.word xt_x28literalx29
>1def		f5 1d					.word l_72
>1df1		ec 2d					.word xt_x28branchx29
>1df3		02 1e					.word l_73
.1df5						l_72:
>1df5		32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1dfd		3e 20 31 39 00
.1e02						l_73:
>1e02		48 16					.word xt_testname
>1e04		f8 17					.word xt_x28literalx29
>1e06		14 00					.word 20
>1e08		99 2b					.word xt_1x2d
>1e0a		f8 17					.word xt_x28literalx29
>1e0c		13 00					.word 19
>1e0e		5f 16					.word xt_assertx3d
>1e10		f8 17					.word xt_x28literalx29
>1e12		18 1e					.word l_74
>1e14		ec 2d					.word xt_x28branchx29
>1e16		2b 1e					.word l_75
.1e18						l_74:
>1e18		66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1e20		20 2d 2d 3e 20 66 66 66 65 68 00
.1e2b						l_75:
>1e2b		48 16					.word xt_testname
>1e2d		f8 17					.word xt_x28literalx29
>1e2f		ff ff					.word 65535
>1e31		99 2b					.word xt_1x2d
>1e33		f8 17					.word xt_x28literalx29
>1e35		fe ff					.word 65534
>1e37		5f 16					.word xt_assertx3d
>1e39		f8 17					.word xt_x28literalx29
>1e3b		41 1e					.word l_76
>1e3d		ec 2d					.word xt_x28branchx29
>1e3f		50 1e					.word l_77
.1e41						l_76:
>1e41		31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1e49		20 66 66 66 66 68 00
.1e50						l_77:
>1e50		48 16					.word xt_testname
>1e52		b2 17					.word xt_1
>1e54		a9 2b					.word xt_2x2d
>1e56		f8 17					.word xt_x28literalx29
>1e58		ff ff					.word 65535
>1e5a		5f 16					.word xt_assertx3d
>1e5c		f8 17					.word xt_x28literalx29
>1e5e		64 1e					.word l_78
>1e60		ec 2d					.word xt_x28branchx29
>1e62		73 1e					.word l_79
.1e64						l_78:
>1e64		30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1e6c		20 66 66 66 65 68 00
.1e73						l_79:
>1e73		48 16					.word xt_testname
>1e75		a5 17					.word xt_0
>1e77		a9 2b					.word xt_2x2d
>1e79		f8 17					.word xt_x28literalx29
>1e7b		fe ff					.word 65534
>1e7d		5f 16					.word xt_assertx3d
>1e7f		f8 17					.word xt_x28literalx29
>1e81		87 1e					.word l_80
>1e83		ec 2d					.word xt_x28branchx29
>1e85		94 1e					.word l_81
.1e87						l_80:
>1e87		32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1e8f		3e 20 31 38 00
.1e94						l_81:
>1e94		48 16					.word xt_testname
>1e96		f8 17					.word xt_x28literalx29
>1e98		14 00					.word 20
>1e9a		a9 2b					.word xt_2x2d
>1e9c		f8 17					.word xt_x28literalx29
>1e9e		12 00					.word 18
>1ea0		5f 16					.word xt_assertx3d
>1ea2		f8 17					.word xt_x28literalx29
>1ea4		aa 1e					.word l_82
>1ea6		ec 2d					.word xt_x28branchx29
>1ea8		bd 1e					.word l_83
.1eaa						l_82:
>1eaa		66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1eb2		20 2d 2d 3e 20 66 66 66 64 68 00
.1ebd						l_83:
>1ebd		48 16					.word xt_testname
>1ebf		f8 17					.word xt_x28literalx29
>1ec1		ff ff					.word 65535
>1ec3		a9 2b					.word xt_2x2d
>1ec5		f8 17					.word xt_x28literalx29
>1ec7		fd ff					.word 65533
>1ec9		5f 16					.word xt_assertx3d
>1ecb		f8 17					.word xt_x28literalx29
>1ecd		d3 1e					.word l_84
>1ecf		ec 2d					.word xt_x28branchx29
>1ed1		ed 1e					.word l_85
.1ed3						l_84:
>1ed3		30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1edb		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1eeb		68 00
.1eed						l_85:
>1eed		48 16					.word xt_testname
>1eef		f8 17					.word xt_x28literalx29
>1ef1		00 00					.word 0
>1ef3		f8 17					.word xt_x28literalx29
>1ef5		00 00					.word 0
>1ef7		bf 2b					.word xt_and
>1ef9		f8 17					.word xt_x28literalx29
>1efb		00 00					.word 0
>1efd		5f 16					.word xt_assertx3d
>1eff		f8 17					.word xt_x28literalx29
>1f01		07 1f					.word l_86
>1f03		ec 2d					.word xt_x28branchx29
>1f05		21 1f					.word l_87
.1f07						l_86:
>1f07		30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1f0f		66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f1f		68 00
.1f21						l_87:
>1f21		48 16					.word xt_testname
>1f23		f8 17					.word xt_x28literalx29
>1f25		00 00					.word 0
>1f27		f8 17					.word xt_x28literalx29
>1f29		ff ff					.word 65535
>1f2b		bf 2b					.word xt_and
>1f2d		f8 17					.word xt_x28literalx29
>1f2f		00 00					.word 0
>1f31		5f 16					.word xt_assertx3d
>1f33		f8 17					.word xt_x28literalx29
>1f35		3b 1f					.word l_88
>1f37		ec 2d					.word xt_x28branchx29
>1f39		55 1f					.word l_89
.1f3b						l_88:
>1f3b		66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1f43		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f53		68 00
.1f55						l_89:
>1f55		48 16					.word xt_testname
>1f57		f8 17					.word xt_x28literalx29
>1f59		ff ff					.word 65535
>1f5b		f8 17					.word xt_x28literalx29
>1f5d		00 00					.word 0
>1f5f		bf 2b					.word xt_and
>1f61		f8 17					.word xt_x28literalx29
>1f63		00 00					.word 0
>1f65		5f 16					.word xt_assertx3d
>1f67		f8 17					.word xt_x28literalx29
>1f69		6f 1f					.word l_90
>1f6b		ec 2d					.word xt_x28branchx29
>1f6d		89 1f					.word l_91
.1f6f						l_90:
>1f6f		66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1f77		66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1f87		68 00
.1f89						l_91:
>1f89		48 16					.word xt_testname
>1f8b		f8 17					.word xt_x28literalx29
>1f8d		ff ff					.word 65535
>1f8f		f8 17					.word xt_x28literalx29
>1f91		ff ff					.word 65535
>1f93		bf 2b					.word xt_and
>1f95		f8 17					.word xt_x28literalx29
>1f97		ff ff					.word 65535
>1f99		5f 16					.word xt_assertx3d
>1f9b		f8 17					.word xt_x28literalx29
>1f9d		a3 1f					.word l_92
>1f9f		ec 2d					.word xt_x28branchx29
>1fa1		bc 1f					.word l_93
.1fa3						l_92:
>1fa3		30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1fab		30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1fbb		00
.1fbc						l_93:
>1fbc		48 16					.word xt_testname
>1fbe		f8 17					.word xt_x28literalx29
>1fc0		00 00					.word 0
>1fc2		f8 17					.word xt_x28literalx29
>1fc4		00 00					.word 0
>1fc6		d5 2b					.word xt_or
>1fc8		f8 17					.word xt_x28literalx29
>1fca		00 00					.word 0
>1fcc		5f 16					.word xt_assertx3d
>1fce		f8 17					.word xt_x28literalx29
>1fd0		d6 1f					.word l_94
>1fd2		ec 2d					.word xt_x28branchx29
>1fd4		ef 1f					.word l_95
.1fd6						l_94:
>1fd6		30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1fde		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1fee		00
.1fef						l_95:
>1fef		48 16					.word xt_testname
>1ff1		f8 17					.word xt_x28literalx29
>1ff3		00 00					.word 0
>1ff5		f8 17					.word xt_x28literalx29
>1ff7		ff ff					.word 65535
>1ff9		d5 2b					.word xt_or
>1ffb		f8 17					.word xt_x28literalx29
>1ffd		ff ff					.word 65535
>1fff		5f 16					.word xt_assertx3d
>2001		f8 17					.word xt_x28literalx29
>2003		09 20					.word l_96
>2005		ec 2d					.word xt_x28branchx29
>2007		22 20					.word l_97
.2009						l_96:
>2009		66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>2011		30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2021		00
.2022						l_97:
>2022		48 16					.word xt_testname
>2024		f8 17					.word xt_x28literalx29
>2026		ff ff					.word 65535
>2028		f8 17					.word xt_x28literalx29
>202a		00 00					.word 0
>202c		d5 2b					.word xt_or
>202e		f8 17					.word xt_x28literalx29
>2030		ff ff					.word 65535
>2032		5f 16					.word xt_assertx3d
>2034		f8 17					.word xt_x28literalx29
>2036		3c 20					.word l_98
>2038		ec 2d					.word xt_x28branchx29
>203a		55 20					.word l_99
.203c						l_98:
>203c		66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>2044		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2054		00
.2055						l_99:
>2055		48 16					.word xt_testname
>2057		f8 17					.word xt_x28literalx29
>2059		ff ff					.word 65535
>205b		f8 17					.word xt_x28literalx29
>205d		ff ff					.word 65535
>205f		d5 2b					.word xt_or
>2061		f8 17					.word xt_x28literalx29
>2063		ff ff					.word 65535
>2065		5f 16					.word xt_assertx3d
>2067		f8 17					.word xt_x28literalx29
>2069		6f 20					.word l_100
>206b		ec 2d					.word xt_x28branchx29
>206d		89 20					.word l_101
.206f						l_100:
>206f		30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>2077		30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2087		68 00
.2089						l_101:
>2089		48 16					.word xt_testname
>208b		f8 17					.word xt_x28literalx29
>208d		00 00					.word 0
>208f		f8 17					.word xt_x28literalx29
>2091		00 00					.word 0
>2093		ec 2b					.word xt_xor
>2095		f8 17					.word xt_x28literalx29
>2097		00 00					.word 0
>2099		5f 16					.word xt_assertx3d
>209b		f8 17					.word xt_x28literalx29
>209d		a3 20					.word l_102
>209f		ec 2d					.word xt_x28branchx29
>20a1		bd 20					.word l_103
.20a3						l_102:
>20a3		30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>20ab		66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>20bb		68 00
.20bd						l_103:
>20bd		48 16					.word xt_testname
>20bf		f8 17					.word xt_x28literalx29
>20c1		00 00					.word 0
>20c3		f8 17					.word xt_x28literalx29
>20c5		ff ff					.word 65535
>20c7		ec 2b					.word xt_xor
>20c9		f8 17					.word xt_x28literalx29
>20cb		ff ff					.word 65535
>20cd		5f 16					.word xt_assertx3d
>20cf		f8 17					.word xt_x28literalx29
>20d1		d7 20					.word l_104
>20d3		ec 2d					.word xt_x28branchx29
>20d5		f1 20					.word l_105
.20d7						l_104:
>20d7		66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>20df		30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>20ef		68 00
.20f1						l_105:
>20f1		48 16					.word xt_testname
>20f3		f8 17					.word xt_x28literalx29
>20f5		ff ff					.word 65535
>20f7		f8 17					.word xt_x28literalx29
>20f9		00 00					.word 0
>20fb		ec 2b					.word xt_xor
>20fd		f8 17					.word xt_x28literalx29
>20ff		ff ff					.word 65535
>2101		5f 16					.word xt_assertx3d
>2103		f8 17					.word xt_x28literalx29
>2105		0b 21					.word l_106
>2107		ec 2d					.word xt_x28branchx29
>2109		25 21					.word l_107
.210b						l_106:
>210b		66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>2113		66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2123		68 00
.2125						l_107:
>2125		48 16					.word xt_testname
>2127		f8 17					.word xt_x28literalx29
>2129		ff ff					.word 65535
>212b		f8 17					.word xt_x28literalx29
>212d		ff ff					.word 65535
>212f		ec 2b					.word xt_xor
>2131		f8 17					.word xt_x28literalx29
>2133		00 00					.word 0
>2135		5f 16					.word xt_assertx3d
>2137		f8 17					.word xt_x28literalx29
>2139		3f 21					.word l_108
>213b		ec 2d					.word xt_x28branchx29
>213d		53 21					.word l_109
.213f						l_108:
>213f		30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>2147		74 20 2d 2d 3e 20 66 66 66 66 68 00
.2153						l_109:
>2153		48 16					.word xt_testname
>2155		f8 17					.word xt_x28literalx29
>2157		00 00					.word 0
>2159		03 2c					.word xt_not
>215b		f8 17					.word xt_x28literalx29
>215d		ff ff					.word 65535
>215f		5f 16					.word xt_assertx3d
>2161		f8 17					.word xt_x28literalx29
>2163		69 21					.word l_110
>2165		ec 2d					.word xt_x28branchx29
>2167		7d 21					.word l_111
.2169						l_110:
>2169		66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>2171		74 20 2d 2d 3e 20 30 30 30 30 68 00
.217d						l_111:
>217d		48 16					.word xt_testname
>217f		f8 17					.word xt_x28literalx29
>2181		ff ff					.word 65535
>2183		03 2c					.word xt_not
>2185		f8 17					.word xt_x28literalx29
>2187		00 00					.word 0
>2189		5f 16					.word xt_assertx3d
>218b		f8 17					.word xt_x28literalx29
>218d		93 21					.word l_112
>218f		ec 2d					.word xt_x28branchx29
>2191		a2 21					.word l_113
.2193						l_112:
>2193		30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>219b		20 30 30 30 30 68 00
.21a2						l_113:
>21a2		48 16					.word xt_testname
>21a4		a5 17					.word xt_0
>21a6		17 2c					.word xt_0x3c
>21a8		f8 17					.word xt_x28literalx29
>21aa		00 00					.word 0
>21ac		5f 16					.word xt_assertx3d
>21ae		f8 17					.word xt_x28literalx29
>21b0		b6 21					.word l_114
>21b2		ec 2d					.word xt_x28branchx29
>21b4		c5 21					.word l_115
.21b6						l_114:
>21b6		33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>21be		20 30 30 30 30 68 00
.21c5						l_115:
>21c5		48 16					.word xt_testname
>21c7		f8 17					.word xt_x28literalx29
>21c9		03 00					.word 3
>21cb		17 2c					.word xt_0x3c
>21cd		f8 17					.word xt_x28literalx29
>21cf		00 00					.word 0
>21d1		5f 16					.word xt_assertx3d
>21d3		f8 17					.word xt_x28literalx29
>21d5		db 21					.word l_116
>21d7		ec 2d					.word xt_x28branchx29
>21d9		ee 21					.word l_117
.21db						l_116:
>21db		66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>21e3		20 2d 2d 3e 20 66 66 66 66 68 00
.21ee						l_117:
>21ee		48 16					.word xt_testname
>21f0		f8 17					.word xt_x28literalx29
>21f2		ff ff					.word 65535
>21f4		17 2c					.word xt_0x3c
>21f6		f8 17					.word xt_x28literalx29
>21f8		ff ff					.word 65535
>21fa		5f 16					.word xt_assertx3d
>21fc		f8 17					.word xt_x28literalx29
>21fe		04 22					.word l_118
>2200		ec 2d					.word xt_x28branchx29
>2202		13 22					.word l_119
.2204						l_118:
>2204		30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>220c		20 66 66 66 66 68 00
.2213						l_119:
>2213		48 16					.word xt_testname
>2215		a5 17					.word xt_0
>2217		30 2c					.word xt_0x3d
>2219		f8 17					.word xt_x28literalx29
>221b		ff ff					.word 65535
>221d		5f 16					.word xt_assertx3d
>221f		f8 17					.word xt_x28literalx29
>2221		27 22					.word l_120
>2223		ec 2d					.word xt_x28branchx29
>2225		36 22					.word l_121
.2227						l_120:
>2227		33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>222f		20 30 30 30 30 68 00
.2236						l_121:
>2236		48 16					.word xt_testname
>2238		f8 17					.word xt_x28literalx29
>223a		03 00					.word 3
>223c		30 2c					.word xt_0x3d
>223e		f8 17					.word xt_x28literalx29
>2240		00 00					.word 0
>2242		5f 16					.word xt_assertx3d
>2244		f8 17					.word xt_x28literalx29
>2246		4c 22					.word l_122
>2248		ec 2d					.word xt_x28branchx29
>224a		5f 22					.word l_123
.224c						l_122:
>224c		66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>2254		20 2d 2d 3e 20 30 30 30 30 68 00
.225f						l_123:
>225f		48 16					.word xt_testname
>2261		f8 17					.word xt_x28literalx29
>2263		ff ff					.word 65535
>2265		30 2c					.word xt_0x3d
>2267		f8 17					.word xt_x28literalx29
>2269		00 00					.word 0
>226b		5f 16					.word xt_assertx3d
>226d		f8 17					.word xt_x28literalx29
>226f		75 22					.word l_124
>2271		ec 2d					.word xt_x28branchx29
>2273		84 22					.word l_125
.2275						l_124:
>2275		30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>227d		20 30 30 30 30 68 00
.2284						l_125:
>2284		48 16					.word xt_testname
>2286		a5 17					.word xt_0
>2288		4d 2c					.word xt_0x3e
>228a		f8 17					.word xt_x28literalx29
>228c		00 00					.word 0
>228e		5f 16					.word xt_assertx3d
>2290		f8 17					.word xt_x28literalx29
>2292		98 22					.word l_126
>2294		ec 2d					.word xt_x28branchx29
>2296		a7 22					.word l_127
.2298						l_126:
>2298		33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>22a0		20 66 66 66 66 68 00
.22a7						l_127:
>22a7		48 16					.word xt_testname
>22a9		f8 17					.word xt_x28literalx29
>22ab		03 00					.word 3
>22ad		4d 2c					.word xt_0x3e
>22af		f8 17					.word xt_x28literalx29
>22b1		ff ff					.word 65535
>22b3		5f 16					.word xt_assertx3d
>22b5		f8 17					.word xt_x28literalx29
>22b7		bd 22					.word l_128
>22b9		ec 2d					.word xt_x28branchx29
>22bb		d0 22					.word l_129
.22bd						l_128:
>22bd		66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>22c5		20 2d 2d 3e 20 30 30 30 30 68 00
.22d0						l_129:
>22d0		48 16					.word xt_testname
>22d2		f8 17					.word xt_x28literalx29
>22d4		ff ff					.word 65535
>22d6		4d 2c					.word xt_0x3e
>22d8		f8 17					.word xt_x28literalx29
>22da		00 00					.word 0
>22dc		5f 16					.word xt_assertx3d
>22de		f8 17					.word xt_x28literalx29
>22e0		e6 22					.word l_130
>22e2		ec 2d					.word xt_x28branchx29
>22e4		fd 22					.word l_131
.22e6						l_130:
>22e6		63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>22ee		2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.22fd						l_131:
>22fd		48 16					.word xt_testname
>22ff		b6 2c					.word xt_cells
>2301		c1 17					.word xt_2
>2303		6d 2a					.word xt_x2d
>2305		30 2c					.word xt_0x3d
>2307		f8 17					.word xt_x28literalx29
>2309		ff ff					.word 65535
>230b		5f 16					.word xt_assertx3d
>230d		f8 17					.word xt_x28literalx29
>230f		15 23					.word l_132
>2311		ec 2d					.word xt_x28branchx29
>2313		2a 23					.word l_133
.2315						l_132:
>2315		62 6c 20 33 32 20 2d 20			.null "bl 32 - 0= --> ffffh"
>231d		30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.232a						l_133:
>232a		48 16					.word xt_testname
>232c		ce 2c					.word xt_bl
>232e		f8 17					.word xt_x28literalx29
>2330		20 00					.word 32
>2332		6d 2a					.word xt_x2d
>2334		30 2c					.word xt_0x3d
>2336		f8 17					.word xt_x28literalx29
>2338		ff ff					.word 65535
>233a		5f 16					.word xt_assertx3d
>233c		f8 17					.word xt_x28literalx29
>233e		44 23					.word l_134
>2340		ec 2d					.word xt_x28branchx29
>2342		56 23					.word l_135
.2344						l_134:
>2344		27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>234c		75 74 65 20 2d 2d 3e 20 31 00
.2356						l_135:
>2356		48 16					.word xt_testname
>2358		f8 17					.word xt_x28literalx29
>235a		b2 17					.word xt_1
>235c		ab 2f					.word xt_execute
>235e		b2 17					.word xt_1
>2360		5f 16					.word xt_assertx3d
>2362		f8 17					.word xt_x28literalx29
>2364		6a 23					.word l_136
>2366		ec 2d					.word xt_x28branchx29
>2368		80 23					.word l_137
.236a						l_136:
>236a		31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>2372		65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.2380						l_137:
>2380		48 16					.word xt_testname
>2382		b2 17					.word xt_1
>2384		c1 17					.word xt_2
>2386		f8 17					.word xt_x28literalx29
>2388		57 2a					.word xt_x2b
>238a		ab 2f					.word xt_execute
>238c		f8 17					.word xt_x28literalx29
>238e		03 00					.word 3
>2390		5f 16					.word xt_assertx3d
>2392		f8 17					.word xt_x28literalx29
>2394		9a 23					.word l_139
>2396		ec 2d					.word xt_x28branchx29
>2398		a7 23					.word l_140
.239a						l_139:
>239a		30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>23a2		2d 3e 20 30 00
.23a7						l_140:
>23a7		48 16					.word xt_testname
>23a9		a5 17					.word xt_0
>23ab		06 30					.word xt_x3fdup
>23ad		a5 17					.word xt_0
>23af		5f 16					.word xt_assertx3d
>23b1		f8 17					.word xt_x28literalx29
>23b3		b9 23					.word l_141
>23b5		ec 2d					.word xt_x28branchx29
>23b7		c8 23					.word l_142
.23b9						l_141:
>23b9		31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>23c1		2d 3e 20 31 20 31 00
.23c8						l_142:
>23c8		48 16					.word xt_testname
>23ca		b2 17					.word xt_1
>23cc		06 30					.word xt_x3fdup
>23ce		b2 17					.word xt_1
>23d0		5f 16					.word xt_assertx3d
>23d2		b2 17					.word xt_1
>23d4		5f 16					.word xt_assertx3d
>23d6		f8 17					.word xt_x28literalx29
>23d8		de 23					.word l_143
>23da		ec 2d					.word xt_x28branchx29
>23dc		ee 23					.word l_144
.23de						l_143:
>23de		31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>23e6		3e 20 66 66 66 66 68 00
.23ee						l_144:
>23ee		48 16					.word xt_testname
>23f0		b2 17					.word xt_1
>23f2		c1 17					.word xt_2
>23f4		26 30					.word xt_x3c
>23f6		f8 17					.word xt_x28literalx29
>23f8		ff ff					.word 65535
>23fa		5f 16					.word xt_assertx3d
>23fc		f8 17					.word xt_x28literalx29
>23fe		04 24					.word l_145
>2400		ec 2d					.word xt_x28branchx29
>2402		14 24					.word l_146
.2404						l_145:
>2404		32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>240c		3e 20 30 30 30 30 68 00
.2414						l_146:
>2414		48 16					.word xt_testname
>2416		c1 17					.word xt_2
>2418		b2 17					.word xt_1
>241a		26 30					.word xt_x3c
>241c		f8 17					.word xt_x28literalx29
>241e		00 00					.word 0
>2420		5f 16					.word xt_assertx3d
>2422		f8 17					.word xt_x28literalx29
>2424		2a 24					.word l_147
>2426		ec 2d					.word xt_x28branchx29
>2428		3e 24					.word l_148
.242a						l_147:
>242a		30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2432		3c 20 2d 2d 3e 20 30 30 30 30 68 00
.243e						l_148:
>243e		48 16					.word xt_testname
>2440		a5 17					.word xt_0
>2442		f8 17					.word xt_x28literalx29
>2444		ff ff					.word 65535
>2446		26 30					.word xt_x3c
>2448		f8 17					.word xt_x28literalx29
>244a		00 00					.word 0
>244c		5f 16					.word xt_assertx3d
>244e		f8 17					.word xt_x28literalx29
>2450		56 24					.word l_149
>2452		ec 2d					.word xt_x28branchx29
>2454		6a 24					.word l_150
.2456						l_149:
>2456		66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>245e		3c 20 2d 2d 3e 20 66 66 66 66 68 00
.246a						l_150:
>246a		48 16					.word xt_testname
>246c		f8 17					.word xt_x28literalx29
>246e		ff ff					.word 65535
>2470		a5 17					.word xt_0
>2472		26 30					.word xt_x3c
>2474		f8 17					.word xt_x28literalx29
>2476		ff ff					.word 65535
>2478		5f 16					.word xt_assertx3d
>247a		f8 17					.word xt_x28literalx29
>247c		82 24					.word l_151
>247e		ec 2d					.word xt_x28branchx29
>2480		92 24					.word l_152
.2482						l_151:
>2482		31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>248a		3e 20 30 30 30 30 68 00
.2492						l_152:
>2492		48 16					.word xt_testname
>2494		b2 17					.word xt_1
>2496		c1 17					.word xt_2
>2498		42 30					.word xt_x3e
>249a		f8 17					.word xt_x28literalx29
>249c		00 00					.word 0
>249e		5f 16					.word xt_assertx3d
>24a0		f8 17					.word xt_x28literalx29
>24a2		a8 24					.word l_153
>24a4		ec 2d					.word xt_x28branchx29
>24a6		b8 24					.word l_154
.24a8						l_153:
>24a8		32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>24b0		3e 20 66 66 66 66 68 00
.24b8						l_154:
>24b8		48 16					.word xt_testname
>24ba		c1 17					.word xt_2
>24bc		b2 17					.word xt_1
>24be		42 30					.word xt_x3e
>24c0		f8 17					.word xt_x28literalx29
>24c2		ff ff					.word 65535
>24c4		5f 16					.word xt_assertx3d
>24c6		f8 17					.word xt_x28literalx29
>24c8		ce 24					.word l_155
>24ca		ec 2d					.word xt_x28branchx29
>24cc		e2 24					.word l_156
.24ce						l_155:
>24ce		30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>24d6		3e 20 2d 2d 3e 20 66 66 66 66 68 00
.24e2						l_156:
>24e2		48 16					.word xt_testname
>24e4		a5 17					.word xt_0
>24e6		f8 17					.word xt_x28literalx29
>24e8		ff ff					.word 65535
>24ea		42 30					.word xt_x3e
>24ec		f8 17					.word xt_x28literalx29
>24ee		ff ff					.word 65535
>24f0		5f 16					.word xt_assertx3d
>24f2		f8 17					.word xt_x28literalx29
>24f4		fa 24					.word l_157
>24f6		ec 2d					.word xt_x28branchx29
>24f8		0e 25					.word l_158
.24fa						l_157:
>24fa		66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2502		3e 20 2d 2d 3e 20 30 30 30 30 68 00
.250e						l_158:
>250e		48 16					.word xt_testname
>2510		f8 17					.word xt_x28literalx29
>2512		ff ff					.word 65535
>2514		a5 17					.word xt_0
>2516		42 30					.word xt_x3e
>2518		f8 17					.word xt_x28literalx29
>251a		00 00					.word 0
>251c		5f 16					.word xt_assertx3d
>251e		f8 17					.word xt_x28literalx29
>2520		26 25					.word l_159
>2522		ec 2d					.word xt_x28branchx29
>2524		36 25					.word l_160
.2526						l_159:
>2526		31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>252e		3e 20 30 30 30 30 68 00
.2536						l_160:
>2536		48 16					.word xt_testname
>2538		b2 17					.word xt_1
>253a		a5 17					.word xt_0
>253c		5e 30					.word xt_x3d
>253e		f8 17					.word xt_x28literalx29
>2540		00 00					.word 0
>2542		5f 16					.word xt_assertx3d
>2544		f8 17					.word xt_x28literalx29
>2546		4c 25					.word l_161
>2548		ec 2d					.word xt_x28branchx29
>254a		5c 25					.word l_162
.254c						l_161:
>254c		31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2554		3e 20 66 66 66 66 68 00
.255c						l_162:
>255c		48 16					.word xt_testname
>255e		b2 17					.word xt_1
>2560		b2 17					.word xt_1
>2562		5e 30					.word xt_x3d
>2564		f8 17					.word xt_x28literalx29
>2566		ff ff					.word 65535
>2568		5f 16					.word xt_assertx3d
>256a		f8 17					.word xt_x28literalx29
>256c		72 25					.word l_163
>256e		ec 2d					.word xt_x28branchx29
>2570		86 25					.word l_164
.2572						l_163:
>2572		66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>257a		3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2586						l_164:
>2586		48 16					.word xt_testname
>2588		f8 17					.word xt_x28literalx29
>258a		ff ff					.word 65535
>258c		a5 17					.word xt_0
>258e		5e 30					.word xt_x3d
>2590		f8 17					.word xt_x28literalx29
>2592		00 00					.word 0
>2594		5f 16					.word xt_assertx3d
>2596		f8 17					.word xt_x28literalx29
>2598		9e 25					.word l_165
>259a		ec 2d					.word xt_x28branchx29
>259c		b6 25					.word l_166
.259e						l_165:
>259e		66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>25a6		66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.25b6						l_166:
>25b6		48 16					.word xt_testname
>25b8		f8 17					.word xt_x28literalx29
>25ba		ff ff					.word 65535
>25bc		f8 17					.word xt_x28literalx29
>25be		ff ff					.word 65535
>25c0		5e 30					.word xt_x3d
>25c2		f8 17					.word xt_x28literalx29
>25c4		ff ff					.word 65535
>25c6		5f 16					.word xt_assertx3d
>25c8		f8 17					.word xt_x28literalx29
>25ca		d0 25					.word l_167
>25cc		ec 2d					.word xt_x28branchx29
>25ce		e0 25					.word l_168
.25d0						l_167:
>25d0		30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>25d8		3e 20 66 66 66 66 68 00
.25e0						l_168:
>25e0		48 16					.word xt_testname
>25e2		a5 17					.word xt_0
>25e4		a5 17					.word xt_0
>25e6		5e 30					.word xt_x3d
>25e8		f8 17					.word xt_x28literalx29
>25ea		ff ff					.word 65535
>25ec		5f 16					.word xt_assertx3d
>25ee		f8 17					.word xt_x28literalx29
>25f0		f6 25					.word l_169
>25f2		ec 2d					.word xt_x28branchx29
>25f4		02 26					.word l_170
.25f6						l_169:
>25f6		36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>25fe		3e 20 32 00
.2602						l_170:
>2602		48 16					.word xt_testname
>2604		f8 17					.word xt_x28literalx29
>2606		06 00					.word 6
>2608		f8 17					.word xt_x28literalx29
>260a		03 00					.word 3
>260c		7a 30					.word xt_x2f
>260e		c1 17					.word xt_2
>2610		5f 16					.word xt_assertx3d
>2612		f8 17					.word xt_x28literalx29
>2614		1a 26					.word l_171
>2616		ec 2d					.word xt_x28branchx29
>2618		27 26					.word l_172
.261a						l_171:
>261a		31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2622		2d 3e 20 33 00
.2627						l_172:
>2627		48 16					.word xt_testname
>2629		f8 17					.word xt_x28literalx29
>262b		0a 00					.word 10
>262d		f8 17					.word xt_x28literalx29
>262f		03 00					.word 3
>2631		7a 30					.word xt_x2f
>2633		f8 17					.word xt_x28literalx29
>2635		03 00					.word 3
>2637		5f 16					.word xt_assertx3d
>2639		f8 17					.word xt_x28literalx29
>263b		41 26					.word l_173
>263d		ec 2d					.word xt_x28branchx29
>263f		4f 26					.word l_174
.2641						l_173:
>2641		36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2649		2d 2d 3e 20 30 00
.264f						l_174:
>264f		48 16					.word xt_testname
>2651		f8 17					.word xt_x28literalx29
>2653		06 00					.word 6
>2655		f8 17					.word xt_x28literalx29
>2657		03 00					.word 3
>2659		98 30					.word xt_mod
>265b		a5 17					.word xt_0
>265d		5f 16					.word xt_assertx3d
>265f		f8 17					.word xt_x28literalx29
>2661		67 26					.word l_175
>2663		ec 2d					.word xt_x28branchx29
>2665		76 26					.word l_176
.2667						l_175:
>2667		31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>266f		20 2d 2d 3e 20 31 00
.2676						l_176:
>2676		48 16					.word xt_testname
>2678		f8 17					.word xt_x28literalx29
>267a		0a 00					.word 10
>267c		f8 17					.word xt_x28literalx29
>267e		03 00					.word 3
>2680		98 30					.word xt_mod
>2682		b2 17					.word xt_1
>2684		5f 16					.word xt_assertx3d
>2686		f8 17					.word xt_x28literalx29
>2688		8e 26					.word l_180
>268a		ec 2d					.word xt_x28branchx29
>268c		9c 26					.word l_181
.268e						l_180:
>268e		31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2696		2d 2d 3e 20 32 00
.269c						l_181:
>269c		48 16					.word xt_testname
>269e		b2 17					.word xt_1
>26a0		c1 17					.word xt_2
>26a2		da 30					.word xt_max
>26a4		c1 17					.word xt_2
>26a6		5f 16					.word xt_assertx3d
>26a8		f8 17					.word xt_x28literalx29
>26aa		b0 26					.word l_182
>26ac		ec 2d					.word xt_x28branchx29
>26ae		be 26					.word l_183
.26b0						l_182:
>26b0		33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>26b8		2d 2d 3e 20 33 00
.26be						l_183:
>26be		48 16					.word xt_testname
>26c0		f8 17					.word xt_x28literalx29
>26c2		03 00					.word 3
>26c4		a5 17					.word xt_0
>26c6		da 30					.word xt_max
>26c8		f8 17					.word xt_x28literalx29
>26ca		03 00					.word 3
>26cc		5f 16					.word xt_assertx3d
>26ce		f8 17					.word xt_x28literalx29
>26d0		d6 26					.word l_184
>26d2		ec 2d					.word xt_x28branchx29
>26d4		f0 26					.word l_185
.26d6						l_184:
>26d6		66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>26de		66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>26ee		68 00
.26f0						l_185:
>26f0		48 16					.word xt_testname
>26f2		f8 17					.word xt_x28literalx29
>26f4		fe ff					.word 65534
>26f6		f8 17					.word xt_x28literalx29
>26f8		ff ff					.word 65535
>26fa		da 30					.word xt_max
>26fc		f8 17					.word xt_x28literalx29
>26fe		ff ff					.word 65535
>2700		5f 16					.word xt_assertx3d
>2702		f8 17					.word xt_x28literalx29
>2704		0a 27					.word l_188
>2706		ec 2d					.word xt_x28branchx29
>2708		18 27					.word l_189
.270a						l_188:
>270a		31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2712		2d 2d 3e 20 31 00
.2718						l_189:
>2718		48 16					.word xt_testname
>271a		b2 17					.word xt_1
>271c		c1 17					.word xt_2
>271e		06 31					.word xt_min
>2720		b2 17					.word xt_1
>2722		5f 16					.word xt_assertx3d
>2724		f8 17					.word xt_x28literalx29
>2726		2c 27					.word l_190
>2728		ec 2d					.word xt_x28branchx29
>272a		3a 27					.word l_191
.272c						l_190:
>272c		33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2734		2d 2d 3e 20 30 00
.273a						l_191:
>273a		48 16					.word xt_testname
>273c		f8 17					.word xt_x28literalx29
>273e		03 00					.word 3
>2740		a5 17					.word xt_0
>2742		06 31					.word xt_min
>2744		a5 17					.word xt_0
>2746		5f 16					.word xt_assertx3d
>2748		f8 17					.word xt_x28literalx29
>274a		50 27					.word l_192
>274c		ec 2d					.word xt_x28branchx29
>274e		6a 27					.word l_193
.2750						l_192:
>2750		66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2758		66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2768		68 00
.276a						l_193:
>276a		48 16					.word xt_testname
>276c		f8 17					.word xt_x28literalx29
>276e		fe ff					.word 65534
>2770		f8 17					.word xt_x28literalx29
>2772		ff ff					.word 65535
>2774		06 31					.word xt_min
>2776		f8 17					.word xt_x28literalx29
>2778		fe ff					.word 65534
>277a		5f 16					.word xt_assertx3d
>277c		f8 17					.word xt_x28literalx29
>277e		84 27					.word l_194
>2780		ec 2d					.word xt_x28branchx29
>2782		98 27					.word l_195
.2784						l_194:
>2784		31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>278c		74 20 2d 2d 3e 20 32 20 33 20 31 00
.2798						l_195:
>2798		48 16					.word xt_testname
>279a		b2 17					.word xt_1
>279c		c1 17					.word xt_2
>279e		f8 17					.word xt_x28literalx29
>27a0		03 00					.word 3
>27a2		32 31					.word xt_rot
>27a4		b2 17					.word xt_1
>27a6		5f 16					.word xt_assertx3d
>27a8		f8 17					.word xt_x28literalx29
>27aa		03 00					.word 3
>27ac		5f 16					.word xt_assertx3d
>27ae		c1 17					.word xt_2
>27b0		5f 16					.word xt_assertx3d
>27b2		f8 17					.word xt_x28literalx29
>27b4		ba 27					.word l_196
>27b6		ec 2d					.word xt_x28branchx29
>27b8		cf 27					.word l_197
.27ba						l_196:
>27ba		31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>27c2		20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.27cf						l_197:
>27cf		48 16					.word xt_testname
>27d1		b2 17					.word xt_1
>27d3		c1 17					.word xt_2
>27d5		52 31					.word xt_2dup
>27d7		c1 17					.word xt_2
>27d9		5f 16					.word xt_assertx3d
>27db		b2 17					.word xt_1
>27dd		5f 16					.word xt_assertx3d
>27df		c1 17					.word xt_2
>27e1		5f 16					.word xt_assertx3d
>27e3		b2 17					.word xt_1
>27e5		5f 16					.word xt_assertx3d
>27e7		f8 17					.word xt_x28literalx29
>27e9		ef 27					.word l_198
>27eb		ec 2d					.word xt_x28branchx29
>27ed		05 28					.word l_199
.27ef						l_198:
>27ef		31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>27f7		32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.2805						l_199:
>2805		48 16					.word xt_testname
>2807		b2 17					.word xt_1
>2809		c1 17					.word xt_2
>280b		f8 17					.word xt_x28literalx29
>280d		03 00					.word 3
>280f		f8 17					.word xt_x28literalx29
>2811		04 00					.word 4
>2813		6e 31					.word xt_2drop
>2815		c1 17					.word xt_2
>2817		5f 16					.word xt_assertx3d
>2819		b2 17					.word xt_1
>281b		5f 16					.word xt_assertx3d
>281d		08 16					.word i_exit
.281f						w_drop:
>281f		04					.byte $04
>2820		64 72 6f 70				.text 'drop'
>2824		2d 18					.word w_unittest
.2826						xt_drop:
.2826		e8		inx			inx
.2827		e8		inx			inx
.2828		4c 23 16	jmp $1623		jmp next
.282b						w_dup:
>282b		03					.byte $03
>282c		64 75 70				.text 'dup'
>282f		1f 28					.word w_drop
.2831						xt_dup:
.2831		b5 02		lda $02,x		lda pstack+2,x
.2833		95 00		sta $00,x		sta pstack,x
.2835		b5 03		lda $03,x		lda pstack+3,x
.2837		95 01		sta $01,x		sta pstack+1,x
.2839		ca		dex			dex
.283a		ca		dex			dex
.283b		4c 23 16	jmp $1623		jmp next
.283e						w_swap:
>283e		04					.byte $04
>283f		73 77 61 70				.text 'swap'
>2843		2b 28					.word w_dup
.2845						xt_swap:
.2845		b5 02		lda $02,x		lda pstack+2,x
.2847		b4 04		ldy $04,x		ldy pstack+4,x
.2849		94 02		sty $02,x		sty pstack+2,x
.284b		95 04		sta $04,x		sta pstack+4,x
.284d		b5 03		lda $03,x		lda pstack+3,x
.284f		b4 05		ldy $05,x		ldy pstack+5,x
.2851		94 03		sty $03,x		sty pstack+3,x
.2853		95 05		sta $05,x		sta pstack+5,x
.2855		4c 23 16	jmp $1623		jmp next
.2858						w_over:
>2858		04					.byte $04
>2859		6f 76 65 72				.text 'over'
>285d		3e 28					.word w_swap
.285f						xt_over:
.285f		b5 04		lda $04,x		lda pstack+4,x
.2861		95 00		sta $00,x		sta pstack,x
.2863		b5 05		lda $05,x		lda pstack+5,x
.2865		95 01		sta $01,x		sta pstack+1,x
.2867		ca		dex			dex
.2868		ca		dex			dex
.2869		4c 23 16	jmp $1623		jmp next
.286c						w_x3er:
>286c		02					.byte $02
>286d		3e 72					.text '>r'
>286f		58 28					.word w_over
.2871						xt_x3er:
.2871		b5 03		lda $03,x		lda pstack+3,x
.2873		48		pha			pha
.2874		b5 02		lda $02,x		lda pstack+2,x
.2876		48		pha			pha
.2877		e8		inx			inx
.2878		e8		inx			inx
.2879		4c 23 16	jmp $1623		jmp next
.287c						w_rx3e:
>287c		02					.byte $02
>287d		72 3e					.text 'r>'
>287f		6c 28					.word w_x3er
.2881						xt_rx3e:
.2881		68		pla			pla
.2882		95 00		sta $00,x		sta pstack,x
.2884		68		pla			pla
.2885		95 01		sta $01,x		sta pstack+1,x
.2887		ca		dex			dex
.2888		ca		dex			dex
.2889		4c 23 16	jmp $1623		jmp next
.288c						w_r:
>288c		01					.byte $01
>288d		72					.text 'r'
>288e		7c 28					.word w_rx3e
.2890						xt_r:
.2890		68		pla			pla
.2891		95 00		sta $00,x		sta pstack,x
.2893		68		pla			pla
.2894		95 01		sta $01,x		sta pstack+1,x
.2896		48		pha			pha
.2897		b5 00		lda $00,x		lda pstack,x
.2899		48		pha			pha
.289a		ca		dex			dex
.289b		ca		dex			dex
.289c		4c 23 16	jmp $1623		jmp next
.289f						w_rdrop:
>289f		05					.byte $05
>28a0		72 64 72 6f 70				.text 'rdrop'
>28a5		8c 28					.word w_r
.28a7						xt_rdrop:
.28a7		68		pla			pla
.28a8		68		pla			pla
.28a9						w_x21:
>28a9		01					.byte $01
>28aa		21					.text '!'
>28ab		9f 28					.word w_rdrop
.28ad						xt_x21:
.28ad		b5 02		lda $02,x		lda pstack+2,x
.28af		85 32		sta $32			sta tmp
.28b1		b5 03		lda $03,x		lda pstack+3,x
.28b3		85 33		sta $33			sta tmp+1
.28b5		a0 01		ldy #$01		ldy #1
.28b7		b5 04		lda $04,x		lda pstack+4,x
.28b9		92 32		sta ($32)		sta (tmp)
.28bb		b5 05		lda $05,x		lda pstack+5,x
.28bd		91 32		sta ($32),y		sta (tmp),y
.28bf		e8		inx			inx
.28c0		e8		inx			inx
.28c1		e8		inx			inx
.28c2		e8		inx			inx
.28c3		4c 23 16	jmp $1623		jmp next
.28c6						w_x40:
>28c6		01					.byte $01
>28c7		40					.text '@'
>28c8		a9 28					.word w_x21
.28ca						xt_x40:
.28ca		b5 02		lda $02,x		lda pstack+2,x
.28cc		85 32		sta $32			sta tmp
.28ce		b5 03		lda $03,x		lda pstack+3,x
.28d0		85 33		sta $33			sta tmp+1
.28d2		a0 01		ldy #$01		ldy #1
.28d4		b2 32		lda ($32)		lda (tmp)
.28d6		95 02		sta $02,x		sta pstack+2,x
.28d8		b1 32		lda ($32),y		lda (tmp),y
.28da		95 03		sta $03,x		sta pstack+3,x
.28dc		4c 23 16	jmp $1623		jmp next
.28df						w_cx21:
>28df		02					.byte $02
>28e0		63 21					.text 'c!'
>28e2		c6 28					.word w_x40
.28e4						xt_cx21:
.28e4		b5 04		lda $04,x		lda pstack+4,x
.28e6		81 02		sta ($02,x)		sta (pstack+2,x)
.28e8		e8		inx			inx
.28e9		e8		inx			inx
.28ea		e8		inx			inx
.28eb		e8		inx			inx
.28ec		4c 23 16	jmp $1623		jmp next
.28ef						w_cx40:
>28ef		02					.byte $02
>28f0		63 40					.text 'c@'
>28f2		df 28					.word w_cx21
.28f4						xt_cx40:
.28f4		a1 02		lda ($02,x)		lda (pstack+2,x)
.28f6		95 02		sta $02,x		sta pstack+2,x
.28f8		74 03		stz $03,x		stz pstack+3,x
.28fa		4c 23 16	jmp $1623		jmp next
.28fd						w_fill:
>28fd		04					.byte $04
>28fe		66 69 6c 6c				.text 'fill'
>2902		ef 28					.word w_cx40
.2904						xt_fill:
.2904							loop:
.2904		b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.2906		d0 04		bne $290c		bne do_write
.2908		b5 04		lda $04,x		lda pstack+4,x
.290a		f0 19		beq $2925		beq done                ; Yes: we're done...
.290c							do_write:
.290c		b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.290e		81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.2910		f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.2912		d0 02		bne $2916		bne deccount
.2914		f6 06		inc $06,x		inc pstack+6,x
.2916							deccount:
.2916		38		sec			sec                     ; Decrement the count
.2917		b5 03		lda $03,x		lda pstack+3,x
.2919		e9 01		sbc #$01		sbc #1
.291b		95 03		sta $03,x		sta pstack+3,x
.291d		b5 04		lda $04,x		lda pstack+4,x
.291f		e9 00		sbc #$00		sbc #0
.2921		95 04		sta $04,x		sta pstack+4,x
.2923		80 df		bra $2904		bra loop                ; And check again
.2925							done:
.2925		8a		txa			txa                     ; Clean up the parameter stack
.2926		69 06		adc #$06		adc #6
.2928		aa		tax			tax
.2929		4c 23 16	jmp $1623		jmp next
.292c						w_x2bx21:
>292c		02					.byte $02
>292d		2b 21					.text '+!'
>292f		fd 28					.word w_fill
.2931						xt_x2bx21:
.2931		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the low byte
.2933		1a		inc a			inc a
.2934		81 02		sta ($02,x)		sta (pstack+2,x)
.2936		d0 11		bne $2949		bne done                ; If it does not roll over, we're done
.2938		b5 02		lda $02,x		lda pstack+2,x          ; Increment the pointer
.293a		1a		inc a			inc a
.293b		95 02		sta $02,x		sta pstack+2,x
.293d		d0 05		bne $2944		bne inc2
.293f		b5 03		lda $03,x		lda pstack+3,x
.2941		1a		inc a			inc a
.2942		95 03		sta $03,x		sta pstack+3,x
.2944							inc2:
.2944		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the high byte
.2946		1a		inc a			inc a
.2947		81 02		sta ($02,x)		sta (pstack+2,x)
.2949							done:
.2949		e8		inx			inx                     ; Clean up the stack
.294a		e8		inx			inx
.294b		4c 23 16	jmp $1623		jmp next
.294e						w_enclose:
>294e		07					.byte $07
>294f		65 6e 63 6c 6f 73 65			.text 'enclose'
>2956		2c 29					.word w_x2bx21
.2958						xt_enclose:
.2958		b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.295a		85 25		sta $25			sta src_ptr+1
.295c		b5 04		lda $04,x		lda pstack+4,x
.295e		85 24		sta $24			sta src_ptr
.2960		b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.2962		85 32		sta $32			sta tmp
.2964		8a		txa			txa
.2965		38		sec			sec
.2966		e9 04		sbc #$04		sbc #4
.2968		aa		tax			tax
.2969		74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.296b		74 06		stz $06,x		stz pstack+6,x
.296d		74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.296f		74 04		stz $04,x		stz pstack+4,x
.2971		74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.2973		74 02		stz $02,x		stz pstack+2,x
.2975		a0 00		ldy #$00		ldy #0
.2977							loop1:
.2977		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2979		d0 03		bne $297e		bne chk_delim1          ; NUL? No:; check it against the delimiter
.297b							none:
.297b		4c 23 16	jmp $1623		jmp next                ; Yes: we want to return 0s
.297e							chk_delim1:
.297e		c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.2980		f0 13		beq $2995		beq skip2               ; Yes: skip the character
.2982		a5 32		lda $32			lda tmp                 ; Check the delimiter
.2984		c9 20		cmp #$20		cmp #' '                ; Is it BL?
.2986		d0 0b		bne $2993		bne found               ; No: ok, we've found the first character;
.2988		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.298a		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.298c		d0 05		bne $2993		bne found               ; No: we found the first character
.298e		c8		iny			iny                     ; Move to the next character
.298f		f0 ea		beq $297b		beq none                ; If we've rolled over, we found nothing
.2991		80 e4		bra $2977		bra loop1               ; Otherwise: check the next character
.2993							found:
.2993		94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.2995							skip2:
.2995		c8		iny			iny                     ; Go to the next character
.2996		f0 1c		beq $29b4		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.2998							loop2:
.2998		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.299a		f0 18		beq $29b4		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.299c		c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.299e		f0 0c		beq $29ac		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.29a0		a5 32		lda $32			lda tmp                 ; Get the delimiter
.29a2		c9 20		cmp #$20		cmp #' '                ; Is it space?
.29a4		d0 ef		bne $2995		bne skip2               ; No: go to the next character
.29a6		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.29a8		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.29aa		d0 e9		bne $2995		bne skip2               ; No: go to the next character
.29ac							found_delim:
.29ac		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.29ae		c8		iny			iny
.29af		94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.29b1		4c 23 16	jmp $1623		jmp next                ; And we're done
.29b4							found_nul:
.29b4		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.29b6		94 02		sty $02,x		sty pstack+2,x          ; And to n3
.29b8		4c 23 16	jmp $1623		jmp next                ; And we're done
.29bb						w_move:
>29bb		04					.byte $04
>29bc		6d 6f 76 65				.text 'move'
>29c0		4e 29					.word w_enclose
.29c2						xt_move:
.29c2		38		sec			sec                     ; Compare addr1 and addr2
.29c3		b5 06		lda $06,x		lda pstack+6,x
.29c5		f5 04		sbc $04,x		sbc pstack+4,x
.29c7		85 32		sta $32			sta tmp
.29c9		b5 07		lda $07,x		lda pstack+7,x
.29cb		f5 05		sbc $05,x		sbc pstack+5,x
.29cd		85 33		sta $33			sta tmp+1
.29cf		30 24		bmi $29f5		bmi a1less
.29d1		f0 72		beq $2a45		beq chklo
.29d3							a1greater:
.29d3		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.29d5		d0 50		bne $2a27		bne docopy1
.29d7		b5 03		lda $03,x		lda pstack+3,x
.29d9		f0 72		beq $2a4d		beq done                ; Yes: we're done;
.29db		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.29dd		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.29df		f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.29e1		d0 02		bne $29e5		bne inc2
.29e3		f6 07		inc $07,x		inc pstack+7,x
.29e5							inc2:
.29e5		f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.29e7		d0 02		bne $29eb		bne dec_count
.29e9		f6 03		inc $03,x		inc pstack+3,x
.29eb							dec_count:
.29eb		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.29ed		d0 02		bne $29f1		bne l1
.29ef		d6 03		dec $03,x		dec pstack+3,x
.29f1							l1:
.29f1		d6 02		dec $02,x		dec pstack+2,x
.29f3		80 de		bra $29d3		bra a1greater
.29f5							a1less:
.29f5		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.29f7		d0 02		bne $29fb		bne l2
.29f9		d6 05		dec $05,x		dec pstack+5,x
.29fb							l2:
.29fb		d6 04		dec $04,x		dec pstack+4,x
.29fd		18		clc			clc                     ; addr2 := addr2 + u
.29fe		b5 04		lda $04,x		lda pstack+4,x
.2a00		75 02		adc $02,x		adc pstack+2,x
.2a02		95 04		sta $04,x		sta pstack+4,x
.2a04		b5 05		lda $05,x		lda pstack+5,x
.2a06		75 03		adc $03,x		adc pstack+3,x
.2a08		95 05		sta $05,x		sta pstack+5,x
.2a0a		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2a0c		d0 02		bne $2a10		bne l3
.2a0e		d6 07		dec $07,x		dec pstack+7,x
.2a10							l3:
.2a10		d6 06		dec $06,x		dec pstack+6,x
.2a12		18		clc			clc                     ; addr1 := addr1 + u
.2a13		b5 06		lda $06,x		lda pstack+6,x
.2a15		75 02		adc $02,x		adc pstack+2,x
.2a17		95 06		sta $06,x		sta pstack+6,x
.2a19		b5 07		lda $07,x		lda pstack+7,x
.2a1b		75 03		adc $03,x		adc pstack+3,x
.2a1d		95 07		sta $07,x		sta pstack+7,x
.2a1f							loop2:
.2a1f		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2a21		d0 04		bne $2a27		bne docopy1
.2a23		b5 03		lda $03,x		lda pstack+3,x
.2a25		f0 26		beq $2a4d		beq done                ; Yes: we're done;
.2a27							docopy1:
.2a27		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2a29		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2a2b		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2a2d		d0 02		bne $2a31		bne l4
.2a2f		d6 07		dec $07,x		dec pstack+7,x
.2a31							l4:
.2a31		d6 06		dec $06,x		dec pstack+6,x
.2a33		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2a35		d0 02		bne $2a39		bne l5
.2a37		d6 05		dec $05,x		dec pstack+5,x
.2a39							l5:
.2a39		d6 04		dec $04,x		dec pstack+4,x
.2a3b		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2a3d		d0 02		bne $2a41		bne l6
.2a3f		d6 03		dec $03,x		dec pstack+3,x
.2a41							l6:
.2a41		d6 02		dec $02,x		dec pstack+2,x
.2a43		80 da		bra $2a1f		bra loop2
.2a45							chklo:
.2a45		a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2a47		30 ac		bmi $29f5		bmi a1less
.2a49		f0 02		beq $2a4d		beq done                ; If equal, we don't need to move the data
.2a4b		80 86		bra $29d3		bra a1greater
.2a4d							done:
.2a4d		8a		txa			txa
.2a4e		18		clc			clc
.2a4f		69 06		adc #$06		adc #6
.2a51		aa		tax			tax
.2a52		60		rts			rts
.2a53						w_x2b:
>2a53		01					.byte $01
>2a54		2b					.text '+'
>2a55		bb 29					.word w_move
.2a57						xt_x2b:
.2a57		18		clc			clc
.2a58		b5 04		lda $04,x		lda pstack+4,x
.2a5a		75 02		adc $02,x		adc pstack+2,x
.2a5c		95 04		sta $04,x		sta pstack+4,x
.2a5e		b5 05		lda $05,x		lda pstack+5,x
.2a60		75 03		adc $03,x		adc pstack+3,x
.2a62		95 05		sta $05,x		sta pstack+5,x
.2a64		e8		inx			inx
.2a65		e8		inx			inx
.2a66		4c 23 16	jmp $1623		jmp next
.2a69						w_x2d:
>2a69		01					.byte $01
>2a6a		2d					.text '-'
>2a6b		53 2a					.word w_x2b
.2a6d						xt_x2d:
.2a6d		38		sec			sec
.2a6e		b5 04		lda $04,x		lda pstack+4,x
.2a70		f5 02		sbc $02,x		sbc pstack+2,x
.2a72		95 04		sta $04,x		sta pstack+4,x
.2a74		b5 05		lda $05,x		lda pstack+5,x
.2a76		f5 03		sbc $03,x		sbc pstack+3,x
.2a78		95 05		sta $05,x		sta pstack+5,x
.2a7a		e8		inx			inx
.2a7b		e8		inx			inx
.2a7c		4c 23 16	jmp $1623		jmp next
.2a7f						w_x2a:
>2a7f		01					.byte $01
>2a80		2a					.text '*'
>2a81		69 2a					.word w_x2d
.2a83						xt_x2a:
.2a83		64 36		stz $36			stz sign
.2a85		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2a87		10 11		bpl $2a9a		bpl chk_n2
.2a89		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2a8b		85 36		sta $36			sta sign
.2a8d		38		sec			sec             ; Negate n1
.2a8e		a9 00		lda #$00		lda #0
.2a90		f5 04		sbc $04,x		sbc pstack+4,x
.2a92		95 04		sta $04,x		sta pstack+4,x
.2a94		a9 00		lda #$00		lda #0
.2a96		f5 05		sbc $05,x		sbc pstack+5,x
.2a98		95 05		sta $05,x		sta pstack+5,x
.2a9a							chk_n2:
.2a9a		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2a9c		10 13		bpl $2ab1		bpl init_tmp
.2a9e		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2aa0		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2aa2		85 36		sta $36			sta sign
.2aa4		38		sec			sec             ; Negate n2
.2aa5		a9 00		lda #$00		lda #0
.2aa7		f5 02		sbc $02,x		sbc pstack+2,x
.2aa9		95 02		sta $02,x		sta pstack+2,x
.2aab		a9 00		lda #$00		lda #0
.2aad		f5 03		sbc $03,x		sbc pstack+3,x
.2aaf		95 03		sta $03,x		sta pstack+3,x
.2ab1							init_tmp:
.2ab1		a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2ab3		85 34		sta $34			sta tmp+2
.2ab5		a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2ab7							l1:
.2ab7		56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.2ab9		76 02		ror $02,x		ror pstack+2,x
.2abb		90 0b		bcc $2ac8		bcc l2          ; 0 or 1?
.2abd		a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.2abe		18		clc			clc
.2abf		b5 04		lda $04,x		lda pstack+4,x
.2ac1		65 34		adc $34			adc tmp+2
.2ac3		85 34		sta $34			sta tmp+2
.2ac5		98		tya			tya
.2ac6		75 05		adc $05,x		adc pstack+5,x
.2ac8							l2:
.2ac8		6a		ror a			ror A
.2ac9		66 34		ror $34			ror tmp+2
.2acb		66 33		ror $33			ror tmp+1
.2acd		66 32		ror $32			ror tmp
.2acf		3a		dec a			dec a
.2ad0		d0 e5		bne $2ab7		bne l1
.2ad2		85 35		sta $35			sta tmp+3
.2ad4		a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2ad6		95 04		sta $04,x		sta pstack+4,x
.2ad8		a5 33		lda $33			lda tmp+1
.2ada		95 05		sta $05,x		sta pstack+5,x
.2adc		e8		inx			inx             ; Clean up parameter stack
.2add		e8		inx			inx
.2ade		a5 36		lda $36			lda sign        ; Check the sign
.2ae0		10 0d		bpl $2aef		bpl done
.2ae2		38		sec			sec             ; If negative, negate result
.2ae3		a9 00		lda #$00		lda #0
.2ae5		f5 02		sbc $02,x		sbc pstack+2,x
.2ae7		95 02		sta $02,x		sta pstack+2,x
.2ae9		a9 00		lda #$00		lda #0
.2aeb		f5 03		sbc $03,x		sbc pstack+3,x
.2aed		95 03		sta $03,x		sta pstack+3,x
.2aef							done:
.2aef		4c 23 16	jmp $1623		jmp next
.2af2						w_x2fmod:
>2af2		04					.byte $04
>2af3		2f 6d 6f 64				.text '/mod'
>2af7		7f 2a					.word w_x2a
.2af9						xt_x2fmod:
.2af9		64 36		stz $36			stz sign
.2afb		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2afd		10 11		bpl $2b10		bpl chk_n2
.2aff		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2b01		85 36		sta $36			sta sign
.2b03		38		sec			sec             ; Negate n1
.2b04		a9 00		lda #$00		lda #0
.2b06		f5 04		sbc $04,x		sbc pstack+4,x
.2b08		95 04		sta $04,x		sta pstack+4,x
.2b0a		a9 00		lda #$00		lda #0
.2b0c		f5 05		sbc $05,x		sbc pstack+5,x
.2b0e		95 05		sta $05,x		sta pstack+5,x
.2b10							chk_n2:
.2b10		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2b12		10 13		bpl $2b27		bpl init_tmp
.2b14		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2b16		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2b18		85 36		sta $36			sta sign
.2b1a		38		sec			sec             ; Negate n2
.2b1b		a9 00		lda #$00		lda #0
.2b1d		f5 02		sbc $02,x		sbc pstack+2,x
.2b1f		95 02		sta $02,x		sta pstack+2,x
.2b21		a9 00		lda #$00		lda #0
.2b23		f5 03		sbc $03,x		sbc pstack+3,x
.2b25		95 03		sta $03,x		sta pstack+3,x
.2b27							init_tmp:
.2b27		64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.2b29		64 33		stz $33			stz tmp+1
.2b2b		a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.2b2d		85 35		sta $35			sta counter
.2b2f							l1:
.2b2f		16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.2b31		36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.2b33		26 32		rol $32			rol tmp
.2b35		26 33		rol $33			rol tmp+1
.2b37		a5 32		lda $32			lda tmp
.2b39		38		sec			sec             ; Trial subtraction
.2b3a		f5 02		sbc $02,x		sbc pstack+2,x
.2b3c		a8		tay			tay
.2b3d		b5 33		lda $33,x		lda tmp+1,x
.2b3f		f5 03		sbc $03,x		sbc pstack+3,x
.2b41		90 06		bcc $2b49		bcc l2          ; Did subtraction succeed?
.2b43		85 33		sta $33			sta tmp+1       ; If yes, save it
.2b45		84 32		sty $32			sty tmp
.2b47		f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.2b49							l2:
.2b49		c6 35		dec $35			dec counter
.2b4b		d0 e2		bne $2b2f		bne l1
.2b4d		b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2b4f		95 03		sta $03,x		sta pstack+3,x
.2b51		b5 04		lda $04,x		lda pstack+4,x
.2b53		95 02		sta $02,x		sta pstack+2,x
.2b55		a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2b57		95 04		sta $04,x		sta pstack+4,x
.2b59		a5 33		lda $33			lda tmp+1
.2b5b		95 05		sta $05,x		sta pstack+5,x
.2b5d		a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2b5f		10 0d		bpl $2b6e		bpl done
.2b61		38		sec			sec             ; Negate the quotient
.2b62		a9 00		lda #$00		lda #0
.2b64		f5 02		sbc $02,x		sbc pstack+2,x
.2b66		95 02		sta $02,x		sta pstack+2,x
.2b68		a9 00		lda #$00		lda #0
.2b6a		f5 03		sbc $03,x		sbc pstack+3,x
.2b6c		95 03		sta $03,x		sta pstack+3,x
.2b6e							done:
.2b6e		4c 23 16	jmp $1623		jmp next
.2b71						w_1x2b:
>2b71		02					.byte $02
>2b72		31 2b					.text '1+'
>2b74		f2 2a					.word w_x2fmod
.2b76						xt_1x2b:
.2b76		f6 02		inc $02,x		inc pstack+2,x
.2b78		d0 02		bne $2b7c		bne skip
.2b7a		f6 03		inc $03,x		inc pstack+3,x
.2b7c							skip:
.2b7c		4c 23 16	jmp $1623		jmp next
.2b7f						w_2x2b:
>2b7f		02					.byte $02
>2b80		32 2b					.text '2+'
>2b82		71 2b					.word w_1x2b
.2b84						xt_2x2b:
.2b84		18		clc			clc
.2b85		b5 02		lda $02,x		lda pstack+2,x
.2b87		69 02		adc #$02		adc #2
.2b89		95 02		sta $02,x		sta pstack+2,x
.2b8b		b5 03		lda $03,x		lda pstack+3,x
.2b8d		69 00		adc #$00		adc #0
.2b8f		95 03		sta $03,x		sta pstack+3,x
.2b91		4c 23 16	jmp $1623		jmp next
.2b94						w_1x2d:
>2b94		02					.byte $02
>2b95		31 2d					.text '1-'
>2b97		7f 2b					.word w_2x2b
.2b99						xt_1x2d:
.2b99		b5 02		lda $02,x		lda pstack+2,x
.2b9b		d0 02		bne $2b9f		bne l1
.2b9d		d6 03		dec $03,x		dec pstack+3,x
.2b9f							l1:
.2b9f		d6 02		dec $02,x		dec pstack+2,x
.2ba1		4c 23 16	jmp $1623		jmp next
.2ba4						w_2x2d:
>2ba4		02					.byte $02
>2ba5		32 2d					.text '2-'
>2ba7		94 2b					.word w_1x2d
.2ba9						xt_2x2d:
.2ba9		38		sec			sec
.2baa		b5 02		lda $02,x		lda pstack+2,x
.2bac		e9 02		sbc #$02		sbc #2
.2bae		95 02		sta $02,x		sta pstack+2,x
.2bb0		b5 03		lda $03,x		lda pstack+3,x
.2bb2		e9 00		sbc #$00		sbc #0
.2bb4		95 03		sta $03,x		sta pstack+3,x
.2bb6		4c 23 16	jmp $1623		jmp next
.2bb9						w_and:
>2bb9		03					.byte $03
>2bba		61 6e 64				.text 'and'
>2bbd		a4 2b					.word w_2x2d
.2bbf						xt_and:
.2bbf		b5 02		lda $02,x		lda pstack+2,x
.2bc1		35 04		and $04,x		and pstack+4,x
.2bc3		95 04		sta $04,x		sta pstack+4,x
.2bc5		b5 03		lda $03,x		lda pstack+3,x
.2bc7		35 05		and $05,x		and pstack+5,x
.2bc9		95 05		sta $05,x		sta pstack+5,x
.2bcb		e8		inx			inx
.2bcc		e8		inx			inx
.2bcd		4c 23 16	jmp $1623		jmp next
.2bd0						w_or:
>2bd0		02					.byte $02
>2bd1		6f 72					.text 'or'
>2bd3		b9 2b					.word w_and
.2bd5						xt_or:
.2bd5		b5 02		lda $02,x		lda pstack+2,x
.2bd7		15 04		ora $04,x		ora pstack+4,x
.2bd9		95 04		sta $04,x		sta pstack+4,x
.2bdb		b5 03		lda $03,x		lda pstack+3,x
.2bdd		15 05		ora $05,x		ora pstack+5,x
.2bdf		95 05		sta $05,x		sta pstack+5,x
.2be1		e8		inx			inx
.2be2		e8		inx			inx
.2be3		4c 23 16	jmp $1623		jmp next
.2be6						w_xor:
>2be6		03					.byte $03
>2be7		78 6f 72				.text 'xor'
>2bea		d0 2b					.word w_or
.2bec						xt_xor:
.2bec		b5 02		lda $02,x		lda pstack+2,x
.2bee		55 04		eor $04,x		eor pstack+4,x
.2bf0		95 04		sta $04,x		sta pstack+4,x
.2bf2		b5 03		lda $03,x		lda pstack+3,x
.2bf4		55 05		eor $05,x		eor pstack+5,x
.2bf6		95 05		sta $05,x		sta pstack+5,x
.2bf8		e8		inx			inx
.2bf9		e8		inx			inx
.2bfa		4c 23 16	jmp $1623		jmp next
.2bfd						w_not:
>2bfd		03					.byte $03
>2bfe		6e 6f 74				.text 'not'
>2c01		e6 2b					.word w_xor
.2c03						xt_not:
.2c03		b5 02		lda $02,x		lda pstack+2,x
.2c05		49 ff		eor #$ff		eor #$ff
.2c07		95 02		sta $02,x		sta pstack+2,x
.2c09		b5 03		lda $03,x		lda pstack+3,x
.2c0b		49 ff		eor #$ff		eor #$ff
.2c0d		95 03		sta $03,x		sta pstack+3,x
.2c0f		4c 23 16	jmp $1623		jmp next
.2c12						w_0x3c:
>2c12		02					.byte $02
>2c13		30 3c					.text '0<'
>2c15		fd 2b					.word w_not
.2c17						xt_0x3c:
.2c17		b5 03		lda $03,x		lda pstack+3,x
.2c19		30 07		bmi $2c22		bmi istrue
.2c1b		74 02		stz $02,x		stz pstack+2,x
.2c1d		74 03		stz $03,x		stz pstack+3,x
.2c1f		4c 23 16	jmp $1623		jmp next
.2c22							istrue:
.2c22		a9 ff		lda #$ff		lda #$ff
.2c24		95 02		sta $02,x		sta pstack+2,x
.2c26		95 03		sta $03,x		sta pstack+3,x
.2c28		4c 23 16	jmp $1623		jmp next
.2c2b						w_0x3d:
>2c2b		02					.byte $02
>2c2c		30 3d					.text '0='
>2c2e		12 2c					.word w_0x3c
.2c30						xt_0x3d:
.2c30		b5 02		lda $02,x		lda pstack+2,x
.2c32		d0 0d		bne $2c41		bne isfalse
.2c34		b5 03		lda $03,x		lda pstack+3,x
.2c36		d0 09		bne $2c41		bne isfalse
.2c38		a9 ff		lda #$ff		lda #$ff
.2c3a		95 02		sta $02,x		sta pstack+2,x
.2c3c		95 03		sta $03,x		sta pstack+3,x
.2c3e		4c 23 16	jmp $1623		jmp next
.2c41							isfalse:
.2c41		74 02		stz $02,x		stz pstack+2,x
.2c43		74 03		stz $03,x		stz pstack+3,x
.2c45		4c 23 16	jmp $1623		jmp next
.2c48						w_0x3e:
>2c48		02					.byte $02
>2c49		30 3e					.text '0>'
>2c4b		2b 2c					.word w_0x3d
.2c4d						xt_0x3e:
.2c4d		b5 03		lda $03,x		lda pstack+3,x
.2c4f		30 0f		bmi $2c60		bmi isfalse
.2c51		d0 04		bne $2c57		bne istrue
.2c53		b5 02		lda $02,x		lda pstack+2,x
.2c55		f0 09		beq $2c60		beq isfalse
.2c57							istrue:
.2c57		a9 ff		lda #$ff		lda #$ff
.2c59		95 02		sta $02,x		sta pstack+2,x
.2c5b		95 03		sta $03,x		sta pstack+3,x
.2c5d		4c 23 16	jmp $1623		jmp next
.2c60							isfalse:
.2c60		74 02		stz $02,x		stz pstack+2,x
.2c62		74 03		stz $03,x		stz pstack+3,x
.2c64		4c 23 16	jmp $1623		jmp next
.2c67						w_x28variablex29:
>2c67		0a					.byte $0A
>2c68		28 76 61 72 69 61 62 6c			.text '(variable)'
>2c70		65 29
>2c72		48 2c					.word w_0x3e
.2c74						xt_x28variablex29:
.2c74		18		clc			clc                     ; push(wp + 3)
.2c75		a5 2a		lda $2a			lda wp
.2c77		69 03		adc #$03		adc #3
.2c79		95 00		sta $00,x		sta pstack,x
.2c7b		a5 2b		lda $2b			lda wp+1
.2c7d		69 00		adc #$00		adc #0
.2c7f		95 01		sta $01,x		sta pstack+1,x
.2c81		ca		dex			dex
.2c82		ca		dex			dex
.2c83		4c 23 16	jmp $1623		jmp next
.2c86						w_x28constantx29:
>2c86		0a					.byte $0A
>2c87		28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2c8f		74 29
>2c91		67 2c					.word w_x28variablex29
.2c93						xt_x28constantx29:
.2c93		a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2c95		b1 2a		lda ($2a),y		lda (wp),y
.2c97		95 00		sta $00,x		sta pstack,x
.2c99		c8		iny			iny
.2c9a		b1 2a		lda ($2a),y		lda (wp),y
.2c9c		95 01		sta $01,x		sta pstack+1,x
.2c9e		ca		dex			dex
.2c9f		ca		dex			dex
.2ca0		4c 23 16	jmp $1623		jmp next
.2ca3						w_cells:
>2ca3		05					.byte $05
>2ca4		63 65 6c 6c 73				.text 'cells'
>2ca9							.fill 11
>2cb4		86 2c					.word w_x28constantx29
.2cb6						xt_cells:
.2cb6		4c 93 2c	jmp $2c93		jmp xt_x28constantx29
>2cb9		02 00					.word 2
.2cbb						w_bl:
>2cbb		02					.byte $02
>2cbc		62 6c					.text 'bl'
>2cbe							.fill 14
>2ccc		a3 2c					.word w_cells
.2cce						xt_bl:
.2cce		4c 93 2c	jmp $2c93		jmp xt_x28constantx29
>2cd1		20 00					.word 32
.2cd3						w_x28userx29:
>2cd3		06					.byte $06
>2cd4		28 75 73 65 72 29			.text '(user)'
>2cda		bb 2c					.word w_bl
.2cdc						xt_x28userx29:
.2cdc		18		clc			clc                     ; push(up + memory(wp + 3))
.2cdd		a0 03		ldy #$03		ldy #3
.2cdf		a5 2c		lda $2c			lda up
.2ce1		71 2a		adc ($2a),y		adc (wp),y
.2ce3		95 00		sta $00,x		sta pstack,x
.2ce5		c8		iny			iny
.2ce6		a5 2d		lda $2d			lda up+1
.2ce8		71 2a		adc ($2a),y		adc (wp),y
.2cea		95 01		sta $01,x		sta pstack+1,x
.2cec		ca		dex			dex
.2ced		ca		dex			dex
.2cee		4c 23 16	jmp $1623		jmp next
.2cf1						w_s0:
>2cf1		02					.byte $02
>2cf2		73 30					.text 's0'
>2cf4							.fill 14
>2d02		d3 2c					.word w_x28userx29
.2d04						xt_s0:
.2d04		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d07		00 00					.word 0
.2d09						w_r0:
>2d09		02					.byte $02
>2d0a		72 30					.text 'r0'
>2d0c							.fill 14
>2d1a		f1 2c					.word w_s0
.2d1c						xt_r0:
.2d1c		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d1f		01 00					.word 1
.2d21						w_base:
>2d21		04					.byte $04
>2d22		62 61 73 65				.text 'base'
>2d26							.fill 12
>2d32		09 2d					.word w_r0
.2d34						xt_base:
.2d34		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d37		02 00					.word 2
.2d39						w_state:
>2d39		05					.byte $05
>2d3a		73 74 61 74 65				.text 'state'
>2d3f							.fill 11
>2d4a		21 2d					.word w_base
.2d4c						xt_state:
.2d4c		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d4f		03 00					.word 3
.2d51						w_context:
>2d51		07					.byte $07
>2d52		63 6f 6e 74 65 78 74			.text 'context'
>2d59							.fill 9
>2d62		39 2d					.word w_state
.2d64						xt_context:
.2d64		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d67		04 00					.word 4
.2d69						w_current:
>2d69		07					.byte $07
>2d6a		63 75 72 72 65 6e 74			.text 'current'
>2d71							.fill 9
>2d7a		51 2d					.word w_context
.2d7c						xt_current:
.2d7c		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d7f		05 00					.word 5
.2d81						w_dp:
>2d81		02					.byte $02
>2d82		64 70					.text 'dp'
>2d84							.fill 14
>2d92		69 2d					.word w_current
.2d94						xt_dp:
.2d94		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2d97		06 00					.word 6
.2d99						w_x3ein:
>2d99		03					.byte $03
>2d9a		3e 69 6e				.text '>in'
>2d9d							.fill 13
>2daa		81 2d					.word w_dp
.2dac						xt_x3ein:
.2dac		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2daf		07 00					.word 7
.2db1						w_tib:
>2db1		03					.byte $03
>2db2		74 69 62				.text 'tib'
>2db5							.fill 13
>2dc2		99 2d					.word w_x3ein
.2dc4						xt_tib:
.2dc4		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2dc7		08 00					.word 8
.2dc9						w_sourcex2did:
>2dc9		09					.byte $09
>2dca		73 6f 75 72 63 65 2d 69			.text 'source-id'
>2dd2		64
>2dd3							.fill 7
>2dda		b1 2d					.word w_tib
.2ddc						xt_sourcex2did:
.2ddc		4c dc 2c	jmp $2cdc		jmp xt_x28userx29
>2ddf		09 00					.word 9
.2de1						w_x28branchx29:
>2de1		08					.byte $08
>2de2		28 62 72 61 6e 63 68 29			.text '(branch)'
>2dea		c9 2d					.word w_sourcex2did
.2dec						xt_x28branchx29:
.2dec		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2dee		b2 28		lda ($28)		lda (ip)
.2df0		85 32		sta $32			sta tmp
.2df2		b1 28		lda ($28),y		lda (ip),y
.2df4		85 29		sta $29			sta ip+1
.2df6		a5 32		lda $32			lda tmp
.2df8		85 28		sta $28			sta ip
.2dfa		4c 23 16	jmp $1623		jmp next
.2dfd						w_x28branch0x29:
>2dfd		09					.byte $09
>2dfe		28 62 72 61 6e 63 68 30			.text '(branch0)'
>2e06		29
>2e07		e1 2d					.word w_x28branchx29
.2e09						xt_x28branch0x29:
.2e09		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2e0b		d0 04		bne $2e11		bne nobranch        ; No: skip over the branch address
.2e0d		b5 03		lda $03,x		lda pstack+3,x
.2e0f		f0 0f		beq $2e20		beq dobranch        ; Yes: take the branch
.2e11							nobranch:
.2e11		18		clc			clc                 ; No: skip over the branch address
.2e12		a5 28		lda $28			lda ip
.2e14		69 02		adc #$02		adc #2
.2e16		85 28		sta $28			sta ip
.2e18		a5 29		lda $29			lda ip+1
.2e1a		69 00		adc #$00		adc #0
.2e1c		85 29		sta $29			sta ip+1
.2e1e		80 0e		bra $2e2e		bra done
.2e20							dobranch:
.2e20		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2e22		b2 28		lda ($28)		lda (ip)
.2e24		85 32		sta $32			sta tmp
.2e26		b1 28		lda ($28),y		lda (ip),y
.2e28		85 29		sta $29			sta ip+1
.2e2a		a5 32		lda $32			lda tmp
.2e2c		85 28		sta $28			sta ip
.2e2e							done:
.2e2e		e8		inx			inx                 ; clean up the parameter stack
.2e2f		e8		inx			inx
.2e30		4c 23 16	jmp $1623		jmp next
.2e33						w_x28dox29:
>2e33		04					.byte $04
>2e34		28 64 6f 29				.text '(do)'
>2e38		fd 2d					.word w_x28branch0x29
.2e3a						xt_x28dox29:
.2e3a		b5 03		lda $03,x		lda pstack+3,x
.2e3c		48		pha			pha
.2e3d		b5 02		lda $02,x		lda pstack+2,x
.2e3f		48		pha			pha
.2e40		b5 05		lda $05,x		lda pstack+5,x
.2e42		48		pha			pha
.2e43		b5 04		lda $04,x		lda pstack+4,x
.2e45		48		pha			pha
.2e46		18		clc			clc
.2e47		8a		txa			txa
.2e48		69 04		adc #$04		adc #4
.2e4a		aa		tax			tax
.2e4b		4c 23 16	jmp $1623		jmp next
.2e4e						w_x3ei:
>2e4e		02					.byte $02
>2e4f		3e 69					.text '>i'
>2e51		33 2e					.word w_x28dox29
.2e53						xt_x3ei:
>0101							limit       .word ?
>0103							current     .word ?
.2e53		b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.2e55		85 33		sta $33			sta tmp+1
.2e57		b5 02		lda $02,x		lda pstack+2,x
.2e59		85 32		sta $32			sta tmp
.2e5b		ca		dex			dex
.2e5c		ca		dex			dex
.2e5d		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e5f		ba		tsx			tsx
.2e60		a5 33		lda $33			lda tmp+1           ; current := tmp = n
.2e62		9d 04 01	sta $0104,x		sta current+1
.2e65		a5 32		lda $32			lda tmp
.2e67		9d 03 01	sta $0103,x		sta current
.2e6a		a6 34		ldx $34			ldx savex
.2e6c		4c 23 16	jmp $1623		jmp next
.2e6f						w_leave:
>2e6f		05					.byte $05
>2e70		6c 65 61 76 65				.text 'leave'
>2e75		4e 2e					.word w_x3ei
.2e77						xt_leave:
>0101							limit       .word ?
>0103							current     .word ?
.2e77		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e79		ba		tsx			tsx
.2e7a		bd 04 01	lda $0104,x		lda current+1       ; limit := current
.2e7d		9d 02 01	sta $0102,x		sta limit+1
.2e80		bd 03 01	lda $0103,x		lda current
.2e83		9d 01 01	sta $0101,x		sta limit
.2e86		a6 34		ldx $34			ldx savex
.2e88		4c 23 16	jmp $1623		jmp next
.2e8b						w_x28loopx29:
>2e8b		06					.byte $06
>2e8c		28 6c 6f 6f 70 29			.text '(loop)'
>2e92		6f 2e					.word w_leave
.2e94						xt_x28loopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2e94		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e96		ba		tsx			tsx
.2e97		fe 03 01	inc $0103,x		inc current         ; Increment current
.2e9a		d0 03		bne $2e9f		bne chk_current
.2e9c		fe 04 01	inc $0104,x		inc current+1
.2e9f							chk_current:
.2e9f		38		sec			sec
.2ea0		bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2ea3		fd 02 01	sbc $0102,x		sbc limit+1
.2ea6		50 02		bvc $2eaa		bvc label1          ; the equality comparison is in the Z flag here
.2ea8		49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2eaa							label1:
.2eaa		30 23		bmi $2ecf		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2eac		50 02		bvc $2eb0		bvc label2          ; the Z flag was affected only if V is 1
.2eae		49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2eb0							label2:
.2eb0		d0 08		bne $2eba		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2eb2		bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2eb5		fd 01 01	sbc $0101,x		sbc limit
.2eb8		90 15		bcc $2ecf		bcc dobranch        ; if current < limit then current < limit
.2eba							nobranch:
.2eba		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2ebb		18		clc			clc
.2ebc		69 04		adc #$04		adc #4
.2ebe		aa		tax			tax
.2ebf		9a		txs			txs
.2ec0		18		clc			clc                 ; And skip over the branch address
.2ec1		a5 28		lda $28			lda ip
.2ec3		69 02		adc #$02		adc #2
.2ec5		85 28		sta $28			sta ip
.2ec7		a5 29		lda $29			lda ip+1
.2ec9		69 00		adc #$00		adc #0
.2ecb		85 29		sta $29			sta ip+1
.2ecd		80 0e		bra $2edd		bra done
.2ecf							dobranch:
.2ecf		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2ed1		b2 28		lda ($28)		lda (ip)
.2ed3		85 32		sta $32			sta tmp
.2ed5		b1 28		lda ($28),y		lda (ip),y
.2ed7		85 29		sta $29			sta ip+1
.2ed9		a5 32		lda $32			lda tmp
.2edb		85 28		sta $28			sta ip
.2edd							done:
.2edd		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2edf		4c 23 16	jmp $1623		jmp next
.2ee2						w_x28x2bloopx29:
>2ee2		07					.byte $07
>2ee3		28 2b 6c 6f 6f 70 29			.text '(+loop)'
>2eea		8b 2e					.word w_x28loopx29
.2eec						xt_x28x2bloopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2eec		b5 03		lda $03,x		lda pstack+3,x
.2eee		85 33		sta $33			sta tmp+1
.2ef0		b5 02		lda $02,x		lda pstack+2,x
.2ef2		85 32		sta $32			sta tmp
.2ef4		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2ef6		ba		tsx			tsx
.2ef7		18		clc			clc                 ; Increment current by n
.2ef8		bd 03 01	lda $0103,x		lda current
.2efb		65 32		adc $32			adc tmp
.2efd		9d 03 01	sta $0103,x		sta current
.2f00		bd 04 01	lda $0104,x		lda current+1
.2f03		65 33		adc $33			adc tmp+1
.2f05		9d 04 01	sta $0104,x		sta current+1
.2f08		e6 34		inc $34			inc savex           ; Remove n from the stack
.2f0a		e6 34		inc $34			inc savex
.2f0c							chk_current:
.2f0c		38		sec			sec
.2f0d		bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2f10		fd 02 01	sbc $0102,x		sbc limit+1
.2f13		50 02		bvc $2f17		bvc label1          ; the equality comparison is in the Z flag here
.2f15		49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2f17							label1:
.2f17		30 23		bmi $2f3c		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2f19		50 02		bvc $2f1d		bvc label2          ; the Z flag was affected only if V is 1
.2f1b		49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2f1d							label2:
.2f1d		d0 08		bne $2f27		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2f1f		bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2f22		fd 01 01	sbc $0101,x		sbc limit
.2f25		90 15		bcc $2f3c		bcc dobranch        ; if current < limit then current < limit
.2f27							nobranch:
.2f27		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2f28		18		clc			clc
.2f29		69 04		adc #$04		adc #4
.2f2b		aa		tax			tax
.2f2c		9a		txs			txs
.2f2d		18		clc			clc                 ; And skip over the branch address
.2f2e		a5 28		lda $28			lda ip
.2f30		69 02		adc #$02		adc #2
.2f32		85 28		sta $28			sta ip
.2f34		a5 29		lda $29			lda ip+1
.2f36		69 00		adc #$00		adc #0
.2f38		85 29		sta $29			sta ip+1
.2f3a		80 0e		bra $2f4a		bra done
.2f3c							dobranch:
.2f3c		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2f3e		b2 28		lda ($28)		lda (ip)
.2f40		85 32		sta $32			sta tmp
.2f42		b1 28		lda ($28),y		lda (ip),y
.2f44		85 29		sta $29			sta ip+1
.2f46		a5 32		lda $32			lda tmp
.2f48		85 28		sta $28			sta ip
.2f4a							done:
.2f4a		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2f4c		4c 23 16	jmp $1623		jmp next
.2f4f						w_i:
>2f4f		01					.byte $01
>2f50		69					.text 'i'
>2f51		e2 2e					.word w_x28x2bloopx29
.2f53						xt_i:
>0101							limit       .word ?
>0103							current     .word ?
.2f53		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2f55		ba		tsx			tsx
.2f56		bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.2f59		bd 03 01	lda $0103,x		lda current
.2f5c		a6 34		ldx $34			ldx savex           ; Restore the PSP
.2f5e		94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2f60		95 00		sta $00,x		sta pstack,x
.2f62		ca		dex			dex
.2f63		ca		dex			dex
.2f64		4c 23 16	jmp $1623		jmp next
.2f67						w_x28ofx29:
>2f67		04					.byte $04
>2f68		28 6f 66 29				.text '(of)'
>2f6c		4f 2f					.word w_i
.2f6e						xt_x28ofx29:
.2f6e		b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.2f70		d5 04		cmp $04,x		cmp pstack+4,x
.2f72		d0 1a		bne $2f8e		bne not_eq
.2f74		b5 03		lda $03,x		lda pstack+3,x
.2f76		d5 05		cmp $05,x		cmp pstack+5,x
.2f78		d0 14		bne $2f8e		bne not_eq
.2f7a		e8		inx			inx
.2f7b		e8		inx			inx
.2f7c		e8		inx			inx
.2f7d		e8		inx			inx
.2f7e		18		clc			clc                 ; Skip over the branch target
.2f7f		a5 28		lda $28			lda ip
.2f81		69 02		adc #$02		adc #2
.2f83		85 28		sta $28			sta ip
.2f85		a5 29		lda $29			lda ip+1
.2f87		69 00		adc #$00		adc #0
.2f89		85 29		sta $29			sta ip+1
.2f8b		4c 23 16	jmp $1623		jmp next
.2f8e							not_eq:
.2f8e		e8		inx			inx                 ; Remove n2 from stack
.2f8f		e8		inx			inx
.2f90		a0 01		ldy #$01		ldy #1              ; Take the branch target
.2f92		b2 28		lda ($28)		lda (ip)
.2f94		85 32		sta $32			sta tmp
.2f96		b1 28		lda ($28),y		lda (ip),y
.2f98		85 29		sta $29			sta ip+1
.2f9a		a5 32		lda $32			lda tmp
.2f9c		85 28		sta $28			sta ip
.2f9e		4c 23 16	jmp $1623		jmp next
.2fa1						w_execute:
>2fa1		07					.byte $07
>2fa2		65 78 65 63 75 74 65			.text 'execute'
>2fa9		67 2f					.word w_x28ofx29
.2fab						xt_execute:
.2fab		b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2fad		85 2a		sta $2a			sta wp
.2faf		b5 03		lda $03,x		lda pstack+3,x
.2fb1		85 2b		sta $2b			sta wp+1
.2fb3		e8		inx			inx                 ; Clean up stack
.2fb4		e8		inx			inx
.2fb5		6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2fb8						w_x28vocabularyx29:
>2fb8		0c					.byte $0C
>2fb9		28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>2fc1		61 72 79 29
>2fc5		a1 2f					.word w_execute
.2fc7						xt_x28vocabularyx29:
.2fc7		18		clc			clc                 ; tmp := up + user_context
.2fc8		a5 2c		lda $2c			lda up
.2fca		69 08		adc #$08		adc #user_context
.2fcc		85 32		sta $32			sta tmp
.2fce		a5 2d		lda $2d			lda up+1
.2fd0		69 00		adc #$00		adc #0
.2fd2		85 33		sta $33			sta tmp+1
.2fd4		a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.2fd6		18		clc			clc
.2fd7		a5 2a		lda $2a			lda wp
.2fd9		69 03		adc #$03		adc #3
.2fdb		92 32		sta ($32)		sta (tmp)
.2fdd		a5 2b		lda $2b			lda wp+1
.2fdf		69 00		adc #$00		adc #0
.2fe1		91 32		sta ($32),y		sta (tmp),y
.2fe3		4c 23 16	jmp $1623		jmp next
.2fe6						w_forth:
>2fe6		05					.byte $05
>2fe7		66 6f 72 74 68				.text 'forth'
>2fec		b8 2f					.word w_x28vocabularyx29
.2fee						xt_forth:
.2fee		4c c7 2f	jmp $2fc7		jmp xt_x28vocabularyx29
>2ff1		07 34					.word <>w_cold
.2ff3						w_x3fdup:
>2ff3		04					.byte $04
>2ff4		3f 64 75 70				.text '?dup'
>2ff8							.fill 12
>3004		e6 2f					.word w_forth
.3006						xt_x3fdup:
.3006		4c 10 16	jmp $1610		jmp i_enter
>3009		31 28					.word xt_dup
>300b		09 2e					.word xt_x28branch0x29
>300d		11 30					.word l_138
>300f		31 28					.word xt_dup
.3011						l_138:
>3011		08 16					.word i_exit
.3013						w_x3c:
>3013		01					.byte $01
>3014		3c					.text '<'
>3015							.fill 15
>3024		f3 2f					.word w_x3fdup
.3026						xt_x3c:
.3026		4c 10 16	jmp $1610		jmp i_enter
>3029		6d 2a					.word xt_x2d
>302b		17 2c					.word xt_0x3c
>302d		08 16					.word i_exit
.302f						w_x3e:
>302f		01					.byte $01
>3030		3e					.text '>'
>3031							.fill 15
>3040		13 30					.word w_x3c
.3042						xt_x3e:
.3042		4c 10 16	jmp $1610		jmp i_enter
>3045		6d 2a					.word xt_x2d
>3047		4d 2c					.word xt_0x3e
>3049		08 16					.word i_exit
.304b						w_x3d:
>304b		01					.byte $01
>304c		3d					.text '='
>304d							.fill 15
>305c		2f 30					.word w_x3e
.305e						xt_x3d:
.305e		4c 10 16	jmp $1610		jmp i_enter
>3061		6d 2a					.word xt_x2d
>3063		30 2c					.word xt_0x3d
>3065		08 16					.word i_exit
.3067						w_x2f:
>3067		01					.byte $01
>3068		2f					.text '/'
>3069							.fill 15
>3078		4b 30					.word w_x3d
.307a						xt_x2f:
.307a		4c 10 16	jmp $1610		jmp i_enter
>307d		f9 2a					.word xt_x2fmod
>307f		45 28					.word xt_swap
>3081		26 28					.word xt_drop
>3083		08 16					.word i_exit
.3085						w_mod:
>3085		03					.byte $03
>3086		6d 6f 64				.text 'mod'
>3089							.fill 13
>3096		67 30					.word w_x2f
.3098						xt_mod:
.3098		4c 10 16	jmp $1610		jmp i_enter
>309b		f9 2a					.word xt_x2fmod
>309d		26 28					.word xt_drop
>309f		08 16					.word i_exit
.30a1						w_abs:
>30a1		03					.byte $03
>30a2		61 62 73				.text 'abs'
>30a5							.fill 13
>30b2		85 30					.word w_mod
.30b4						xt_abs:
.30b4		4c 10 16	jmp $1610		jmp i_enter
>30b7		31 28					.word xt_dup
>30b9		17 2c					.word xt_0x3c
>30bb		09 2e					.word xt_x28branch0x29
>30bd		c5 30					.word l_177
>30bf		a5 17					.word xt_0
>30c1		45 28					.word xt_swap
>30c3		6d 2a					.word xt_x2d
.30c5						l_177:
>30c5		08 16					.word i_exit
.30c7						w_max:
>30c7		03					.byte $03
>30c8		6d 61 78				.text 'max'
>30cb							.fill 13
>30d8		a1 30					.word w_abs
.30da						xt_max:
.30da		4c 10 16	jmp $1610		jmp i_enter
>30dd		5f 28					.word xt_over
>30df		5f 28					.word xt_over
>30e1		26 30					.word xt_x3c
>30e3		09 2e					.word xt_x28branch0x29
>30e5		ef 30					.word l_178
>30e7		5f 28					.word xt_over
>30e9		26 28					.word xt_drop
>30eb		ec 2d					.word xt_x28branchx29
>30ed		f1 30					.word l_179
.30ef						l_178:
>30ef		26 28					.word xt_drop
.30f1						l_179:
>30f1		08 16					.word i_exit
.30f3						w_min:
>30f3		03					.byte $03
>30f4		6d 69 6e				.text 'min'
>30f7							.fill 13
>3104		c7 30					.word w_max
.3106						xt_min:
.3106		4c 10 16	jmp $1610		jmp i_enter
>3109		5f 28					.word xt_over
>310b		5f 28					.word xt_over
>310d		42 30					.word xt_x3e
>310f		09 2e					.word xt_x28branch0x29
>3111		1b 31					.word l_186
>3113		5f 28					.word xt_over
>3115		26 28					.word xt_drop
>3117		ec 2d					.word xt_x28branchx29
>3119		1d 31					.word l_187
.311b						l_186:
>311b		26 28					.word xt_drop
.311d						l_187:
>311d		08 16					.word i_exit
.311f						w_rot:
>311f		03					.byte $03
>3120		72 6f 74				.text 'rot'
>3123							.fill 13
>3130		f3 30					.word w_min
.3132						xt_rot:
.3132		4c 10 16	jmp $1610		jmp i_enter
>3135		71 28					.word xt_x3er
>3137		45 28					.word xt_swap
>3139		81 28					.word xt_rx3e
>313b		45 28					.word xt_swap
>313d		08 16					.word i_exit
.313f						w_2dup:
>313f		04					.byte $04
>3140		32 64 75 70				.text '2dup'
>3144							.fill 12
>3150		1f 31					.word w_rot
.3152						xt_2dup:
.3152		4c 10 16	jmp $1610		jmp i_enter
>3155		5f 28					.word xt_over
>3157		5f 28					.word xt_over
>3159		08 16					.word i_exit
.315b						w_2drop:
>315b		05					.byte $05
>315c		32 64 72 6f 70				.text '2drop'
>3161							.fill 11
>316c		3f 31					.word w_2dup
.316e						xt_2drop:
.316e		4c 10 16	jmp $1610		jmp i_enter
>3171		26 28					.word xt_drop
>3173		26 28					.word xt_drop
>3175		08 16					.word i_exit
.3177						w_lfa:
>3177		03					.byte $03
>3178		6c 66 61				.text 'lfa'
>317b							.fill 13
>3188		5b 31					.word w_2drop
.318a						xt_lfa:
.318a		4c 10 16	jmp $1610		jmp i_enter
>318d		f8 17					.word xt_x28literalx29
>318f		05 00					.word 5
>3191		6d 2a					.word xt_x2d
>3193		08 16					.word i_exit
.3195						w_cfa:
>3195		03					.byte $03
>3196		63 66 61				.text 'cfa'
>3199							.fill 13
>31a6		77 31					.word w_lfa
.31a8						xt_cfa:
.31a8		4c 10 16	jmp $1610		jmp i_enter
>31ab		f8 17					.word xt_x28literalx29
>31ad		03 00					.word 3
>31af		6d 2a					.word xt_x2d
>31b1		08 16					.word i_exit
.31b3						w_nfa:
>31b3		03					.byte $03
>31b4		6e 66 61				.text 'nfa'
>31b7							.fill 13
>31c4		95 31					.word w_cfa
.31c6						xt_nfa:
.31c6		4c 10 16	jmp $1610		jmp i_enter
>31c9		f8 17					.word xt_x28literalx29
>31cb		16 00					.word 22
>31cd		6d 2a					.word xt_x2d
>31cf		08 16					.word i_exit
.31d1						w_pfa:
>31d1		03					.byte $03
>31d2		70 66 61				.text 'pfa'
>31d5							.fill 13
>31e2		b3 31					.word w_nfa
.31e4						xt_pfa:
.31e4		4c 10 16	jmp $1610		jmp i_enter
>31e7		f8 17					.word xt_x28literalx29
>31e9		16 00					.word 22
>31eb		57 2a					.word xt_x2b
>31ed		08 16					.word i_exit
.31ef						w_here:
>31ef		04					.byte $04
>31f0		68 65 72 65				.text 'here'
>31f4							.fill 12
>3200		d1 31					.word w_pfa
.3202						xt_here:
.3202		4c 10 16	jmp $1610		jmp i_enter
>3205		94 2d					.word xt_dp
>3207		ca 28					.word xt_x40
>3209		08 16					.word i_exit
.320b						w_allot:
>320b		05					.byte $05
>320c		61 6c 6c 6f 74				.text 'allot'
>3211							.fill 11
>321c		ef 31					.word w_here
.321e						xt_allot:
.321e		4c 10 16	jmp $1610		jmp i_enter
>3221		94 2d					.word xt_dp
>3223		31 29					.word xt_x2bx21
>3225		08 16					.word i_exit
.3227						w_x2c:
>3227		01					.byte $01
>3228		2c					.text ','
>3229							.fill 15
>3238		0b 32					.word w_allot
.323a						xt_x2c:
.323a		4c 10 16	jmp $1610		jmp i_enter
>323d		02 32					.word xt_here
>323f		ad 28					.word xt_x21
>3241		c1 17					.word xt_2
>3243		1e 32					.word xt_allot
>3245		08 16					.word i_exit
.3247						w_cx2c:
>3247		02					.byte $02
>3248		63 2c					.text 'c,'
>324a							.fill 14
>3258		27 32					.word w_x2c
.325a						xt_cx2c:
.325a		4c 10 16	jmp $1610		jmp i_enter
>325d		02 32					.word xt_here
>325f		e4 28					.word xt_cx21
>3261		b2 17					.word xt_1
>3263		1e 32					.word xt_allot
>3265		08 16					.word i_exit
.3267						w_definitions:
>3267		0b					.byte $0B
>3268		64 65 66 69 6e 69 74 69			.text 'definitions'
>3270		6f 6e 73
>3273							.fill 5
>3278		47 32					.word w_cx2c
.327a						xt_definitions:
.327a		4c 10 16	jmp $1610		jmp i_enter
>327d		64 2d					.word xt_context
>327f		ca 28					.word xt_x40
>3281		7c 2d					.word xt_current
>3283		ad 28					.word xt_x21
>3285		08 16					.word i_exit
.3287						w_latest:
>3287		06					.byte $06
>3288		6c 61 74 65 73 74			.text 'latest'
>328e							.fill 10
>3298		67 32					.word w_definitions
.329a						xt_latest:
.329a		4c 10 16	jmp $1610		jmp i_enter
>329d		7c 2d					.word xt_current
>329f		ca 28					.word xt_x40
>32a1		ca 28					.word xt_x40
>32a3		08 16					.word i_exit
.32a5						w_count:
>32a5		05					.byte $05
>32a6		63 6f 75 6e 74				.text 'count'
>32ab							.fill 11
>32b6		87 32					.word w_latest
.32b8						xt_count:
.32b8		4c 10 16	jmp $1610		jmp i_enter
>32bb		31 28					.word xt_dup
>32bd		76 2b					.word xt_1x2b
>32bf		45 28					.word xt_swap
>32c1		f4 28					.word xt_cx40
>32c3		08 16					.word i_exit
.32c5						w_type:
>32c5		04					.byte $04
>32c6		74 79 70 65				.text 'type'
>32ca							.fill 12
>32d6		a5 32					.word w_count
.32d8						xt_type:
.32d8		4c 10 16	jmp $1610		jmp i_enter
>32db		06 30					.word xt_x3fdup
>32dd		09 2e					.word xt_x28branch0x29
>32df		03 33					.word l_200
>32e1		5f 28					.word xt_over
>32e3		57 2a					.word xt_x2b
>32e5		45 28					.word xt_swap
>32e7		3a 2e					.word xt_x28dox29
.32e9						l_201:
>32e9		53 2f					.word xt_i
>32eb		f4 28					.word xt_cx40
>32ed		06 30					.word xt_x3fdup
>32ef		09 2e					.word xt_x28branch0x29
>32f1		f9 32					.word l_203
>32f3		4f 17					.word xt_emit
>32f5		ec 2d					.word xt_x28branchx29
>32f7		fb 32					.word l_204
.32f9						l_203:
>32f9		77 2e					.word xt_leave
.32fb						l_204:
>32fb		94 2e					.word xt_x28loopx29
>32fd		e9 32					.word l_201
.32ff						l_202:
>32ff		ec 2d					.word xt_x28branchx29
>3301		05 33					.word l_205
.3303						l_200:
>3303		26 28					.word xt_drop
.3305						l_205:
>3305		08 16					.word i_exit
.3307						w_space:
>3307		05					.byte $05
>3308		73 70 61 63 65				.text 'space'
>330d							.fill 11
>3318		c5 32					.word w_type
.331a						xt_space:
.331a		4c 10 16	jmp $1610		jmp i_enter
>331d		f8 17					.word xt_x28literalx29
>331f		20 00					.word 32
>3321		4f 17					.word xt_emit
>3323		08 16					.word i_exit
.3325						w_spaces:
>3325		06					.byte $06
>3326		73 70 61 63 65 73			.text 'spaces'
>332c							.fill 10
>3336		07 33					.word w_space
.3338						xt_spaces:
.3338		4c 10 16	jmp $1610		jmp i_enter
>333b		a5 17					.word xt_0
>333d		3a 2e					.word xt_x28dox29
.333f						l_206:
>333f		1a 33					.word xt_space
>3341		94 2e					.word xt_x28loopx29
>3343		3f 33					.word l_206
.3345						l_207:
>3345		08 16					.word i_exit
.3347						w_expect:
>3347		06					.byte $06
>3348		65 78 70 65 63 74			.text 'expect'
>334e							.fill 10
>3358		25 33					.word w_spaces
.335a						xt_expect:
.335a		4c 10 16	jmp $1610		jmp i_enter
>335d		5f 28					.word xt_over
>335f		57 2a					.word xt_x2b
>3361		5f 28					.word xt_over
>3363		3a 2e					.word xt_x28dox29
.3365						l_208:
>3365		80 17					.word xt_key
>3367		f8 17					.word xt_x28literalx29
>3369		08 00					.word 8
>336b		6e 2f					.word xt_x28ofx29
>336d		73 33					.word l_211
>336f		ec 2d					.word xt_x28branchx29
>3371		95 33					.word l_210
.3373						l_211:
>3373		f8 17					.word xt_x28literalx29
>3375		0d 00					.word 13
>3377		6e 2f					.word xt_x28ofx29
>3379		81 33					.word l_212
>337b		77 2e					.word xt_leave
>337d		ec 2d					.word xt_x28branchx29
>337f		95 33					.word l_210
.3381						l_212:
>3381		31 28					.word xt_dup
>3383		31 28					.word xt_dup
>3385		53 2f					.word xt_i
>3387		e4 28					.word xt_cx21
>3389		a5 17					.word xt_0
>338b		53 2f					.word xt_i
>338d		76 2b					.word xt_1x2b
>338f		e4 28					.word xt_cx21
>3391		4f 17					.word xt_emit
>3393		26 28					.word xt_drop
.3395						l_210:
>3395		94 2e					.word xt_x28loopx29
>3397		65 33					.word l_208
.3399						l_209:
>3399		26 28					.word xt_drop
>339b		08 16					.word i_exit
.339d						w_initrandom:
>339d		0a					.byte $0A
>339e		69 6e 69 74 72 61 6e 64			.text 'initrandom'
>33a6		6f 6d
>33a8							.fill 6
>33ae		47 33					.word w_expect
.33b0						xt_initrandom:
.33b0		4c 10 16	jmp $1610		jmp i_enter
>33b3		b2 17					.word xt_1
>33b5		f8 17					.word xt_x28literalx29
>33b7		a6 d6					.word 54950
>33b9		e4 28					.word xt_cx21
>33bb		08 16					.word i_exit
.33bd						w_random:
>33bd		06					.byte $06
>33be		72 61 6e 64 6f 6d			.text 'random'
>33c4							.fill 10
>33ce		9d 33					.word w_initrandom
.33d0						xt_random:
.33d0		4c 10 16	jmp $1610		jmp i_enter
>33d3		f8 17					.word xt_x28literalx29
>33d5		a4 d6					.word 54948
>33d7		ca 28					.word xt_x40
>33d9		08 16					.word i_exit
.33db						w_maze:
>33db		04					.byte $04
>33dc		6d 61 7a 65				.text 'maze'
>33e0							.fill 12
>33ec		bd 33					.word w_random
.33ee						xt_maze:
.33ee		4c 10 16	jmp $1610		jmp i_enter
>33f1		b0 33					.word xt_initrandom
.33f3						l_213:
>33f3		d0 33					.word xt_random
>33f5		b2 17					.word xt_1
>33f7		bf 2b					.word xt_and
>33f9		f8 17					.word xt_x28literalx29
>33fb		cd 00					.word 205
>33fd		57 2a					.word xt_x2b
>33ff		4f 17					.word xt_emit
>3401		ec 2d					.word xt_x28branchx29
>3403		f3 33					.word l_213
.3405						l_214:
>3405		08 16					.word i_exit
.3407						w_cold:
>3407		04					.byte $04
>3408		63 6f 6c 64				.text 'cold'
>340c							.fill 12
>3418		db 33					.word w_maze
.341a						xt_cold:
.341a		4c 10 16	jmp $1610		jmp i_enter
>341d		f8 17					.word xt_x28literalx29
>341f		25 34					.word l_215
>3421		ec 2d					.word xt_x28branchx29
>3423		44 34					.word l_216
.3425						l_215:
>3425		1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>342d		20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>343d		30 2e 30 30 2e 30 30
.3444						l_216:
>3444		b8 32					.word xt_count
>3446		d8 32					.word xt_type
>3448		97 17					.word xt_cr
>344a		f8 17					.word xt_x28literalx29
>344c		00 50					.word 20480
>344e		f8 17					.word xt_x28literalx29
>3450		50 00					.word 80
>3452		5a 33					.word xt_expect
>3454		97 17					.word xt_cr
>3456		f8 17					.word xt_x28literalx29
>3458		5e 34					.word l_217
>345a		ec 2d					.word xt_x28branchx29
>345c		67 34					.word l_218
.345e						l_217:
>345e		08 74 79 70 65 64 2e 2e			.ptext "typed..."
>3466		2e
.3467						l_218:
>3467		b8 32					.word xt_count
>3469		d8 32					.word xt_type
>346b		97 17					.word xt_cr
>346d		f8 17					.word xt_x28literalx29
>346f		00 50					.word 20480
>3471		f8 17					.word xt_x28literalx29
>3473		50 00					.word 80
>3475		d8 32					.word xt_type
>3477		08 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.010000	0000					endcode:

;******  Return to file: forth.asm


;******  End of listing
