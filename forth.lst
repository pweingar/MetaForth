
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Dec 28 16:27:09 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000						pstack = $0000          ; Location of the "bottom" of the parameter stack
=$1000						USERAREA = $1000        ; Area for user variables

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa		9a 0a				vnmi:       .word <>h_nmi
>fffc		00 b0				vreset:     .word <>boot
>fffe		9b 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000						MMU_MEM_CTRL = $0000
=$0001						MMU_IO_CTRL = $0001
=$00						MMU_IO_PAGE_0 = $00
=$01						MMU_IO_PAGE_1 = $01
=$02						MMU_IO_PAGE_TEXT = $02
=$03						MMU_IO_PAGE_COLOR = $03
=$d000						VKY_MST_CTRL_0 = $d000
=$01						VKY_MST_TEXT = $01
=$02						VKY_MST_OVLY = $02
=$04						VKY_MST_GRAPHICS = $04
=$08						VKY_MST_BITMAP = $08
=$10						VKY_MST_TILE = $10
=$20						VKY_MST_SPRITE = $20
=$40						VKY_MST_GAMMA = $40
=$d001						VKY_MST_CTRL_1 = $d001
=$01						VKY_MST_RES_400 = $01
=$02						VKY_MST_DBL_X = $02
=$04						VKY_MST_DBL_Y = $04
=$08						VKY_MST_SLEEP = $08
=$10						VKY_MST_OVLY_TRANS = $10
=$d004						VKY_BRD_CTRL = $d004
=$d005						VKY_BRD_BLUE = $d005
=$d006						VKY_BRD_GREEN = $d006
=$d007						VKY_BRD_RED = $d007
=$d008						VKY_BRD_SIZE_X = $d008
=$d009						VKY_BRD_SIZE_Y = $d009
=$d010						VKY_CURS_CTRL = $d010
=$01						VKY_CURS_ENABLE = $01
=$08						VKY_CURS_FLASH_1S = $08
=$0a						VKY_CURS_FLASH_0_5S = $0a
=$0c						VKY_CURS_FLASH_0_25S = $0c
=$0d						VKY_CURS_FLASH_0_125S = $0d
=$d012						VKY_CURS_CHAR = $d012
=$d014						VKY_CURS_X = $d014
=$d016						VKY_CURS_Y = $d016
=$c000						VKY_TEXT_MATRIX = $c000
=$d800						VKY_TEXT_FG_LUT = $d800
=$d840						VKY_TEXT_BG_LUT = $d840
=$c000						VKY_TEXT_FONT = $c000

;******  Return to file: bios65.asm

=12						CHAR_FF = 12                        ; Form feed character
=13						CHAR_NL = 13                        ; Newline character
>0020						shell_start .word ?                 ; Address for the recognized shell program
>0022						cur_line    .word ?                 ; Address of the current line on the text screen
>0024						src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026						dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200						curs_color  .byte ?                 ; Current color for printing
>0201						curs_x      .byte ?                 ; Current column for the text cursor
>0202						curs_y      .byte ?                 ; Current row for the text cursor
>0203						old_y       .byte ?                 ; Previous cursor row
>0204						curs_width  .byte ?                 ; Width of the screen in text columns
>0205						curs_height .byte ?                 ; Height of the screen in text columns
.b000		4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003		4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006		4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009		4c 18 0a	jmp $0a18	conout      jmp iconout             ; Print a character in A to the screen
.b00c		4c 55 0a	jmp $0a55	printah     jmp iprintah            ; Print the hexadecimal number in A
.b00f		4c 6f 0a	jmp $0a6f	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b012		4c 89 0a	jmp $0a89	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800		a9 bf		lda #$bf	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802		a0 12		ldy #$12	            ldy #>start
.0804		20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807		4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a						isetshell:
.080a		84 21		sty $21		            sty shell_start+1
.080c		85 20		sta $20		            sta shell_start
.080e		60		rts		            rts
.080f						iwarm:
.080f		78		sei		            sei                     ; Disable IRQs
.0810		d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811		a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813		9a		txs		            txs
.0814		a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816		85 01		sta $01		            sta MMU_IO_CTRL
.0818		20 1e 08	jsr $081e	            jsr inittext            ; Initialize the text screen
.081b		6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.081e						inittext:
.081e		a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0820		8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0823		9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.0826		a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.0828		8d 04 02	sta $0204	            sta curs_width
.082b		a9 3c		lda #$3c	            lda #60
.082d		8d 05 02	sta $0205	            sta curs_height
.0830		a9 00		lda #$00	            lda #0                  ; Turn off the border
.0832		8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.0835		a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.0837		8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.083a		a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.083c		8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.083f		a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0841		8d 00 02	sta $0200	            sta curs_color
.0844		a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.0846		8d 03 02	sta $0203	            sta old_y
.0849		20 86 08	jsr $0886	            jsr initlut             ; Initialize the text color lookup tables
.084c		20 53 08	jsr $0853	            jsr initfont            ; Initialize the text font
.084f		20 e5 08	jsr $08e5	            jsr consclr             ; Clear the text screen and home the cursor
.0852		60		rts		            rts
=$7f						CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.0853						initfont:
.0853		48		pha		            pha
.0854		da		phx		            phx
.0855		5a		phy		            phy
.0856		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0858		48		pha		            pha
.0859		a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.085b		85 01		sta $01		            sta MMU_IO_CTRL
.085d		a9 9c		lda #$9c	            lda #<bios_font         ; src_ptr points to the font we want
.085f		85 24		sta $24		            sta src_ptr
.0861		a9 0a		lda #$0a	            lda #>bios_font
.0863		85 25		sta $25		            sta src_ptr+1
.0865		a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.0867		85 26		sta $26		            sta dst_ptr
.0869		a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.086b		85 27		sta $27		            sta dst_ptr+1
.086d		a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.086f		a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0871		b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.0873		91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.0875		c8		iny		            iny                     ; Move to the next byte
.0876		d0 f9		bne $0871	            bne loop                ; Keep copying the entire page
.0878		e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.087a		e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.087c		ca		dex		            dex                     ; Count down the pages moved
.087d		d0 f2		bne $0871	            bne loop                ; And keep copying until 0
.087f		68		pla		            pla
.0880		85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.0882		7a		ply		            ply
.0883		fa		plx		            plx
.0884		68		pla		            pla
.0885		60		rts		            rts
=$f4						DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.0886						initlut:
.0886		48		pha		            pha
.0887		5a		phy		            phy
.0888		a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.088a		48		pha		            pha
.088b		a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.088d		85 01		sta $01		            sta MMU_IO_CTRL
.088f		a0 00		ldy #$00	            ldy #0
.0891		b9 a5 08	lda $08a5,y	loop:       lda text_lut,y              ; Get a color component
.0894		99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.0897		99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.089a		c8		iny		            iny
.089b		c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.089d		d0 f2		bne $0891	            bne loop                    ; No: copy the next one
.089f		68		pla		            pla
.08a0		85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08a2		7a		ply		            ply
.08a3		68		pla		            pla
.08a4		60		rts		            rts
>08a5		00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08a9		00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08ad		00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08b1		00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08b5		80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08b9		80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08bd		80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08c1		8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08c5		80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08c9		00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08cd		00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08d1		00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08d5		ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08d9		ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08dd		ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08e1		ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08e5						consclr:
.08e5		48		pha		            pha
.08e6		da		phx		            phx
.08e7		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.08e9		85 22		sta $22		            sta cur_line
.08eb		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.08ed		85 23		sta $23		            sta cur_line+1
.08ef		a0 00		ldy #$00	            ldy #0
.08f1		20 ec 09	jsr $09ec	loop:       jsr clrline             ; Clear the current line
.08f4		c8		iny		            iny                     ; Move to the next line
.08f5		cc 05 02	cpy $0205	            cpy curs_height
.08f8		f0 10		beq $090a	            beq home                ; If we've done the last line, home the cursor
.08fa		18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.08fb		a5 22		lda $22		            lda cur_line
.08fd		6d 04 02	adc $0204	            adc curs_width
.0900		85 22		sta $22		            sta cur_line
.0902		a5 23		lda $23		            lda cur_line+1
.0904		69 00		adc #$00	            adc #0
.0906		85 23		sta $23		            sta cur_line+1
.0908		80 e7		bra $08f1	            bra loop                ; And go back to clear it too
.090a		9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.090d		9c 02 02	stz $0202	            stz curs_y
.0910		20 16 09	jsr $0916	            jsr cursset
.0913		fa		plx		            plx
.0914		68		pla		            pla
.0915		60		rts		            rts
.0916						cursset:
.0916		48		pha		            pha
.0917		5a		phy		            phy
.0918		ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.091b		cd 04 02	cmp $0204	            cmp curs_width
.091e		90 06		bcc $0926	            blt chk_row             ; If on screen, let's check the row
.0920		9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.0923		ee 02 02	inc $0202	            inc curs_y
.0926						chk_row:
.0926		ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0929		cd 05 02	cmp $0205	            cmp curs_height
.092c		90 0a		bcc $0938	            blt set_hw              ; If on screen, set the hardware registers
.092e		ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0931		3a		dec a		            dec a
.0932		8d 02 02	sta $0202	            sta curs_y
.0935		20 76 09	jsr $0976	            jsr consscroll          ; And we need to scroll the screen
.0938		ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.093b		8d 14 d0	sta $d014	            sta VKY_CURS_X
.093e		9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0941		ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.0944		8d 16 d0	sta $d016	            sta VKY_CURS_Y
.0947		9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.094a		ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.094d		cd 02 02	cmp $0202	            cmp curs_y
.0950		f0 21		beq $0973	            beq done                ; Yes: we are done
.0952		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.0954		85 22		sta $22		            sta cur_line
.0956		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0958		85 23		sta $23		            sta cur_line+1
.095a		ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.095d		8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0960		f0 11		beq $0973	            beq done                ; If it's zero, we are done
.0962		18		clc		loop:       clc                     ; Move cur_line to the next line
.0963		a5 22		lda $22		            lda cur_line
.0965		6d 04 02	adc $0204	            adc curs_width
.0968		85 22		sta $22		            sta cur_line
.096a		a5 23		lda $23		            lda cur_line+1
.096c		69 00		adc #$00	            adc #0
.096e		85 23		sta $23		            sta cur_line+1
.0970		88		dey		            dey                     ; Decrement line counter
.0971		d0 ef		bne $0962	            bne loop                ; If not zero, keep moving down a line
.0973		7a		ply		done:       ply
.0974		68		pla		            pla
.0975		60		rts		            rts
.0976						consscroll:
.0976		48		pha		            pha
.0977		da		phx		            phx
.0978		a5 23		lda $23		            lda cur_line+1          ; Save the current line
.097a		48		pha		            pha
.097b		a5 22		lda $22		            lda cur_line
.097d		48		pha		            pha
.097e		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0980		48		pha		            pha
.0981		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.0983		85 26		sta $26		            sta dst_ptr
.0985		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0987		85 27		sta $27		            sta dst_ptr+1
.0989		18		clc		            clc                     ; src_ptr is the second line
.098a		a5 26		lda $26		            lda dst_ptr
.098c		6d 04 02	adc $0204	            adc curs_width
.098f		85 24		sta $24		            sta src_ptr
.0991		a5 27		lda $27		            lda dst_ptr+1
.0993		69 00		adc #$00	            adc #0
.0995		85 25		sta $25		            sta src_ptr+1
.0997		a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.0999		a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.099b		85 01		sta $01		            sta MMU_IO_CTRL
.099d		a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.099f		b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09a1		92 24		sta ($24)	            sta (src_ptr)
.09a3		c8		iny		            iny
.09a4		cc 04 02	cpy $0204	            cpy curs_width
.09a7		d0 f6		bne $099f	            bne loop1
.09a9		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09ab		85 01		sta $01		            sta MMU_IO_CTRL
.09ad		a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09af		b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09b1		92 24		sta ($24)	            sta (src_ptr)
.09b3		c8		iny		            iny
.09b4		cc 04 02	cpy $0204	            cpy curs_width
.09b7		d0 f6		bne $09af	            bne loop2
.09b9		a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09bb		85 26		sta $26		            sta dst_ptr
.09bd		a5 25		lda $25		            lda src_ptr+1
.09bf		85 27		sta $27		            sta dst_ptr+1
.09c1		18		clc		            clc                     ; Move src_ptr to the next line
.09c2		a5 24		lda $24		            lda src_ptr
.09c4		6d 04 02	adc $0204	            adc curs_width
.09c7		85 24		sta $24		            sta src_ptr
.09c9		a5 25		lda $25		            lda src_ptr+1
.09cb		69 00		adc #$00	            adc #0
.09cd		85 25		sta $25		            sta src_ptr+1
.09cf		e8		inx		            inx                     ; Move src line number to the next row
.09d0		cd 05 02	cmp $0205	            cmp curs_height         ; Have we copied the last row?
.09d3		d0 c4		bne $0999	            bne copy_text           ; No: copy the line
.09d5		a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09d7		85 22		sta $22		            sta cur_line
.09d9		a5 27		lda $27		            lda dst_ptr+1
.09db		85 22		sta $22		            sta cur_line
.09dd		20 ec 09	jsr $09ec	            jsr clrline
.09e0		68		pla		            pla                     ; Restore the original I/O page
.09e1		85 01		sta $01		            sta MMU_IO_CTRL
.09e3		68		pla		            pla                     ; Restore the current line
.09e4		85 22		sta $22		            sta cur_line
.09e6		68		pla		            pla
.09e7		85 23		sta $23		            sta cur_line+1
.09e9		fa		plx		            plx
.09ea		68		pla		            pla
.09eb		60		rts		            rts
.09ec						clrline:
.09ec		48		pha		            pha
.09ed		5a		phy		            phy
.09ee		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.09f0		48		pha		            pha
.09f1		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09f3		85 01		sta $01		            sta MMU_IO_CTRL
.09f5		a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.09f7		a9 20		lda #$20	            lda #' '
.09f9		91 22		sta ($22),y	loop1:      sta (cur_line),y
.09fb		c8		iny		            iny
.09fc		cc 04 02	cpy $0204	            cpy curs_width
.09ff		d0 f8		bne $09f9	            bne loop1
.0a01		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a03		85 01		sta $01		            sta MMU_IO_CTRL
.0a05		a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a07		ad 00 02	lda $0200	            lda curs_color
.0a0a		91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a0c		c8		iny		            iny
.0a0d		cc 04 02	cpy $0204	            cpy curs_width
.0a10		d0 f8		bne $0a0a	            bne loop2
.0a12		68		pla		            pla                     ; Restore the original I/O page
.0a13		85 01		sta $01		            sta MMU_IO_CTRL
.0a15		7a		ply		            ply
.0a16		68		pla		            pla
.0a17		60		rts		            rts
.0a18						iconout:
.0a18		5a		phy		            phy
.0a19		c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a1b		d0 0b		bne $0a28	            bne not_cr
.0a1d		9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a20		ee 02 02	inc $0202	            inc curs_y
.0a23		20 16 09	jsr $0916	            jsr cursset
.0a26		80 2b		bra $0a53	            bra done
.0a28		c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a2a		d0 05		bne $0a31	            bne not_ff
.0a2c		20 e5 08	jsr $08e5	            jsr consclr             ; Yes: clear the screen
.0a2f		80 22		bra $0a53	            bra done
.0a31		85 32		sta $32		not_ff:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a33		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a35		48		pha		            pha
.0a36		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a38		85 01		sta $01		            sta MMU_IO_CTRL
.0a3a		a5 32		lda $32		            lda tmp                 ; Get A back
.0a3c		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a3f		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a41		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a43		85 01		sta $01		            sta MMU_IO_CTRL
.0a45		ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a48		91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a4a		68		pla		            pla                     ; Restore the I/O page
.0a4b		85 01		sta $01		            sta MMU_IO_CTRL
.0a4d		ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a50		20 16 09	jsr $0916	            jsr cursset
.0a53		7a		ply		done:       ply
.0a54		60		rts		            rts
.0a55						iprintah:
.0a55		da		phx		            phx
.0a56		48		pha		            pha
.0a57		29 f0		and #$f0	            and #$f0                ; Isolate the high nibble
.0a59		4a		lsr a		            lsr a
.0a5a		4a		lsr a		            lsr a
.0a5b		4a		lsr a		            lsr a
.0a5c		aa		tax		            tax                     ; Convert it to an index
.0a5d		bd 79 0a	lda $0a79,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a60		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a63		68		pla		            pla
.0a64		29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a66		aa		tax		            tax                     ; Convert it to an index
.0a67		bd 79 0a	lda $0a79,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a6a		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a6d		fa		plx		            plx
.0a6e		60		rts		            rts
.0a6f						iprintyah:
.0a6f		48		pha		            pha
.0a70		98		tya		            tya
.0a71		20 0c b0	jsr $b00c	            jsr printah
.0a74		68		pla		            pla
.0a75		20 0c b0	jsr $b00c	            jsr printah
.0a78		60		rts		            rts
>0a79		30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0a81		38 39 41 42 43 44 45 46
.0a89						iprints:
.0a89		48		pha		            pha
.0a8a		5a		phy		            phy
.0a8b		a0 00		ldy #$00	            ldy #0
.0a8d		b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0a8f		f0 06		beq $0a97	            beq done
.0a91		20 09 b0	jsr $b009	            jsr conout
.0a94		c8		iny		            iny
.0a95		d0 f6		bne $0a8d	            bne loop
.0a97		7a		ply		done:       ply
.0a98		68		pla		            pla
.0a99		60		rts		            rts
.0a9a						h_nmi:
.0a9a		40		rti		            rti                     ; Just return
.0a9b						h_irq:
.0a9b		40		rti		            rti                     ; Just return
>0a9c		00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0aa4		7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0ab4		00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0ac4		38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0ad4		00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0ae4		00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0af4		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b04		30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b14		10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b24		04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b34		48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b44		1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0b54		10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0b64		10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0b74		00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0b84		00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0b94		00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0ba4		10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0bb4		28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0bc4		60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0bd4		08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0be4		10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0bf4		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c04		00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c14		00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c24		10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c34		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c44		7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0c54		7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0c64		38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0c74		00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0c84		00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0c94		38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0ca4		10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0cb4		18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0cc4		7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0cd4		38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0ce4		38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0cf4		44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d04		44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d14		38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d24		38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d34		38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d44		44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0d54		44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0d64		44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0d74		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0d84		3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0d94		00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0da4		00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0db4		00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0dc4		00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0dd4		00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0de4		00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0df4		40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e04		00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e14		00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e24		00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e34		00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e44		00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0e54		00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0e64		00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0e74		0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0e84		30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0e94		7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ea4		48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0eb4		10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0ec4		20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0ed4		00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0ee4		28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0ef4		28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f04		20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f14		10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f24		00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f34		10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f44		20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0f54		20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0f64		28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0f74		00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0f84		44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0f94		18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0fa4		10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>0fb4		10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>0fc4		14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>0fd4		10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>0fe4		00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>0ff4		42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1004		10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1014		00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1024		cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1034		10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1044		10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>1054		00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>1064		28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>1074		00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>1084		28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>1094		00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10a4		10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>10b4		10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>10c4		10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>10d4		28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>10e4		00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>10f4		00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1104		00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1114		10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1124		00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1134		28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1144		00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>1154		28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>1164		10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>1174		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1184		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1194		ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11a4		00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>11b4		00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>11c4		00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>11d4		00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>11e4		38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>11f4		3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1204		00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1214		38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1224		10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1234		08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1244		10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>1254		00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>1264		00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>1274		1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>1284		38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>1294		00 00 00 00 00 00 00 00

;******  Return to file: mf_pre_65c02.asm

>0028						ip      .word ?         ; Instruction pointer
>002a						wp      .word ?         ; Word pointer
>002c						up      .word ?         ; User pointer
>002e						donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030						test    .word ?         ; Pointer to the current test name
>0032						tmp     .word ?
>0034						savex   .byte ?
>129c		4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>12a4		68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.12b1						init_user:
>12b1		6e 00				        .word $006e     ; Initial PSP (S0)
>12b3		ff 00				        .word $00ff     ; Initial RSP (R0)
>12b5		0a 00				        .word 10        ; Initial BASE
>12b7		00 00				        .word 0         ; Initial STATE
>12b9		00 00				        .word 0         ; Initial CONTEXT
>12bb		00 00				        .word 0         ; Initial CURRENT
>12bd		00 00				        .word <>endcode ; Initial DP
.12bf						init_user_end:
=0						user_s0 = 0
=2						user_r0 = 2
=4						user_base = 4
=6						user_state = 6
=8						user_context = 8
=10						user_current = 10
=12						user_dp = 12
.12bf		a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.12c1		9a		txs		        txs
.12c2		a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.12c4		a9 d7		lda #$d7	        lda #<vstart
.12c6		85 28		sta $28		        sta ip
.12c8		a9 12		lda #$12	        lda #>vstart
.12ca		85 29		sta $29		        sta ip+1
.12cc		a9 00		lda #$00	        lda #<USERAREA
.12ce		85 2c		sta $2c		        sta up
.12d0		a9 10		lda #$10	        lda #>USERAREA
.12d2		85 2d		sta $2d		        sta up+1
.12d4		4c f9 12	jmp $12f9	        jmp next
>12d7		cd 2b				vstart  .word xt_cold
>12d9		aa 13				        .word xt_halt
.12db		6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.12de		68		pla		i_exit  pla             ; ip := pop()
.12df		85 28		sta $28		        sta ip
.12e1		68		pla		        pla
.12e2		85 29		sta $29		        sta ip+1
.12e4		80 13		bra $12f9	        bra next        ; jmp next
.12e6		a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.12e8		48		pha		        pha
.12e9		a5 28		lda $28		        lda ip
.12eb		48		pha		        pha
.12ec		18		clc		        clc             ; ip := wp + 3
.12ed		a5 2a		lda $2a		        lda wp
.12ef		69 03		adc #$03	        adc #3
.12f1		85 28		sta $28		        sta ip
.12f3		a5 2b		lda $2b		        lda wp+1
.12f5		69 00		adc #$00	        adc #0
.12f7		85 29		sta $29		        sta ip+1
.12f9		a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.12fb		b2 28		lda ($28)	        lda (ip)
.12fd		85 2a		sta $2a		        sta wp
.12ff		b1 28		lda ($28),y	        lda (ip),y
.1301		85 2b		sta $2b		        sta wp+1
.1303		18		clc		        clc             ; ip := ip + 2
.1304		a5 28		lda $28		        lda ip
.1306		69 02		adc #$02	        adc #2
.1308		85 28		sta $28		        sta ip
.130a		a5 29		lda $29		        lda ip+1
.130c		69 00		adc #$00	        adc #0
.130e		85 29		sta $29		        sta ip+1
.1310		6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.1313						w_testname:
>1313		08					.byte $08
>1314		74 65 73 74 6e 61 6d 65			.text 'testname'
>131c		00 00					.word 0
.131e						xt_testname:
.131e		b5 02		lda $02,x		lda pstack+2,x
.1320		85 30		sta $30			sta test
.1322		b5 03		lda $03,x		lda pstack+3,x
.1324		85 31		sta $31			sta test+1
.1326		e8		inx			inx
.1327		e8		inx			inx
.1328		4c f9 12	jmp $12f9		jmp next
.132b						w_assertx3d:
>132b		07					.byte $07
>132c		61 73 73 65 72 74 3d			.text 'assert='
>1333		13 13					.word w_testname
.1335						xt_assertx3d:
.1335		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1337		d5 04		cmp $04,x		cmp pstack+4,x
.1339		d0 0e		bne $1349		bne fail            ; If not, fail
.133b		b5 03		lda $03,x		lda pstack+3,x
.133d		d5 05		cmp $05,x		cmp pstack+5,x
.133f		d0 08		bne $1349		bne fail
.1341		8a		txa			txa                 ; If so, clean up the stack
.1342		18		clc			clc
.1343		69 04		adc #$04		adc #4
.1345		aa		tax			tax
.1346		4c f9 12	jmp $12f9		jmp next            ; And continue
.1349							fail:
.1349		a9 86		lda #$86		lda #<leadin        ; Print the failure message
.134b		85 24		sta $24			sta src_ptr
.134d		a9 13		lda #$13		lda #>leadin
.134f		85 25		sta $25			sta src_ptr+1
.1351		20 12 b0	jsr $b012		jsr prints
.1354		a5 30		lda $30			lda test            ; Print the name of the test
.1356		85 24		sta $24			sta src_ptr
.1358		a5 31		lda $31			lda test+1
.135a		85 25		sta $25			sta src_ptr+1
.135c		20 12 b0	jsr $b012		jsr prints
.135f		a9 99		lda #$99		lda #<actual        ; Print the "Actual" label
.1361		85 24		sta $24			sta src_ptr
.1363		a9 13		lda #$13		lda #>actual
.1365		85 25		sta $25			sta src_ptr+1
.1367		20 12 b0	jsr $b012		jsr prints
.136a		b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.136c		b5 04		lda $04,x		lda pstack+4,x
.136e		20 0f b0	jsr $b00f		jsr printyah
.1371		a9 8d		lda #$8d		lda #<expected      ; Print the "Expected" label
.1373		85 24		sta $24			sta src_ptr
.1375		a9 13		lda #$13		lda #>expected
.1377		85 25		sta $25			sta src_ptr+1
.1379		20 12 b0	jsr $b012		jsr prints
.137c		b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.137e		b5 02		lda $02,x		lda pstack+2,x
.1380		20 0f b0	jsr $b00f		jsr printyah
.1383							lock:
.1383		ea		nop			nop                 ; Lock up
.1384		80 fd		bra $1383		bra lock
.1386							leadin:
>1386		46 41 49 4c 3a 20 00			.null "FAIL: "
.138d							expected:
>138d		20 45 58 50 45 43 54 45			.null " EXPECTED: "
>1395		44 3a 20 00
.1399							actual:
>1399		20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>13a1		20 00
.13a3						w_halt:
>13a3		04					.byte $04
>13a4		68 61 6c 74				.text 'halt'
>13a8		2b 13					.word w_assertx3d
.13aa						xt_halt:
.13aa							lock:
.13aa		ea		nop			nop
.13ab		80 fd		bra $13aa		bra lock
.13ad						w_emit:
>13ad		04					.byte $04
>13ae		65 6d 69 74				.text 'emit'
>13b2		a3 13					.word w_halt
.13b4						xt_emit:
.13b4		b5 02		lda $02,x		lda pstack+2,x
.13b6		da		phx			phx
.13b7		20 09 b0	jsr $b009		jsr conout
.13ba		fa		plx			plx
.13bb		e8		inx			inx
.13bc		e8		inx			inx
.13bd		4c f9 12	jmp $12f9		jmp next
.13c0						w_cr:
>13c0		02					.byte $02
>13c1		63 72					.text 'cr'
>13c3		ad 13					.word w_emit
.13c5						xt_cr:
.13c5		da		phx			phx
.13c6		a9 0d		lda #$0d		lda #$0d
.13c8		20 09 b0	jsr $b009		jsr conout
.13cb		fa		plx			plx
.13cc		4c f9 12	jmp $12f9		jmp next
.13cf						w_0:
>13cf		01					.byte $01
>13d0		30					.text '0'
>13d1		c0 13					.word w_cr
.13d3						xt_0:
.13d3		74 01		stz $01,x		stz pstack+1,x
.13d5		74 00		stz $00,x		stz pstack,x
.13d7		ca		dex			dex
.13d8		ca		dex			dex
.13d9		4c f9 12	jmp $12f9		jmp next
.13dc						w_1:
>13dc		01					.byte $01
>13dd		31					.text '1'
>13de		cf 13					.word w_0
.13e0						xt_1:
.13e0		74 01		stz $01,x		stz pstack+1,x
.13e2		a9 01		lda #$01		lda #1
.13e4		95 00		sta $00,x		sta pstack,x
.13e6		ca		dex			dex
.13e7		ca		dex			dex
.13e8		4c f9 12	jmp $12f9		jmp next
.13eb						w_2:
>13eb		01					.byte $01
>13ec		32					.text '2'
>13ed		dc 13					.word w_1
.13ef						xt_2:
.13ef		74 01		stz $01,x		stz pstack+1,x
.13f1		a9 02		lda #$02		lda #2
.13f3		95 00		sta $00,x		sta pstack,x
.13f5		ca		dex			dex
.13f6		ca		dex			dex
.13f7		4c f9 12	jmp $12f9		jmp next
.13fa						w_x2d1:
>13fa		02					.byte $02
>13fb		2d 31					.text '-1'
>13fd		eb 13					.word w_2
.13ff						xt_x2d1:
.13ff		a9 ff		lda #$ff		lda #$ff
.1401		95 01		sta $01,x		sta pstack+1,x
.1403		95 00		sta $00,x		sta pstack,x
.1405		ca		dex			dex
.1406		ca		dex			dex
.1407		4c f9 12	jmp $12f9		jmp next
.140a						w_x2d2:
>140a		02					.byte $02
>140b		2d 32					.text '-2'
>140d		fa 13					.word w_x2d1
.140f						xt_x2d2:
.140f		a9 fe		lda #$fe		lda #$fe
.1411		95 01		sta $01,x		sta pstack+1,x
.1413		95 00		sta $00,x		sta pstack,x
.1415		ca		dex			dex
.1416		ca		dex			dex
.1417		4c f9 12	jmp $12f9		jmp next
.141a						w_x28literalx29:
>141a		09					.byte $09
>141b		28 6c 69 74 65 72 61 6c			.text '(literal)'
>1423		29
>1424		0a 14					.word w_x2d2
.1426						xt_x28literalx29:
.1426		a0 01		ldy #$01		ldy #1
.1428		b2 28		lda ($28)		lda (ip)
.142a		95 00		sta $00,x		sta pstack,x
.142c		b1 28		lda ($28),y		lda (ip),y
.142e		95 01		sta $01,x		sta pstack+1,x
.1430		ca		dex			dex
.1431		ca		dex			dex
.1432		18		clc			clc
.1433		a5 28		lda $28			lda ip
.1435		69 02		adc #$02		adc #2
.1437		85 28		sta $28			sta ip
.1439		a5 29		lda $29			lda ip+1
.143b		69 00		adc #$00		adc #0
.143d		85 29		sta $29			sta ip+1
.143f		4c f9 12	jmp $12f9		jmp next
.1442						w_depth:
>1442		05					.byte $05
>1443		64 65 70 74 68				.text 'depth'
>1448		1a 14					.word w_x28literalx29
.144a						xt_depth:
.144a		86 32		stx $32			stx tmp
.144c		38		sec			sec
.144d		a9 6e		lda #$6e		lda #$6e
.144f		e5 32		sbc $32			sbc tmp
.1451		4a		lsr a			lsr a
.1452		74 01		stz $01,x		stz pstack+1,x
.1454		95 00		sta $00,x		sta pstack,x
.1456		ca		dex			dex
.1457		ca		dex			dex
.1458		4c f9 12	jmp $12f9		jmp next
.145b						w_unittest:
>145b		08					.byte $08
>145c		75 6e 69 74 74 65 73 74			.text 'unittest'
>1464							.fill 8
>146c		42 14					.word w_depth
.146e						xt_unittest:
.146e		4c e6 12	jmp $12e6		jmp i_enter
>1471		26 14					.word xt_x28literalx29
>1473		79 14					.word l_2
>1475		32 27					.word xt_x28branchx29
>1477		85 14					.word l_3
.1479						l_2:
>1479		64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1481		3e 20 30 00
.1485						l_3:
>1485		1e 13					.word xt_testname
>1487		4a 14					.word xt_depth
>1489		d3 13					.word xt_0
>148b		35 13					.word xt_assertx3d
>148d		26 14					.word xt_x28literalx29
>148f		95 14					.word l_4
>1491		32 27					.word xt_x28branchx29
>1493		a5 14					.word l_5
.1495						l_4:
>1495		30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>149d		2d 2d 3e 20 30 20 31 00
.14a5						l_5:
>14a5		1e 13					.word xt_testname
>14a7		d3 13					.word xt_0
>14a9		4a 14					.word xt_depth
>14ab		e0 13					.word xt_1
>14ad		35 13					.word xt_assertx3d
>14af		d3 13					.word xt_0
>14b1		35 13					.word xt_assertx3d
>14b3		26 14					.word xt_x28literalx29
>14b5		bb 14					.word l_6
>14b7		32 27					.word xt_x28branchx29
>14b9		d3 14					.word l_7
.14bb						l_6:
>14bb		31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>14c3		70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.14d3						l_7:
>14d3		1e 13					.word xt_testname
>14d5		e0 13					.word xt_1
>14d7		e0 13					.word xt_1
>14d9		e0 13					.word xt_1
>14db		4a 14					.word xt_depth
>14dd		26 14					.word xt_x28literalx29
>14df		03 00					.word 3
>14e1		35 13					.word xt_assertx3d
>14e3		e0 13					.word xt_1
>14e5		35 13					.word xt_assertx3d
>14e7		e0 13					.word xt_1
>14e9		35 13					.word xt_assertx3d
>14eb		e0 13					.word xt_1
>14ed		35 13					.word xt_assertx3d
>14ef		26 14					.word xt_x28literalx29
>14f1		f7 14					.word l_8
>14f3		32 27					.word xt_x28branchx29
>14f5		06 15					.word l_9
.14f7						l_8:
>14f7		31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>14ff		20 2d 2d 3e 20 31 00
.1506						l_9:
>1506		1e 13					.word xt_testname
>1508		e0 13					.word xt_1
>150a		ef 13					.word xt_2
>150c		df 22					.word xt_drop
>150e		e0 13					.word xt_1
>1510		35 13					.word xt_assertx3d
>1512		26 14					.word xt_x28literalx29
>1514		1a 15					.word l_10
>1516		32 27					.word xt_x28branchx29
>1518		2d 15					.word l_11
.151a						l_10:
>151a		31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1522		6f 70 20 2d 2d 3e 20 31 20 32 00
.152d						l_11:
>152d		1e 13					.word xt_testname
>152f		e0 13					.word xt_1
>1531		ef 13					.word xt_2
>1533		26 14					.word xt_x28literalx29
>1535		03 00					.word 3
>1537		df 22					.word xt_drop
>1539		ef 13					.word xt_2
>153b		35 13					.word xt_assertx3d
>153d		e0 13					.word xt_1
>153f		35 13					.word xt_assertx3d
>1541		26 14					.word xt_x28literalx29
>1543		49 15					.word l_12
>1545		32 27					.word xt_x28branchx29
>1547		57 15					.word l_13
.1549						l_12:
>1549		31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1551		3e 20 31 20 31 00
.1557						l_13:
>1557		1e 13					.word xt_testname
>1559		e0 13					.word xt_1
>155b		ea 22					.word xt_dup
>155d		e0 13					.word xt_1
>155f		35 13					.word xt_assertx3d
>1561		e0 13					.word xt_1
>1563		35 13					.word xt_assertx3d
>1565		26 14					.word xt_x28literalx29
>1567		6d 15					.word l_14
>1569		32 27					.word xt_x28branchx29
>156b		7f 15					.word l_15
.156d						l_14:
>156d		31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1575		2d 2d 3e 20 31 20 32 20 32 00
.157f						l_15:
>157f		1e 13					.word xt_testname
>1581		e0 13					.word xt_1
>1583		ef 13					.word xt_2
>1585		ea 22					.word xt_dup
>1587		ef 13					.word xt_2
>1589		35 13					.word xt_assertx3d
>158b		ef 13					.word xt_2
>158d		35 13					.word xt_assertx3d
>158f		e0 13					.word xt_1
>1591		35 13					.word xt_assertx3d
>1593		26 14					.word xt_x28literalx29
>1595		9b 15					.word l_16
>1597		32 27					.word xt_x28branchx29
>1599		b0 15					.word l_17
.159b						l_16:
>159b		31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>15a3		61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.15b0						l_17:
>15b0		1e 13					.word xt_testname
>15b2		e0 13					.word xt_1
>15b4		ef 13					.word xt_2
>15b6		26 14					.word xt_x28literalx29
>15b8		03 00					.word 3
>15ba		fe 22					.word xt_swap
>15bc		ef 13					.word xt_2
>15be		35 13					.word xt_assertx3d
>15c0		26 14					.word xt_x28literalx29
>15c2		03 00					.word 3
>15c4		35 13					.word xt_assertx3d
>15c6		e0 13					.word xt_1
>15c8		35 13					.word xt_assertx3d
>15ca		26 14					.word xt_x28literalx29
>15cc		d2 15					.word l_18
>15ce		32 27					.word xt_x28branchx29
>15d0		e5 15					.word l_19
.15d2						l_18:
>15d2		31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>15da		20 2d 2d 3e 20 31 20 32 20 31 00
.15e5						l_19:
>15e5		1e 13					.word xt_testname
>15e7		e0 13					.word xt_1
>15e9		ef 13					.word xt_2
>15eb		18 23					.word xt_over
>15ed		e0 13					.word xt_1
>15ef		35 13					.word xt_assertx3d
>15f1		ef 13					.word xt_2
>15f3		35 13					.word xt_assertx3d
>15f5		e0 13					.word xt_1
>15f7		35 13					.word xt_assertx3d
>15f9		26 14					.word xt_x28literalx29
>15fb		01 16					.word l_20
>15fd		32 27					.word xt_x28branchx29
>15ff		21 16					.word l_21
.1601						l_20:
>1601		35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1609		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1619		3e 20 35 35 35 35 68 00
.1621						l_21:
>1621		1e 13					.word xt_testname
>1623		26 14					.word xt_x28literalx29
>1625		55 55					.word 21845
>1627		26 14					.word xt_x28literalx29
>1629		04 00					.word 4
>162b		66 23					.word xt_x21
>162d		26 14					.word xt_x28literalx29
>162f		04 00					.word 4
>1631		83 23					.word xt_x40
>1633		26 14					.word xt_x28literalx29
>1635		55 55					.word 21845
>1637		35 13					.word xt_assertx3d
>1639		26 14					.word xt_x28literalx29
>163b		41 16					.word l_22
>163d		32 27					.word xt_x28branchx29
>163f		61 16					.word l_23
.1641						l_22:
>1641		61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1649		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1659		3e 20 61 61 61 61 68 00
.1661						l_23:
>1661		1e 13					.word xt_testname
>1663		26 14					.word xt_x28literalx29
>1665		aa aa					.word 43690
>1667		26 14					.word xt_x28literalx29
>1669		04 00					.word 4
>166b		66 23					.word xt_x21
>166d		26 14					.word xt_x28literalx29
>166f		04 00					.word 4
>1671		83 23					.word xt_x40
>1673		26 14					.word xt_x28literalx29
>1675		aa aa					.word 43690
>1677		35 13					.word xt_assertx3d
>1679		26 14					.word xt_x28literalx29
>167b		81 16					.word l_24
>167d		32 27					.word xt_x28branchx29
>167f		9f 16					.word l_25
.1681						l_24:
>1681		35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1689		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1699		3e 20 35 35 68 00
.169f						l_25:
>169f		1e 13					.word xt_testname
>16a1		26 14					.word xt_x28literalx29
>16a3		55 00					.word 85
>16a5		26 14					.word xt_x28literalx29
>16a7		03 00					.word 3
>16a9		9d 23					.word xt_cx21
>16ab		26 14					.word xt_x28literalx29
>16ad		03 00					.word 3
>16af		ad 23					.word xt_cx40
>16b1		26 14					.word xt_x28literalx29
>16b3		55 00					.word 85
>16b5		35 13					.word xt_assertx3d
>16b7		26 14					.word xt_x28literalx29
>16b9		bf 16					.word l_26
>16bb		32 27					.word xt_x28branchx29
>16bd		dd 16					.word l_27
.16bf						l_26:
>16bf		61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>16c7		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>16d7		3e 20 61 61 68 00
.16dd						l_27:
>16dd		1e 13					.word xt_testname
>16df		26 14					.word xt_x28literalx29
>16e1		aa 00					.word 170
>16e3		26 14					.word xt_x28literalx29
>16e5		03 00					.word 3
>16e7		9d 23					.word xt_cx21
>16e9		26 14					.word xt_x28literalx29
>16eb		03 00					.word 3
>16ed		ad 23					.word xt_cx40
>16ef		26 14					.word xt_x28literalx29
>16f1		aa 00					.word 170
>16f3		35 13					.word xt_assertx3d
>16f5		26 14					.word xt_x28literalx29
>16f7		fd 16					.word l_28
>16f9		32 27					.word xt_x28branchx29
>16fb		09 17					.word l_29
.16fd						l_28:
>16fd		31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1705		3e 20 31 00
.1709						l_29:
>1709		1e 13					.word xt_testname
>170b		e0 13					.word xt_1
>170d		d3 13					.word xt_0
>170f		a3 24					.word xt_x2b
>1711		e0 13					.word xt_1
>1713		35 13					.word xt_assertx3d
>1715		26 14					.word xt_x28literalx29
>1717		1d 17					.word l_30
>1719		32 27					.word xt_x28branchx29
>171b		29 17					.word l_31
.171d						l_30:
>171d		31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1725		3e 20 32 00
.1729						l_31:
>1729		1e 13					.word xt_testname
>172b		e0 13					.word xt_1
>172d		e0 13					.word xt_1
>172f		a3 24					.word xt_x2b
>1731		ef 13					.word xt_2
>1733		35 13					.word xt_assertx3d
>1735		26 14					.word xt_x28literalx29
>1737		3d 17					.word l_32
>1739		32 27					.word xt_x28branchx29
>173b		4b 17					.word l_33
.173d						l_32:
>173d		33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1745		2d 3e 20 31 33 00
.174b						l_33:
>174b		1e 13					.word xt_testname
>174d		26 14					.word xt_x28literalx29
>174f		03 00					.word 3
>1751		26 14					.word xt_x28literalx29
>1753		0a 00					.word 10
>1755		a3 24					.word xt_x2b
>1757		26 14					.word xt_x28literalx29
>1759		0d 00					.word 13
>175b		35 13					.word xt_assertx3d
>175d		26 14					.word xt_x28literalx29
>175f		65 17					.word l_34
>1761		32 27					.word xt_x28branchx29
>1763		75 17					.word l_35
.1765						l_34:
>1765		66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>176d		2b 20 2d 2d 3e 20 34 00
.1775						l_35:
>1775		1e 13					.word xt_testname
>1777		26 14					.word xt_x28literalx29
>1779		ff ff					.word 65535
>177b		26 14					.word xt_x28literalx29
>177d		05 00					.word 5
>177f		a3 24					.word xt_x2b
>1781		26 14					.word xt_x28literalx29
>1783		04 00					.word 4
>1785		35 13					.word xt_assertx3d
>1787		26 14					.word xt_x28literalx29
>1789		8f 17					.word l_36
>178b		32 27					.word xt_x28branchx29
>178d		9b 17					.word l_37
.178f						l_36:
>178f		34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1797		3e 20 31 00
.179b						l_37:
>179b		1e 13					.word xt_testname
>179d		26 14					.word xt_x28literalx29
>179f		04 00					.word 4
>17a1		26 14					.word xt_x28literalx29
>17a3		03 00					.word 3
>17a5		b9 24					.word xt_x2d
>17a7		e0 13					.word xt_1
>17a9		35 13					.word xt_assertx3d
>17ab		26 14					.word xt_x28literalx29
>17ad		b3 17					.word l_38
>17af		32 27					.word xt_x28branchx29
>17b1		c3 17					.word l_39
.17b3						l_38:
>17b3		33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>17bb		3e 20 66 66 66 66 68 00
.17c3						l_39:
>17c3		1e 13					.word xt_testname
>17c5		26 14					.word xt_x28literalx29
>17c7		03 00					.word 3
>17c9		26 14					.word xt_x28literalx29
>17cb		04 00					.word 4
>17cd		b9 24					.word xt_x2d
>17cf		26 14					.word xt_x28literalx29
>17d1		ff ff					.word 65535
>17d3		35 13					.word xt_assertx3d
>17d5		26 14					.word xt_x28literalx29
>17d7		dd 17					.word l_40
>17d9		32 27					.word xt_x28branchx29
>17db		ea 17					.word l_41
.17dd						l_40:
>17dd		31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>17e5		2d 3e 20 35 00
.17ea						l_41:
>17ea		1e 13					.word xt_testname
>17ec		26 14					.word xt_x28literalx29
>17ee		0a 00					.word 10
>17f0		26 14					.word xt_x28literalx29
>17f2		05 00					.word 5
>17f4		b9 24					.word xt_x2d
>17f6		26 14					.word xt_x28literalx29
>17f8		05 00					.word 5
>17fa		35 13					.word xt_assertx3d
>17fc		26 14					.word xt_x28literalx29
>17fe		04 18					.word l_42
>1800		32 27					.word xt_x28branchx29
>1802		0f 18					.word l_43
.1804						l_42:
>1804		31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>180c		20 32 00
.180f						l_43:
>180f		1e 13					.word xt_testname
>1811		e0 13					.word xt_1
>1813		04 25					.word xt_1x2b
>1815		ef 13					.word xt_2
>1817		35 13					.word xt_assertx3d
>1819		26 14					.word xt_x28literalx29
>181b		21 18					.word l_44
>181d		32 27					.word xt_x28branchx29
>181f		2c 18					.word l_45
.1821						l_44:
>1821		30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1829		20 31 00
.182c						l_45:
>182c		1e 13					.word xt_testname
>182e		d3 13					.word xt_0
>1830		04 25					.word xt_1x2b
>1832		e0 13					.word xt_1
>1834		35 13					.word xt_assertx3d
>1836		26 14					.word xt_x28literalx29
>1838		3e 18					.word l_46
>183a		32 27					.word xt_x28branchx29
>183c		4b 18					.word l_47
.183e						l_46:
>183e		32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1846		3e 20 32 31 00
.184b						l_47:
>184b		1e 13					.word xt_testname
>184d		26 14					.word xt_x28literalx29
>184f		14 00					.word 20
>1851		04 25					.word xt_1x2b
>1853		26 14					.word xt_x28literalx29
>1855		15 00					.word 21
>1857		35 13					.word xt_assertx3d
>1859		26 14					.word xt_x28literalx29
>185b		61 18					.word l_48
>185d		32 27					.word xt_x28branchx29
>185f		70 18					.word l_49
.1861						l_48:
>1861		66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1869		20 2d 2d 3e 20 30 00
.1870						l_49:
>1870		1e 13					.word xt_testname
>1872		26 14					.word xt_x28literalx29
>1874		ff ff					.word 65535
>1876		04 25					.word xt_1x2b
>1878		d3 13					.word xt_0
>187a		35 13					.word xt_assertx3d
>187c		26 14					.word xt_x28literalx29
>187e		84 18					.word l_50
>1880		32 27					.word xt_x28branchx29
>1882		8f 18					.word l_51
.1884						l_50:
>1884		31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>188c		20 33 00
.188f						l_51:
>188f		1e 13					.word xt_testname
>1891		e0 13					.word xt_1
>1893		12 25					.word xt_2x2b
>1895		26 14					.word xt_x28literalx29
>1897		03 00					.word 3
>1899		35 13					.word xt_assertx3d
>189b		26 14					.word xt_x28literalx29
>189d		a3 18					.word l_52
>189f		32 27					.word xt_x28branchx29
>18a1		ae 18					.word l_53
.18a3						l_52:
>18a3		30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>18ab		20 32 00
.18ae						l_53:
>18ae		1e 13					.word xt_testname
>18b0		d3 13					.word xt_0
>18b2		12 25					.word xt_2x2b
>18b4		ef 13					.word xt_2
>18b6		35 13					.word xt_assertx3d
>18b8		26 14					.word xt_x28literalx29
>18ba		c0 18					.word l_54
>18bc		32 27					.word xt_x28branchx29
>18be		cd 18					.word l_55
.18c0						l_54:
>18c0		32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>18c8		3e 20 32 32 00
.18cd						l_55:
>18cd		1e 13					.word xt_testname
>18cf		26 14					.word xt_x28literalx29
>18d1		14 00					.word 20
>18d3		12 25					.word xt_2x2b
>18d5		26 14					.word xt_x28literalx29
>18d7		16 00					.word 22
>18d9		35 13					.word xt_assertx3d
>18db		26 14					.word xt_x28literalx29
>18dd		e3 18					.word l_56
>18df		32 27					.word xt_x28branchx29
>18e1		f2 18					.word l_57
.18e3						l_56:
>18e3		66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>18eb		20 2d 2d 3e 20 30 00
.18f2						l_57:
>18f2		1e 13					.word xt_testname
>18f4		26 14					.word xt_x28literalx29
>18f6		fe ff					.word 65534
>18f8		12 25					.word xt_2x2b
>18fa		d3 13					.word xt_0
>18fc		35 13					.word xt_assertx3d
>18fe		26 14					.word xt_x28literalx29
>1900		06 19					.word l_58
>1902		32 27					.word xt_x28branchx29
>1904		11 19					.word l_59
.1906						l_58:
>1906		31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>190e		20 30 00
.1911						l_59:
>1911		1e 13					.word xt_testname
>1913		e0 13					.word xt_1
>1915		27 25					.word xt_1x2d
>1917		d3 13					.word xt_0
>1919		35 13					.word xt_assertx3d
>191b		26 14					.word xt_x28literalx29
>191d		23 19					.word l_60
>191f		32 27					.word xt_x28branchx29
>1921		32 19					.word l_61
.1923						l_60:
>1923		30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>192b		20 66 66 66 66 68 00
.1932						l_61:
>1932		1e 13					.word xt_testname
>1934		d3 13					.word xt_0
>1936		27 25					.word xt_1x2d
>1938		26 14					.word xt_x28literalx29
>193a		ff ff					.word 65535
>193c		35 13					.word xt_assertx3d
>193e		26 14					.word xt_x28literalx29
>1940		46 19					.word l_62
>1942		32 27					.word xt_x28branchx29
>1944		53 19					.word l_63
.1946						l_62:
>1946		32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>194e		3e 20 31 39 00
.1953						l_63:
>1953		1e 13					.word xt_testname
>1955		26 14					.word xt_x28literalx29
>1957		14 00					.word 20
>1959		27 25					.word xt_1x2d
>195b		26 14					.word xt_x28literalx29
>195d		13 00					.word 19
>195f		35 13					.word xt_assertx3d
>1961		26 14					.word xt_x28literalx29
>1963		69 19					.word l_64
>1965		32 27					.word xt_x28branchx29
>1967		7c 19					.word l_65
.1969						l_64:
>1969		66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1971		20 2d 2d 3e 20 66 66 66 65 68 00
.197c						l_65:
>197c		1e 13					.word xt_testname
>197e		26 14					.word xt_x28literalx29
>1980		ff ff					.word 65535
>1982		27 25					.word xt_1x2d
>1984		26 14					.word xt_x28literalx29
>1986		fe ff					.word 65534
>1988		35 13					.word xt_assertx3d
>198a		26 14					.word xt_x28literalx29
>198c		92 19					.word l_66
>198e		32 27					.word xt_x28branchx29
>1990		a1 19					.word l_67
.1992						l_66:
>1992		31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>199a		20 66 66 66 66 68 00
.19a1						l_67:
>19a1		1e 13					.word xt_testname
>19a3		e0 13					.word xt_1
>19a5		37 25					.word xt_2x2d
>19a7		26 14					.word xt_x28literalx29
>19a9		ff ff					.word 65535
>19ab		35 13					.word xt_assertx3d
>19ad		26 14					.word xt_x28literalx29
>19af		b5 19					.word l_68
>19b1		32 27					.word xt_x28branchx29
>19b3		c4 19					.word l_69
.19b5						l_68:
>19b5		30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>19bd		20 66 66 66 65 68 00
.19c4						l_69:
>19c4		1e 13					.word xt_testname
>19c6		d3 13					.word xt_0
>19c8		37 25					.word xt_2x2d
>19ca		26 14					.word xt_x28literalx29
>19cc		fe ff					.word 65534
>19ce		35 13					.word xt_assertx3d
>19d0		26 14					.word xt_x28literalx29
>19d2		d8 19					.word l_70
>19d4		32 27					.word xt_x28branchx29
>19d6		e5 19					.word l_71
.19d8						l_70:
>19d8		32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>19e0		3e 20 31 38 00
.19e5						l_71:
>19e5		1e 13					.word xt_testname
>19e7		26 14					.word xt_x28literalx29
>19e9		14 00					.word 20
>19eb		37 25					.word xt_2x2d
>19ed		26 14					.word xt_x28literalx29
>19ef		12 00					.word 18
>19f1		35 13					.word xt_assertx3d
>19f3		26 14					.word xt_x28literalx29
>19f5		fb 19					.word l_72
>19f7		32 27					.word xt_x28branchx29
>19f9		0e 1a					.word l_73
.19fb						l_72:
>19fb		66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1a03		20 2d 2d 3e 20 66 66 66 64 68 00
.1a0e						l_73:
>1a0e		1e 13					.word xt_testname
>1a10		26 14					.word xt_x28literalx29
>1a12		ff ff					.word 65535
>1a14		37 25					.word xt_2x2d
>1a16		26 14					.word xt_x28literalx29
>1a18		fd ff					.word 65533
>1a1a		35 13					.word xt_assertx3d
>1a1c		26 14					.word xt_x28literalx29
>1a1e		24 1a					.word l_74
>1a20		32 27					.word xt_x28branchx29
>1a22		3e 1a					.word l_75
.1a24						l_74:
>1a24		30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1a2c		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1a3c		68 00
.1a3e						l_75:
>1a3e		1e 13					.word xt_testname
>1a40		26 14					.word xt_x28literalx29
>1a42		00 00					.word 0
>1a44		26 14					.word xt_x28literalx29
>1a46		00 00					.word 0
>1a48		4d 25					.word xt_and
>1a4a		26 14					.word xt_x28literalx29
>1a4c		00 00					.word 0
>1a4e		35 13					.word xt_assertx3d
>1a50		26 14					.word xt_x28literalx29
>1a52		58 1a					.word l_76
>1a54		32 27					.word xt_x28branchx29
>1a56		72 1a					.word l_77
.1a58						l_76:
>1a58		30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1a60		66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1a70		68 00
.1a72						l_77:
>1a72		1e 13					.word xt_testname
>1a74		26 14					.word xt_x28literalx29
>1a76		00 00					.word 0
>1a78		26 14					.word xt_x28literalx29
>1a7a		ff ff					.word 65535
>1a7c		4d 25					.word xt_and
>1a7e		26 14					.word xt_x28literalx29
>1a80		00 00					.word 0
>1a82		35 13					.word xt_assertx3d
>1a84		26 14					.word xt_x28literalx29
>1a86		8c 1a					.word l_78
>1a88		32 27					.word xt_x28branchx29
>1a8a		a6 1a					.word l_79
.1a8c						l_78:
>1a8c		66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1a94		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1aa4		68 00
.1aa6						l_79:
>1aa6		1e 13					.word xt_testname
>1aa8		26 14					.word xt_x28literalx29
>1aaa		ff ff					.word 65535
>1aac		26 14					.word xt_x28literalx29
>1aae		00 00					.word 0
>1ab0		4d 25					.word xt_and
>1ab2		26 14					.word xt_x28literalx29
>1ab4		00 00					.word 0
>1ab6		35 13					.word xt_assertx3d
>1ab8		26 14					.word xt_x28literalx29
>1aba		c0 1a					.word l_80
>1abc		32 27					.word xt_x28branchx29
>1abe		da 1a					.word l_81
.1ac0						l_80:
>1ac0		66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1ac8		66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1ad8		68 00
.1ada						l_81:
>1ada		1e 13					.word xt_testname
>1adc		26 14					.word xt_x28literalx29
>1ade		ff ff					.word 65535
>1ae0		26 14					.word xt_x28literalx29
>1ae2		ff ff					.word 65535
>1ae4		4d 25					.word xt_and
>1ae6		26 14					.word xt_x28literalx29
>1ae8		ff ff					.word 65535
>1aea		35 13					.word xt_assertx3d
>1aec		26 14					.word xt_x28literalx29
>1aee		f4 1a					.word l_82
>1af0		32 27					.word xt_x28branchx29
>1af2		0d 1b					.word l_83
.1af4						l_82:
>1af4		30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1afc		30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1b0c		00
.1b0d						l_83:
>1b0d		1e 13					.word xt_testname
>1b0f		26 14					.word xt_x28literalx29
>1b11		00 00					.word 0
>1b13		26 14					.word xt_x28literalx29
>1b15		00 00					.word 0
>1b17		63 25					.word xt_or
>1b19		26 14					.word xt_x28literalx29
>1b1b		00 00					.word 0
>1b1d		35 13					.word xt_assertx3d
>1b1f		26 14					.word xt_x28literalx29
>1b21		27 1b					.word l_84
>1b23		32 27					.word xt_x28branchx29
>1b25		40 1b					.word l_85
.1b27						l_84:
>1b27		30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1b2f		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1b3f		00
.1b40						l_85:
>1b40		1e 13					.word xt_testname
>1b42		26 14					.word xt_x28literalx29
>1b44		00 00					.word 0
>1b46		26 14					.word xt_x28literalx29
>1b48		ff ff					.word 65535
>1b4a		63 25					.word xt_or
>1b4c		26 14					.word xt_x28literalx29
>1b4e		ff ff					.word 65535
>1b50		35 13					.word xt_assertx3d
>1b52		26 14					.word xt_x28literalx29
>1b54		5a 1b					.word l_86
>1b56		32 27					.word xt_x28branchx29
>1b58		73 1b					.word l_87
.1b5a						l_86:
>1b5a		66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>1b62		30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1b72		00
.1b73						l_87:
>1b73		1e 13					.word xt_testname
>1b75		26 14					.word xt_x28literalx29
>1b77		ff ff					.word 65535
>1b79		26 14					.word xt_x28literalx29
>1b7b		00 00					.word 0
>1b7d		63 25					.word xt_or
>1b7f		26 14					.word xt_x28literalx29
>1b81		ff ff					.word 65535
>1b83		35 13					.word xt_assertx3d
>1b85		26 14					.word xt_x28literalx29
>1b87		8d 1b					.word l_88
>1b89		32 27					.word xt_x28branchx29
>1b8b		a6 1b					.word l_89
.1b8d						l_88:
>1b8d		66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>1b95		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1ba5		00
.1ba6						l_89:
>1ba6		1e 13					.word xt_testname
>1ba8		26 14					.word xt_x28literalx29
>1baa		ff ff					.word 65535
>1bac		26 14					.word xt_x28literalx29
>1bae		ff ff					.word 65535
>1bb0		63 25					.word xt_or
>1bb2		26 14					.word xt_x28literalx29
>1bb4		ff ff					.word 65535
>1bb6		35 13					.word xt_assertx3d
>1bb8		26 14					.word xt_x28literalx29
>1bba		c0 1b					.word l_90
>1bbc		32 27					.word xt_x28branchx29
>1bbe		da 1b					.word l_91
.1bc0						l_90:
>1bc0		30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>1bc8		30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>1bd8		68 00
.1bda						l_91:
>1bda		1e 13					.word xt_testname
>1bdc		26 14					.word xt_x28literalx29
>1bde		00 00					.word 0
>1be0		26 14					.word xt_x28literalx29
>1be2		00 00					.word 0
>1be4		7a 25					.word xt_xor
>1be6		26 14					.word xt_x28literalx29
>1be8		00 00					.word 0
>1bea		35 13					.word xt_assertx3d
>1bec		26 14					.word xt_x28literalx29
>1bee		f4 1b					.word l_92
>1bf0		32 27					.word xt_x28branchx29
>1bf2		0e 1c					.word l_93
.1bf4						l_92:
>1bf4		30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>1bfc		66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>1c0c		68 00
.1c0e						l_93:
>1c0e		1e 13					.word xt_testname
>1c10		26 14					.word xt_x28literalx29
>1c12		00 00					.word 0
>1c14		26 14					.word xt_x28literalx29
>1c16		ff ff					.word 65535
>1c18		7a 25					.word xt_xor
>1c1a		26 14					.word xt_x28literalx29
>1c1c		ff ff					.word 65535
>1c1e		35 13					.word xt_assertx3d
>1c20		26 14					.word xt_x28literalx29
>1c22		28 1c					.word l_94
>1c24		32 27					.word xt_x28branchx29
>1c26		42 1c					.word l_95
.1c28						l_94:
>1c28		66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>1c30		30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>1c40		68 00
.1c42						l_95:
>1c42		1e 13					.word xt_testname
>1c44		26 14					.word xt_x28literalx29
>1c46		ff ff					.word 65535
>1c48		26 14					.word xt_x28literalx29
>1c4a		00 00					.word 0
>1c4c		7a 25					.word xt_xor
>1c4e		26 14					.word xt_x28literalx29
>1c50		ff ff					.word 65535
>1c52		35 13					.word xt_assertx3d
>1c54		26 14					.word xt_x28literalx29
>1c56		5c 1c					.word l_96
>1c58		32 27					.word xt_x28branchx29
>1c5a		76 1c					.word l_97
.1c5c						l_96:
>1c5c		66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>1c64		66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>1c74		68 00
.1c76						l_97:
>1c76		1e 13					.word xt_testname
>1c78		26 14					.word xt_x28literalx29
>1c7a		ff ff					.word 65535
>1c7c		26 14					.word xt_x28literalx29
>1c7e		ff ff					.word 65535
>1c80		7a 25					.word xt_xor
>1c82		26 14					.word xt_x28literalx29
>1c84		00 00					.word 0
>1c86		35 13					.word xt_assertx3d
>1c88		26 14					.word xt_x28literalx29
>1c8a		90 1c					.word l_98
>1c8c		32 27					.word xt_x28branchx29
>1c8e		a4 1c					.word l_99
.1c90						l_98:
>1c90		30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>1c98		74 20 2d 2d 3e 20 66 66 66 66 68 00
.1ca4						l_99:
>1ca4		1e 13					.word xt_testname
>1ca6		26 14					.word xt_x28literalx29
>1ca8		00 00					.word 0
>1caa		91 25					.word xt_not
>1cac		26 14					.word xt_x28literalx29
>1cae		ff ff					.word 65535
>1cb0		35 13					.word xt_assertx3d
>1cb2		26 14					.word xt_x28literalx29
>1cb4		ba 1c					.word l_100
>1cb6		32 27					.word xt_x28branchx29
>1cb8		ce 1c					.word l_101
.1cba						l_100:
>1cba		66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>1cc2		74 20 2d 2d 3e 20 30 30 30 30 68 00
.1cce						l_101:
>1cce		1e 13					.word xt_testname
>1cd0		26 14					.word xt_x28literalx29
>1cd2		ff ff					.word 65535
>1cd4		91 25					.word xt_not
>1cd6		26 14					.word xt_x28literalx29
>1cd8		00 00					.word 0
>1cda		35 13					.word xt_assertx3d
>1cdc		26 14					.word xt_x28literalx29
>1cde		e4 1c					.word l_102
>1ce0		32 27					.word xt_x28branchx29
>1ce2		f3 1c					.word l_103
.1ce4						l_102:
>1ce4		30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>1cec		20 30 30 30 30 68 00
.1cf3						l_103:
>1cf3		1e 13					.word xt_testname
>1cf5		d3 13					.word xt_0
>1cf7		a5 25					.word xt_0x3c
>1cf9		26 14					.word xt_x28literalx29
>1cfb		00 00					.word 0
>1cfd		35 13					.word xt_assertx3d
>1cff		26 14					.word xt_x28literalx29
>1d01		07 1d					.word l_104
>1d03		32 27					.word xt_x28branchx29
>1d05		16 1d					.word l_105
.1d07						l_104:
>1d07		33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>1d0f		20 30 30 30 30 68 00
.1d16						l_105:
>1d16		1e 13					.word xt_testname
>1d18		26 14					.word xt_x28literalx29
>1d1a		03 00					.word 3
>1d1c		a5 25					.word xt_0x3c
>1d1e		26 14					.word xt_x28literalx29
>1d20		00 00					.word 0
>1d22		35 13					.word xt_assertx3d
>1d24		26 14					.word xt_x28literalx29
>1d26		2c 1d					.word l_106
>1d28		32 27					.word xt_x28branchx29
>1d2a		3f 1d					.word l_107
.1d2c						l_106:
>1d2c		66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>1d34		20 2d 2d 3e 20 66 66 66 66 68 00
.1d3f						l_107:
>1d3f		1e 13					.word xt_testname
>1d41		26 14					.word xt_x28literalx29
>1d43		ff ff					.word 65535
>1d45		a5 25					.word xt_0x3c
>1d47		26 14					.word xt_x28literalx29
>1d49		ff ff					.word 65535
>1d4b		35 13					.word xt_assertx3d
>1d4d		26 14					.word xt_x28literalx29
>1d4f		55 1d					.word l_108
>1d51		32 27					.word xt_x28branchx29
>1d53		64 1d					.word l_109
.1d55						l_108:
>1d55		30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>1d5d		20 66 66 66 66 68 00
.1d64						l_109:
>1d64		1e 13					.word xt_testname
>1d66		d3 13					.word xt_0
>1d68		be 25					.word xt_0x3d
>1d6a		26 14					.word xt_x28literalx29
>1d6c		ff ff					.word 65535
>1d6e		35 13					.word xt_assertx3d
>1d70		26 14					.word xt_x28literalx29
>1d72		78 1d					.word l_110
>1d74		32 27					.word xt_x28branchx29
>1d76		87 1d					.word l_111
.1d78						l_110:
>1d78		33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>1d80		20 30 30 30 30 68 00
.1d87						l_111:
>1d87		1e 13					.word xt_testname
>1d89		26 14					.word xt_x28literalx29
>1d8b		03 00					.word 3
>1d8d		be 25					.word xt_0x3d
>1d8f		26 14					.word xt_x28literalx29
>1d91		00 00					.word 0
>1d93		35 13					.word xt_assertx3d
>1d95		26 14					.word xt_x28literalx29
>1d97		9d 1d					.word l_112
>1d99		32 27					.word xt_x28branchx29
>1d9b		b0 1d					.word l_113
.1d9d						l_112:
>1d9d		66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>1da5		20 2d 2d 3e 20 30 30 30 30 68 00
.1db0						l_113:
>1db0		1e 13					.word xt_testname
>1db2		26 14					.word xt_x28literalx29
>1db4		ff ff					.word 65535
>1db6		be 25					.word xt_0x3d
>1db8		26 14					.word xt_x28literalx29
>1dba		00 00					.word 0
>1dbc		35 13					.word xt_assertx3d
>1dbe		26 14					.word xt_x28literalx29
>1dc0		c6 1d					.word l_114
>1dc2		32 27					.word xt_x28branchx29
>1dc4		d5 1d					.word l_115
.1dc6						l_114:
>1dc6		30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>1dce		20 30 30 30 30 68 00
.1dd5						l_115:
>1dd5		1e 13					.word xt_testname
>1dd7		d3 13					.word xt_0
>1dd9		db 25					.word xt_0x3e
>1ddb		26 14					.word xt_x28literalx29
>1ddd		00 00					.word 0
>1ddf		35 13					.word xt_assertx3d
>1de1		26 14					.word xt_x28literalx29
>1de3		e9 1d					.word l_116
>1de5		32 27					.word xt_x28branchx29
>1de7		f8 1d					.word l_117
.1de9						l_116:
>1de9		33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>1df1		20 66 66 66 66 68 00
.1df8						l_117:
>1df8		1e 13					.word xt_testname
>1dfa		26 14					.word xt_x28literalx29
>1dfc		03 00					.word 3
>1dfe		db 25					.word xt_0x3e
>1e00		26 14					.word xt_x28literalx29
>1e02		ff ff					.word 65535
>1e04		35 13					.word xt_assertx3d
>1e06		26 14					.word xt_x28literalx29
>1e08		0e 1e					.word l_118
>1e0a		32 27					.word xt_x28branchx29
>1e0c		21 1e					.word l_119
.1e0e						l_118:
>1e0e		66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>1e16		20 2d 2d 3e 20 30 30 30 30 68 00
.1e21						l_119:
>1e21		1e 13					.word xt_testname
>1e23		26 14					.word xt_x28literalx29
>1e25		ff ff					.word 65535
>1e27		db 25					.word xt_0x3e
>1e29		26 14					.word xt_x28literalx29
>1e2b		00 00					.word 0
>1e2d		35 13					.word xt_assertx3d
>1e2f		26 14					.word xt_x28literalx29
>1e31		37 1e					.word l_120
>1e33		32 27					.word xt_x28branchx29
>1e35		4e 1e					.word l_121
.1e37						l_120:
>1e37		63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>1e3f		2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.1e4e						l_121:
>1e4e		1e 13					.word xt_testname
>1e50		44 26					.word xt_cells
>1e52		ef 13					.word xt_2
>1e54		b9 24					.word xt_x2d
>1e56		be 25					.word xt_0x3d
>1e58		26 14					.word xt_x28literalx29
>1e5a		ff ff					.word 65535
>1e5c		35 13					.word xt_assertx3d
>1e5e		26 14					.word xt_x28literalx29
>1e60		66 1e					.word l_122
>1e62		32 27					.word xt_x28branchx29
>1e64		7b 1e					.word l_123
.1e66						l_122:
>1e66		62 6c 20 33 32 20 2d 20			.null "bl 32 - 0= --> ffffh"
>1e6e		30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.1e7b						l_123:
>1e7b		1e 13					.word xt_testname
>1e7d		5c 26					.word xt_bl
>1e7f		26 14					.word xt_x28literalx29
>1e81		20 00					.word 32
>1e83		b9 24					.word xt_x2d
>1e85		be 25					.word xt_0x3d
>1e87		26 14					.word xt_x28literalx29
>1e89		ff ff					.word 65535
>1e8b		35 13					.word xt_assertx3d
>1e8d		26 14					.word xt_x28literalx29
>1e8f		95 1e					.word l_124
>1e91		32 27					.word xt_x28branchx29
>1e93		a7 1e					.word l_125
.1e95						l_124:
>1e95		27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>1e9d		75 74 65 20 2d 2d 3e 20 31 00
.1ea7						l_125:
>1ea7		1e 13					.word xt_testname
>1ea9		26 14					.word xt_x28literalx29
>1eab		e0 13					.word xt_1
>1ead		64 28					.word xt_execute
>1eaf		e0 13					.word xt_1
>1eb1		35 13					.word xt_assertx3d
>1eb3		26 14					.word xt_x28literalx29
>1eb5		bb 1e					.word l_126
>1eb7		32 27					.word xt_x28branchx29
>1eb9		d1 1e					.word l_127
.1ebb						l_126:
>1ebb		31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>1ec3		65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.1ed1						l_127:
>1ed1		1e 13					.word xt_testname
>1ed3		e0 13					.word xt_1
>1ed5		ef 13					.word xt_2
>1ed7		26 14					.word xt_x28literalx29
>1ed9		a3 24					.word xt_x2b
>1edb		64 28					.word xt_execute
>1edd		26 14					.word xt_x28literalx29
>1edf		03 00					.word 3
>1ee1		35 13					.word xt_assertx3d
>1ee3		26 14					.word xt_x28literalx29
>1ee5		eb 1e					.word l_129
>1ee7		32 27					.word xt_x28branchx29
>1ee9		f8 1e					.word l_130
.1eeb						l_129:
>1eeb		30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>1ef3		2d 3e 20 30 00
.1ef8						l_130:
>1ef8		1e 13					.word xt_testname
>1efa		d3 13					.word xt_0
>1efc		bf 28					.word xt_x3fdup
>1efe		d3 13					.word xt_0
>1f00		35 13					.word xt_assertx3d
>1f02		26 14					.word xt_x28literalx29
>1f04		0a 1f					.word l_131
>1f06		32 27					.word xt_x28branchx29
>1f08		19 1f					.word l_132
.1f0a						l_131:
>1f0a		31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>1f12		2d 3e 20 31 20 31 00
.1f19						l_132:
>1f19		1e 13					.word xt_testname
>1f1b		e0 13					.word xt_1
>1f1d		bf 28					.word xt_x3fdup
>1f1f		e0 13					.word xt_1
>1f21		35 13					.word xt_assertx3d
>1f23		e0 13					.word xt_1
>1f25		35 13					.word xt_assertx3d
>1f27		26 14					.word xt_x28literalx29
>1f29		2f 1f					.word l_133
>1f2b		32 27					.word xt_x28branchx29
>1f2d		3f 1f					.word l_134
.1f2f						l_133:
>1f2f		31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>1f37		3e 20 66 66 66 66 68 00
.1f3f						l_134:
>1f3f		1e 13					.word xt_testname
>1f41		e0 13					.word xt_1
>1f43		ef 13					.word xt_2
>1f45		df 28					.word xt_x3c
>1f47		26 14					.word xt_x28literalx29
>1f49		ff ff					.word 65535
>1f4b		35 13					.word xt_assertx3d
>1f4d		26 14					.word xt_x28literalx29
>1f4f		55 1f					.word l_135
>1f51		32 27					.word xt_x28branchx29
>1f53		65 1f					.word l_136
.1f55						l_135:
>1f55		32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>1f5d		3e 20 30 30 30 30 68 00
.1f65						l_136:
>1f65		1e 13					.word xt_testname
>1f67		ef 13					.word xt_2
>1f69		e0 13					.word xt_1
>1f6b		df 28					.word xt_x3c
>1f6d		26 14					.word xt_x28literalx29
>1f6f		00 00					.word 0
>1f71		35 13					.word xt_assertx3d
>1f73		26 14					.word xt_x28literalx29
>1f75		7b 1f					.word l_137
>1f77		32 27					.word xt_x28branchx29
>1f79		8f 1f					.word l_138
.1f7b						l_137:
>1f7b		30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>1f83		3c 20 2d 2d 3e 20 30 30 30 30 68 00
.1f8f						l_138:
>1f8f		1e 13					.word xt_testname
>1f91		d3 13					.word xt_0
>1f93		26 14					.word xt_x28literalx29
>1f95		ff ff					.word 65535
>1f97		df 28					.word xt_x3c
>1f99		26 14					.word xt_x28literalx29
>1f9b		00 00					.word 0
>1f9d		35 13					.word xt_assertx3d
>1f9f		26 14					.word xt_x28literalx29
>1fa1		a7 1f					.word l_139
>1fa3		32 27					.word xt_x28branchx29
>1fa5		bb 1f					.word l_140
.1fa7						l_139:
>1fa7		66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>1faf		3c 20 2d 2d 3e 20 66 66 66 66 68 00
.1fbb						l_140:
>1fbb		1e 13					.word xt_testname
>1fbd		26 14					.word xt_x28literalx29
>1fbf		ff ff					.word 65535
>1fc1		d3 13					.word xt_0
>1fc3		df 28					.word xt_x3c
>1fc5		26 14					.word xt_x28literalx29
>1fc7		ff ff					.word 65535
>1fc9		35 13					.word xt_assertx3d
>1fcb		26 14					.word xt_x28literalx29
>1fcd		d3 1f					.word l_141
>1fcf		32 27					.word xt_x28branchx29
>1fd1		e3 1f					.word l_142
.1fd3						l_141:
>1fd3		31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>1fdb		3e 20 30 30 30 30 68 00
.1fe3						l_142:
>1fe3		1e 13					.word xt_testname
>1fe5		e0 13					.word xt_1
>1fe7		ef 13					.word xt_2
>1fe9		fb 28					.word xt_x3e
>1feb		26 14					.word xt_x28literalx29
>1fed		00 00					.word 0
>1fef		35 13					.word xt_assertx3d
>1ff1		26 14					.word xt_x28literalx29
>1ff3		f9 1f					.word l_143
>1ff5		32 27					.word xt_x28branchx29
>1ff7		09 20					.word l_144
.1ff9						l_143:
>1ff9		32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>2001		3e 20 66 66 66 66 68 00
.2009						l_144:
>2009		1e 13					.word xt_testname
>200b		ef 13					.word xt_2
>200d		e0 13					.word xt_1
>200f		fb 28					.word xt_x3e
>2011		26 14					.word xt_x28literalx29
>2013		ff ff					.word 65535
>2015		35 13					.word xt_assertx3d
>2017		26 14					.word xt_x28literalx29
>2019		1f 20					.word l_145
>201b		32 27					.word xt_x28branchx29
>201d		33 20					.word l_146
.201f						l_145:
>201f		30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2027		3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2033						l_146:
>2033		1e 13					.word xt_testname
>2035		d3 13					.word xt_0
>2037		26 14					.word xt_x28literalx29
>2039		ff ff					.word 65535
>203b		fb 28					.word xt_x3e
>203d		26 14					.word xt_x28literalx29
>203f		ff ff					.word 65535
>2041		35 13					.word xt_assertx3d
>2043		26 14					.word xt_x28literalx29
>2045		4b 20					.word l_147
>2047		32 27					.word xt_x28branchx29
>2049		5f 20					.word l_148
.204b						l_147:
>204b		66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2053		3e 20 2d 2d 3e 20 30 30 30 30 68 00
.205f						l_148:
>205f		1e 13					.word xt_testname
>2061		26 14					.word xt_x28literalx29
>2063		ff ff					.word 65535
>2065		d3 13					.word xt_0
>2067		fb 28					.word xt_x3e
>2069		26 14					.word xt_x28literalx29
>206b		00 00					.word 0
>206d		35 13					.word xt_assertx3d
>206f		26 14					.word xt_x28literalx29
>2071		77 20					.word l_149
>2073		32 27					.word xt_x28branchx29
>2075		87 20					.word l_150
.2077						l_149:
>2077		31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>207f		3e 20 30 30 30 30 68 00
.2087						l_150:
>2087		1e 13					.word xt_testname
>2089		e0 13					.word xt_1
>208b		d3 13					.word xt_0
>208d		17 29					.word xt_x3d
>208f		26 14					.word xt_x28literalx29
>2091		00 00					.word 0
>2093		35 13					.word xt_assertx3d
>2095		26 14					.word xt_x28literalx29
>2097		9d 20					.word l_151
>2099		32 27					.word xt_x28branchx29
>209b		ad 20					.word l_152
.209d						l_151:
>209d		31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>20a5		3e 20 66 66 66 66 68 00
.20ad						l_152:
>20ad		1e 13					.word xt_testname
>20af		e0 13					.word xt_1
>20b1		e0 13					.word xt_1
>20b3		17 29					.word xt_x3d
>20b5		26 14					.word xt_x28literalx29
>20b7		ff ff					.word 65535
>20b9		35 13					.word xt_assertx3d
>20bb		26 14					.word xt_x28literalx29
>20bd		c3 20					.word l_153
>20bf		32 27					.word xt_x28branchx29
>20c1		d7 20					.word l_154
.20c3						l_153:
>20c3		66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>20cb		3d 20 2d 2d 3e 20 30 30 30 30 68 00
.20d7						l_154:
>20d7		1e 13					.word xt_testname
>20d9		26 14					.word xt_x28literalx29
>20db		ff ff					.word 65535
>20dd		d3 13					.word xt_0
>20df		17 29					.word xt_x3d
>20e1		26 14					.word xt_x28literalx29
>20e3		00 00					.word 0
>20e5		35 13					.word xt_assertx3d
>20e7		26 14					.word xt_x28literalx29
>20e9		ef 20					.word l_155
>20eb		32 27					.word xt_x28branchx29
>20ed		07 21					.word l_156
.20ef						l_155:
>20ef		66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>20f7		66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2107						l_156:
>2107		1e 13					.word xt_testname
>2109		26 14					.word xt_x28literalx29
>210b		ff ff					.word 65535
>210d		26 14					.word xt_x28literalx29
>210f		ff ff					.word 65535
>2111		17 29					.word xt_x3d
>2113		26 14					.word xt_x28literalx29
>2115		ff ff					.word 65535
>2117		35 13					.word xt_assertx3d
>2119		26 14					.word xt_x28literalx29
>211b		21 21					.word l_157
>211d		32 27					.word xt_x28branchx29
>211f		31 21					.word l_158
.2121						l_157:
>2121		30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2129		3e 20 66 66 66 66 68 00
.2131						l_158:
>2131		1e 13					.word xt_testname
>2133		d3 13					.word xt_0
>2135		d3 13					.word xt_0
>2137		17 29					.word xt_x3d
>2139		26 14					.word xt_x28literalx29
>213b		ff ff					.word 65535
>213d		35 13					.word xt_assertx3d
>213f		26 14					.word xt_x28literalx29
>2141		47 21					.word l_162
>2143		32 27					.word xt_x28branchx29
>2145		55 21					.word l_163
.2147						l_162:
>2147		31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>214f		2d 2d 3e 20 32 00
.2155						l_163:
>2155		1e 13					.word xt_testname
>2157		e0 13					.word xt_1
>2159		ef 13					.word xt_2
>215b		59 29					.word xt_max
>215d		ef 13					.word xt_2
>215f		35 13					.word xt_assertx3d
>2161		26 14					.word xt_x28literalx29
>2163		69 21					.word l_164
>2165		32 27					.word xt_x28branchx29
>2167		77 21					.word l_165
.2169						l_164:
>2169		33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2171		2d 2d 3e 20 33 00
.2177						l_165:
>2177		1e 13					.word xt_testname
>2179		26 14					.word xt_x28literalx29
>217b		03 00					.word 3
>217d		d3 13					.word xt_0
>217f		59 29					.word xt_max
>2181		26 14					.word xt_x28literalx29
>2183		03 00					.word 3
>2185		35 13					.word xt_assertx3d
>2187		26 14					.word xt_x28literalx29
>2189		8f 21					.word l_166
>218b		32 27					.word xt_x28branchx29
>218d		a9 21					.word l_167
.218f						l_166:
>218f		66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>2197		66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>21a7		68 00
.21a9						l_167:
>21a9		1e 13					.word xt_testname
>21ab		26 14					.word xt_x28literalx29
>21ad		fe ff					.word 65534
>21af		26 14					.word xt_x28literalx29
>21b1		ff ff					.word 65535
>21b3		59 29					.word xt_max
>21b5		26 14					.word xt_x28literalx29
>21b7		ff ff					.word 65535
>21b9		35 13					.word xt_assertx3d
>21bb		26 14					.word xt_x28literalx29
>21bd		c3 21					.word l_170
>21bf		32 27					.word xt_x28branchx29
>21c1		d1 21					.word l_171
.21c3						l_170:
>21c3		31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>21cb		2d 2d 3e 20 31 00
.21d1						l_171:
>21d1		1e 13					.word xt_testname
>21d3		e0 13					.word xt_1
>21d5		ef 13					.word xt_2
>21d7		85 29					.word xt_min
>21d9		e0 13					.word xt_1
>21db		35 13					.word xt_assertx3d
>21dd		26 14					.word xt_x28literalx29
>21df		e5 21					.word l_172
>21e1		32 27					.word xt_x28branchx29
>21e3		f3 21					.word l_173
.21e5						l_172:
>21e5		33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>21ed		2d 2d 3e 20 30 00
.21f3						l_173:
>21f3		1e 13					.word xt_testname
>21f5		26 14					.word xt_x28literalx29
>21f7		03 00					.word 3
>21f9		d3 13					.word xt_0
>21fb		85 29					.word xt_min
>21fd		d3 13					.word xt_0
>21ff		35 13					.word xt_assertx3d
>2201		26 14					.word xt_x28literalx29
>2203		09 22					.word l_174
>2205		32 27					.word xt_x28branchx29
>2207		23 22					.word l_175
.2209						l_174:
>2209		66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2211		66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2221		68 00
.2223						l_175:
>2223		1e 13					.word xt_testname
>2225		26 14					.word xt_x28literalx29
>2227		fe ff					.word 65534
>2229		26 14					.word xt_x28literalx29
>222b		ff ff					.word 65535
>222d		85 29					.word xt_min
>222f		26 14					.word xt_x28literalx29
>2231		fe ff					.word 65534
>2233		35 13					.word xt_assertx3d
>2235		26 14					.word xt_x28literalx29
>2237		3d 22					.word l_176
>2239		32 27					.word xt_x28branchx29
>223b		51 22					.word l_177
.223d						l_176:
>223d		31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>2245		74 20 2d 2d 3e 20 32 20 33 20 31 00
.2251						l_177:
>2251		1e 13					.word xt_testname
>2253		e0 13					.word xt_1
>2255		ef 13					.word xt_2
>2257		26 14					.word xt_x28literalx29
>2259		03 00					.word 3
>225b		b1 29					.word xt_rot
>225d		e0 13					.word xt_1
>225f		35 13					.word xt_assertx3d
>2261		26 14					.word xt_x28literalx29
>2263		03 00					.word 3
>2265		35 13					.word xt_assertx3d
>2267		ef 13					.word xt_2
>2269		35 13					.word xt_assertx3d
>226b		26 14					.word xt_x28literalx29
>226d		73 22					.word l_178
>226f		32 27					.word xt_x28branchx29
>2271		88 22					.word l_179
.2273						l_178:
>2273		31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>227b		20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.2288						l_179:
>2288		1e 13					.word xt_testname
>228a		e0 13					.word xt_1
>228c		ef 13					.word xt_2
>228e		d1 29					.word xt_2dup
>2290		ef 13					.word xt_2
>2292		35 13					.word xt_assertx3d
>2294		e0 13					.word xt_1
>2296		35 13					.word xt_assertx3d
>2298		ef 13					.word xt_2
>229a		35 13					.word xt_assertx3d
>229c		e0 13					.word xt_1
>229e		35 13					.word xt_assertx3d
>22a0		26 14					.word xt_x28literalx29
>22a2		a8 22					.word l_180
>22a4		32 27					.word xt_x28branchx29
>22a6		be 22					.word l_181
.22a8						l_180:
>22a8		31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>22b0		32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.22be						l_181:
>22be		1e 13					.word xt_testname
>22c0		e0 13					.word xt_1
>22c2		ef 13					.word xt_2
>22c4		26 14					.word xt_x28literalx29
>22c6		03 00					.word 3
>22c8		26 14					.word xt_x28literalx29
>22ca		04 00					.word 4
>22cc		ed 29					.word xt_2drop
>22ce		ef 13					.word xt_2
>22d0		35 13					.word xt_assertx3d
>22d2		e0 13					.word xt_1
>22d4		35 13					.word xt_assertx3d
>22d6		de 12					.word i_exit
.22d8						w_drop:
>22d8		04					.byte $04
>22d9		64 72 6f 70				.text 'drop'
>22dd		5b 14					.word w_unittest
.22df						xt_drop:
.22df		e8		inx			inx
.22e0		e8		inx			inx
.22e1		4c f9 12	jmp $12f9		jmp next
.22e4						w_dup:
>22e4		03					.byte $03
>22e5		64 75 70				.text 'dup'
>22e8		d8 22					.word w_drop
.22ea						xt_dup:
.22ea		b5 02		lda $02,x		lda pstack+2,x
.22ec		95 00		sta $00,x		sta pstack,x
.22ee		b5 03		lda $03,x		lda pstack+3,x
.22f0		95 01		sta $01,x		sta pstack+1,x
.22f2		ca		dex			dex
.22f3		ca		dex			dex
.22f4		4c f9 12	jmp $12f9		jmp next
.22f7						w_swap:
>22f7		04					.byte $04
>22f8		73 77 61 70				.text 'swap'
>22fc		e4 22					.word w_dup
.22fe						xt_swap:
.22fe		b5 02		lda $02,x		lda pstack+2,x
.2300		b4 04		ldy $04,x		ldy pstack+4,x
.2302		94 02		sty $02,x		sty pstack+2,x
.2304		95 04		sta $04,x		sta pstack+4,x
.2306		b5 03		lda $03,x		lda pstack+3,x
.2308		b4 05		ldy $05,x		ldy pstack+5,x
.230a		94 03		sty $03,x		sty pstack+3,x
.230c		95 05		sta $05,x		sta pstack+5,x
.230e		4c f9 12	jmp $12f9		jmp next
.2311						w_over:
>2311		04					.byte $04
>2312		6f 76 65 72				.text 'over'
>2316		f7 22					.word w_swap
.2318						xt_over:
.2318		b5 04		lda $04,x		lda pstack+4,x
.231a		95 00		sta $00,x		sta pstack,x
.231c		b5 05		lda $05,x		lda pstack+5,x
.231e		95 01		sta $01,x		sta pstack+1,x
.2320		ca		dex			dex
.2321		ca		dex			dex
.2322		4c f9 12	jmp $12f9		jmp next
.2325						w_x3er:
>2325		02					.byte $02
>2326		3e 72					.text '>r'
>2328		11 23					.word w_over
.232a						xt_x3er:
.232a		b5 03		lda $03,x		lda pstack+3,x
.232c		48		pha			pha
.232d		b5 02		lda $02,x		lda pstack+2,x
.232f		48		pha			pha
.2330		e8		inx			inx
.2331		e8		inx			inx
.2332		4c f9 12	jmp $12f9		jmp next
.2335						w_rx3e:
>2335		02					.byte $02
>2336		72 3e					.text 'r>'
>2338		25 23					.word w_x3er
.233a						xt_rx3e:
.233a		68		pla			pla
.233b		95 00		sta $00,x		sta pstack,x
.233d		68		pla			pla
.233e		95 01		sta $01,x		sta pstack+1,x
.2340		ca		dex			dex
.2341		ca		dex			dex
.2342		4c f9 12	jmp $12f9		jmp next
.2345						w_r:
>2345		01					.byte $01
>2346		72					.text 'r'
>2347		35 23					.word w_rx3e
.2349						xt_r:
.2349		68		pla			pla
.234a		95 00		sta $00,x		sta pstack,x
.234c		68		pla			pla
.234d		95 01		sta $01,x		sta pstack+1,x
.234f		48		pha			pha
.2350		b5 00		lda $00,x		lda pstack,x
.2352		48		pha			pha
.2353		ca		dex			dex
.2354		ca		dex			dex
.2355		4c f9 12	jmp $12f9		jmp next
.2358						w_rdrop:
>2358		05					.byte $05
>2359		72 64 72 6f 70				.text 'rdrop'
>235e		45 23					.word w_r
.2360						xt_rdrop:
.2360		68		pla			pla
.2361		68		pla			pla
.2362						w_x21:
>2362		01					.byte $01
>2363		21					.text '!'
>2364		58 23					.word w_rdrop
.2366						xt_x21:
.2366		b5 02		lda $02,x		lda pstack+2,x
.2368		85 32		sta $32			sta tmp
.236a		b5 03		lda $03,x		lda pstack+3,x
.236c		85 33		sta $33			sta tmp+1
.236e		a0 01		ldy #$01		ldy #1
.2370		b5 04		lda $04,x		lda pstack+4,x
.2372		92 32		sta ($32)		sta (tmp)
.2374		b5 05		lda $05,x		lda pstack+5,x
.2376		91 32		sta ($32),y		sta (tmp),y
.2378		e8		inx			inx
.2379		e8		inx			inx
.237a		e8		inx			inx
.237b		e8		inx			inx
.237c		4c f9 12	jmp $12f9		jmp next
.237f						w_x40:
>237f		01					.byte $01
>2380		40					.text '@'
>2381		62 23					.word w_x21
.2383						xt_x40:
.2383		b5 02		lda $02,x		lda pstack+2,x
.2385		85 32		sta $32			sta tmp
.2387		b5 03		lda $03,x		lda pstack+3,x
.2389		85 33		sta $33			sta tmp+1
.238b		a0 01		ldy #$01		ldy #1
.238d		b2 32		lda ($32)		lda (tmp)
.238f		95 02		sta $02,x		sta pstack+2,x
.2391		b1 32		lda ($32),y		lda (tmp),y
.2393		95 03		sta $03,x		sta pstack+3,x
.2395		4c f9 12	jmp $12f9		jmp next
.2398						w_cx21:
>2398		02					.byte $02
>2399		63 21					.text 'c!'
>239b		7f 23					.word w_x40
.239d						xt_cx21:
.239d		b5 04		lda $04,x		lda pstack+4,x
.239f		81 02		sta ($02,x)		sta (pstack+2,x)
.23a1		e8		inx			inx
.23a2		e8		inx			inx
.23a3		e8		inx			inx
.23a4		e8		inx			inx
.23a5		4c f9 12	jmp $12f9		jmp next
.23a8						w_cx40:
>23a8		02					.byte $02
>23a9		63 40					.text 'c@'
>23ab		98 23					.word w_cx21
.23ad						xt_cx40:
.23ad		a1 02		lda ($02,x)		lda (pstack+2,x)
.23af		95 02		sta $02,x		sta pstack+2,x
.23b1		74 03		stz $03,x		stz pstack+3,x
.23b3		4c f9 12	jmp $12f9		jmp next
.23b6						w_fill:
>23b6		04					.byte $04
>23b7		66 69 6c 6c				.text 'fill'
>23bb		a8 23					.word w_cx40
.23bd						xt_fill:
.23bd							loop:
.23bd		b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.23bf		d0 04		bne $23c5		bne do_write
.23c1		b5 04		lda $04,x		lda pstack+4,x
.23c3		f0 19		beq $23de		beq done                ; Yes: we're done...
.23c5							do_write:
.23c5		b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.23c7		81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.23c9		f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.23cb		d0 02		bne $23cf		bne deccount
.23cd		f6 06		inc $06,x		inc pstack+6,x
.23cf							deccount:
.23cf		38		sec			sec                     ; Decrement the count
.23d0		b5 03		lda $03,x		lda pstack+3,x
.23d2		e9 01		sbc #$01		sbc #1
.23d4		95 03		sta $03,x		sta pstack+3,x
.23d6		b5 04		lda $04,x		lda pstack+4,x
.23d8		e9 00		sbc #$00		sbc #0
.23da		95 04		sta $04,x		sta pstack+4,x
.23dc		80 df		bra $23bd		bra loop                ; And check again
.23de							done:
.23de		8a		txa			txa                     ; Clean up the parameter stack
.23df		69 06		adc #$06		adc #6
.23e1		aa		tax			tax
.23e2		4c f9 12	jmp $12f9		jmp next
.23e5						w_x2bx21:
>23e5		02					.byte $02
>23e6		2b 21					.text '+!'
>23e8		b6 23					.word w_fill
.23ea						xt_x2bx21:
.23ea		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the low byte
.23ec		1a		inc a			inc a
.23ed		81 02		sta ($02,x)		sta (pstack+2,x)
.23ef		d0 11		bne $2402		bne done                ; If it does not roll over, we're done
.23f1		b5 02		lda $02,x		lda pstack+2,x          ; Increment the pointer
.23f3		1a		inc a			inc a
.23f4		95 02		sta $02,x		sta pstack+2,x
.23f6		d0 05		bne $23fd		bne inc2
.23f8		b5 03		lda $03,x		lda pstack+3,x
.23fa		1a		inc a			inc a
.23fb		95 03		sta $03,x		sta pstack+3,x
.23fd							inc2:
.23fd		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the high byte
.23ff		1a		inc a			inc a
.2400		81 02		sta ($02,x)		sta (pstack+2,x)
.2402							done:
.2402		e8		inx			inx                     ; Clean up the stack
.2403		e8		inx			inx
.2404		4c f9 12	jmp $12f9		jmp next
.2407						w_move:
>2407		04					.byte $04
>2408		6d 6f 76 65				.text 'move'
>240c		e5 23					.word w_x2bx21
.240e						xt_move:
.240e		38		sec			sec                     ; Compare addr1 and addr2
.240f		b5 06		lda $06,x		lda pstack+6,x
.2411		f5 04		sbc $04,x		sbc pstack+4,x
.2413		85 32		sta $32			sta tmp
.2415		b5 07		lda $07,x		lda pstack+7,x
.2417		f5 05		sbc $05,x		sbc pstack+5,x
.2419		85 33		sta $33			sta tmp+1
.241b		30 24		bmi $2441		bmi a1less
.241d		f0 72		beq $2491		beq chklo
.241f							a1greater:
.241f		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2421		d0 50		bne $2473		bne docopy1
.2423		b5 03		lda $03,x		lda pstack+3,x
.2425		f0 72		beq $2499		beq done                ; Yes: we're done;
.2427		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2429		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.242b		f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.242d		d0 02		bne $2431		bne inc2
.242f		f6 07		inc $07,x		inc pstack+7,x
.2431							inc2:
.2431		f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.2433		d0 02		bne $2437		bne dec_count
.2435		f6 03		inc $03,x		inc pstack+3,x
.2437							dec_count:
.2437		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2439		d0 02		bne $243d		bne l1
.243b		d6 03		dec $03,x		dec pstack+3,x
.243d							l1:
.243d		d6 02		dec $02,x		dec pstack+2,x
.243f		80 de		bra $241f		bra a1greater
.2441							a1less:
.2441		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2443		d0 02		bne $2447		bne l2
.2445		d6 05		dec $05,x		dec pstack+5,x
.2447							l2:
.2447		d6 04		dec $04,x		dec pstack+4,x
.2449		18		clc			clc                     ; addr2 := addr2 + u
.244a		b5 04		lda $04,x		lda pstack+4,x
.244c		75 02		adc $02,x		adc pstack+2,x
.244e		95 04		sta $04,x		sta pstack+4,x
.2450		b5 05		lda $05,x		lda pstack+5,x
.2452		75 03		adc $03,x		adc pstack+3,x
.2454		95 05		sta $05,x		sta pstack+5,x
.2456		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2458		d0 02		bne $245c		bne l3
.245a		d6 07		dec $07,x		dec pstack+7,x
.245c							l3:
.245c		d6 06		dec $06,x		dec pstack+6,x
.245e		18		clc			clc                     ; addr1 := addr1 + u
.245f		b5 06		lda $06,x		lda pstack+6,x
.2461		75 02		adc $02,x		adc pstack+2,x
.2463		95 06		sta $06,x		sta pstack+6,x
.2465		b5 07		lda $07,x		lda pstack+7,x
.2467		75 03		adc $03,x		adc pstack+3,x
.2469		95 07		sta $07,x		sta pstack+7,x
.246b							loop2:
.246b		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.246d		d0 04		bne $2473		bne docopy1
.246f		b5 03		lda $03,x		lda pstack+3,x
.2471		f0 26		beq $2499		beq done                ; Yes: we're done;
.2473							docopy1:
.2473		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2475		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2477		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2479		d0 02		bne $247d		bne l4
.247b		d6 07		dec $07,x		dec pstack+7,x
.247d							l4:
.247d		d6 06		dec $06,x		dec pstack+6,x
.247f		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2481		d0 02		bne $2485		bne l5
.2483		d6 05		dec $05,x		dec pstack+5,x
.2485							l5:
.2485		d6 04		dec $04,x		dec pstack+4,x
.2487		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2489		d0 02		bne $248d		bne l6
.248b		d6 03		dec $03,x		dec pstack+3,x
.248d							l6:
.248d		d6 02		dec $02,x		dec pstack+2,x
.248f		80 da		bra $246b		bra loop2
.2491							chklo:
.2491		a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2493		30 ac		bmi $2441		bmi a1less
.2495		f0 02		beq $2499		beq done                ; If equal, we don't need to move the data
.2497		80 86		bra $241f		bra a1greater
.2499							done:
.2499		8a		txa			txa
.249a		18		clc			clc
.249b		69 06		adc #$06		adc #6
.249d		aa		tax			tax
.249e		60		rts			rts
.249f						w_x2b:
>249f		01					.byte $01
>24a0		2b					.text '+'
>24a1		07 24					.word w_move
.24a3						xt_x2b:
.24a3		18		clc			clc
.24a4		b5 04		lda $04,x		lda pstack+4,x
.24a6		75 02		adc $02,x		adc pstack+2,x
.24a8		95 04		sta $04,x		sta pstack+4,x
.24aa		b5 05		lda $05,x		lda pstack+5,x
.24ac		75 03		adc $03,x		adc pstack+3,x
.24ae		95 05		sta $05,x		sta pstack+5,x
.24b0		e8		inx			inx
.24b1		e8		inx			inx
.24b2		4c f9 12	jmp $12f9		jmp next
.24b5						w_x2d:
>24b5		01					.byte $01
>24b6		2d					.text '-'
>24b7		9f 24					.word w_x2b
.24b9						xt_x2d:
.24b9		38		sec			sec
.24ba		b5 04		lda $04,x		lda pstack+4,x
.24bc		f5 02		sbc $02,x		sbc pstack+2,x
.24be		95 04		sta $04,x		sta pstack+4,x
.24c0		b5 05		lda $05,x		lda pstack+5,x
.24c2		f5 03		sbc $03,x		sbc pstack+3,x
.24c4		95 05		sta $05,x		sta pstack+5,x
.24c6		e8		inx			inx
.24c7		e8		inx			inx
.24c8		4c f9 12	jmp $12f9		jmp next
.24cb						w_x2a:
>24cb		01					.byte $01
>24cc		2a					.text '*'
>24cd		b5 24					.word w_x2d
.24cf						xt_x2a:
.24cf		a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.24d1		85 34		sta $34			sta tmp+2
.24d3		a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.24d5							l1:
.24d5		56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.24d7		76 02		ror $02,x		ror pstack+2,x
.24d9		90 0b		bcc $24e6		bcc l2          ; 0 or 1?
.24db		a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.24dc		18		clc			clc
.24dd		b5 04		lda $04,x		lda pstack+4,x
.24df		65 34		adc $34			adc tmp+2
.24e1		85 34		sta $34			sta tmp+2
.24e3		98		tya			tya
.24e4		75 05		adc $05,x		adc pstack+5,x
.24e6							l2:
.24e6		6a		ror a			ror A
.24e7		66 34		ror $34			ror tmp+2
.24e9		66 33		ror $33			ror tmp+1
.24eb		66 32		ror $32			ror tmp
.24ed		3a		dec a			dec a
.24ee		d0 e5		bne $24d5		bne l1
.24f0		85 35		sta $35			sta tmp+3
.24f2		a5 32		lda $32			lda tmp         ; Save result to parameter stack
.24f4		95 04		sta $04,x		sta pstack+4,x
.24f6		a5 33		lda $33			lda tmp+1
.24f8		95 05		sta $05,x		sta pstack+5,x
.24fa		e8		inx			inx             ; Clean up parameter stack
.24fb		e8		inx			inx
.24fc		4c f9 12	jmp $12f9		jmp next
.24ff						w_1x2b:
>24ff		02					.byte $02
>2500		31 2b					.text '1+'
>2502		cb 24					.word w_x2a
.2504						xt_1x2b:
.2504		f6 02		inc $02,x		inc pstack+2,x
.2506		d0 02		bne $250a		bne skip
.2508		f6 03		inc $03,x		inc pstack+3,x
.250a							skip:
.250a		4c f9 12	jmp $12f9		jmp next
.250d						w_2x2b:
>250d		02					.byte $02
>250e		32 2b					.text '2+'
>2510		ff 24					.word w_1x2b
.2512						xt_2x2b:
.2512		18		clc			clc
.2513		b5 02		lda $02,x		lda pstack+2,x
.2515		69 02		adc #$02		adc #2
.2517		95 02		sta $02,x		sta pstack+2,x
.2519		b5 03		lda $03,x		lda pstack+3,x
.251b		69 00		adc #$00		adc #0
.251d		95 03		sta $03,x		sta pstack+3,x
.251f		4c f9 12	jmp $12f9		jmp next
.2522						w_1x2d:
>2522		02					.byte $02
>2523		31 2d					.text '1-'
>2525		0d 25					.word w_2x2b
.2527						xt_1x2d:
.2527		b5 02		lda $02,x		lda pstack+2,x
.2529		d0 02		bne $252d		bne l1
.252b		d6 03		dec $03,x		dec pstack+3,x
.252d							l1:
.252d		d6 02		dec $02,x		dec pstack+2,x
.252f		4c f9 12	jmp $12f9		jmp next
.2532						w_2x2d:
>2532		02					.byte $02
>2533		32 2d					.text '2-'
>2535		22 25					.word w_1x2d
.2537						xt_2x2d:
.2537		38		sec			sec
.2538		b5 02		lda $02,x		lda pstack+2,x
.253a		e9 02		sbc #$02		sbc #2
.253c		95 02		sta $02,x		sta pstack+2,x
.253e		b5 03		lda $03,x		lda pstack+3,x
.2540		e9 00		sbc #$00		sbc #0
.2542		95 03		sta $03,x		sta pstack+3,x
.2544		4c f9 12	jmp $12f9		jmp next
.2547						w_and:
>2547		03					.byte $03
>2548		61 6e 64				.text 'and'
>254b		32 25					.word w_2x2d
.254d						xt_and:
.254d		b5 02		lda $02,x		lda pstack+2,x
.254f		35 04		and $04,x		and pstack+4,x
.2551		95 04		sta $04,x		sta pstack+4,x
.2553		b5 03		lda $03,x		lda pstack+3,x
.2555		35 05		and $05,x		and pstack+5,x
.2557		95 05		sta $05,x		sta pstack+5,x
.2559		e8		inx			inx
.255a		e8		inx			inx
.255b		4c f9 12	jmp $12f9		jmp next
.255e						w_or:
>255e		02					.byte $02
>255f		6f 72					.text 'or'
>2561		47 25					.word w_and
.2563						xt_or:
.2563		b5 02		lda $02,x		lda pstack+2,x
.2565		15 04		ora $04,x		ora pstack+4,x
.2567		95 04		sta $04,x		sta pstack+4,x
.2569		b5 03		lda $03,x		lda pstack+3,x
.256b		15 05		ora $05,x		ora pstack+5,x
.256d		95 05		sta $05,x		sta pstack+5,x
.256f		e8		inx			inx
.2570		e8		inx			inx
.2571		4c f9 12	jmp $12f9		jmp next
.2574						w_xor:
>2574		03					.byte $03
>2575		78 6f 72				.text 'xor'
>2578		5e 25					.word w_or
.257a						xt_xor:
.257a		b5 02		lda $02,x		lda pstack+2,x
.257c		55 04		eor $04,x		eor pstack+4,x
.257e		95 04		sta $04,x		sta pstack+4,x
.2580		b5 03		lda $03,x		lda pstack+3,x
.2582		55 05		eor $05,x		eor pstack+5,x
.2584		95 05		sta $05,x		sta pstack+5,x
.2586		e8		inx			inx
.2587		e8		inx			inx
.2588		4c f9 12	jmp $12f9		jmp next
.258b						w_not:
>258b		03					.byte $03
>258c		6e 6f 74				.text 'not'
>258f		74 25					.word w_xor
.2591						xt_not:
.2591		b5 02		lda $02,x		lda pstack+2,x
.2593		49 ff		eor #$ff		eor #$ff
.2595		95 02		sta $02,x		sta pstack+2,x
.2597		b5 03		lda $03,x		lda pstack+3,x
.2599		49 ff		eor #$ff		eor #$ff
.259b		95 03		sta $03,x		sta pstack+3,x
.259d		4c f9 12	jmp $12f9		jmp next
.25a0						w_0x3c:
>25a0		02					.byte $02
>25a1		30 3c					.text '0<'
>25a3		8b 25					.word w_not
.25a5						xt_0x3c:
.25a5		b5 03		lda $03,x		lda pstack+3,x
.25a7		30 07		bmi $25b0		bmi istrue
.25a9		74 02		stz $02,x		stz pstack+2,x
.25ab		74 03		stz $03,x		stz pstack+3,x
.25ad		4c f9 12	jmp $12f9		jmp next
.25b0							istrue:
.25b0		a9 ff		lda #$ff		lda #$ff
.25b2		95 02		sta $02,x		sta pstack+2,x
.25b4		95 03		sta $03,x		sta pstack+3,x
.25b6		4c f9 12	jmp $12f9		jmp next
.25b9						w_0x3d:
>25b9		02					.byte $02
>25ba		30 3d					.text '0='
>25bc		a0 25					.word w_0x3c
.25be						xt_0x3d:
.25be		b5 02		lda $02,x		lda pstack+2,x
.25c0		d0 0d		bne $25cf		bne isfalse
.25c2		b5 03		lda $03,x		lda pstack+3,x
.25c4		d0 09		bne $25cf		bne isfalse
.25c6		a9 ff		lda #$ff		lda #$ff
.25c8		95 02		sta $02,x		sta pstack+2,x
.25ca		95 03		sta $03,x		sta pstack+3,x
.25cc		4c f9 12	jmp $12f9		jmp next
.25cf							isfalse:
.25cf		74 02		stz $02,x		stz pstack+2,x
.25d1		74 03		stz $03,x		stz pstack+3,x
.25d3		4c f9 12	jmp $12f9		jmp next
.25d6						w_0x3e:
>25d6		02					.byte $02
>25d7		30 3e					.text '0>'
>25d9		b9 25					.word w_0x3d
.25db						xt_0x3e:
.25db		b5 03		lda $03,x		lda pstack+3,x
.25dd		30 0f		bmi $25ee		bmi isfalse
.25df		d0 04		bne $25e5		bne istrue
.25e1		b5 02		lda $02,x		lda pstack+2,x
.25e3		f0 09		beq $25ee		beq isfalse
.25e5							istrue:
.25e5		a9 ff		lda #$ff		lda #$ff
.25e7		95 02		sta $02,x		sta pstack+2,x
.25e9		95 03		sta $03,x		sta pstack+3,x
.25eb		4c f9 12	jmp $12f9		jmp next
.25ee							isfalse:
.25ee		74 02		stz $02,x		stz pstack+2,x
.25f0		74 03		stz $03,x		stz pstack+3,x
.25f2		4c f9 12	jmp $12f9		jmp next
.25f5						w_x28variablex29:
>25f5		0a					.byte $0A
>25f6		28 76 61 72 69 61 62 6c			.text '(variable)'
>25fe		65 29
>2600		d6 25					.word w_0x3e
.2602						xt_x28variablex29:
.2602		18		clc			clc                     ; push(wp + 3)
.2603		a5 2a		lda $2a			lda wp
.2605		69 03		adc #$03		adc #3
.2607		95 00		sta $00,x		sta pstack,x
.2609		a5 2b		lda $2b			lda wp+1
.260b		69 00		adc #$00		adc #0
.260d		95 01		sta $01,x		sta pstack+1,x
.260f		ca		dex			dex
.2610		ca		dex			dex
.2611		4c f9 12	jmp $12f9		jmp next
.2614						w_x28constantx29:
>2614		0a					.byte $0A
>2615		28 63 6f 6e 73 74 61 6e			.text '(constant)'
>261d		74 29
>261f		f5 25					.word w_x28variablex29
.2621						xt_x28constantx29:
.2621		a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2623		b1 2a		lda ($2a),y		lda (wp),y
.2625		95 00		sta $00,x		sta pstack,x
.2627		c8		iny			iny
.2628		b1 2a		lda ($2a),y		lda (wp),y
.262a		95 01		sta $01,x		sta pstack+1,x
.262c		ca		dex			dex
.262d		ca		dex			dex
.262e		4c f9 12	jmp $12f9		jmp next
.2631						w_cells:
>2631		05					.byte $05
>2632		63 65 6c 6c 73				.text 'cells'
>2637							.fill 11
>2642		14 26					.word w_x28constantx29
.2644						xt_cells:
.2644		4c 21 26	jmp $2621		jmp xt_x28constantx29
>2647		02 00					.word 2
.2649						w_bl:
>2649		02					.byte $02
>264a		62 6c					.text 'bl'
>264c							.fill 14
>265a		31 26					.word w_cells
.265c						xt_bl:
.265c		4c 21 26	jmp $2621		jmp xt_x28constantx29
>265f		20 00					.word 32
.2661						w_x28userx29:
>2661		06					.byte $06
>2662		28 75 73 65 72 29			.text '(user)'
>2668		49 26					.word w_bl
.266a						xt_x28userx29:
.266a		18		clc			clc                     ; push(up + memory(wp + 3))
.266b		a0 03		ldy #$03		ldy #3
.266d		a5 2c		lda $2c			lda up
.266f		71 2a		adc ($2a),y		adc (wp),y
.2671		95 00		sta $00,x		sta pstack,x
.2673		c8		iny			iny
.2674		a5 2d		lda $2d			lda up+1
.2676		71 2a		adc ($2a),y		adc (wp),y
.2678		95 01		sta $01,x		sta pstack+1,x
.267a		ca		dex			dex
.267b		ca		dex			dex
.267c		4c f9 12	jmp $12f9		jmp next
.267f						w_s0:
>267f		02					.byte $02
>2680		73 30					.text 's0'
>2682							.fill 14
>2690		61 26					.word w_x28userx29
.2692						xt_s0:
.2692		4c 6a 26	jmp $266a		jmp xt_x28userx29
>2695		00 00					.word 0
.2697						w_r0:
>2697		02					.byte $02
>2698		72 30					.text 'r0'
>269a							.fill 14
>26a8		7f 26					.word w_s0
.26aa						xt_r0:
.26aa		4c 6a 26	jmp $266a		jmp xt_x28userx29
>26ad		01 00					.word 1
.26af						w_base:
>26af		04					.byte $04
>26b0		62 61 73 65				.text 'base'
>26b4							.fill 12
>26c0		97 26					.word w_r0
.26c2						xt_base:
.26c2		4c 6a 26	jmp $266a		jmp xt_x28userx29
>26c5		02 00					.word 2
.26c7						w_state:
>26c7		05					.byte $05
>26c8		73 74 61 74 65				.text 'state'
>26cd							.fill 11
>26d8		af 26					.word w_base
.26da						xt_state:
.26da		4c 6a 26	jmp $266a		jmp xt_x28userx29
>26dd		03 00					.word 3
.26df						w_context:
>26df		07					.byte $07
>26e0		63 6f 6e 74 65 78 74			.text 'context'
>26e7							.fill 9
>26f0		c7 26					.word w_state
.26f2						xt_context:
.26f2		4c 6a 26	jmp $266a		jmp xt_x28userx29
>26f5		04 00					.word 4
.26f7						w_current:
>26f7		07					.byte $07
>26f8		63 75 72 72 65 6e 74			.text 'current'
>26ff							.fill 9
>2708		df 26					.word w_context
.270a						xt_current:
.270a		4c 6a 26	jmp $266a		jmp xt_x28userx29
>270d		05 00					.word 5
.270f						w_dp:
>270f		02					.byte $02
>2710		64 70					.text 'dp'
>2712							.fill 14
>2720		f7 26					.word w_current
.2722						xt_dp:
.2722		4c 6a 26	jmp $266a		jmp xt_x28userx29
>2725		06 00					.word 6
.2727						w_x28branchx29:
>2727		08					.byte $08
>2728		28 62 72 61 6e 63 68 29			.text '(branch)'
>2730		0f 27					.word w_dp
.2732						xt_x28branchx29:
.2732		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2734		b2 28		lda ($28)		lda (ip)
.2736		85 32		sta $32			sta tmp
.2738		b1 28		lda ($28),y		lda (ip),y
.273a		85 29		sta $29			sta ip+1
.273c		a5 32		lda $32			lda tmp
.273e		85 28		sta $28			sta ip
.2740		4c f9 12	jmp $12f9		jmp next
.2743						w_x28branch0x29:
>2743		09					.byte $09
>2744		28 62 72 61 6e 63 68 30			.text '(branch0)'
>274c		29
>274d		27 27					.word w_x28branchx29
.274f						xt_x28branch0x29:
.274f		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2751		d0 04		bne $2757		bne nobranch        ; No: skip over the branch address
.2753		b5 03		lda $03,x		lda pstack+3,x
.2755		f0 0f		beq $2766		beq dobranch        ; Yes: take the branch
.2757							nobranch:
.2757		18		clc			clc                 ; No: skip over the branch address
.2758		a5 28		lda $28			lda ip
.275a		69 02		adc #$02		adc #2
.275c		85 28		sta $28			sta ip
.275e		a5 29		lda $29			lda ip+1
.2760		69 00		adc #$00		adc #0
.2762		85 29		sta $29			sta ip+1
.2764		80 0e		bra $2774		bra done
.2766							dobranch:
.2766		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2768		b2 28		lda ($28)		lda (ip)
.276a		85 32		sta $32			sta tmp
.276c		b1 28		lda ($28),y		lda (ip),y
.276e		85 29		sta $29			sta ip+1
.2770		a5 32		lda $32			lda tmp
.2772		85 28		sta $28			sta ip
.2774							done:
.2774		e8		inx			inx                 ; clean up the parameter stack
.2775		e8		inx			inx
.2776		4c f9 12	jmp $12f9		jmp next
.2779						w_x28dox29:
>2779		04					.byte $04
>277a		28 64 6f 29				.text '(do)'
>277e		43 27					.word w_x28branch0x29
.2780						xt_x28dox29:
.2780		b5 03		lda $03,x		lda pstack+3,x
.2782		48		pha			pha
.2783		b5 02		lda $02,x		lda pstack+2,x
.2785		48		pha			pha
.2786		b5 05		lda $05,x		lda pstack+5,x
.2788		48		pha			pha
.2789		b5 04		lda $04,x		lda pstack+4,x
.278b		48		pha			pha
.278c		18		clc			clc
.278d		8a		txa			txa
.278e		69 04		adc #$04		adc #4
.2790		aa		tax			tax
.2791		4c f9 12	jmp $12f9		jmp next
.2794						w_x28loopx29:
>2794		06					.byte $06
>2795		28 6c 6f 6f 70 29			.text '(loop)'
>279b		79 27					.word w_x28dox29
.279d						xt_x28loopx29:
>0101							limit       .word ?
>0103							current     .word ?
.279d		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.279f		ba		tsx			tsx
.27a0		fe 03 01	inc $0103,x		inc current         ; Increment current
.27a3		d0 03		bne $27a8		bne chk_current
.27a5		fe 04 01	inc $0104,x		inc current+1
.27a8							chk_current:
.27a8		bd 03 01	lda $0103,x		lda current         ; current == limit?
.27ab		dd 01 01	cmp $0101,x		cmp limit
.27ae		d0 1d		bne $27cd		bne dobranch
.27b0		bd 04 01	lda $0104,x		lda current+1
.27b3		dd 02 01	cmp $0102,x		cmp limit+1
.27b6		d0 15		bne $27cd		bne dobranch
.27b8							nobranch:
.27b8		8a		txa			txa                 ; Yes: Remove the context from the return stack
.27b9		18		clc			clc
.27ba		69 04		adc #$04		adc #4
.27bc		aa		tax			tax
.27bd		9a		txs			txs
.27be		18		clc			clc                 ; And skip over the branch address
.27bf		a5 28		lda $28			lda ip
.27c1		69 02		adc #$02		adc #2
.27c3		85 28		sta $28			sta ip
.27c5		a5 29		lda $29			lda ip+1
.27c7		69 00		adc #$00		adc #0
.27c9		85 29		sta $29			sta ip+1
.27cb		80 0e		bra $27db		bra done
.27cd							dobranch:
.27cd		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.27cf		b2 28		lda ($28)		lda (ip)
.27d1		85 32		sta $32			sta tmp
.27d3		b1 28		lda ($28),y		lda (ip),y
.27d5		85 29		sta $29			sta ip+1
.27d7		a5 32		lda $32			lda tmp
.27d9		85 28		sta $28			sta ip
.27db							done:
.27db		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.27dd		4c f9 12	jmp $12f9		jmp next
.27e0						w_x28x2bloopx29:
>27e0		07					.byte $07
>27e1		28 2b 6c 6f 6f 70 29			.text '(+loop)'
>27e8		94 27					.word w_x28loopx29
.27ea						xt_x28x2bloopx29:
>0101							limit       .word ?
>0103							current     .word ?
.27ea		b5 03		lda $03,x		lda pstack+3,x
.27ec		85 33		sta $33			sta tmp+1
.27ee		b5 02		lda $02,x		lda pstack+2,x
.27f0		85 32		sta $32			sta tmp
.27f2		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.27f4		ba		tsx			tsx
.27f5		18		clc			clc                 ; Increment current by n
.27f6		bd 03 01	lda $0103,x		lda current
.27f9		65 32		adc $32			adc tmp
.27fb		9d 03 01	sta $0103,x		sta current
.27fe		bd 04 01	lda $0104,x		lda current+1
.2801		65 33		adc $33			adc tmp+1
.2803		9d 04 01	sta $0104,x		sta current+1
.2806		e6 34		inc $34			inc savex           ; Remove n from the stack
.2808		e6 34		inc $34			inc savex
.280a							chk_current:
.280a		bd 04 01	lda $0104,x		lda current+1       ; Is current < limit
.280d		dd 02 01	cmp $0102,x		cmp limit+1
.2810		d0 06		bne $2818		bne chk_ne
.2812		bd 03 01	lda $0103,x		lda current
.2815		dd 01 01	cmp $0101,x		cmp limit
.2818							chk_ne:
.2818		90 15		bcc $282f		bcc dobranch        ; Yes: take the branch
.281a							nobranch:
.281a		8a		txa			txa                 ; Yes: Remove the context from the return stack
.281b		18		clc			clc
.281c		69 04		adc #$04		adc #4
.281e		aa		tax			tax
.281f		9a		txs			txs
.2820		18		clc			clc                 ; And skip over the branch address
.2821		a5 28		lda $28			lda ip
.2823		69 02		adc #$02		adc #2
.2825		85 28		sta $28			sta ip
.2827		a5 29		lda $29			lda ip+1
.2829		69 00		adc #$00		adc #0
.282b		85 29		sta $29			sta ip+1
.282d		80 0e		bra $283d		bra done
.282f							dobranch:
.282f		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2831		b2 28		lda ($28)		lda (ip)
.2833		85 32		sta $32			sta tmp
.2835		b1 28		lda ($28),y		lda (ip),y
.2837		85 29		sta $29			sta ip+1
.2839		a5 32		lda $32			lda tmp
.283b		85 28		sta $28			sta ip
.283d							done:
.283d		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.283f		4c f9 12	jmp $12f9		jmp next
.2842						w_i:
>2842		01					.byte $01
>2843		69					.text 'i'
>2844		e0 27					.word w_x28x2bloopx29
.2846						xt_i:
>0101							limit       .word ?
>0103							current     .word ?
.2846		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2848		ba		tsx			tsx
.2849		bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.284c		bd 03 01	lda $0103,x		lda current
.284f		a6 34		ldx $34			ldx savex           ; Restore the PSP
.2851		94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2853		95 00		sta $00,x		sta pstack,x
.2855		ca		dex			dex
.2856		ca		dex			dex
.2857		4c f9 12	jmp $12f9		jmp next
.285a						w_execute:
>285a		07					.byte $07
>285b		65 78 65 63 75 74 65			.text 'execute'
>2862		42 28					.word w_i
.2864						xt_execute:
.2864		b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2866		85 2a		sta $2a			sta wp
.2868		b5 03		lda $03,x		lda pstack+3,x
.286a		85 2b		sta $2b			sta wp+1
.286c		e8		inx			inx                 ; Clean up stack
.286d		e8		inx			inx
.286e		6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2871						w_x28vocabularyx29:
>2871		0c					.byte $0C
>2872		28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>287a		61 72 79 29
>287e		5a 28					.word w_execute
.2880						xt_x28vocabularyx29:
.2880		18		clc			clc                 ; tmp := up + user_context
.2881		a5 2c		lda $2c			lda up
.2883		69 08		adc #$08		adc #user_context
.2885		85 32		sta $32			sta tmp
.2887		a5 2d		lda $2d			lda up+1
.2889		69 00		adc #$00		adc #0
.288b		85 33		sta $33			sta tmp+1
.288d		a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.288f		18		clc			clc
.2890		a5 2a		lda $2a			lda wp
.2892		69 03		adc #$03		adc #3
.2894		92 32		sta ($32)		sta (tmp)
.2896		a5 2b		lda $2b			lda wp+1
.2898		69 00		adc #$00		adc #0
.289a		91 32		sta ($32),y		sta (tmp),y
.289c		4c f9 12	jmp $12f9		jmp next
.289f						w_forth:
>289f		05					.byte $05
>28a0		66 6f 72 74 68				.text 'forth'
>28a5		71 28					.word w_x28vocabularyx29
.28a7						xt_forth:
.28a7		4c 80 28	jmp $2880		jmp xt_x28vocabularyx29
>28aa		ba 2b					.word <>w_cold
.28ac						w_x3fdup:
>28ac		04					.byte $04
>28ad		3f 64 75 70				.text '?dup'
>28b1							.fill 12
>28bd		9f 28					.word w_forth
.28bf						xt_x3fdup:
.28bf		4c e6 12	jmp $12e6		jmp i_enter
>28c2		ea 22					.word xt_dup
>28c4		4f 27					.word xt_x28branch0x29
>28c6		ca 28					.word l_128
>28c8		ea 22					.word xt_dup
.28ca						l_128:
>28ca		de 12					.word i_exit
.28cc						w_x3c:
>28cc		01					.byte $01
>28cd		3c					.text '<'
>28ce							.fill 15
>28dd		ac 28					.word w_x3fdup
.28df						xt_x3c:
.28df		4c e6 12	jmp $12e6		jmp i_enter
>28e2		b9 24					.word xt_x2d
>28e4		a5 25					.word xt_0x3c
>28e6		de 12					.word i_exit
.28e8						w_x3e:
>28e8		01					.byte $01
>28e9		3e					.text '>'
>28ea							.fill 15
>28f9		cc 28					.word w_x3c
.28fb						xt_x3e:
.28fb		4c e6 12	jmp $12e6		jmp i_enter
>28fe		b9 24					.word xt_x2d
>2900		db 25					.word xt_0x3e
>2902		de 12					.word i_exit
.2904						w_x3d:
>2904		01					.byte $01
>2905		3d					.text '='
>2906							.fill 15
>2915		e8 28					.word w_x3e
.2917						xt_x3d:
.2917		4c e6 12	jmp $12e6		jmp i_enter
>291a		b9 24					.word xt_x2d
>291c		be 25					.word xt_0x3d
>291e		de 12					.word i_exit
.2920						w_abs:
>2920		03					.byte $03
>2921		61 62 73				.text 'abs'
>2924							.fill 13
>2931		04 29					.word w_x3d
.2933						xt_abs:
.2933		4c e6 12	jmp $12e6		jmp i_enter
>2936		ea 22					.word xt_dup
>2938		a5 25					.word xt_0x3c
>293a		4f 27					.word xt_x28branch0x29
>293c		44 29					.word l_159
>293e		d3 13					.word xt_0
>2940		fe 22					.word xt_swap
>2942		b9 24					.word xt_x2d
.2944						l_159:
>2944		de 12					.word i_exit
.2946						w_max:
>2946		03					.byte $03
>2947		6d 61 78				.text 'max'
>294a							.fill 13
>2957		20 29					.word w_abs
.2959						xt_max:
.2959		4c e6 12	jmp $12e6		jmp i_enter
>295c		18 23					.word xt_over
>295e		18 23					.word xt_over
>2960		df 28					.word xt_x3c
>2962		4f 27					.word xt_x28branch0x29
>2964		6e 29					.word l_160
>2966		18 23					.word xt_over
>2968		df 22					.word xt_drop
>296a		32 27					.word xt_x28branchx29
>296c		70 29					.word l_161
.296e						l_160:
>296e		df 22					.word xt_drop
.2970						l_161:
>2970		de 12					.word i_exit
.2972						w_min:
>2972		03					.byte $03
>2973		6d 69 6e				.text 'min'
>2976							.fill 13
>2983		46 29					.word w_max
.2985						xt_min:
.2985		4c e6 12	jmp $12e6		jmp i_enter
>2988		18 23					.word xt_over
>298a		18 23					.word xt_over
>298c		fb 28					.word xt_x3e
>298e		4f 27					.word xt_x28branch0x29
>2990		9a 29					.word l_168
>2992		18 23					.word xt_over
>2994		df 22					.word xt_drop
>2996		32 27					.word xt_x28branchx29
>2998		9c 29					.word l_169
.299a						l_168:
>299a		df 22					.word xt_drop
.299c						l_169:
>299c		de 12					.word i_exit
.299e						w_rot:
>299e		03					.byte $03
>299f		72 6f 74				.text 'rot'
>29a2							.fill 13
>29af		72 29					.word w_min
.29b1						xt_rot:
.29b1		4c e6 12	jmp $12e6		jmp i_enter
>29b4		2a 23					.word xt_x3er
>29b6		fe 22					.word xt_swap
>29b8		3a 23					.word xt_rx3e
>29ba		fe 22					.word xt_swap
>29bc		de 12					.word i_exit
.29be						w_2dup:
>29be		04					.byte $04
>29bf		32 64 75 70				.text '2dup'
>29c3							.fill 12
>29cf		9e 29					.word w_rot
.29d1						xt_2dup:
.29d1		4c e6 12	jmp $12e6		jmp i_enter
>29d4		18 23					.word xt_over
>29d6		18 23					.word xt_over
>29d8		de 12					.word i_exit
.29da						w_2drop:
>29da		05					.byte $05
>29db		32 64 72 6f 70				.text '2drop'
>29e0							.fill 11
>29eb		be 29					.word w_2dup
.29ed						xt_2drop:
.29ed		4c e6 12	jmp $12e6		jmp i_enter
>29f0		df 22					.word xt_drop
>29f2		df 22					.word xt_drop
>29f4		de 12					.word i_exit
.29f6						w_lfa:
>29f6		03					.byte $03
>29f7		6c 66 61				.text 'lfa'
>29fa							.fill 13
>2a07		da 29					.word w_2drop
.2a09						xt_lfa:
.2a09		4c e6 12	jmp $12e6		jmp i_enter
>2a0c		26 14					.word xt_x28literalx29
>2a0e		05 00					.word 5
>2a10		b9 24					.word xt_x2d
>2a12		de 12					.word i_exit
.2a14						w_cfa:
>2a14		03					.byte $03
>2a15		63 66 61				.text 'cfa'
>2a18							.fill 13
>2a25		f6 29					.word w_lfa
.2a27						xt_cfa:
.2a27		4c e6 12	jmp $12e6		jmp i_enter
>2a2a		26 14					.word xt_x28literalx29
>2a2c		03 00					.word 3
>2a2e		b9 24					.word xt_x2d
>2a30		de 12					.word i_exit
.2a32						w_nfa:
>2a32		03					.byte $03
>2a33		6e 66 61				.text 'nfa'
>2a36							.fill 13
>2a43		14 2a					.word w_cfa
.2a45						xt_nfa:
.2a45		4c e6 12	jmp $12e6		jmp i_enter
>2a48		26 14					.word xt_x28literalx29
>2a4a		16 00					.word 22
>2a4c		b9 24					.word xt_x2d
>2a4e		de 12					.word i_exit
.2a50						w_pfa:
>2a50		03					.byte $03
>2a51		70 66 61				.text 'pfa'
>2a54							.fill 13
>2a61		32 2a					.word w_nfa
.2a63						xt_pfa:
.2a63		4c e6 12	jmp $12e6		jmp i_enter
>2a66		26 14					.word xt_x28literalx29
>2a68		16 00					.word 22
>2a6a		a3 24					.word xt_x2b
>2a6c		de 12					.word i_exit
.2a6e						w_here:
>2a6e		04					.byte $04
>2a6f		68 65 72 65				.text 'here'
>2a73							.fill 12
>2a7f		50 2a					.word w_pfa
.2a81						xt_here:
.2a81		4c e6 12	jmp $12e6		jmp i_enter
>2a84		22 27					.word xt_dp
>2a86		83 23					.word xt_x40
>2a88		de 12					.word i_exit
.2a8a						w_allot:
>2a8a		05					.byte $05
>2a8b		61 6c 6c 6f 74				.text 'allot'
>2a90							.fill 11
>2a9b		6e 2a					.word w_here
.2a9d						xt_allot:
.2a9d		4c e6 12	jmp $12e6		jmp i_enter
>2aa0		22 27					.word xt_dp
>2aa2		ea 23					.word xt_x2bx21
>2aa4		de 12					.word i_exit
.2aa6						w_x2c:
>2aa6		01					.byte $01
>2aa7		2c					.text ','
>2aa8							.fill 15
>2ab7		8a 2a					.word w_allot
.2ab9						xt_x2c:
.2ab9		4c e6 12	jmp $12e6		jmp i_enter
>2abc		81 2a					.word xt_here
>2abe		66 23					.word xt_x21
>2ac0		ef 13					.word xt_2
>2ac2		9d 2a					.word xt_allot
>2ac4		de 12					.word i_exit
.2ac6						w_cx2c:
>2ac6		02					.byte $02
>2ac7		63 2c					.text 'c,'
>2ac9							.fill 14
>2ad7		a6 2a					.word w_x2c
.2ad9						xt_cx2c:
.2ad9		4c e6 12	jmp $12e6		jmp i_enter
>2adc		81 2a					.word xt_here
>2ade		9d 23					.word xt_cx21
>2ae0		e0 13					.word xt_1
>2ae2		9d 2a					.word xt_allot
>2ae4		de 12					.word i_exit
.2ae6						w_definitions:
>2ae6		0b					.byte $0B
>2ae7		64 65 66 69 6e 69 74 69			.text 'definitions'
>2aef		6f 6e 73
>2af2							.fill 5
>2af7		c6 2a					.word w_cx2c
.2af9						xt_definitions:
.2af9		4c e6 12	jmp $12e6		jmp i_enter
>2afc		f2 26					.word xt_context
>2afe		83 23					.word xt_x40
>2b00		0a 27					.word xt_current
>2b02		66 23					.word xt_x21
>2b04		de 12					.word i_exit
.2b06						w_latest:
>2b06		06					.byte $06
>2b07		6c 61 74 65 73 74			.text 'latest'
>2b0d							.fill 10
>2b17		e6 2a					.word w_definitions
.2b19						xt_latest:
.2b19		4c e6 12	jmp $12e6		jmp i_enter
>2b1c		0a 27					.word xt_current
>2b1e		83 23					.word xt_x40
>2b20		83 23					.word xt_x40
>2b22		de 12					.word i_exit
.2b24						w_count:
>2b24		05					.byte $05
>2b25		63 6f 75 6e 74				.text 'count'
>2b2a							.fill 11
>2b35		06 2b					.word w_latest
.2b37						xt_count:
.2b37		4c e6 12	jmp $12e6		jmp i_enter
>2b3a		ea 22					.word xt_dup
>2b3c		04 25					.word xt_1x2b
>2b3e		fe 22					.word xt_swap
>2b40		ad 23					.word xt_cx40
>2b42		de 12					.word i_exit
.2b44						w_type:
>2b44		04					.byte $04
>2b45		74 79 70 65				.text 'type'
>2b49							.fill 12
>2b55		24 2b					.word w_count
.2b57						xt_type:
.2b57		4c e6 12	jmp $12e6		jmp i_enter
>2b5a		bf 28					.word xt_x3fdup
>2b5c		4f 27					.word xt_x28branch0x29
>2b5e		76 2b					.word l_182
>2b60		18 23					.word xt_over
>2b62		a3 24					.word xt_x2b
>2b64		fe 22					.word xt_swap
>2b66		80 27					.word xt_x28dox29
.2b68						l_183:
>2b68		46 28					.word xt_i
>2b6a		ad 23					.word xt_cx40
>2b6c		b4 13					.word xt_emit
>2b6e		9d 27					.word xt_x28loopx29
>2b70		68 2b					.word l_183
.2b72						l_184:
>2b72		32 27					.word xt_x28branchx29
>2b74		78 2b					.word l_185
.2b76						l_182:
>2b76		df 22					.word xt_drop
.2b78						l_185:
>2b78		de 12					.word i_exit
.2b7a						w_space:
>2b7a		05					.byte $05
>2b7b		73 70 61 63 65				.text 'space'
>2b80							.fill 11
>2b8b		44 2b					.word w_type
.2b8d						xt_space:
.2b8d		4c e6 12	jmp $12e6		jmp i_enter
>2b90		26 14					.word xt_x28literalx29
>2b92		20 00					.word 32
>2b94		b4 13					.word xt_emit
>2b96		de 12					.word i_exit
.2b98						w_spaces:
>2b98		06					.byte $06
>2b99		73 70 61 63 65 73			.text 'spaces'
>2b9f							.fill 10
>2ba9		7a 2b					.word w_space
.2bab						xt_spaces:
.2bab		4c e6 12	jmp $12e6		jmp i_enter
>2bae		d3 13					.word xt_0
>2bb0		80 27					.word xt_x28dox29
.2bb2						l_186:
>2bb2		8d 2b					.word xt_space
>2bb4		9d 27					.word xt_x28loopx29
>2bb6		b2 2b					.word l_186
.2bb8						l_187:
>2bb8		de 12					.word i_exit
.2bba						w_cold:
>2bba		04					.byte $04
>2bbb		63 6f 6c 64				.text 'cold'
>2bbf							.fill 12
>2bcb		98 2b					.word w_spaces
.2bcd						xt_cold:
.2bcd		4c e6 12	jmp $12e6		jmp i_enter
>2bd0		26 14					.word xt_x28literalx29
>2bd2		d8 2b					.word l_188
>2bd4		32 27					.word xt_x28branchx29
>2bd6		f7 2b					.word l_189
.2bd8						l_188:
>2bd8		1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>2be0		20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>2bf0		30 2e 30 30 2e 30 30
.2bf7						l_189:
>2bf7		37 2b					.word xt_count
>2bf9		57 2b					.word xt_type
>2bfb		c5 13					.word xt_cr
>2bfd		26 14					.word xt_x28literalx29
>2bff		05 00					.word 5
>2c01		ab 2b					.word xt_spaces
>2c03		26 14					.word xt_x28literalx29
>2c05		0a 00					.word 10
>2c07		d3 13					.word xt_0
>2c09		80 27					.word xt_x28dox29
.2c0b						l_190:
>2c0b		26 14					.word xt_x28literalx29
>2c0d		13 2c					.word l_192
>2c0f		32 27					.word xt_x28branchx29
>2c11		25 2c					.word l_193
.2c13						l_192:
>2c13		11 48 65 6c 6c 6f 2c 20			.ptext "Hello, MetaForth!"
>2c1b		4d 65 74 61 46 6f 72 74 68 21
.2c25						l_193:
>2c25		37 2b					.word xt_count
>2c27		57 2b					.word xt_type
>2c29		c5 13					.word xt_cr
>2c2b		9d 27					.word xt_x28loopx29
>2c2d		0b 2c					.word l_190
.2c2f						l_191:
>2c2f		6e 14					.word xt_unittest
>2c31		26 14					.word xt_x28literalx29
>2c33		39 2c					.word l_194
>2c35		32 27					.word xt_x28branchx29
>2c37		50 2c					.word l_195
.2c39						l_194:
>2c39		16 41 6c 6c 20 75 6e 69			.ptext "All unit tests PASSED!"
>2c41		74 20 74 65 73 74 73 20 50 41 53 53 45 44 21
.2c50						l_195:
>2c50		37 2b					.word xt_count
>2c52		57 2b					.word xt_type
>2c54		c5 13					.word xt_cr
>2c56		de 12					.word i_exit

;******  Processing file: mf_post_65c02.asm

.010000	0000					endcode:

;******  Return to file: forth.asm


;******  End of listing
