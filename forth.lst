
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Dec 28 19:37:31 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000						pstack = $0000          ; Location of the "bottom" of the parameter stack
=$1000						USERAREA = $1000        ; Area for user variables

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa		9a 0a				vnmi:       .word <>h_nmi
>fffc		00 b0				vreset:     .word <>boot
>fffe		9b 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000						MMU_MEM_CTRL = $0000
=$0001						MMU_IO_CTRL = $0001
=$00						MMU_IO_PAGE_0 = $00
=$01						MMU_IO_PAGE_1 = $01
=$02						MMU_IO_PAGE_TEXT = $02
=$03						MMU_IO_PAGE_COLOR = $03
=$d000						VKY_MST_CTRL_0 = $d000
=$01						VKY_MST_TEXT = $01
=$02						VKY_MST_OVLY = $02
=$04						VKY_MST_GRAPHICS = $04
=$08						VKY_MST_BITMAP = $08
=$10						VKY_MST_TILE = $10
=$20						VKY_MST_SPRITE = $20
=$40						VKY_MST_GAMMA = $40
=$d001						VKY_MST_CTRL_1 = $d001
=$01						VKY_MST_RES_400 = $01
=$02						VKY_MST_DBL_X = $02
=$04						VKY_MST_DBL_Y = $04
=$08						VKY_MST_SLEEP = $08
=$10						VKY_MST_OVLY_TRANS = $10
=$d004						VKY_BRD_CTRL = $d004
=$d005						VKY_BRD_BLUE = $d005
=$d006						VKY_BRD_GREEN = $d006
=$d007						VKY_BRD_RED = $d007
=$d008						VKY_BRD_SIZE_X = $d008
=$d009						VKY_BRD_SIZE_Y = $d009
=$d010						VKY_CURS_CTRL = $d010
=$01						VKY_CURS_ENABLE = $01
=$08						VKY_CURS_FLASH_1S = $08
=$0a						VKY_CURS_FLASH_0_5S = $0a
=$0c						VKY_CURS_FLASH_0_25S = $0c
=$0d						VKY_CURS_FLASH_0_125S = $0d
=$d012						VKY_CURS_CHAR = $d012
=$d014						VKY_CURS_X = $d014
=$d016						VKY_CURS_Y = $d016
=$c000						VKY_TEXT_MATRIX = $c000
=$d800						VKY_TEXT_FG_LUT = $d800
=$d840						VKY_TEXT_BG_LUT = $d840
=$c000						VKY_TEXT_FONT = $c000

;******  Return to file: bios65.asm

=12						CHAR_FF = 12                        ; Form feed character
=13						CHAR_NL = 13                        ; Newline character
>0020						shell_start .word ?                 ; Address for the recognized shell program
>0022						cur_line    .word ?                 ; Address of the current line on the text screen
>0024						src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026						dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200						curs_color  .byte ?                 ; Current color for printing
>0201						curs_x      .byte ?                 ; Current column for the text cursor
>0202						curs_y      .byte ?                 ; Current row for the text cursor
>0203						old_y       .byte ?                 ; Previous cursor row
>0204						curs_width  .byte ?                 ; Width of the screen in text columns
>0205						curs_height .byte ?                 ; Height of the screen in text columns
.b000		4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003		4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006		4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009		4c 18 0a	jmp $0a18	conout      jmp iconout             ; Print a character in A to the screen
.b00c		4c 55 0a	jmp $0a55	printah     jmp iprintah            ; Print the hexadecimal number in A
.b00f		4c 6f 0a	jmp $0a6f	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b012		4c 89 0a	jmp $0a89	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800		a9 bf		lda #$bf	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802		a0 12		ldy #$12	            ldy #>start
.0804		20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807		4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a						isetshell:
.080a		84 21		sty $21		            sty shell_start+1
.080c		85 20		sta $20		            sta shell_start
.080e		60		rts		            rts
.080f						iwarm:
.080f		78		sei		            sei                     ; Disable IRQs
.0810		d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811		a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813		9a		txs		            txs
.0814		a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816		85 01		sta $01		            sta MMU_IO_CTRL
.0818		20 1e 08	jsr $081e	            jsr inittext            ; Initialize the text screen
.081b		6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.081e						inittext:
.081e		a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0820		8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0823		9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.0826		a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.0828		8d 04 02	sta $0204	            sta curs_width
.082b		a9 3c		lda #$3c	            lda #60
.082d		8d 05 02	sta $0205	            sta curs_height
.0830		a9 00		lda #$00	            lda #0                  ; Turn off the border
.0832		8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.0835		a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.0837		8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.083a		a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.083c		8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.083f		a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0841		8d 00 02	sta $0200	            sta curs_color
.0844		a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.0846		8d 03 02	sta $0203	            sta old_y
.0849		20 86 08	jsr $0886	            jsr initlut             ; Initialize the text color lookup tables
.084c		20 53 08	jsr $0853	            jsr initfont            ; Initialize the text font
.084f		20 e5 08	jsr $08e5	            jsr consclr             ; Clear the text screen and home the cursor
.0852		60		rts		            rts
=$7f						CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.0853						initfont:
.0853		48		pha		            pha
.0854		da		phx		            phx
.0855		5a		phy		            phy
.0856		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0858		48		pha		            pha
.0859		a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.085b		85 01		sta $01		            sta MMU_IO_CTRL
.085d		a9 9c		lda #$9c	            lda #<bios_font         ; src_ptr points to the font we want
.085f		85 24		sta $24		            sta src_ptr
.0861		a9 0a		lda #$0a	            lda #>bios_font
.0863		85 25		sta $25		            sta src_ptr+1
.0865		a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.0867		85 26		sta $26		            sta dst_ptr
.0869		a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.086b		85 27		sta $27		            sta dst_ptr+1
.086d		a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.086f		a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0871		b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.0873		91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.0875		c8		iny		            iny                     ; Move to the next byte
.0876		d0 f9		bne $0871	            bne loop                ; Keep copying the entire page
.0878		e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.087a		e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.087c		ca		dex		            dex                     ; Count down the pages moved
.087d		d0 f2		bne $0871	            bne loop                ; And keep copying until 0
.087f		68		pla		            pla
.0880		85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.0882		7a		ply		            ply
.0883		fa		plx		            plx
.0884		68		pla		            pla
.0885		60		rts		            rts
=$f4						DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.0886						initlut:
.0886		48		pha		            pha
.0887		5a		phy		            phy
.0888		a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.088a		48		pha		            pha
.088b		a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.088d		85 01		sta $01		            sta MMU_IO_CTRL
.088f		a0 00		ldy #$00	            ldy #0
.0891		b9 a5 08	lda $08a5,y	loop:       lda text_lut,y              ; Get a color component
.0894		99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.0897		99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.089a		c8		iny		            iny
.089b		c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.089d		d0 f2		bne $0891	            bne loop                    ; No: copy the next one
.089f		68		pla		            pla
.08a0		85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08a2		7a		ply		            ply
.08a3		68		pla		            pla
.08a4		60		rts		            rts
>08a5		00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08a9		00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08ad		00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08b1		00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08b5		80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08b9		80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08bd		80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08c1		8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08c5		80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08c9		00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08cd		00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08d1		00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08d5		ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08d9		ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08dd		ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08e1		ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08e5						consclr:
.08e5		48		pha		            pha
.08e6		da		phx		            phx
.08e7		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.08e9		85 22		sta $22		            sta cur_line
.08eb		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.08ed		85 23		sta $23		            sta cur_line+1
.08ef		a0 00		ldy #$00	            ldy #0
.08f1		20 ec 09	jsr $09ec	loop:       jsr clrline             ; Clear the current line
.08f4		c8		iny		            iny                     ; Move to the next line
.08f5		cc 05 02	cpy $0205	            cpy curs_height
.08f8		f0 10		beq $090a	            beq home                ; If we've done the last line, home the cursor
.08fa		18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.08fb		a5 22		lda $22		            lda cur_line
.08fd		6d 04 02	adc $0204	            adc curs_width
.0900		85 22		sta $22		            sta cur_line
.0902		a5 23		lda $23		            lda cur_line+1
.0904		69 00		adc #$00	            adc #0
.0906		85 23		sta $23		            sta cur_line+1
.0908		80 e7		bra $08f1	            bra loop                ; And go back to clear it too
.090a		9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.090d		9c 02 02	stz $0202	            stz curs_y
.0910		20 16 09	jsr $0916	            jsr cursset
.0913		fa		plx		            plx
.0914		68		pla		            pla
.0915		60		rts		            rts
.0916						cursset:
.0916		48		pha		            pha
.0917		5a		phy		            phy
.0918		ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.091b		cd 04 02	cmp $0204	            cmp curs_width
.091e		90 06		bcc $0926	            blt chk_row             ; If on screen, let's check the row
.0920		9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.0923		ee 02 02	inc $0202	            inc curs_y
.0926						chk_row:
.0926		ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0929		cd 05 02	cmp $0205	            cmp curs_height
.092c		90 0a		bcc $0938	            blt set_hw              ; If on screen, set the hardware registers
.092e		ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0931		3a		dec a		            dec a
.0932		8d 02 02	sta $0202	            sta curs_y
.0935		20 76 09	jsr $0976	            jsr consscroll          ; And we need to scroll the screen
.0938		ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.093b		8d 14 d0	sta $d014	            sta VKY_CURS_X
.093e		9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0941		ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.0944		8d 16 d0	sta $d016	            sta VKY_CURS_Y
.0947		9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.094a		ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.094d		cd 02 02	cmp $0202	            cmp curs_y
.0950		f0 21		beq $0973	            beq done                ; Yes: we are done
.0952		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.0954		85 22		sta $22		            sta cur_line
.0956		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0958		85 23		sta $23		            sta cur_line+1
.095a		ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.095d		8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0960		f0 11		beq $0973	            beq done                ; If it's zero, we are done
.0962		18		clc		loop:       clc                     ; Move cur_line to the next line
.0963		a5 22		lda $22		            lda cur_line
.0965		6d 04 02	adc $0204	            adc curs_width
.0968		85 22		sta $22		            sta cur_line
.096a		a5 23		lda $23		            lda cur_line+1
.096c		69 00		adc #$00	            adc #0
.096e		85 23		sta $23		            sta cur_line+1
.0970		88		dey		            dey                     ; Decrement line counter
.0971		d0 ef		bne $0962	            bne loop                ; If not zero, keep moving down a line
.0973		7a		ply		done:       ply
.0974		68		pla		            pla
.0975		60		rts		            rts
.0976						consscroll:
.0976		48		pha		            pha
.0977		da		phx		            phx
.0978		a5 23		lda $23		            lda cur_line+1          ; Save the current line
.097a		48		pha		            pha
.097b		a5 22		lda $22		            lda cur_line
.097d		48		pha		            pha
.097e		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0980		48		pha		            pha
.0981		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.0983		85 26		sta $26		            sta dst_ptr
.0985		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0987		85 27		sta $27		            sta dst_ptr+1
.0989		18		clc		            clc                     ; src_ptr is the second line
.098a		a5 26		lda $26		            lda dst_ptr
.098c		6d 04 02	adc $0204	            adc curs_width
.098f		85 24		sta $24		            sta src_ptr
.0991		a5 27		lda $27		            lda dst_ptr+1
.0993		69 00		adc #$00	            adc #0
.0995		85 25		sta $25		            sta src_ptr+1
.0997		a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.0999		a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.099b		85 01		sta $01		            sta MMU_IO_CTRL
.099d		a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.099f		b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09a1		92 24		sta ($24)	            sta (src_ptr)
.09a3		c8		iny		            iny
.09a4		cc 04 02	cpy $0204	            cpy curs_width
.09a7		d0 f6		bne $099f	            bne loop1
.09a9		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09ab		85 01		sta $01		            sta MMU_IO_CTRL
.09ad		a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09af		b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09b1		92 24		sta ($24)	            sta (src_ptr)
.09b3		c8		iny		            iny
.09b4		cc 04 02	cpy $0204	            cpy curs_width
.09b7		d0 f6		bne $09af	            bne loop2
.09b9		a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09bb		85 26		sta $26		            sta dst_ptr
.09bd		a5 25		lda $25		            lda src_ptr+1
.09bf		85 27		sta $27		            sta dst_ptr+1
.09c1		18		clc		            clc                     ; Move src_ptr to the next line
.09c2		a5 24		lda $24		            lda src_ptr
.09c4		6d 04 02	adc $0204	            adc curs_width
.09c7		85 24		sta $24		            sta src_ptr
.09c9		a5 25		lda $25		            lda src_ptr+1
.09cb		69 00		adc #$00	            adc #0
.09cd		85 25		sta $25		            sta src_ptr+1
.09cf		e8		inx		            inx                     ; Move src line number to the next row
.09d0		cd 05 02	cmp $0205	            cmp curs_height         ; Have we copied the last row?
.09d3		d0 c4		bne $0999	            bne copy_text           ; No: copy the line
.09d5		a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09d7		85 22		sta $22		            sta cur_line
.09d9		a5 27		lda $27		            lda dst_ptr+1
.09db		85 22		sta $22		            sta cur_line
.09dd		20 ec 09	jsr $09ec	            jsr clrline
.09e0		68		pla		            pla                     ; Restore the original I/O page
.09e1		85 01		sta $01		            sta MMU_IO_CTRL
.09e3		68		pla		            pla                     ; Restore the current line
.09e4		85 22		sta $22		            sta cur_line
.09e6		68		pla		            pla
.09e7		85 23		sta $23		            sta cur_line+1
.09e9		fa		plx		            plx
.09ea		68		pla		            pla
.09eb		60		rts		            rts
.09ec						clrline:
.09ec		48		pha		            pha
.09ed		5a		phy		            phy
.09ee		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.09f0		48		pha		            pha
.09f1		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09f3		85 01		sta $01		            sta MMU_IO_CTRL
.09f5		a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.09f7		a9 20		lda #$20	            lda #' '
.09f9		91 22		sta ($22),y	loop1:      sta (cur_line),y
.09fb		c8		iny		            iny
.09fc		cc 04 02	cpy $0204	            cpy curs_width
.09ff		d0 f8		bne $09f9	            bne loop1
.0a01		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a03		85 01		sta $01		            sta MMU_IO_CTRL
.0a05		a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a07		ad 00 02	lda $0200	            lda curs_color
.0a0a		91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a0c		c8		iny		            iny
.0a0d		cc 04 02	cpy $0204	            cpy curs_width
.0a10		d0 f8		bne $0a0a	            bne loop2
.0a12		68		pla		            pla                     ; Restore the original I/O page
.0a13		85 01		sta $01		            sta MMU_IO_CTRL
.0a15		7a		ply		            ply
.0a16		68		pla		            pla
.0a17		60		rts		            rts
.0a18						iconout:
.0a18		5a		phy		            phy
.0a19		c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a1b		d0 0b		bne $0a28	            bne not_cr
.0a1d		9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a20		ee 02 02	inc $0202	            inc curs_y
.0a23		20 16 09	jsr $0916	            jsr cursset
.0a26		80 2b		bra $0a53	            bra done
.0a28		c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a2a		d0 05		bne $0a31	            bne not_ff
.0a2c		20 e5 08	jsr $08e5	            jsr consclr             ; Yes: clear the screen
.0a2f		80 22		bra $0a53	            bra done
.0a31		85 32		sta $32		not_ff:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a33		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a35		48		pha		            pha
.0a36		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a38		85 01		sta $01		            sta MMU_IO_CTRL
.0a3a		a5 32		lda $32		            lda tmp                 ; Get A back
.0a3c		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a3f		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a41		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a43		85 01		sta $01		            sta MMU_IO_CTRL
.0a45		ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a48		91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a4a		68		pla		            pla                     ; Restore the I/O page
.0a4b		85 01		sta $01		            sta MMU_IO_CTRL
.0a4d		ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a50		20 16 09	jsr $0916	            jsr cursset
.0a53		7a		ply		done:       ply
.0a54		60		rts		            rts
.0a55						iprintah:
.0a55		da		phx		            phx
.0a56		48		pha		            pha
.0a57		29 f0		and #$f0	            and #$f0                ; Isolate the high nibble
.0a59		4a		lsr a		            lsr a
.0a5a		4a		lsr a		            lsr a
.0a5b		4a		lsr a		            lsr a
.0a5c		aa		tax		            tax                     ; Convert it to an index
.0a5d		bd 79 0a	lda $0a79,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a60		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a63		68		pla		            pla
.0a64		29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a66		aa		tax		            tax                     ; Convert it to an index
.0a67		bd 79 0a	lda $0a79,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a6a		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a6d		fa		plx		            plx
.0a6e		60		rts		            rts
.0a6f						iprintyah:
.0a6f		48		pha		            pha
.0a70		98		tya		            tya
.0a71		20 0c b0	jsr $b00c	            jsr printah
.0a74		68		pla		            pla
.0a75		20 0c b0	jsr $b00c	            jsr printah
.0a78		60		rts		            rts
>0a79		30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0a81		38 39 41 42 43 44 45 46
.0a89						iprints:
.0a89		48		pha		            pha
.0a8a		5a		phy		            phy
.0a8b		a0 00		ldy #$00	            ldy #0
.0a8d		b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0a8f		f0 06		beq $0a97	            beq done
.0a91		20 09 b0	jsr $b009	            jsr conout
.0a94		c8		iny		            iny
.0a95		d0 f6		bne $0a8d	            bne loop
.0a97		7a		ply		done:       ply
.0a98		68		pla		            pla
.0a99		60		rts		            rts
.0a9a						h_nmi:
.0a9a		40		rti		            rti                     ; Just return
.0a9b						h_irq:
.0a9b		40		rti		            rti                     ; Just return
>0a9c		00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0aa4		7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0ab4		00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0ac4		38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0ad4		00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0ae4		00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0af4		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b04		30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b14		10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b24		04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b34		48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b44		1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0b54		10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0b64		10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0b74		00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0b84		00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0b94		00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0ba4		10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0bb4		28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0bc4		60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0bd4		08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0be4		10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0bf4		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c04		00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c14		00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c24		10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c34		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c44		7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0c54		7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0c64		38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0c74		00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0c84		00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0c94		38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0ca4		10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0cb4		18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0cc4		7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0cd4		38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0ce4		38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0cf4		44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d04		44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d14		38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d24		38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d34		38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d44		44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0d54		44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0d64		44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0d74		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0d84		3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0d94		00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0da4		00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0db4		00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0dc4		00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0dd4		00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0de4		00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0df4		40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e04		00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e14		00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e24		00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e34		00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e44		00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0e54		00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0e64		00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0e74		0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0e84		30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0e94		7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ea4		48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0eb4		10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0ec4		20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0ed4		00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0ee4		28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0ef4		28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f04		20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f14		10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f24		00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f34		10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f44		20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0f54		20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0f64		28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0f74		00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0f84		44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0f94		18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0fa4		10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>0fb4		10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>0fc4		14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>0fd4		10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>0fe4		00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>0ff4		42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1004		10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1014		00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1024		cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1034		10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1044		10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>1054		00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>1064		28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>1074		00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>1084		28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>1094		00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10a4		10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>10b4		10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>10c4		10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>10d4		28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>10e4		00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>10f4		00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1104		00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1114		10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1124		00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1134		28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1144		00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>1154		28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>1164		10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>1174		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1184		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1194		ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11a4		00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>11b4		00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>11c4		00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>11d4		00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>11e4		38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>11f4		3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1204		00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1214		38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1224		10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1234		08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1244		10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>1254		00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>1264		00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>1274		1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>1284		38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>1294		00 00 00 00 00 00 00 00

;******  Return to file: mf_pre_65c02.asm

>0028						ip      .word ?         ; Instruction pointer
>002a						wp      .word ?         ; Word pointer
>002c						up      .word ?         ; User pointer
>002e						donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030						test    .word ?         ; Pointer to the current test name
>0032						tmp     .word ?
>0034						savex   .byte ?
>0035						counter .byte ?         ; A counter used for some code
>0036						sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>129c		4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>12a4		68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.12b1						init_user:
>12b1		6e 00				        .word $006e     ; Initial PSP (S0)
>12b3		ff 00				        .word $00ff     ; Initial RSP (R0)
>12b5		0a 00				        .word 10        ; Initial BASE
>12b7		00 00				        .word 0         ; Initial STATE
>12b9		00 00				        .word 0         ; Initial CONTEXT
>12bb		00 00				        .word 0         ; Initial CURRENT
>12bd		00 00				        .word <>endcode ; Initial DP
.12bf						init_user_end:
=0						user_s0 = 0
=2						user_r0 = 2
=4						user_base = 4
=6						user_state = 6
=8						user_context = 8
=10						user_current = 10
=12						user_dp = 12
.12bf		a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.12c1		9a		txs		        txs
.12c2		a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.12c4		a9 d7		lda #$d7	        lda #<vstart
.12c6		85 28		sta $28		        sta ip
.12c8		a9 12		lda #$12	        lda #>vstart
.12ca		85 29		sta $29		        sta ip+1
.12cc		a9 00		lda #$00	        lda #<USERAREA
.12ce		85 2c		sta $2c		        sta up
.12d0		a9 10		lda #$10	        lda #>USERAREA
.12d2		85 2d		sta $2d		        sta up+1
.12d4		4c f9 12	jmp $12f9	        jmp next
>12d7		3a 2e				vstart  .word xt_cold
>12d9		aa 13				        .word xt_halt
.12db		6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.12de		68		pla		i_exit  pla             ; ip := pop()
.12df		85 28		sta $28		        sta ip
.12e1		68		pla		        pla
.12e2		85 29		sta $29		        sta ip+1
.12e4		80 13		bra $12f9	        bra next        ; jmp next
.12e6		a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.12e8		48		pha		        pha
.12e9		a5 28		lda $28		        lda ip
.12eb		48		pha		        pha
.12ec		18		clc		        clc             ; ip := wp + 3
.12ed		a5 2a		lda $2a		        lda wp
.12ef		69 03		adc #$03	        adc #3
.12f1		85 28		sta $28		        sta ip
.12f3		a5 2b		lda $2b		        lda wp+1
.12f5		69 00		adc #$00	        adc #0
.12f7		85 29		sta $29		        sta ip+1
.12f9		a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.12fb		b2 28		lda ($28)	        lda (ip)
.12fd		85 2a		sta $2a		        sta wp
.12ff		b1 28		lda ($28),y	        lda (ip),y
.1301		85 2b		sta $2b		        sta wp+1
.1303		18		clc		        clc             ; ip := ip + 2
.1304		a5 28		lda $28		        lda ip
.1306		69 02		adc #$02	        adc #2
.1308		85 28		sta $28		        sta ip
.130a		a5 29		lda $29		        lda ip+1
.130c		69 00		adc #$00	        adc #0
.130e		85 29		sta $29		        sta ip+1
.1310		6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.1313						w_testname:
>1313		08					.byte $08
>1314		74 65 73 74 6e 61 6d 65			.text 'testname'
>131c		00 00					.word 0
.131e						xt_testname:
.131e		b5 02		lda $02,x		lda pstack+2,x
.1320		85 30		sta $30			sta test
.1322		b5 03		lda $03,x		lda pstack+3,x
.1324		85 31		sta $31			sta test+1
.1326		e8		inx			inx
.1327		e8		inx			inx
.1328		4c f9 12	jmp $12f9		jmp next
.132b						w_assertx3d:
>132b		07					.byte $07
>132c		61 73 73 65 72 74 3d			.text 'assert='
>1333		13 13					.word w_testname
.1335						xt_assertx3d:
.1335		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1337		d5 04		cmp $04,x		cmp pstack+4,x
.1339		d0 0e		bne $1349		bne fail            ; If not, fail
.133b		b5 03		lda $03,x		lda pstack+3,x
.133d		d5 05		cmp $05,x		cmp pstack+5,x
.133f		d0 08		bne $1349		bne fail
.1341		8a		txa			txa                 ; If so, clean up the stack
.1342		18		clc			clc
.1343		69 04		adc #$04		adc #4
.1345		aa		tax			tax
.1346		4c f9 12	jmp $12f9		jmp next            ; And continue
.1349							fail:
.1349		a9 86		lda #$86		lda #<leadin        ; Print the failure message
.134b		85 24		sta $24			sta src_ptr
.134d		a9 13		lda #$13		lda #>leadin
.134f		85 25		sta $25			sta src_ptr+1
.1351		20 12 b0	jsr $b012		jsr prints
.1354		a5 30		lda $30			lda test            ; Print the name of the test
.1356		85 24		sta $24			sta src_ptr
.1358		a5 31		lda $31			lda test+1
.135a		85 25		sta $25			sta src_ptr+1
.135c		20 12 b0	jsr $b012		jsr prints
.135f		a9 99		lda #$99		lda #<actual        ; Print the "Actual" label
.1361		85 24		sta $24			sta src_ptr
.1363		a9 13		lda #$13		lda #>actual
.1365		85 25		sta $25			sta src_ptr+1
.1367		20 12 b0	jsr $b012		jsr prints
.136a		b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.136c		b5 04		lda $04,x		lda pstack+4,x
.136e		20 0f b0	jsr $b00f		jsr printyah
.1371		a9 8d		lda #$8d		lda #<expected      ; Print the "Expected" label
.1373		85 24		sta $24			sta src_ptr
.1375		a9 13		lda #$13		lda #>expected
.1377		85 25		sta $25			sta src_ptr+1
.1379		20 12 b0	jsr $b012		jsr prints
.137c		b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.137e		b5 02		lda $02,x		lda pstack+2,x
.1380		20 0f b0	jsr $b00f		jsr printyah
.1383							lock:
.1383		ea		nop			nop                 ; Lock up
.1384		80 fd		bra $1383		bra lock
.1386							leadin:
>1386		46 41 49 4c 3a 20 00			.null "FAIL: "
.138d							expected:
>138d		20 45 58 50 45 43 54 45			.null " EXPECTED: "
>1395		44 3a 20 00
.1399							actual:
>1399		20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>13a1		20 00
.13a3						w_halt:
>13a3		04					.byte $04
>13a4		68 61 6c 74				.text 'halt'
>13a8		2b 13					.word w_assertx3d
.13aa						xt_halt:
.13aa							lock:
.13aa		ea		nop			nop
.13ab		80 fd		bra $13aa		bra lock
.13ad						w_emit:
>13ad		04					.byte $04
>13ae		65 6d 69 74				.text 'emit'
>13b2		a3 13					.word w_halt
.13b4						xt_emit:
.13b4		b5 02		lda $02,x		lda pstack+2,x
.13b6		da		phx			phx
.13b7		20 09 b0	jsr $b009		jsr conout
.13ba		fa		plx			plx
.13bb		e8		inx			inx
.13bc		e8		inx			inx
.13bd		4c f9 12	jmp $12f9		jmp next
.13c0						w_cr:
>13c0		02					.byte $02
>13c1		63 72					.text 'cr'
>13c3		ad 13					.word w_emit
.13c5						xt_cr:
.13c5		da		phx			phx
.13c6		a9 0d		lda #$0d		lda #$0d
.13c8		20 09 b0	jsr $b009		jsr conout
.13cb		fa		plx			plx
.13cc		4c f9 12	jmp $12f9		jmp next
.13cf						w_0:
>13cf		01					.byte $01
>13d0		30					.text '0'
>13d1		c0 13					.word w_cr
.13d3						xt_0:
.13d3		74 01		stz $01,x		stz pstack+1,x
.13d5		74 00		stz $00,x		stz pstack,x
.13d7		ca		dex			dex
.13d8		ca		dex			dex
.13d9		4c f9 12	jmp $12f9		jmp next
.13dc						w_1:
>13dc		01					.byte $01
>13dd		31					.text '1'
>13de		cf 13					.word w_0
.13e0						xt_1:
.13e0		74 01		stz $01,x		stz pstack+1,x
.13e2		a9 01		lda #$01		lda #1
.13e4		95 00		sta $00,x		sta pstack,x
.13e6		ca		dex			dex
.13e7		ca		dex			dex
.13e8		4c f9 12	jmp $12f9		jmp next
.13eb						w_2:
>13eb		01					.byte $01
>13ec		32					.text '2'
>13ed		dc 13					.word w_1
.13ef						xt_2:
.13ef		74 01		stz $01,x		stz pstack+1,x
.13f1		a9 02		lda #$02		lda #2
.13f3		95 00		sta $00,x		sta pstack,x
.13f5		ca		dex			dex
.13f6		ca		dex			dex
.13f7		4c f9 12	jmp $12f9		jmp next
.13fa						w_x2d1:
>13fa		02					.byte $02
>13fb		2d 31					.text '-1'
>13fd		eb 13					.word w_2
.13ff						xt_x2d1:
.13ff		a9 ff		lda #$ff		lda #$ff
.1401		95 01		sta $01,x		sta pstack+1,x
.1403		95 00		sta $00,x		sta pstack,x
.1405		ca		dex			dex
.1406		ca		dex			dex
.1407		4c f9 12	jmp $12f9		jmp next
.140a						w_x2d2:
>140a		02					.byte $02
>140b		2d 32					.text '-2'
>140d		fa 13					.word w_x2d1
.140f						xt_x2d2:
.140f		a9 fe		lda #$fe		lda #$fe
.1411		95 01		sta $01,x		sta pstack+1,x
.1413		95 00		sta $00,x		sta pstack,x
.1415		ca		dex			dex
.1416		ca		dex			dex
.1417		4c f9 12	jmp $12f9		jmp next
.141a						w_x28literalx29:
>141a		09					.byte $09
>141b		28 6c 69 74 65 72 61 6c			.text '(literal)'
>1423		29
>1424		0a 14					.word w_x2d2
.1426						xt_x28literalx29:
.1426		a0 01		ldy #$01		ldy #1
.1428		b2 28		lda ($28)		lda (ip)
.142a		95 00		sta $00,x		sta pstack,x
.142c		b1 28		lda ($28),y		lda (ip),y
.142e		95 01		sta $01,x		sta pstack+1,x
.1430		ca		dex			dex
.1431		ca		dex			dex
.1432		18		clc			clc
.1433		a5 28		lda $28			lda ip
.1435		69 02		adc #$02		adc #2
.1437		85 28		sta $28			sta ip
.1439		a5 29		lda $29			lda ip+1
.143b		69 00		adc #$00		adc #0
.143d		85 29		sta $29			sta ip+1
.143f		4c f9 12	jmp $12f9		jmp next
.1442						w_depth:
>1442		05					.byte $05
>1443		64 65 70 74 68				.text 'depth'
>1448		1a 14					.word w_x28literalx29
.144a						xt_depth:
.144a		86 32		stx $32			stx tmp
.144c		38		sec			sec
.144d		a9 6e		lda #$6e		lda #$6e
.144f		e5 32		sbc $32			sbc tmp
.1451		4a		lsr a			lsr a
.1452		74 01		stz $01,x		stz pstack+1,x
.1454		95 00		sta $00,x		sta pstack,x
.1456		ca		dex			dex
.1457		ca		dex			dex
.1458		4c f9 12	jmp $12f9		jmp next
.145b						w_unittest:
>145b		08					.byte $08
>145c		75 6e 69 74 74 65 73 74			.text 'unittest'
>1464							.fill 8
>146c		42 14					.word w_depth
.146e						xt_unittest:
.146e		4c e6 12	jmp $12e6		jmp i_enter
>1471		26 14					.word xt_x28literalx29
>1473		79 14					.word l_2
>1475		65 29					.word xt_x28branchx29
>1477		85 14					.word l_3
.1479						l_2:
>1479		64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1481		3e 20 30 00
.1485						l_3:
>1485		1e 13					.word xt_testname
>1487		4a 14					.word xt_depth
>1489		d3 13					.word xt_0
>148b		35 13					.word xt_assertx3d
>148d		26 14					.word xt_x28literalx29
>148f		95 14					.word l_4
>1491		65 29					.word xt_x28branchx29
>1493		a5 14					.word l_5
.1495						l_4:
>1495		30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>149d		2d 2d 3e 20 30 20 31 00
.14a5						l_5:
>14a5		1e 13					.word xt_testname
>14a7		d3 13					.word xt_0
>14a9		4a 14					.word xt_depth
>14ab		e0 13					.word xt_1
>14ad		35 13					.word xt_assertx3d
>14af		d3 13					.word xt_0
>14b1		35 13					.word xt_assertx3d
>14b3		26 14					.word xt_x28literalx29
>14b5		bb 14					.word l_6
>14b7		65 29					.word xt_x28branchx29
>14b9		d3 14					.word l_7
.14bb						l_6:
>14bb		31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>14c3		70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.14d3						l_7:
>14d3		1e 13					.word xt_testname
>14d5		e0 13					.word xt_1
>14d7		e0 13					.word xt_1
>14d9		e0 13					.word xt_1
>14db		4a 14					.word xt_depth
>14dd		26 14					.word xt_x28literalx29
>14df		03 00					.word 3
>14e1		35 13					.word xt_assertx3d
>14e3		e0 13					.word xt_1
>14e5		35 13					.word xt_assertx3d
>14e7		e0 13					.word xt_1
>14e9		35 13					.word xt_assertx3d
>14eb		e0 13					.word xt_1
>14ed		35 13					.word xt_assertx3d
>14ef		26 14					.word xt_x28literalx29
>14f1		f7 14					.word l_8
>14f3		65 29					.word xt_x28branchx29
>14f5		06 15					.word l_9
.14f7						l_8:
>14f7		31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>14ff		20 2d 2d 3e 20 31 00
.1506						l_9:
>1506		1e 13					.word xt_testname
>1508		e0 13					.word xt_1
>150a		ef 13					.word xt_2
>150c		54 24					.word xt_drop
>150e		e0 13					.word xt_1
>1510		35 13					.word xt_assertx3d
>1512		26 14					.word xt_x28literalx29
>1514		1a 15					.word l_10
>1516		65 29					.word xt_x28branchx29
>1518		2d 15					.word l_11
.151a						l_10:
>151a		31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1522		6f 70 20 2d 2d 3e 20 31 20 32 00
.152d						l_11:
>152d		1e 13					.word xt_testname
>152f		e0 13					.word xt_1
>1531		ef 13					.word xt_2
>1533		26 14					.word xt_x28literalx29
>1535		03 00					.word 3
>1537		54 24					.word xt_drop
>1539		ef 13					.word xt_2
>153b		35 13					.word xt_assertx3d
>153d		e0 13					.word xt_1
>153f		35 13					.word xt_assertx3d
>1541		26 14					.word xt_x28literalx29
>1543		49 15					.word l_12
>1545		65 29					.word xt_x28branchx29
>1547		57 15					.word l_13
.1549						l_12:
>1549		31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1551		3e 20 31 20 31 00
.1557						l_13:
>1557		1e 13					.word xt_testname
>1559		e0 13					.word xt_1
>155b		5f 24					.word xt_dup
>155d		e0 13					.word xt_1
>155f		35 13					.word xt_assertx3d
>1561		e0 13					.word xt_1
>1563		35 13					.word xt_assertx3d
>1565		26 14					.word xt_x28literalx29
>1567		6d 15					.word l_14
>1569		65 29					.word xt_x28branchx29
>156b		7f 15					.word l_15
.156d						l_14:
>156d		31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1575		2d 2d 3e 20 31 20 32 20 32 00
.157f						l_15:
>157f		1e 13					.word xt_testname
>1581		e0 13					.word xt_1
>1583		ef 13					.word xt_2
>1585		5f 24					.word xt_dup
>1587		ef 13					.word xt_2
>1589		35 13					.word xt_assertx3d
>158b		ef 13					.word xt_2
>158d		35 13					.word xt_assertx3d
>158f		e0 13					.word xt_1
>1591		35 13					.word xt_assertx3d
>1593		26 14					.word xt_x28literalx29
>1595		9b 15					.word l_16
>1597		65 29					.word xt_x28branchx29
>1599		b0 15					.word l_17
.159b						l_16:
>159b		31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>15a3		61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.15b0						l_17:
>15b0		1e 13					.word xt_testname
>15b2		e0 13					.word xt_1
>15b4		ef 13					.word xt_2
>15b6		26 14					.word xt_x28literalx29
>15b8		03 00					.word 3
>15ba		73 24					.word xt_swap
>15bc		ef 13					.word xt_2
>15be		35 13					.word xt_assertx3d
>15c0		26 14					.word xt_x28literalx29
>15c2		03 00					.word 3
>15c4		35 13					.word xt_assertx3d
>15c6		e0 13					.word xt_1
>15c8		35 13					.word xt_assertx3d
>15ca		26 14					.word xt_x28literalx29
>15cc		d2 15					.word l_18
>15ce		65 29					.word xt_x28branchx29
>15d0		e5 15					.word l_19
.15d2						l_18:
>15d2		31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>15da		20 2d 2d 3e 20 31 20 32 20 31 00
.15e5						l_19:
>15e5		1e 13					.word xt_testname
>15e7		e0 13					.word xt_1
>15e9		ef 13					.word xt_2
>15eb		8d 24					.word xt_over
>15ed		e0 13					.word xt_1
>15ef		35 13					.word xt_assertx3d
>15f1		ef 13					.word xt_2
>15f3		35 13					.word xt_assertx3d
>15f5		e0 13					.word xt_1
>15f7		35 13					.word xt_assertx3d
>15f9		26 14					.word xt_x28literalx29
>15fb		01 16					.word l_20
>15fd		65 29					.word xt_x28branchx29
>15ff		21 16					.word l_21
.1601						l_20:
>1601		35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1609		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1619		3e 20 35 35 35 35 68 00
.1621						l_21:
>1621		1e 13					.word xt_testname
>1623		26 14					.word xt_x28literalx29
>1625		55 55					.word 21845
>1627		26 14					.word xt_x28literalx29
>1629		04 00					.word 4
>162b		db 24					.word xt_x21
>162d		26 14					.word xt_x28literalx29
>162f		04 00					.word 4
>1631		f8 24					.word xt_x40
>1633		26 14					.word xt_x28literalx29
>1635		55 55					.word 21845
>1637		35 13					.word xt_assertx3d
>1639		26 14					.word xt_x28literalx29
>163b		41 16					.word l_22
>163d		65 29					.word xt_x28branchx29
>163f		61 16					.word l_23
.1641						l_22:
>1641		61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1649		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1659		3e 20 61 61 61 61 68 00
.1661						l_23:
>1661		1e 13					.word xt_testname
>1663		26 14					.word xt_x28literalx29
>1665		aa aa					.word 43690
>1667		26 14					.word xt_x28literalx29
>1669		04 00					.word 4
>166b		db 24					.word xt_x21
>166d		26 14					.word xt_x28literalx29
>166f		04 00					.word 4
>1671		f8 24					.word xt_x40
>1673		26 14					.word xt_x28literalx29
>1675		aa aa					.word 43690
>1677		35 13					.word xt_assertx3d
>1679		26 14					.word xt_x28literalx29
>167b		81 16					.word l_24
>167d		65 29					.word xt_x28branchx29
>167f		9f 16					.word l_25
.1681						l_24:
>1681		35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1689		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1699		3e 20 35 35 68 00
.169f						l_25:
>169f		1e 13					.word xt_testname
>16a1		26 14					.word xt_x28literalx29
>16a3		55 00					.word 85
>16a5		26 14					.word xt_x28literalx29
>16a7		03 00					.word 3
>16a9		12 25					.word xt_cx21
>16ab		26 14					.word xt_x28literalx29
>16ad		03 00					.word 3
>16af		22 25					.word xt_cx40
>16b1		26 14					.word xt_x28literalx29
>16b3		55 00					.word 85
>16b5		35 13					.word xt_assertx3d
>16b7		26 14					.word xt_x28literalx29
>16b9		bf 16					.word l_26
>16bb		65 29					.word xt_x28branchx29
>16bd		dd 16					.word l_27
.16bf						l_26:
>16bf		61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>16c7		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>16d7		3e 20 61 61 68 00
.16dd						l_27:
>16dd		1e 13					.word xt_testname
>16df		26 14					.word xt_x28literalx29
>16e1		aa 00					.word 170
>16e3		26 14					.word xt_x28literalx29
>16e5		03 00					.word 3
>16e7		12 25					.word xt_cx21
>16e9		26 14					.word xt_x28literalx29
>16eb		03 00					.word 3
>16ed		22 25					.word xt_cx40
>16ef		26 14					.word xt_x28literalx29
>16f1		aa 00					.word 170
>16f3		35 13					.word xt_assertx3d
>16f5		26 14					.word xt_x28literalx29
>16f7		fd 16					.word l_28
>16f9		65 29					.word xt_x28branchx29
>16fb		09 17					.word l_29
.16fd						l_28:
>16fd		31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1705		3e 20 31 00
.1709						l_29:
>1709		1e 13					.word xt_testname
>170b		e0 13					.word xt_1
>170d		d3 13					.word xt_0
>170f		18 26					.word xt_x2b
>1711		e0 13					.word xt_1
>1713		35 13					.word xt_assertx3d
>1715		26 14					.word xt_x28literalx29
>1717		1d 17					.word l_30
>1719		65 29					.word xt_x28branchx29
>171b		29 17					.word l_31
.171d						l_30:
>171d		31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1725		3e 20 32 00
.1729						l_31:
>1729		1e 13					.word xt_testname
>172b		e0 13					.word xt_1
>172d		e0 13					.word xt_1
>172f		18 26					.word xt_x2b
>1731		ef 13					.word xt_2
>1733		35 13					.word xt_assertx3d
>1735		26 14					.word xt_x28literalx29
>1737		3d 17					.word l_32
>1739		65 29					.word xt_x28branchx29
>173b		4b 17					.word l_33
.173d						l_32:
>173d		33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1745		2d 3e 20 31 33 00
.174b						l_33:
>174b		1e 13					.word xt_testname
>174d		26 14					.word xt_x28literalx29
>174f		03 00					.word 3
>1751		26 14					.word xt_x28literalx29
>1753		0a 00					.word 10
>1755		18 26					.word xt_x2b
>1757		26 14					.word xt_x28literalx29
>1759		0d 00					.word 13
>175b		35 13					.word xt_assertx3d
>175d		26 14					.word xt_x28literalx29
>175f		65 17					.word l_34
>1761		65 29					.word xt_x28branchx29
>1763		75 17					.word l_35
.1765						l_34:
>1765		66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>176d		2b 20 2d 2d 3e 20 34 00
.1775						l_35:
>1775		1e 13					.word xt_testname
>1777		26 14					.word xt_x28literalx29
>1779		ff ff					.word 65535
>177b		26 14					.word xt_x28literalx29
>177d		05 00					.word 5
>177f		18 26					.word xt_x2b
>1781		26 14					.word xt_x28literalx29
>1783		04 00					.word 4
>1785		35 13					.word xt_assertx3d
>1787		26 14					.word xt_x28literalx29
>1789		8f 17					.word l_36
>178b		65 29					.word xt_x28branchx29
>178d		9b 17					.word l_37
.178f						l_36:
>178f		34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1797		3e 20 31 00
.179b						l_37:
>179b		1e 13					.word xt_testname
>179d		26 14					.word xt_x28literalx29
>179f		04 00					.word 4
>17a1		26 14					.word xt_x28literalx29
>17a3		03 00					.word 3
>17a5		2e 26					.word xt_x2d
>17a7		e0 13					.word xt_1
>17a9		35 13					.word xt_assertx3d
>17ab		26 14					.word xt_x28literalx29
>17ad		b3 17					.word l_38
>17af		65 29					.word xt_x28branchx29
>17b1		c3 17					.word l_39
.17b3						l_38:
>17b3		33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>17bb		3e 20 66 66 66 66 68 00
.17c3						l_39:
>17c3		1e 13					.word xt_testname
>17c5		26 14					.word xt_x28literalx29
>17c7		03 00					.word 3
>17c9		26 14					.word xt_x28literalx29
>17cb		04 00					.word 4
>17cd		2e 26					.word xt_x2d
>17cf		26 14					.word xt_x28literalx29
>17d1		ff ff					.word 65535
>17d3		35 13					.word xt_assertx3d
>17d5		26 14					.word xt_x28literalx29
>17d7		dd 17					.word l_40
>17d9		65 29					.word xt_x28branchx29
>17db		ea 17					.word l_41
.17dd						l_40:
>17dd		31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>17e5		2d 3e 20 35 00
.17ea						l_41:
>17ea		1e 13					.word xt_testname
>17ec		26 14					.word xt_x28literalx29
>17ee		0a 00					.word 10
>17f0		26 14					.word xt_x28literalx29
>17f2		05 00					.word 5
>17f4		2e 26					.word xt_x2d
>17f6		26 14					.word xt_x28literalx29
>17f8		05 00					.word 5
>17fa		35 13					.word xt_assertx3d
>17fc		26 14					.word xt_x28literalx29
>17fe		04 18					.word l_42
>1800		65 29					.word xt_x28branchx29
>1802		15 18					.word l_43
.1804						l_42:
>1804		31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>180c		20 2d 2d 3e 20 31 20 30 00
.1815						l_43:
>1815		1e 13					.word xt_testname
>1817		e0 13					.word xt_1
>1819		26 14					.word xt_x28literalx29
>181b		03 00					.word 3
>181d		ba 26					.word xt_x2fmod
>181f		d3 13					.word xt_0
>1821		35 13					.word xt_assertx3d
>1823		e0 13					.word xt_1
>1825		35 13					.word xt_assertx3d
>1827		26 14					.word xt_x28literalx29
>1829		2f 18					.word l_44
>182b		65 29					.word xt_x28branchx29
>182d		40 18					.word l_45
.182f						l_44:
>182f		32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1837		20 2d 2d 3e 20 32 20 30 00
.1840						l_45:
>1840		1e 13					.word xt_testname
>1842		ef 13					.word xt_2
>1844		26 14					.word xt_x28literalx29
>1846		03 00					.word 3
>1848		ba 26					.word xt_x2fmod
>184a		d3 13					.word xt_0
>184c		35 13					.word xt_assertx3d
>184e		ef 13					.word xt_2
>1850		35 13					.word xt_assertx3d
>1852		26 14					.word xt_x28literalx29
>1854		5a 18					.word l_46
>1856		65 29					.word xt_x28branchx29
>1858		6b 18					.word l_47
.185a						l_46:
>185a		33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1862		20 2d 2d 3e 20 30 20 31 00
.186b						l_47:
>186b		1e 13					.word xt_testname
>186d		26 14					.word xt_x28literalx29
>186f		03 00					.word 3
>1871		26 14					.word xt_x28literalx29
>1873		03 00					.word 3
>1875		ba 26					.word xt_x2fmod
>1877		e0 13					.word xt_1
>1879		35 13					.word xt_assertx3d
>187b		d3 13					.word xt_0
>187d		35 13					.word xt_assertx3d
>187f		26 14					.word xt_x28literalx29
>1881		87 18					.word l_48
>1883		65 29					.word xt_x28branchx29
>1885		98 18					.word l_49
.1887						l_48:
>1887		34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>188f		20 2d 2d 3e 20 31 20 31 00
.1898						l_49:
>1898		1e 13					.word xt_testname
>189a		26 14					.word xt_x28literalx29
>189c		04 00					.word 4
>189e		26 14					.word xt_x28literalx29
>18a0		03 00					.word 3
>18a2		ba 26					.word xt_x2fmod
>18a4		e0 13					.word xt_1
>18a6		35 13					.word xt_assertx3d
>18a8		e0 13					.word xt_1
>18aa		35 13					.word xt_assertx3d
>18ac		26 14					.word xt_x28literalx29
>18ae		b4 18					.word l_50
>18b0		65 29					.word xt_x28branchx29
>18b2		c5 18					.word l_51
.18b4						l_50:
>18b4		36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>18bc		20 2d 2d 3e 20 30 20 32 00
.18c5						l_51:
>18c5		1e 13					.word xt_testname
>18c7		26 14					.word xt_x28literalx29
>18c9		06 00					.word 6
>18cb		26 14					.word xt_x28literalx29
>18cd		03 00					.word 3
>18cf		ba 26					.word xt_x2fmod
>18d1		ef 13					.word xt_2
>18d3		35 13					.word xt_assertx3d
>18d5		d3 13					.word xt_0
>18d7		35 13					.word xt_assertx3d
>18d9		26 14					.word xt_x28literalx29
>18db		e1 18					.word l_52
>18dd		65 29					.word xt_x28branchx29
>18df		ec 18					.word l_53
.18e1						l_52:
>18e1		31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>18e9		20 32 00
.18ec						l_53:
>18ec		1e 13					.word xt_testname
>18ee		e0 13					.word xt_1
>18f0		37 27					.word xt_1x2b
>18f2		ef 13					.word xt_2
>18f4		35 13					.word xt_assertx3d
>18f6		26 14					.word xt_x28literalx29
>18f8		fe 18					.word l_54
>18fa		65 29					.word xt_x28branchx29
>18fc		09 19					.word l_55
.18fe						l_54:
>18fe		30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1906		20 31 00
.1909						l_55:
>1909		1e 13					.word xt_testname
>190b		d3 13					.word xt_0
>190d		37 27					.word xt_1x2b
>190f		e0 13					.word xt_1
>1911		35 13					.word xt_assertx3d
>1913		26 14					.word xt_x28literalx29
>1915		1b 19					.word l_56
>1917		65 29					.word xt_x28branchx29
>1919		28 19					.word l_57
.191b						l_56:
>191b		32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1923		3e 20 32 31 00
.1928						l_57:
>1928		1e 13					.word xt_testname
>192a		26 14					.word xt_x28literalx29
>192c		14 00					.word 20
>192e		37 27					.word xt_1x2b
>1930		26 14					.word xt_x28literalx29
>1932		15 00					.word 21
>1934		35 13					.word xt_assertx3d
>1936		26 14					.word xt_x28literalx29
>1938		3e 19					.word l_58
>193a		65 29					.word xt_x28branchx29
>193c		4d 19					.word l_59
.193e						l_58:
>193e		66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1946		20 2d 2d 3e 20 30 00
.194d						l_59:
>194d		1e 13					.word xt_testname
>194f		26 14					.word xt_x28literalx29
>1951		ff ff					.word 65535
>1953		37 27					.word xt_1x2b
>1955		d3 13					.word xt_0
>1957		35 13					.word xt_assertx3d
>1959		26 14					.word xt_x28literalx29
>195b		61 19					.word l_60
>195d		65 29					.word xt_x28branchx29
>195f		6c 19					.word l_61
.1961						l_60:
>1961		31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1969		20 33 00
.196c						l_61:
>196c		1e 13					.word xt_testname
>196e		e0 13					.word xt_1
>1970		45 27					.word xt_2x2b
>1972		26 14					.word xt_x28literalx29
>1974		03 00					.word 3
>1976		35 13					.word xt_assertx3d
>1978		26 14					.word xt_x28literalx29
>197a		80 19					.word l_62
>197c		65 29					.word xt_x28branchx29
>197e		8b 19					.word l_63
.1980						l_62:
>1980		30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1988		20 32 00
.198b						l_63:
>198b		1e 13					.word xt_testname
>198d		d3 13					.word xt_0
>198f		45 27					.word xt_2x2b
>1991		ef 13					.word xt_2
>1993		35 13					.word xt_assertx3d
>1995		26 14					.word xt_x28literalx29
>1997		9d 19					.word l_64
>1999		65 29					.word xt_x28branchx29
>199b		aa 19					.word l_65
.199d						l_64:
>199d		32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>19a5		3e 20 32 32 00
.19aa						l_65:
>19aa		1e 13					.word xt_testname
>19ac		26 14					.word xt_x28literalx29
>19ae		14 00					.word 20
>19b0		45 27					.word xt_2x2b
>19b2		26 14					.word xt_x28literalx29
>19b4		16 00					.word 22
>19b6		35 13					.word xt_assertx3d
>19b8		26 14					.word xt_x28literalx29
>19ba		c0 19					.word l_66
>19bc		65 29					.word xt_x28branchx29
>19be		cf 19					.word l_67
.19c0						l_66:
>19c0		66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>19c8		20 2d 2d 3e 20 30 00
.19cf						l_67:
>19cf		1e 13					.word xt_testname
>19d1		26 14					.word xt_x28literalx29
>19d3		fe ff					.word 65534
>19d5		45 27					.word xt_2x2b
>19d7		d3 13					.word xt_0
>19d9		35 13					.word xt_assertx3d
>19db		26 14					.word xt_x28literalx29
>19dd		e3 19					.word l_68
>19df		65 29					.word xt_x28branchx29
>19e1		ee 19					.word l_69
.19e3						l_68:
>19e3		31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>19eb		20 30 00
.19ee						l_69:
>19ee		1e 13					.word xt_testname
>19f0		e0 13					.word xt_1
>19f2		5a 27					.word xt_1x2d
>19f4		d3 13					.word xt_0
>19f6		35 13					.word xt_assertx3d
>19f8		26 14					.word xt_x28literalx29
>19fa		00 1a					.word l_70
>19fc		65 29					.word xt_x28branchx29
>19fe		0f 1a					.word l_71
.1a00						l_70:
>1a00		30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1a08		20 66 66 66 66 68 00
.1a0f						l_71:
>1a0f		1e 13					.word xt_testname
>1a11		d3 13					.word xt_0
>1a13		5a 27					.word xt_1x2d
>1a15		26 14					.word xt_x28literalx29
>1a17		ff ff					.word 65535
>1a19		35 13					.word xt_assertx3d
>1a1b		26 14					.word xt_x28literalx29
>1a1d		23 1a					.word l_72
>1a1f		65 29					.word xt_x28branchx29
>1a21		30 1a					.word l_73
.1a23						l_72:
>1a23		32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1a2b		3e 20 31 39 00
.1a30						l_73:
>1a30		1e 13					.word xt_testname
>1a32		26 14					.word xt_x28literalx29
>1a34		14 00					.word 20
>1a36		5a 27					.word xt_1x2d
>1a38		26 14					.word xt_x28literalx29
>1a3a		13 00					.word 19
>1a3c		35 13					.word xt_assertx3d
>1a3e		26 14					.word xt_x28literalx29
>1a40		46 1a					.word l_74
>1a42		65 29					.word xt_x28branchx29
>1a44		59 1a					.word l_75
.1a46						l_74:
>1a46		66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1a4e		20 2d 2d 3e 20 66 66 66 65 68 00
.1a59						l_75:
>1a59		1e 13					.word xt_testname
>1a5b		26 14					.word xt_x28literalx29
>1a5d		ff ff					.word 65535
>1a5f		5a 27					.word xt_1x2d
>1a61		26 14					.word xt_x28literalx29
>1a63		fe ff					.word 65534
>1a65		35 13					.word xt_assertx3d
>1a67		26 14					.word xt_x28literalx29
>1a69		6f 1a					.word l_76
>1a6b		65 29					.word xt_x28branchx29
>1a6d		7e 1a					.word l_77
.1a6f						l_76:
>1a6f		31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1a77		20 66 66 66 66 68 00
.1a7e						l_77:
>1a7e		1e 13					.word xt_testname
>1a80		e0 13					.word xt_1
>1a82		6a 27					.word xt_2x2d
>1a84		26 14					.word xt_x28literalx29
>1a86		ff ff					.word 65535
>1a88		35 13					.word xt_assertx3d
>1a8a		26 14					.word xt_x28literalx29
>1a8c		92 1a					.word l_78
>1a8e		65 29					.word xt_x28branchx29
>1a90		a1 1a					.word l_79
.1a92						l_78:
>1a92		30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1a9a		20 66 66 66 65 68 00
.1aa1						l_79:
>1aa1		1e 13					.word xt_testname
>1aa3		d3 13					.word xt_0
>1aa5		6a 27					.word xt_2x2d
>1aa7		26 14					.word xt_x28literalx29
>1aa9		fe ff					.word 65534
>1aab		35 13					.word xt_assertx3d
>1aad		26 14					.word xt_x28literalx29
>1aaf		b5 1a					.word l_80
>1ab1		65 29					.word xt_x28branchx29
>1ab3		c2 1a					.word l_81
.1ab5						l_80:
>1ab5		32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1abd		3e 20 31 38 00
.1ac2						l_81:
>1ac2		1e 13					.word xt_testname
>1ac4		26 14					.word xt_x28literalx29
>1ac6		14 00					.word 20
>1ac8		6a 27					.word xt_2x2d
>1aca		26 14					.word xt_x28literalx29
>1acc		12 00					.word 18
>1ace		35 13					.word xt_assertx3d
>1ad0		26 14					.word xt_x28literalx29
>1ad2		d8 1a					.word l_82
>1ad4		65 29					.word xt_x28branchx29
>1ad6		eb 1a					.word l_83
.1ad8						l_82:
>1ad8		66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1ae0		20 2d 2d 3e 20 66 66 66 64 68 00
.1aeb						l_83:
>1aeb		1e 13					.word xt_testname
>1aed		26 14					.word xt_x28literalx29
>1aef		ff ff					.word 65535
>1af1		6a 27					.word xt_2x2d
>1af3		26 14					.word xt_x28literalx29
>1af5		fd ff					.word 65533
>1af7		35 13					.word xt_assertx3d
>1af9		26 14					.word xt_x28literalx29
>1afb		01 1b					.word l_84
>1afd		65 29					.word xt_x28branchx29
>1aff		1b 1b					.word l_85
.1b01						l_84:
>1b01		30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1b09		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1b19		68 00
.1b1b						l_85:
>1b1b		1e 13					.word xt_testname
>1b1d		26 14					.word xt_x28literalx29
>1b1f		00 00					.word 0
>1b21		26 14					.word xt_x28literalx29
>1b23		00 00					.word 0
>1b25		80 27					.word xt_and
>1b27		26 14					.word xt_x28literalx29
>1b29		00 00					.word 0
>1b2b		35 13					.word xt_assertx3d
>1b2d		26 14					.word xt_x28literalx29
>1b2f		35 1b					.word l_86
>1b31		65 29					.word xt_x28branchx29
>1b33		4f 1b					.word l_87
.1b35						l_86:
>1b35		30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1b3d		66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1b4d		68 00
.1b4f						l_87:
>1b4f		1e 13					.word xt_testname
>1b51		26 14					.word xt_x28literalx29
>1b53		00 00					.word 0
>1b55		26 14					.word xt_x28literalx29
>1b57		ff ff					.word 65535
>1b59		80 27					.word xt_and
>1b5b		26 14					.word xt_x28literalx29
>1b5d		00 00					.word 0
>1b5f		35 13					.word xt_assertx3d
>1b61		26 14					.word xt_x28literalx29
>1b63		69 1b					.word l_88
>1b65		65 29					.word xt_x28branchx29
>1b67		83 1b					.word l_89
.1b69						l_88:
>1b69		66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1b71		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1b81		68 00
.1b83						l_89:
>1b83		1e 13					.word xt_testname
>1b85		26 14					.word xt_x28literalx29
>1b87		ff ff					.word 65535
>1b89		26 14					.word xt_x28literalx29
>1b8b		00 00					.word 0
>1b8d		80 27					.word xt_and
>1b8f		26 14					.word xt_x28literalx29
>1b91		00 00					.word 0
>1b93		35 13					.word xt_assertx3d
>1b95		26 14					.word xt_x28literalx29
>1b97		9d 1b					.word l_90
>1b99		65 29					.word xt_x28branchx29
>1b9b		b7 1b					.word l_91
.1b9d						l_90:
>1b9d		66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1ba5		66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1bb5		68 00
.1bb7						l_91:
>1bb7		1e 13					.word xt_testname
>1bb9		26 14					.word xt_x28literalx29
>1bbb		ff ff					.word 65535
>1bbd		26 14					.word xt_x28literalx29
>1bbf		ff ff					.word 65535
>1bc1		80 27					.word xt_and
>1bc3		26 14					.word xt_x28literalx29
>1bc5		ff ff					.word 65535
>1bc7		35 13					.word xt_assertx3d
>1bc9		26 14					.word xt_x28literalx29
>1bcb		d1 1b					.word l_92
>1bcd		65 29					.word xt_x28branchx29
>1bcf		ea 1b					.word l_93
.1bd1						l_92:
>1bd1		30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1bd9		30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1be9		00
.1bea						l_93:
>1bea		1e 13					.word xt_testname
>1bec		26 14					.word xt_x28literalx29
>1bee		00 00					.word 0
>1bf0		26 14					.word xt_x28literalx29
>1bf2		00 00					.word 0
>1bf4		96 27					.word xt_or
>1bf6		26 14					.word xt_x28literalx29
>1bf8		00 00					.word 0
>1bfa		35 13					.word xt_assertx3d
>1bfc		26 14					.word xt_x28literalx29
>1bfe		04 1c					.word l_94
>1c00		65 29					.word xt_x28branchx29
>1c02		1d 1c					.word l_95
.1c04						l_94:
>1c04		30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1c0c		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1c1c		00
.1c1d						l_95:
>1c1d		1e 13					.word xt_testname
>1c1f		26 14					.word xt_x28literalx29
>1c21		00 00					.word 0
>1c23		26 14					.word xt_x28literalx29
>1c25		ff ff					.word 65535
>1c27		96 27					.word xt_or
>1c29		26 14					.word xt_x28literalx29
>1c2b		ff ff					.word 65535
>1c2d		35 13					.word xt_assertx3d
>1c2f		26 14					.word xt_x28literalx29
>1c31		37 1c					.word l_96
>1c33		65 29					.word xt_x28branchx29
>1c35		50 1c					.word l_97
.1c37						l_96:
>1c37		66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>1c3f		30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1c4f		00
.1c50						l_97:
>1c50		1e 13					.word xt_testname
>1c52		26 14					.word xt_x28literalx29
>1c54		ff ff					.word 65535
>1c56		26 14					.word xt_x28literalx29
>1c58		00 00					.word 0
>1c5a		96 27					.word xt_or
>1c5c		26 14					.word xt_x28literalx29
>1c5e		ff ff					.word 65535
>1c60		35 13					.word xt_assertx3d
>1c62		26 14					.word xt_x28literalx29
>1c64		6a 1c					.word l_98
>1c66		65 29					.word xt_x28branchx29
>1c68		83 1c					.word l_99
.1c6a						l_98:
>1c6a		66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>1c72		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1c82		00
.1c83						l_99:
>1c83		1e 13					.word xt_testname
>1c85		26 14					.word xt_x28literalx29
>1c87		ff ff					.word 65535
>1c89		26 14					.word xt_x28literalx29
>1c8b		ff ff					.word 65535
>1c8d		96 27					.word xt_or
>1c8f		26 14					.word xt_x28literalx29
>1c91		ff ff					.word 65535
>1c93		35 13					.word xt_assertx3d
>1c95		26 14					.word xt_x28literalx29
>1c97		9d 1c					.word l_100
>1c99		65 29					.word xt_x28branchx29
>1c9b		b7 1c					.word l_101
.1c9d						l_100:
>1c9d		30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>1ca5		30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>1cb5		68 00
.1cb7						l_101:
>1cb7		1e 13					.word xt_testname
>1cb9		26 14					.word xt_x28literalx29
>1cbb		00 00					.word 0
>1cbd		26 14					.word xt_x28literalx29
>1cbf		00 00					.word 0
>1cc1		ad 27					.word xt_xor
>1cc3		26 14					.word xt_x28literalx29
>1cc5		00 00					.word 0
>1cc7		35 13					.word xt_assertx3d
>1cc9		26 14					.word xt_x28literalx29
>1ccb		d1 1c					.word l_102
>1ccd		65 29					.word xt_x28branchx29
>1ccf		eb 1c					.word l_103
.1cd1						l_102:
>1cd1		30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>1cd9		66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>1ce9		68 00
.1ceb						l_103:
>1ceb		1e 13					.word xt_testname
>1ced		26 14					.word xt_x28literalx29
>1cef		00 00					.word 0
>1cf1		26 14					.word xt_x28literalx29
>1cf3		ff ff					.word 65535
>1cf5		ad 27					.word xt_xor
>1cf7		26 14					.word xt_x28literalx29
>1cf9		ff ff					.word 65535
>1cfb		35 13					.word xt_assertx3d
>1cfd		26 14					.word xt_x28literalx29
>1cff		05 1d					.word l_104
>1d01		65 29					.word xt_x28branchx29
>1d03		1f 1d					.word l_105
.1d05						l_104:
>1d05		66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>1d0d		30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>1d1d		68 00
.1d1f						l_105:
>1d1f		1e 13					.word xt_testname
>1d21		26 14					.word xt_x28literalx29
>1d23		ff ff					.word 65535
>1d25		26 14					.word xt_x28literalx29
>1d27		00 00					.word 0
>1d29		ad 27					.word xt_xor
>1d2b		26 14					.word xt_x28literalx29
>1d2d		ff ff					.word 65535
>1d2f		35 13					.word xt_assertx3d
>1d31		26 14					.word xt_x28literalx29
>1d33		39 1d					.word l_106
>1d35		65 29					.word xt_x28branchx29
>1d37		53 1d					.word l_107
.1d39						l_106:
>1d39		66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>1d41		66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>1d51		68 00
.1d53						l_107:
>1d53		1e 13					.word xt_testname
>1d55		26 14					.word xt_x28literalx29
>1d57		ff ff					.word 65535
>1d59		26 14					.word xt_x28literalx29
>1d5b		ff ff					.word 65535
>1d5d		ad 27					.word xt_xor
>1d5f		26 14					.word xt_x28literalx29
>1d61		00 00					.word 0
>1d63		35 13					.word xt_assertx3d
>1d65		26 14					.word xt_x28literalx29
>1d67		6d 1d					.word l_108
>1d69		65 29					.word xt_x28branchx29
>1d6b		81 1d					.word l_109
.1d6d						l_108:
>1d6d		30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>1d75		74 20 2d 2d 3e 20 66 66 66 66 68 00
.1d81						l_109:
>1d81		1e 13					.word xt_testname
>1d83		26 14					.word xt_x28literalx29
>1d85		00 00					.word 0
>1d87		c4 27					.word xt_not
>1d89		26 14					.word xt_x28literalx29
>1d8b		ff ff					.word 65535
>1d8d		35 13					.word xt_assertx3d
>1d8f		26 14					.word xt_x28literalx29
>1d91		97 1d					.word l_110
>1d93		65 29					.word xt_x28branchx29
>1d95		ab 1d					.word l_111
.1d97						l_110:
>1d97		66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>1d9f		74 20 2d 2d 3e 20 30 30 30 30 68 00
.1dab						l_111:
>1dab		1e 13					.word xt_testname
>1dad		26 14					.word xt_x28literalx29
>1daf		ff ff					.word 65535
>1db1		c4 27					.word xt_not
>1db3		26 14					.word xt_x28literalx29
>1db5		00 00					.word 0
>1db7		35 13					.word xt_assertx3d
>1db9		26 14					.word xt_x28literalx29
>1dbb		c1 1d					.word l_112
>1dbd		65 29					.word xt_x28branchx29
>1dbf		d0 1d					.word l_113
.1dc1						l_112:
>1dc1		30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>1dc9		20 30 30 30 30 68 00
.1dd0						l_113:
>1dd0		1e 13					.word xt_testname
>1dd2		d3 13					.word xt_0
>1dd4		d8 27					.word xt_0x3c
>1dd6		26 14					.word xt_x28literalx29
>1dd8		00 00					.word 0
>1dda		35 13					.word xt_assertx3d
>1ddc		26 14					.word xt_x28literalx29
>1dde		e4 1d					.word l_114
>1de0		65 29					.word xt_x28branchx29
>1de2		f3 1d					.word l_115
.1de4						l_114:
>1de4		33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>1dec		20 30 30 30 30 68 00
.1df3						l_115:
>1df3		1e 13					.word xt_testname
>1df5		26 14					.word xt_x28literalx29
>1df7		03 00					.word 3
>1df9		d8 27					.word xt_0x3c
>1dfb		26 14					.word xt_x28literalx29
>1dfd		00 00					.word 0
>1dff		35 13					.word xt_assertx3d
>1e01		26 14					.word xt_x28literalx29
>1e03		09 1e					.word l_116
>1e05		65 29					.word xt_x28branchx29
>1e07		1c 1e					.word l_117
.1e09						l_116:
>1e09		66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>1e11		20 2d 2d 3e 20 66 66 66 66 68 00
.1e1c						l_117:
>1e1c		1e 13					.word xt_testname
>1e1e		26 14					.word xt_x28literalx29
>1e20		ff ff					.word 65535
>1e22		d8 27					.word xt_0x3c
>1e24		26 14					.word xt_x28literalx29
>1e26		ff ff					.word 65535
>1e28		35 13					.word xt_assertx3d
>1e2a		26 14					.word xt_x28literalx29
>1e2c		32 1e					.word l_118
>1e2e		65 29					.word xt_x28branchx29
>1e30		41 1e					.word l_119
.1e32						l_118:
>1e32		30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>1e3a		20 66 66 66 66 68 00
.1e41						l_119:
>1e41		1e 13					.word xt_testname
>1e43		d3 13					.word xt_0
>1e45		f1 27					.word xt_0x3d
>1e47		26 14					.word xt_x28literalx29
>1e49		ff ff					.word 65535
>1e4b		35 13					.word xt_assertx3d
>1e4d		26 14					.word xt_x28literalx29
>1e4f		55 1e					.word l_120
>1e51		65 29					.word xt_x28branchx29
>1e53		64 1e					.word l_121
.1e55						l_120:
>1e55		33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>1e5d		20 30 30 30 30 68 00
.1e64						l_121:
>1e64		1e 13					.word xt_testname
>1e66		26 14					.word xt_x28literalx29
>1e68		03 00					.word 3
>1e6a		f1 27					.word xt_0x3d
>1e6c		26 14					.word xt_x28literalx29
>1e6e		00 00					.word 0
>1e70		35 13					.word xt_assertx3d
>1e72		26 14					.word xt_x28literalx29
>1e74		7a 1e					.word l_122
>1e76		65 29					.word xt_x28branchx29
>1e78		8d 1e					.word l_123
.1e7a						l_122:
>1e7a		66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>1e82		20 2d 2d 3e 20 30 30 30 30 68 00
.1e8d						l_123:
>1e8d		1e 13					.word xt_testname
>1e8f		26 14					.word xt_x28literalx29
>1e91		ff ff					.word 65535
>1e93		f1 27					.word xt_0x3d
>1e95		26 14					.word xt_x28literalx29
>1e97		00 00					.word 0
>1e99		35 13					.word xt_assertx3d
>1e9b		26 14					.word xt_x28literalx29
>1e9d		a3 1e					.word l_124
>1e9f		65 29					.word xt_x28branchx29
>1ea1		b2 1e					.word l_125
.1ea3						l_124:
>1ea3		30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>1eab		20 30 30 30 30 68 00
.1eb2						l_125:
>1eb2		1e 13					.word xt_testname
>1eb4		d3 13					.word xt_0
>1eb6		0e 28					.word xt_0x3e
>1eb8		26 14					.word xt_x28literalx29
>1eba		00 00					.word 0
>1ebc		35 13					.word xt_assertx3d
>1ebe		26 14					.word xt_x28literalx29
>1ec0		c6 1e					.word l_126
>1ec2		65 29					.word xt_x28branchx29
>1ec4		d5 1e					.word l_127
.1ec6						l_126:
>1ec6		33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>1ece		20 66 66 66 66 68 00
.1ed5						l_127:
>1ed5		1e 13					.word xt_testname
>1ed7		26 14					.word xt_x28literalx29
>1ed9		03 00					.word 3
>1edb		0e 28					.word xt_0x3e
>1edd		26 14					.word xt_x28literalx29
>1edf		ff ff					.word 65535
>1ee1		35 13					.word xt_assertx3d
>1ee3		26 14					.word xt_x28literalx29
>1ee5		eb 1e					.word l_128
>1ee7		65 29					.word xt_x28branchx29
>1ee9		fe 1e					.word l_129
.1eeb						l_128:
>1eeb		66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>1ef3		20 2d 2d 3e 20 30 30 30 30 68 00
.1efe						l_129:
>1efe		1e 13					.word xt_testname
>1f00		26 14					.word xt_x28literalx29
>1f02		ff ff					.word 65535
>1f04		0e 28					.word xt_0x3e
>1f06		26 14					.word xt_x28literalx29
>1f08		00 00					.word 0
>1f0a		35 13					.word xt_assertx3d
>1f0c		26 14					.word xt_x28literalx29
>1f0e		14 1f					.word l_130
>1f10		65 29					.word xt_x28branchx29
>1f12		2b 1f					.word l_131
.1f14						l_130:
>1f14		63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>1f1c		2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.1f2b						l_131:
>1f2b		1e 13					.word xt_testname
>1f2d		77 28					.word xt_cells
>1f2f		ef 13					.word xt_2
>1f31		2e 26					.word xt_x2d
>1f33		f1 27					.word xt_0x3d
>1f35		26 14					.word xt_x28literalx29
>1f37		ff ff					.word 65535
>1f39		35 13					.word xt_assertx3d
>1f3b		26 14					.word xt_x28literalx29
>1f3d		43 1f					.word l_132
>1f3f		65 29					.word xt_x28branchx29
>1f41		58 1f					.word l_133
.1f43						l_132:
>1f43		62 6c 20 33 32 20 2d 20			.null "bl 32 - 0= --> ffffh"
>1f4b		30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.1f58						l_133:
>1f58		1e 13					.word xt_testname
>1f5a		8f 28					.word xt_bl
>1f5c		26 14					.word xt_x28literalx29
>1f5e		20 00					.word 32
>1f60		2e 26					.word xt_x2d
>1f62		f1 27					.word xt_0x3d
>1f64		26 14					.word xt_x28literalx29
>1f66		ff ff					.word 65535
>1f68		35 13					.word xt_assertx3d
>1f6a		26 14					.word xt_x28literalx29
>1f6c		72 1f					.word l_134
>1f6e		65 29					.word xt_x28branchx29
>1f70		84 1f					.word l_135
.1f72						l_134:
>1f72		27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>1f7a		75 74 65 20 2d 2d 3e 20 31 00
.1f84						l_135:
>1f84		1e 13					.word xt_testname
>1f86		26 14					.word xt_x28literalx29
>1f88		e0 13					.word xt_1
>1f8a		97 2a					.word xt_execute
>1f8c		e0 13					.word xt_1
>1f8e		35 13					.word xt_assertx3d
>1f90		26 14					.word xt_x28literalx29
>1f92		98 1f					.word l_136
>1f94		65 29					.word xt_x28branchx29
>1f96		ae 1f					.word l_137
.1f98						l_136:
>1f98		31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>1fa0		65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.1fae						l_137:
>1fae		1e 13					.word xt_testname
>1fb0		e0 13					.word xt_1
>1fb2		ef 13					.word xt_2
>1fb4		26 14					.word xt_x28literalx29
>1fb6		18 26					.word xt_x2b
>1fb8		97 2a					.word xt_execute
>1fba		26 14					.word xt_x28literalx29
>1fbc		03 00					.word 3
>1fbe		35 13					.word xt_assertx3d
>1fc0		26 14					.word xt_x28literalx29
>1fc2		c8 1f					.word l_139
>1fc4		65 29					.word xt_x28branchx29
>1fc6		d5 1f					.word l_140
.1fc8						l_139:
>1fc8		30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>1fd0		2d 3e 20 30 00
.1fd5						l_140:
>1fd5		1e 13					.word xt_testname
>1fd7		d3 13					.word xt_0
>1fd9		f2 2a					.word xt_x3fdup
>1fdb		d3 13					.word xt_0
>1fdd		35 13					.word xt_assertx3d
>1fdf		26 14					.word xt_x28literalx29
>1fe1		e7 1f					.word l_141
>1fe3		65 29					.word xt_x28branchx29
>1fe5		f6 1f					.word l_142
.1fe7						l_141:
>1fe7		31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>1fef		2d 3e 20 31 20 31 00
.1ff6						l_142:
>1ff6		1e 13					.word xt_testname
>1ff8		e0 13					.word xt_1
>1ffa		f2 2a					.word xt_x3fdup
>1ffc		e0 13					.word xt_1
>1ffe		35 13					.word xt_assertx3d
>2000		e0 13					.word xt_1
>2002		35 13					.word xt_assertx3d
>2004		26 14					.word xt_x28literalx29
>2006		0c 20					.word l_143
>2008		65 29					.word xt_x28branchx29
>200a		1c 20					.word l_144
.200c						l_143:
>200c		31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>2014		3e 20 66 66 66 66 68 00
.201c						l_144:
>201c		1e 13					.word xt_testname
>201e		e0 13					.word xt_1
>2020		ef 13					.word xt_2
>2022		12 2b					.word xt_x3c
>2024		26 14					.word xt_x28literalx29
>2026		ff ff					.word 65535
>2028		35 13					.word xt_assertx3d
>202a		26 14					.word xt_x28literalx29
>202c		32 20					.word l_145
>202e		65 29					.word xt_x28branchx29
>2030		42 20					.word l_146
.2032						l_145:
>2032		32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>203a		3e 20 30 30 30 30 68 00
.2042						l_146:
>2042		1e 13					.word xt_testname
>2044		ef 13					.word xt_2
>2046		e0 13					.word xt_1
>2048		12 2b					.word xt_x3c
>204a		26 14					.word xt_x28literalx29
>204c		00 00					.word 0
>204e		35 13					.word xt_assertx3d
>2050		26 14					.word xt_x28literalx29
>2052		58 20					.word l_147
>2054		65 29					.word xt_x28branchx29
>2056		6c 20					.word l_148
.2058						l_147:
>2058		30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2060		3c 20 2d 2d 3e 20 30 30 30 30 68 00
.206c						l_148:
>206c		1e 13					.word xt_testname
>206e		d3 13					.word xt_0
>2070		26 14					.word xt_x28literalx29
>2072		ff ff					.word 65535
>2074		12 2b					.word xt_x3c
>2076		26 14					.word xt_x28literalx29
>2078		00 00					.word 0
>207a		35 13					.word xt_assertx3d
>207c		26 14					.word xt_x28literalx29
>207e		84 20					.word l_149
>2080		65 29					.word xt_x28branchx29
>2082		98 20					.word l_150
.2084						l_149:
>2084		66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>208c		3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2098						l_150:
>2098		1e 13					.word xt_testname
>209a		26 14					.word xt_x28literalx29
>209c		ff ff					.word 65535
>209e		d3 13					.word xt_0
>20a0		12 2b					.word xt_x3c
>20a2		26 14					.word xt_x28literalx29
>20a4		ff ff					.word 65535
>20a6		35 13					.word xt_assertx3d
>20a8		26 14					.word xt_x28literalx29
>20aa		b0 20					.word l_151
>20ac		65 29					.word xt_x28branchx29
>20ae		c0 20					.word l_152
.20b0						l_151:
>20b0		31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>20b8		3e 20 30 30 30 30 68 00
.20c0						l_152:
>20c0		1e 13					.word xt_testname
>20c2		e0 13					.word xt_1
>20c4		ef 13					.word xt_2
>20c6		2e 2b					.word xt_x3e
>20c8		26 14					.word xt_x28literalx29
>20ca		00 00					.word 0
>20cc		35 13					.word xt_assertx3d
>20ce		26 14					.word xt_x28literalx29
>20d0		d6 20					.word l_153
>20d2		65 29					.word xt_x28branchx29
>20d4		e6 20					.word l_154
.20d6						l_153:
>20d6		32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>20de		3e 20 66 66 66 66 68 00
.20e6						l_154:
>20e6		1e 13					.word xt_testname
>20e8		ef 13					.word xt_2
>20ea		e0 13					.word xt_1
>20ec		2e 2b					.word xt_x3e
>20ee		26 14					.word xt_x28literalx29
>20f0		ff ff					.word 65535
>20f2		35 13					.word xt_assertx3d
>20f4		26 14					.word xt_x28literalx29
>20f6		fc 20					.word l_155
>20f8		65 29					.word xt_x28branchx29
>20fa		10 21					.word l_156
.20fc						l_155:
>20fc		30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2104		3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2110						l_156:
>2110		1e 13					.word xt_testname
>2112		d3 13					.word xt_0
>2114		26 14					.word xt_x28literalx29
>2116		ff ff					.word 65535
>2118		2e 2b					.word xt_x3e
>211a		26 14					.word xt_x28literalx29
>211c		ff ff					.word 65535
>211e		35 13					.word xt_assertx3d
>2120		26 14					.word xt_x28literalx29
>2122		28 21					.word l_157
>2124		65 29					.word xt_x28branchx29
>2126		3c 21					.word l_158
.2128						l_157:
>2128		66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2130		3e 20 2d 2d 3e 20 30 30 30 30 68 00
.213c						l_158:
>213c		1e 13					.word xt_testname
>213e		26 14					.word xt_x28literalx29
>2140		ff ff					.word 65535
>2142		d3 13					.word xt_0
>2144		2e 2b					.word xt_x3e
>2146		26 14					.word xt_x28literalx29
>2148		00 00					.word 0
>214a		35 13					.word xt_assertx3d
>214c		26 14					.word xt_x28literalx29
>214e		54 21					.word l_159
>2150		65 29					.word xt_x28branchx29
>2152		64 21					.word l_160
.2154						l_159:
>2154		31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>215c		3e 20 30 30 30 30 68 00
.2164						l_160:
>2164		1e 13					.word xt_testname
>2166		e0 13					.word xt_1
>2168		d3 13					.word xt_0
>216a		4a 2b					.word xt_x3d
>216c		26 14					.word xt_x28literalx29
>216e		00 00					.word 0
>2170		35 13					.word xt_assertx3d
>2172		26 14					.word xt_x28literalx29
>2174		7a 21					.word l_161
>2176		65 29					.word xt_x28branchx29
>2178		8a 21					.word l_162
.217a						l_161:
>217a		31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2182		3e 20 66 66 66 66 68 00
.218a						l_162:
>218a		1e 13					.word xt_testname
>218c		e0 13					.word xt_1
>218e		e0 13					.word xt_1
>2190		4a 2b					.word xt_x3d
>2192		26 14					.word xt_x28literalx29
>2194		ff ff					.word 65535
>2196		35 13					.word xt_assertx3d
>2198		26 14					.word xt_x28literalx29
>219a		a0 21					.word l_163
>219c		65 29					.word xt_x28branchx29
>219e		b4 21					.word l_164
.21a0						l_163:
>21a0		66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>21a8		3d 20 2d 2d 3e 20 30 30 30 30 68 00
.21b4						l_164:
>21b4		1e 13					.word xt_testname
>21b6		26 14					.word xt_x28literalx29
>21b8		ff ff					.word 65535
>21ba		d3 13					.word xt_0
>21bc		4a 2b					.word xt_x3d
>21be		26 14					.word xt_x28literalx29
>21c0		00 00					.word 0
>21c2		35 13					.word xt_assertx3d
>21c4		26 14					.word xt_x28literalx29
>21c6		cc 21					.word l_165
>21c8		65 29					.word xt_x28branchx29
>21ca		e4 21					.word l_166
.21cc						l_165:
>21cc		66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>21d4		66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.21e4						l_166:
>21e4		1e 13					.word xt_testname
>21e6		26 14					.word xt_x28literalx29
>21e8		ff ff					.word 65535
>21ea		26 14					.word xt_x28literalx29
>21ec		ff ff					.word 65535
>21ee		4a 2b					.word xt_x3d
>21f0		26 14					.word xt_x28literalx29
>21f2		ff ff					.word 65535
>21f4		35 13					.word xt_assertx3d
>21f6		26 14					.word xt_x28literalx29
>21f8		fe 21					.word l_167
>21fa		65 29					.word xt_x28branchx29
>21fc		0e 22					.word l_168
.21fe						l_167:
>21fe		30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2206		3e 20 66 66 66 66 68 00
.220e						l_168:
>220e		1e 13					.word xt_testname
>2210		d3 13					.word xt_0
>2212		d3 13					.word xt_0
>2214		4a 2b					.word xt_x3d
>2216		26 14					.word xt_x28literalx29
>2218		ff ff					.word 65535
>221a		35 13					.word xt_assertx3d
>221c		26 14					.word xt_x28literalx29
>221e		24 22					.word l_169
>2220		65 29					.word xt_x28branchx29
>2222		30 22					.word l_170
.2224						l_169:
>2224		36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>222c		3e 20 32 00
.2230						l_170:
>2230		1e 13					.word xt_testname
>2232		26 14					.word xt_x28literalx29
>2234		06 00					.word 6
>2236		26 14					.word xt_x28literalx29
>2238		03 00					.word 3
>223a		66 2b					.word xt_x2f
>223c		ef 13					.word xt_2
>223e		35 13					.word xt_assertx3d
>2240		26 14					.word xt_x28literalx29
>2242		48 22					.word l_171
>2244		65 29					.word xt_x28branchx29
>2246		55 22					.word l_172
.2248						l_171:
>2248		31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2250		2d 3e 20 33 00
.2255						l_172:
>2255		1e 13					.word xt_testname
>2257		26 14					.word xt_x28literalx29
>2259		0a 00					.word 10
>225b		26 14					.word xt_x28literalx29
>225d		03 00					.word 3
>225f		66 2b					.word xt_x2f
>2261		26 14					.word xt_x28literalx29
>2263		03 00					.word 3
>2265		35 13					.word xt_assertx3d
>2267		26 14					.word xt_x28literalx29
>2269		6f 22					.word l_173
>226b		65 29					.word xt_x28branchx29
>226d		7d 22					.word l_174
.226f						l_173:
>226f		36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2277		2d 2d 3e 20 30 00
.227d						l_174:
>227d		1e 13					.word xt_testname
>227f		26 14					.word xt_x28literalx29
>2281		06 00					.word 6
>2283		26 14					.word xt_x28literalx29
>2285		03 00					.word 3
>2287		84 2b					.word xt_mod
>2289		d3 13					.word xt_0
>228b		35 13					.word xt_assertx3d
>228d		26 14					.word xt_x28literalx29
>228f		95 22					.word l_175
>2291		65 29					.word xt_x28branchx29
>2293		a4 22					.word l_176
.2295						l_175:
>2295		31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>229d		20 2d 2d 3e 20 31 00
.22a4						l_176:
>22a4		1e 13					.word xt_testname
>22a6		26 14					.word xt_x28literalx29
>22a8		0a 00					.word 10
>22aa		26 14					.word xt_x28literalx29
>22ac		03 00					.word 3
>22ae		84 2b					.word xt_mod
>22b0		e0 13					.word xt_1
>22b2		35 13					.word xt_assertx3d
>22b4		26 14					.word xt_x28literalx29
>22b6		bc 22					.word l_180
>22b8		65 29					.word xt_x28branchx29
>22ba		ca 22					.word l_181
.22bc						l_180:
>22bc		31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>22c4		2d 2d 3e 20 32 00
.22ca						l_181:
>22ca		1e 13					.word xt_testname
>22cc		e0 13					.word xt_1
>22ce		ef 13					.word xt_2
>22d0		c6 2b					.word xt_max
>22d2		ef 13					.word xt_2
>22d4		35 13					.word xt_assertx3d
>22d6		26 14					.word xt_x28literalx29
>22d8		de 22					.word l_182
>22da		65 29					.word xt_x28branchx29
>22dc		ec 22					.word l_183
.22de						l_182:
>22de		33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>22e6		2d 2d 3e 20 33 00
.22ec						l_183:
>22ec		1e 13					.word xt_testname
>22ee		26 14					.word xt_x28literalx29
>22f0		03 00					.word 3
>22f2		d3 13					.word xt_0
>22f4		c6 2b					.word xt_max
>22f6		26 14					.word xt_x28literalx29
>22f8		03 00					.word 3
>22fa		35 13					.word xt_assertx3d
>22fc		26 14					.word xt_x28literalx29
>22fe		04 23					.word l_184
>2300		65 29					.word xt_x28branchx29
>2302		1e 23					.word l_185
.2304						l_184:
>2304		66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>230c		66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>231c		68 00
.231e						l_185:
>231e		1e 13					.word xt_testname
>2320		26 14					.word xt_x28literalx29
>2322		fe ff					.word 65534
>2324		26 14					.word xt_x28literalx29
>2326		ff ff					.word 65535
>2328		c6 2b					.word xt_max
>232a		26 14					.word xt_x28literalx29
>232c		ff ff					.word 65535
>232e		35 13					.word xt_assertx3d
>2330		26 14					.word xt_x28literalx29
>2332		38 23					.word l_188
>2334		65 29					.word xt_x28branchx29
>2336		46 23					.word l_189
.2338						l_188:
>2338		31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2340		2d 2d 3e 20 31 00
.2346						l_189:
>2346		1e 13					.word xt_testname
>2348		e0 13					.word xt_1
>234a		ef 13					.word xt_2
>234c		f2 2b					.word xt_min
>234e		e0 13					.word xt_1
>2350		35 13					.word xt_assertx3d
>2352		26 14					.word xt_x28literalx29
>2354		5a 23					.word l_190
>2356		65 29					.word xt_x28branchx29
>2358		68 23					.word l_191
.235a						l_190:
>235a		33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2362		2d 2d 3e 20 30 00
.2368						l_191:
>2368		1e 13					.word xt_testname
>236a		26 14					.word xt_x28literalx29
>236c		03 00					.word 3
>236e		d3 13					.word xt_0
>2370		f2 2b					.word xt_min
>2372		d3 13					.word xt_0
>2374		35 13					.word xt_assertx3d
>2376		26 14					.word xt_x28literalx29
>2378		7e 23					.word l_192
>237a		65 29					.word xt_x28branchx29
>237c		98 23					.word l_193
.237e						l_192:
>237e		66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2386		66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2396		68 00
.2398						l_193:
>2398		1e 13					.word xt_testname
>239a		26 14					.word xt_x28literalx29
>239c		fe ff					.word 65534
>239e		26 14					.word xt_x28literalx29
>23a0		ff ff					.word 65535
>23a2		f2 2b					.word xt_min
>23a4		26 14					.word xt_x28literalx29
>23a6		fe ff					.word 65534
>23a8		35 13					.word xt_assertx3d
>23aa		26 14					.word xt_x28literalx29
>23ac		b2 23					.word l_194
>23ae		65 29					.word xt_x28branchx29
>23b0		c6 23					.word l_195
.23b2						l_194:
>23b2		31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>23ba		74 20 2d 2d 3e 20 32 20 33 20 31 00
.23c6						l_195:
>23c6		1e 13					.word xt_testname
>23c8		e0 13					.word xt_1
>23ca		ef 13					.word xt_2
>23cc		26 14					.word xt_x28literalx29
>23ce		03 00					.word 3
>23d0		1e 2c					.word xt_rot
>23d2		e0 13					.word xt_1
>23d4		35 13					.word xt_assertx3d
>23d6		26 14					.word xt_x28literalx29
>23d8		03 00					.word 3
>23da		35 13					.word xt_assertx3d
>23dc		ef 13					.word xt_2
>23de		35 13					.word xt_assertx3d
>23e0		26 14					.word xt_x28literalx29
>23e2		e8 23					.word l_196
>23e4		65 29					.word xt_x28branchx29
>23e6		fd 23					.word l_197
.23e8						l_196:
>23e8		31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>23f0		20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.23fd						l_197:
>23fd		1e 13					.word xt_testname
>23ff		e0 13					.word xt_1
>2401		ef 13					.word xt_2
>2403		3e 2c					.word xt_2dup
>2405		ef 13					.word xt_2
>2407		35 13					.word xt_assertx3d
>2409		e0 13					.word xt_1
>240b		35 13					.word xt_assertx3d
>240d		ef 13					.word xt_2
>240f		35 13					.word xt_assertx3d
>2411		e0 13					.word xt_1
>2413		35 13					.word xt_assertx3d
>2415		26 14					.word xt_x28literalx29
>2417		1d 24					.word l_198
>2419		65 29					.word xt_x28branchx29
>241b		33 24					.word l_199
.241d						l_198:
>241d		31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>2425		32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.2433						l_199:
>2433		1e 13					.word xt_testname
>2435		e0 13					.word xt_1
>2437		ef 13					.word xt_2
>2439		26 14					.word xt_x28literalx29
>243b		03 00					.word 3
>243d		26 14					.word xt_x28literalx29
>243f		04 00					.word 4
>2441		5a 2c					.word xt_2drop
>2443		ef 13					.word xt_2
>2445		35 13					.word xt_assertx3d
>2447		e0 13					.word xt_1
>2449		35 13					.word xt_assertx3d
>244b		de 12					.word i_exit
.244d						w_drop:
>244d		04					.byte $04
>244e		64 72 6f 70				.text 'drop'
>2452		5b 14					.word w_unittest
.2454						xt_drop:
.2454		e8		inx			inx
.2455		e8		inx			inx
.2456		4c f9 12	jmp $12f9		jmp next
.2459						w_dup:
>2459		03					.byte $03
>245a		64 75 70				.text 'dup'
>245d		4d 24					.word w_drop
.245f						xt_dup:
.245f		b5 02		lda $02,x		lda pstack+2,x
.2461		95 00		sta $00,x		sta pstack,x
.2463		b5 03		lda $03,x		lda pstack+3,x
.2465		95 01		sta $01,x		sta pstack+1,x
.2467		ca		dex			dex
.2468		ca		dex			dex
.2469		4c f9 12	jmp $12f9		jmp next
.246c						w_swap:
>246c		04					.byte $04
>246d		73 77 61 70				.text 'swap'
>2471		59 24					.word w_dup
.2473						xt_swap:
.2473		b5 02		lda $02,x		lda pstack+2,x
.2475		b4 04		ldy $04,x		ldy pstack+4,x
.2477		94 02		sty $02,x		sty pstack+2,x
.2479		95 04		sta $04,x		sta pstack+4,x
.247b		b5 03		lda $03,x		lda pstack+3,x
.247d		b4 05		ldy $05,x		ldy pstack+5,x
.247f		94 03		sty $03,x		sty pstack+3,x
.2481		95 05		sta $05,x		sta pstack+5,x
.2483		4c f9 12	jmp $12f9		jmp next
.2486						w_over:
>2486		04					.byte $04
>2487		6f 76 65 72				.text 'over'
>248b		6c 24					.word w_swap
.248d						xt_over:
.248d		b5 04		lda $04,x		lda pstack+4,x
.248f		95 00		sta $00,x		sta pstack,x
.2491		b5 05		lda $05,x		lda pstack+5,x
.2493		95 01		sta $01,x		sta pstack+1,x
.2495		ca		dex			dex
.2496		ca		dex			dex
.2497		4c f9 12	jmp $12f9		jmp next
.249a						w_x3er:
>249a		02					.byte $02
>249b		3e 72					.text '>r'
>249d		86 24					.word w_over
.249f						xt_x3er:
.249f		b5 03		lda $03,x		lda pstack+3,x
.24a1		48		pha			pha
.24a2		b5 02		lda $02,x		lda pstack+2,x
.24a4		48		pha			pha
.24a5		e8		inx			inx
.24a6		e8		inx			inx
.24a7		4c f9 12	jmp $12f9		jmp next
.24aa						w_rx3e:
>24aa		02					.byte $02
>24ab		72 3e					.text 'r>'
>24ad		9a 24					.word w_x3er
.24af						xt_rx3e:
.24af		68		pla			pla
.24b0		95 00		sta $00,x		sta pstack,x
.24b2		68		pla			pla
.24b3		95 01		sta $01,x		sta pstack+1,x
.24b5		ca		dex			dex
.24b6		ca		dex			dex
.24b7		4c f9 12	jmp $12f9		jmp next
.24ba						w_r:
>24ba		01					.byte $01
>24bb		72					.text 'r'
>24bc		aa 24					.word w_rx3e
.24be						xt_r:
.24be		68		pla			pla
.24bf		95 00		sta $00,x		sta pstack,x
.24c1		68		pla			pla
.24c2		95 01		sta $01,x		sta pstack+1,x
.24c4		48		pha			pha
.24c5		b5 00		lda $00,x		lda pstack,x
.24c7		48		pha			pha
.24c8		ca		dex			dex
.24c9		ca		dex			dex
.24ca		4c f9 12	jmp $12f9		jmp next
.24cd						w_rdrop:
>24cd		05					.byte $05
>24ce		72 64 72 6f 70				.text 'rdrop'
>24d3		ba 24					.word w_r
.24d5						xt_rdrop:
.24d5		68		pla			pla
.24d6		68		pla			pla
.24d7						w_x21:
>24d7		01					.byte $01
>24d8		21					.text '!'
>24d9		cd 24					.word w_rdrop
.24db						xt_x21:
.24db		b5 02		lda $02,x		lda pstack+2,x
.24dd		85 32		sta $32			sta tmp
.24df		b5 03		lda $03,x		lda pstack+3,x
.24e1		85 33		sta $33			sta tmp+1
.24e3		a0 01		ldy #$01		ldy #1
.24e5		b5 04		lda $04,x		lda pstack+4,x
.24e7		92 32		sta ($32)		sta (tmp)
.24e9		b5 05		lda $05,x		lda pstack+5,x
.24eb		91 32		sta ($32),y		sta (tmp),y
.24ed		e8		inx			inx
.24ee		e8		inx			inx
.24ef		e8		inx			inx
.24f0		e8		inx			inx
.24f1		4c f9 12	jmp $12f9		jmp next
.24f4						w_x40:
>24f4		01					.byte $01
>24f5		40					.text '@'
>24f6		d7 24					.word w_x21
.24f8						xt_x40:
.24f8		b5 02		lda $02,x		lda pstack+2,x
.24fa		85 32		sta $32			sta tmp
.24fc		b5 03		lda $03,x		lda pstack+3,x
.24fe		85 33		sta $33			sta tmp+1
.2500		a0 01		ldy #$01		ldy #1
.2502		b2 32		lda ($32)		lda (tmp)
.2504		95 02		sta $02,x		sta pstack+2,x
.2506		b1 32		lda ($32),y		lda (tmp),y
.2508		95 03		sta $03,x		sta pstack+3,x
.250a		4c f9 12	jmp $12f9		jmp next
.250d						w_cx21:
>250d		02					.byte $02
>250e		63 21					.text 'c!'
>2510		f4 24					.word w_x40
.2512						xt_cx21:
.2512		b5 04		lda $04,x		lda pstack+4,x
.2514		81 02		sta ($02,x)		sta (pstack+2,x)
.2516		e8		inx			inx
.2517		e8		inx			inx
.2518		e8		inx			inx
.2519		e8		inx			inx
.251a		4c f9 12	jmp $12f9		jmp next
.251d						w_cx40:
>251d		02					.byte $02
>251e		63 40					.text 'c@'
>2520		0d 25					.word w_cx21
.2522						xt_cx40:
.2522		a1 02		lda ($02,x)		lda (pstack+2,x)
.2524		95 02		sta $02,x		sta pstack+2,x
.2526		74 03		stz $03,x		stz pstack+3,x
.2528		4c f9 12	jmp $12f9		jmp next
.252b						w_fill:
>252b		04					.byte $04
>252c		66 69 6c 6c				.text 'fill'
>2530		1d 25					.word w_cx40
.2532						xt_fill:
.2532							loop:
.2532		b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.2534		d0 04		bne $253a		bne do_write
.2536		b5 04		lda $04,x		lda pstack+4,x
.2538		f0 19		beq $2553		beq done                ; Yes: we're done...
.253a							do_write:
.253a		b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.253c		81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.253e		f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.2540		d0 02		bne $2544		bne deccount
.2542		f6 06		inc $06,x		inc pstack+6,x
.2544							deccount:
.2544		38		sec			sec                     ; Decrement the count
.2545		b5 03		lda $03,x		lda pstack+3,x
.2547		e9 01		sbc #$01		sbc #1
.2549		95 03		sta $03,x		sta pstack+3,x
.254b		b5 04		lda $04,x		lda pstack+4,x
.254d		e9 00		sbc #$00		sbc #0
.254f		95 04		sta $04,x		sta pstack+4,x
.2551		80 df		bra $2532		bra loop                ; And check again
.2553							done:
.2553		8a		txa			txa                     ; Clean up the parameter stack
.2554		69 06		adc #$06		adc #6
.2556		aa		tax			tax
.2557		4c f9 12	jmp $12f9		jmp next
.255a						w_x2bx21:
>255a		02					.byte $02
>255b		2b 21					.text '+!'
>255d		2b 25					.word w_fill
.255f						xt_x2bx21:
.255f		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the low byte
.2561		1a		inc a			inc a
.2562		81 02		sta ($02,x)		sta (pstack+2,x)
.2564		d0 11		bne $2577		bne done                ; If it does not roll over, we're done
.2566		b5 02		lda $02,x		lda pstack+2,x          ; Increment the pointer
.2568		1a		inc a			inc a
.2569		95 02		sta $02,x		sta pstack+2,x
.256b		d0 05		bne $2572		bne inc2
.256d		b5 03		lda $03,x		lda pstack+3,x
.256f		1a		inc a			inc a
.2570		95 03		sta $03,x		sta pstack+3,x
.2572							inc2:
.2572		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the high byte
.2574		1a		inc a			inc a
.2575		81 02		sta ($02,x)		sta (pstack+2,x)
.2577							done:
.2577		e8		inx			inx                     ; Clean up the stack
.2578		e8		inx			inx
.2579		4c f9 12	jmp $12f9		jmp next
.257c						w_move:
>257c		04					.byte $04
>257d		6d 6f 76 65				.text 'move'
>2581		5a 25					.word w_x2bx21
.2583						xt_move:
.2583		38		sec			sec                     ; Compare addr1 and addr2
.2584		b5 06		lda $06,x		lda pstack+6,x
.2586		f5 04		sbc $04,x		sbc pstack+4,x
.2588		85 32		sta $32			sta tmp
.258a		b5 07		lda $07,x		lda pstack+7,x
.258c		f5 05		sbc $05,x		sbc pstack+5,x
.258e		85 33		sta $33			sta tmp+1
.2590		30 24		bmi $25b6		bmi a1less
.2592		f0 72		beq $2606		beq chklo
.2594							a1greater:
.2594		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2596		d0 50		bne $25e8		bne docopy1
.2598		b5 03		lda $03,x		lda pstack+3,x
.259a		f0 72		beq $260e		beq done                ; Yes: we're done;
.259c		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.259e		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.25a0		f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.25a2		d0 02		bne $25a6		bne inc2
.25a4		f6 07		inc $07,x		inc pstack+7,x
.25a6							inc2:
.25a6		f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.25a8		d0 02		bne $25ac		bne dec_count
.25aa		f6 03		inc $03,x		inc pstack+3,x
.25ac							dec_count:
.25ac		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.25ae		d0 02		bne $25b2		bne l1
.25b0		d6 03		dec $03,x		dec pstack+3,x
.25b2							l1:
.25b2		d6 02		dec $02,x		dec pstack+2,x
.25b4		80 de		bra $2594		bra a1greater
.25b6							a1less:
.25b6		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.25b8		d0 02		bne $25bc		bne l2
.25ba		d6 05		dec $05,x		dec pstack+5,x
.25bc							l2:
.25bc		d6 04		dec $04,x		dec pstack+4,x
.25be		18		clc			clc                     ; addr2 := addr2 + u
.25bf		b5 04		lda $04,x		lda pstack+4,x
.25c1		75 02		adc $02,x		adc pstack+2,x
.25c3		95 04		sta $04,x		sta pstack+4,x
.25c5		b5 05		lda $05,x		lda pstack+5,x
.25c7		75 03		adc $03,x		adc pstack+3,x
.25c9		95 05		sta $05,x		sta pstack+5,x
.25cb		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.25cd		d0 02		bne $25d1		bne l3
.25cf		d6 07		dec $07,x		dec pstack+7,x
.25d1							l3:
.25d1		d6 06		dec $06,x		dec pstack+6,x
.25d3		18		clc			clc                     ; addr1 := addr1 + u
.25d4		b5 06		lda $06,x		lda pstack+6,x
.25d6		75 02		adc $02,x		adc pstack+2,x
.25d8		95 06		sta $06,x		sta pstack+6,x
.25da		b5 07		lda $07,x		lda pstack+7,x
.25dc		75 03		adc $03,x		adc pstack+3,x
.25de		95 07		sta $07,x		sta pstack+7,x
.25e0							loop2:
.25e0		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.25e2		d0 04		bne $25e8		bne docopy1
.25e4		b5 03		lda $03,x		lda pstack+3,x
.25e6		f0 26		beq $260e		beq done                ; Yes: we're done;
.25e8							docopy1:
.25e8		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.25ea		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.25ec		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.25ee		d0 02		bne $25f2		bne l4
.25f0		d6 07		dec $07,x		dec pstack+7,x
.25f2							l4:
.25f2		d6 06		dec $06,x		dec pstack+6,x
.25f4		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.25f6		d0 02		bne $25fa		bne l5
.25f8		d6 05		dec $05,x		dec pstack+5,x
.25fa							l5:
.25fa		d6 04		dec $04,x		dec pstack+4,x
.25fc		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.25fe		d0 02		bne $2602		bne l6
.2600		d6 03		dec $03,x		dec pstack+3,x
.2602							l6:
.2602		d6 02		dec $02,x		dec pstack+2,x
.2604		80 da		bra $25e0		bra loop2
.2606							chklo:
.2606		a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2608		30 ac		bmi $25b6		bmi a1less
.260a		f0 02		beq $260e		beq done                ; If equal, we don't need to move the data
.260c		80 86		bra $2594		bra a1greater
.260e							done:
.260e		8a		txa			txa
.260f		18		clc			clc
.2610		69 06		adc #$06		adc #6
.2612		aa		tax			tax
.2613		60		rts			rts
.2614						w_x2b:
>2614		01					.byte $01
>2615		2b					.text '+'
>2616		7c 25					.word w_move
.2618						xt_x2b:
.2618		18		clc			clc
.2619		b5 04		lda $04,x		lda pstack+4,x
.261b		75 02		adc $02,x		adc pstack+2,x
.261d		95 04		sta $04,x		sta pstack+4,x
.261f		b5 05		lda $05,x		lda pstack+5,x
.2621		75 03		adc $03,x		adc pstack+3,x
.2623		95 05		sta $05,x		sta pstack+5,x
.2625		e8		inx			inx
.2626		e8		inx			inx
.2627		4c f9 12	jmp $12f9		jmp next
.262a						w_x2d:
>262a		01					.byte $01
>262b		2d					.text '-'
>262c		14 26					.word w_x2b
.262e						xt_x2d:
.262e		38		sec			sec
.262f		b5 04		lda $04,x		lda pstack+4,x
.2631		f5 02		sbc $02,x		sbc pstack+2,x
.2633		95 04		sta $04,x		sta pstack+4,x
.2635		b5 05		lda $05,x		lda pstack+5,x
.2637		f5 03		sbc $03,x		sbc pstack+3,x
.2639		95 05		sta $05,x		sta pstack+5,x
.263b		e8		inx			inx
.263c		e8		inx			inx
.263d		4c f9 12	jmp $12f9		jmp next
.2640						w_x2a:
>2640		01					.byte $01
>2641		2a					.text '*'
>2642		2a 26					.word w_x2d
.2644						xt_x2a:
.2644		64 36		stz $36			stz sign
.2646		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2648		10 11		bpl $265b		bpl chk_n2
.264a		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.264c		85 36		sta $36			sta sign
.264e		38		sec			sec             ; Negate n1
.264f		a9 00		lda #$00		lda #0
.2651		f5 04		sbc $04,x		sbc pstack+4,x
.2653		95 04		sta $04,x		sta pstack+4,x
.2655		a9 00		lda #$00		lda #0
.2657		f5 05		sbc $05,x		sbc pstack+5,x
.2659		95 05		sta $05,x		sta pstack+5,x
.265b							chk_n2:
.265b		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.265d		10 13		bpl $2672		bpl init_tmp
.265f		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2661		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2663		85 36		sta $36			sta sign
.2665		38		sec			sec             ; Negate n2
.2666		a9 00		lda #$00		lda #0
.2668		f5 02		sbc $02,x		sbc pstack+2,x
.266a		95 02		sta $02,x		sta pstack+2,x
.266c		a9 00		lda #$00		lda #0
.266e		f5 03		sbc $03,x		sbc pstack+3,x
.2670		95 03		sta $03,x		sta pstack+3,x
.2672							init_tmp:
.2672		a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2674		85 34		sta $34			sta tmp+2
.2676		a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2678							l1:
.2678		56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.267a		76 02		ror $02,x		ror pstack+2,x
.267c		90 0b		bcc $2689		bcc l2          ; 0 or 1?
.267e		a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.267f		18		clc			clc
.2680		b5 04		lda $04,x		lda pstack+4,x
.2682		65 34		adc $34			adc tmp+2
.2684		85 34		sta $34			sta tmp+2
.2686		98		tya			tya
.2687		75 05		adc $05,x		adc pstack+5,x
.2689							l2:
.2689		6a		ror a			ror A
.268a		66 34		ror $34			ror tmp+2
.268c		66 33		ror $33			ror tmp+1
.268e		66 32		ror $32			ror tmp
.2690		3a		dec a			dec a
.2691		d0 e5		bne $2678		bne l1
.2693		85 35		sta $35			sta tmp+3
.2695		a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2697		95 04		sta $04,x		sta pstack+4,x
.2699		a5 33		lda $33			lda tmp+1
.269b		95 05		sta $05,x		sta pstack+5,x
.269d		e8		inx			inx             ; Clean up parameter stack
.269e		e8		inx			inx
.269f		a5 36		lda $36			lda sign        ; Check the sign
.26a1		10 0d		bpl $26b0		bpl done
.26a3		38		sec			sec             ; If negative, negate result
.26a4		a9 00		lda #$00		lda #0
.26a6		f5 02		sbc $02,x		sbc pstack+2,x
.26a8		95 02		sta $02,x		sta pstack+2,x
.26aa		a9 00		lda #$00		lda #0
.26ac		f5 03		sbc $03,x		sbc pstack+3,x
.26ae		95 03		sta $03,x		sta pstack+3,x
.26b0							done:
.26b0		4c f9 12	jmp $12f9		jmp next
.26b3						w_x2fmod:
>26b3		04					.byte $04
>26b4		2f 6d 6f 64				.text '/mod'
>26b8		40 26					.word w_x2a
.26ba						xt_x2fmod:
.26ba		64 36		stz $36			stz sign
.26bc		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.26be		10 11		bpl $26d1		bpl chk_n2
.26c0		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.26c2		85 36		sta $36			sta sign
.26c4		38		sec			sec             ; Negate n1
.26c5		a9 00		lda #$00		lda #0
.26c7		f5 04		sbc $04,x		sbc pstack+4,x
.26c9		95 04		sta $04,x		sta pstack+4,x
.26cb		a9 00		lda #$00		lda #0
.26cd		f5 05		sbc $05,x		sbc pstack+5,x
.26cf		95 05		sta $05,x		sta pstack+5,x
.26d1							chk_n2:
.26d1		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.26d3		10 13		bpl $26e8		bpl init_tmp
.26d5		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.26d7		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.26d9		85 36		sta $36			sta sign
.26db		38		sec			sec             ; Negate n2
.26dc		a9 00		lda #$00		lda #0
.26de		f5 02		sbc $02,x		sbc pstack+2,x
.26e0		95 02		sta $02,x		sta pstack+2,x
.26e2		a9 00		lda #$00		lda #0
.26e4		f5 03		sbc $03,x		sbc pstack+3,x
.26e6		95 03		sta $03,x		sta pstack+3,x
.26e8							init_tmp:
.26e8		64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.26ea		64 33		stz $33			stz tmp+1
.26ec		a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.26ee		85 35		sta $35			sta counter
.26f0							l1:
.26f0		16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.26f2		36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.26f4		26 32		rol $32			rol tmp
.26f6		26 33		rol $33			rol tmp+1
.26f8		a5 32		lda $32			lda tmp
.26fa		38		sec			sec             ; Trial subtraction
.26fb		f5 02		sbc $02,x		sbc pstack+2,x
.26fd		a8		tay			tay
.26fe		b5 33		lda $33,x		lda tmp+1,x
.2700		f5 03		sbc $03,x		sbc pstack+3,x
.2702		90 06		bcc $270a		bcc l2          ; Did subtraction succeed?
.2704		85 33		sta $33			sta tmp+1       ; If yes, save it
.2706		84 32		sty $32			sty tmp
.2708		f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.270a							l2:
.270a		c6 35		dec $35			dec counter
.270c		d0 e2		bne $26f0		bne l1
.270e		b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2710		95 03		sta $03,x		sta pstack+3,x
.2712		b5 04		lda $04,x		lda pstack+4,x
.2714		95 02		sta $02,x		sta pstack+2,x
.2716		a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2718		95 04		sta $04,x		sta pstack+4,x
.271a		a5 33		lda $33			lda tmp+1
.271c		95 05		sta $05,x		sta pstack+5,x
.271e		a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2720		10 0d		bpl $272f		bpl done
.2722		38		sec			sec             ; Negate the quotient
.2723		a9 00		lda #$00		lda #0
.2725		f5 02		sbc $02,x		sbc pstack+2,x
.2727		95 02		sta $02,x		sta pstack+2,x
.2729		a9 00		lda #$00		lda #0
.272b		f5 03		sbc $03,x		sbc pstack+3,x
.272d		95 03		sta $03,x		sta pstack+3,x
.272f							done:
.272f		4c f9 12	jmp $12f9		jmp next
.2732						w_1x2b:
>2732		02					.byte $02
>2733		31 2b					.text '1+'
>2735		b3 26					.word w_x2fmod
.2737						xt_1x2b:
.2737		f6 02		inc $02,x		inc pstack+2,x
.2739		d0 02		bne $273d		bne skip
.273b		f6 03		inc $03,x		inc pstack+3,x
.273d							skip:
.273d		4c f9 12	jmp $12f9		jmp next
.2740						w_2x2b:
>2740		02					.byte $02
>2741		32 2b					.text '2+'
>2743		32 27					.word w_1x2b
.2745						xt_2x2b:
.2745		18		clc			clc
.2746		b5 02		lda $02,x		lda pstack+2,x
.2748		69 02		adc #$02		adc #2
.274a		95 02		sta $02,x		sta pstack+2,x
.274c		b5 03		lda $03,x		lda pstack+3,x
.274e		69 00		adc #$00		adc #0
.2750		95 03		sta $03,x		sta pstack+3,x
.2752		4c f9 12	jmp $12f9		jmp next
.2755						w_1x2d:
>2755		02					.byte $02
>2756		31 2d					.text '1-'
>2758		40 27					.word w_2x2b
.275a						xt_1x2d:
.275a		b5 02		lda $02,x		lda pstack+2,x
.275c		d0 02		bne $2760		bne l1
.275e		d6 03		dec $03,x		dec pstack+3,x
.2760							l1:
.2760		d6 02		dec $02,x		dec pstack+2,x
.2762		4c f9 12	jmp $12f9		jmp next
.2765						w_2x2d:
>2765		02					.byte $02
>2766		32 2d					.text '2-'
>2768		55 27					.word w_1x2d
.276a						xt_2x2d:
.276a		38		sec			sec
.276b		b5 02		lda $02,x		lda pstack+2,x
.276d		e9 02		sbc #$02		sbc #2
.276f		95 02		sta $02,x		sta pstack+2,x
.2771		b5 03		lda $03,x		lda pstack+3,x
.2773		e9 00		sbc #$00		sbc #0
.2775		95 03		sta $03,x		sta pstack+3,x
.2777		4c f9 12	jmp $12f9		jmp next
.277a						w_and:
>277a		03					.byte $03
>277b		61 6e 64				.text 'and'
>277e		65 27					.word w_2x2d
.2780						xt_and:
.2780		b5 02		lda $02,x		lda pstack+2,x
.2782		35 04		and $04,x		and pstack+4,x
.2784		95 04		sta $04,x		sta pstack+4,x
.2786		b5 03		lda $03,x		lda pstack+3,x
.2788		35 05		and $05,x		and pstack+5,x
.278a		95 05		sta $05,x		sta pstack+5,x
.278c		e8		inx			inx
.278d		e8		inx			inx
.278e		4c f9 12	jmp $12f9		jmp next
.2791						w_or:
>2791		02					.byte $02
>2792		6f 72					.text 'or'
>2794		7a 27					.word w_and
.2796						xt_or:
.2796		b5 02		lda $02,x		lda pstack+2,x
.2798		15 04		ora $04,x		ora pstack+4,x
.279a		95 04		sta $04,x		sta pstack+4,x
.279c		b5 03		lda $03,x		lda pstack+3,x
.279e		15 05		ora $05,x		ora pstack+5,x
.27a0		95 05		sta $05,x		sta pstack+5,x
.27a2		e8		inx			inx
.27a3		e8		inx			inx
.27a4		4c f9 12	jmp $12f9		jmp next
.27a7						w_xor:
>27a7		03					.byte $03
>27a8		78 6f 72				.text 'xor'
>27ab		91 27					.word w_or
.27ad						xt_xor:
.27ad		b5 02		lda $02,x		lda pstack+2,x
.27af		55 04		eor $04,x		eor pstack+4,x
.27b1		95 04		sta $04,x		sta pstack+4,x
.27b3		b5 03		lda $03,x		lda pstack+3,x
.27b5		55 05		eor $05,x		eor pstack+5,x
.27b7		95 05		sta $05,x		sta pstack+5,x
.27b9		e8		inx			inx
.27ba		e8		inx			inx
.27bb		4c f9 12	jmp $12f9		jmp next
.27be						w_not:
>27be		03					.byte $03
>27bf		6e 6f 74				.text 'not'
>27c2		a7 27					.word w_xor
.27c4						xt_not:
.27c4		b5 02		lda $02,x		lda pstack+2,x
.27c6		49 ff		eor #$ff		eor #$ff
.27c8		95 02		sta $02,x		sta pstack+2,x
.27ca		b5 03		lda $03,x		lda pstack+3,x
.27cc		49 ff		eor #$ff		eor #$ff
.27ce		95 03		sta $03,x		sta pstack+3,x
.27d0		4c f9 12	jmp $12f9		jmp next
.27d3						w_0x3c:
>27d3		02					.byte $02
>27d4		30 3c					.text '0<'
>27d6		be 27					.word w_not
.27d8						xt_0x3c:
.27d8		b5 03		lda $03,x		lda pstack+3,x
.27da		30 07		bmi $27e3		bmi istrue
.27dc		74 02		stz $02,x		stz pstack+2,x
.27de		74 03		stz $03,x		stz pstack+3,x
.27e0		4c f9 12	jmp $12f9		jmp next
.27e3							istrue:
.27e3		a9 ff		lda #$ff		lda #$ff
.27e5		95 02		sta $02,x		sta pstack+2,x
.27e7		95 03		sta $03,x		sta pstack+3,x
.27e9		4c f9 12	jmp $12f9		jmp next
.27ec						w_0x3d:
>27ec		02					.byte $02
>27ed		30 3d					.text '0='
>27ef		d3 27					.word w_0x3c
.27f1						xt_0x3d:
.27f1		b5 02		lda $02,x		lda pstack+2,x
.27f3		d0 0d		bne $2802		bne isfalse
.27f5		b5 03		lda $03,x		lda pstack+3,x
.27f7		d0 09		bne $2802		bne isfalse
.27f9		a9 ff		lda #$ff		lda #$ff
.27fb		95 02		sta $02,x		sta pstack+2,x
.27fd		95 03		sta $03,x		sta pstack+3,x
.27ff		4c f9 12	jmp $12f9		jmp next
.2802							isfalse:
.2802		74 02		stz $02,x		stz pstack+2,x
.2804		74 03		stz $03,x		stz pstack+3,x
.2806		4c f9 12	jmp $12f9		jmp next
.2809						w_0x3e:
>2809		02					.byte $02
>280a		30 3e					.text '0>'
>280c		ec 27					.word w_0x3d
.280e						xt_0x3e:
.280e		b5 03		lda $03,x		lda pstack+3,x
.2810		30 0f		bmi $2821		bmi isfalse
.2812		d0 04		bne $2818		bne istrue
.2814		b5 02		lda $02,x		lda pstack+2,x
.2816		f0 09		beq $2821		beq isfalse
.2818							istrue:
.2818		a9 ff		lda #$ff		lda #$ff
.281a		95 02		sta $02,x		sta pstack+2,x
.281c		95 03		sta $03,x		sta pstack+3,x
.281e		4c f9 12	jmp $12f9		jmp next
.2821							isfalse:
.2821		74 02		stz $02,x		stz pstack+2,x
.2823		74 03		stz $03,x		stz pstack+3,x
.2825		4c f9 12	jmp $12f9		jmp next
.2828						w_x28variablex29:
>2828		0a					.byte $0A
>2829		28 76 61 72 69 61 62 6c			.text '(variable)'
>2831		65 29
>2833		09 28					.word w_0x3e
.2835						xt_x28variablex29:
.2835		18		clc			clc                     ; push(wp + 3)
.2836		a5 2a		lda $2a			lda wp
.2838		69 03		adc #$03		adc #3
.283a		95 00		sta $00,x		sta pstack,x
.283c		a5 2b		lda $2b			lda wp+1
.283e		69 00		adc #$00		adc #0
.2840		95 01		sta $01,x		sta pstack+1,x
.2842		ca		dex			dex
.2843		ca		dex			dex
.2844		4c f9 12	jmp $12f9		jmp next
.2847						w_x28constantx29:
>2847		0a					.byte $0A
>2848		28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2850		74 29
>2852		28 28					.word w_x28variablex29
.2854						xt_x28constantx29:
.2854		a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2856		b1 2a		lda ($2a),y		lda (wp),y
.2858		95 00		sta $00,x		sta pstack,x
.285a		c8		iny			iny
.285b		b1 2a		lda ($2a),y		lda (wp),y
.285d		95 01		sta $01,x		sta pstack+1,x
.285f		ca		dex			dex
.2860		ca		dex			dex
.2861		4c f9 12	jmp $12f9		jmp next
.2864						w_cells:
>2864		05					.byte $05
>2865		63 65 6c 6c 73				.text 'cells'
>286a							.fill 11
>2875		47 28					.word w_x28constantx29
.2877						xt_cells:
.2877		4c 54 28	jmp $2854		jmp xt_x28constantx29
>287a		02 00					.word 2
.287c						w_bl:
>287c		02					.byte $02
>287d		62 6c					.text 'bl'
>287f							.fill 14
>288d		64 28					.word w_cells
.288f						xt_bl:
.288f		4c 54 28	jmp $2854		jmp xt_x28constantx29
>2892		20 00					.word 32
.2894						w_x28userx29:
>2894		06					.byte $06
>2895		28 75 73 65 72 29			.text '(user)'
>289b		7c 28					.word w_bl
.289d						xt_x28userx29:
.289d		18		clc			clc                     ; push(up + memory(wp + 3))
.289e		a0 03		ldy #$03		ldy #3
.28a0		a5 2c		lda $2c			lda up
.28a2		71 2a		adc ($2a),y		adc (wp),y
.28a4		95 00		sta $00,x		sta pstack,x
.28a6		c8		iny			iny
.28a7		a5 2d		lda $2d			lda up+1
.28a9		71 2a		adc ($2a),y		adc (wp),y
.28ab		95 01		sta $01,x		sta pstack+1,x
.28ad		ca		dex			dex
.28ae		ca		dex			dex
.28af		4c f9 12	jmp $12f9		jmp next
.28b2						w_s0:
>28b2		02					.byte $02
>28b3		73 30					.text 's0'
>28b5							.fill 14
>28c3		94 28					.word w_x28userx29
.28c5						xt_s0:
.28c5		4c 9d 28	jmp $289d		jmp xt_x28userx29
>28c8		00 00					.word 0
.28ca						w_r0:
>28ca		02					.byte $02
>28cb		72 30					.text 'r0'
>28cd							.fill 14
>28db		b2 28					.word w_s0
.28dd						xt_r0:
.28dd		4c 9d 28	jmp $289d		jmp xt_x28userx29
>28e0		01 00					.word 1
.28e2						w_base:
>28e2		04					.byte $04
>28e3		62 61 73 65				.text 'base'
>28e7							.fill 12
>28f3		ca 28					.word w_r0
.28f5						xt_base:
.28f5		4c 9d 28	jmp $289d		jmp xt_x28userx29
>28f8		02 00					.word 2
.28fa						w_state:
>28fa		05					.byte $05
>28fb		73 74 61 74 65				.text 'state'
>2900							.fill 11
>290b		e2 28					.word w_base
.290d						xt_state:
.290d		4c 9d 28	jmp $289d		jmp xt_x28userx29
>2910		03 00					.word 3
.2912						w_context:
>2912		07					.byte $07
>2913		63 6f 6e 74 65 78 74			.text 'context'
>291a							.fill 9
>2923		fa 28					.word w_state
.2925						xt_context:
.2925		4c 9d 28	jmp $289d		jmp xt_x28userx29
>2928		04 00					.word 4
.292a						w_current:
>292a		07					.byte $07
>292b		63 75 72 72 65 6e 74			.text 'current'
>2932							.fill 9
>293b		12 29					.word w_context
.293d						xt_current:
.293d		4c 9d 28	jmp $289d		jmp xt_x28userx29
>2940		05 00					.word 5
.2942						w_dp:
>2942		02					.byte $02
>2943		64 70					.text 'dp'
>2945							.fill 14
>2953		2a 29					.word w_current
.2955						xt_dp:
.2955		4c 9d 28	jmp $289d		jmp xt_x28userx29
>2958		06 00					.word 6
.295a						w_x28branchx29:
>295a		08					.byte $08
>295b		28 62 72 61 6e 63 68 29			.text '(branch)'
>2963		42 29					.word w_dp
.2965						xt_x28branchx29:
.2965		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2967		b2 28		lda ($28)		lda (ip)
.2969		85 32		sta $32			sta tmp
.296b		b1 28		lda ($28),y		lda (ip),y
.296d		85 29		sta $29			sta ip+1
.296f		a5 32		lda $32			lda tmp
.2971		85 28		sta $28			sta ip
.2973		4c f9 12	jmp $12f9		jmp next
.2976						w_x28branch0x29:
>2976		09					.byte $09
>2977		28 62 72 61 6e 63 68 30			.text '(branch0)'
>297f		29
>2980		5a 29					.word w_x28branchx29
.2982						xt_x28branch0x29:
.2982		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2984		d0 04		bne $298a		bne nobranch        ; No: skip over the branch address
.2986		b5 03		lda $03,x		lda pstack+3,x
.2988		f0 0f		beq $2999		beq dobranch        ; Yes: take the branch
.298a							nobranch:
.298a		18		clc			clc                 ; No: skip over the branch address
.298b		a5 28		lda $28			lda ip
.298d		69 02		adc #$02		adc #2
.298f		85 28		sta $28			sta ip
.2991		a5 29		lda $29			lda ip+1
.2993		69 00		adc #$00		adc #0
.2995		85 29		sta $29			sta ip+1
.2997		80 0e		bra $29a7		bra done
.2999							dobranch:
.2999		a0 01		ldy #$01		ldy #1              ; ip := branch address
.299b		b2 28		lda ($28)		lda (ip)
.299d		85 32		sta $32			sta tmp
.299f		b1 28		lda ($28),y		lda (ip),y
.29a1		85 29		sta $29			sta ip+1
.29a3		a5 32		lda $32			lda tmp
.29a5		85 28		sta $28			sta ip
.29a7							done:
.29a7		e8		inx			inx                 ; clean up the parameter stack
.29a8		e8		inx			inx
.29a9		4c f9 12	jmp $12f9		jmp next
.29ac						w_x28dox29:
>29ac		04					.byte $04
>29ad		28 64 6f 29				.text '(do)'
>29b1		76 29					.word w_x28branch0x29
.29b3						xt_x28dox29:
.29b3		b5 03		lda $03,x		lda pstack+3,x
.29b5		48		pha			pha
.29b6		b5 02		lda $02,x		lda pstack+2,x
.29b8		48		pha			pha
.29b9		b5 05		lda $05,x		lda pstack+5,x
.29bb		48		pha			pha
.29bc		b5 04		lda $04,x		lda pstack+4,x
.29be		48		pha			pha
.29bf		18		clc			clc
.29c0		8a		txa			txa
.29c1		69 04		adc #$04		adc #4
.29c3		aa		tax			tax
.29c4		4c f9 12	jmp $12f9		jmp next
.29c7						w_x28loopx29:
>29c7		06					.byte $06
>29c8		28 6c 6f 6f 70 29			.text '(loop)'
>29ce		ac 29					.word w_x28dox29
.29d0						xt_x28loopx29:
>0101							limit       .word ?
>0103							current     .word ?
.29d0		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.29d2		ba		tsx			tsx
.29d3		fe 03 01	inc $0103,x		inc current         ; Increment current
.29d6		d0 03		bne $29db		bne chk_current
.29d8		fe 04 01	inc $0104,x		inc current+1
.29db							chk_current:
.29db		bd 03 01	lda $0103,x		lda current         ; current == limit?
.29de		dd 01 01	cmp $0101,x		cmp limit
.29e1		d0 1d		bne $2a00		bne dobranch
.29e3		bd 04 01	lda $0104,x		lda current+1
.29e6		dd 02 01	cmp $0102,x		cmp limit+1
.29e9		d0 15		bne $2a00		bne dobranch
.29eb							nobranch:
.29eb		8a		txa			txa                 ; Yes: Remove the context from the return stack
.29ec		18		clc			clc
.29ed		69 04		adc #$04		adc #4
.29ef		aa		tax			tax
.29f0		9a		txs			txs
.29f1		18		clc			clc                 ; And skip over the branch address
.29f2		a5 28		lda $28			lda ip
.29f4		69 02		adc #$02		adc #2
.29f6		85 28		sta $28			sta ip
.29f8		a5 29		lda $29			lda ip+1
.29fa		69 00		adc #$00		adc #0
.29fc		85 29		sta $29			sta ip+1
.29fe		80 0e		bra $2a0e		bra done
.2a00							dobranch:
.2a00		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2a02		b2 28		lda ($28)		lda (ip)
.2a04		85 32		sta $32			sta tmp
.2a06		b1 28		lda ($28),y		lda (ip),y
.2a08		85 29		sta $29			sta ip+1
.2a0a		a5 32		lda $32			lda tmp
.2a0c		85 28		sta $28			sta ip
.2a0e							done:
.2a0e		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2a10		4c f9 12	jmp $12f9		jmp next
.2a13						w_x28x2bloopx29:
>2a13		07					.byte $07
>2a14		28 2b 6c 6f 6f 70 29			.text '(+loop)'
>2a1b		c7 29					.word w_x28loopx29
.2a1d						xt_x28x2bloopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2a1d		b5 03		lda $03,x		lda pstack+3,x
.2a1f		85 33		sta $33			sta tmp+1
.2a21		b5 02		lda $02,x		lda pstack+2,x
.2a23		85 32		sta $32			sta tmp
.2a25		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2a27		ba		tsx			tsx
.2a28		18		clc			clc                 ; Increment current by n
.2a29		bd 03 01	lda $0103,x		lda current
.2a2c		65 32		adc $32			adc tmp
.2a2e		9d 03 01	sta $0103,x		sta current
.2a31		bd 04 01	lda $0104,x		lda current+1
.2a34		65 33		adc $33			adc tmp+1
.2a36		9d 04 01	sta $0104,x		sta current+1
.2a39		e6 34		inc $34			inc savex           ; Remove n from the stack
.2a3b		e6 34		inc $34			inc savex
.2a3d							chk_current:
.2a3d		bd 04 01	lda $0104,x		lda current+1       ; Is current < limit
.2a40		dd 02 01	cmp $0102,x		cmp limit+1
.2a43		d0 06		bne $2a4b		bne chk_ne
.2a45		bd 03 01	lda $0103,x		lda current
.2a48		dd 01 01	cmp $0101,x		cmp limit
.2a4b							chk_ne:
.2a4b		90 15		bcc $2a62		bcc dobranch        ; Yes: take the branch
.2a4d							nobranch:
.2a4d		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2a4e		18		clc			clc
.2a4f		69 04		adc #$04		adc #4
.2a51		aa		tax			tax
.2a52		9a		txs			txs
.2a53		18		clc			clc                 ; And skip over the branch address
.2a54		a5 28		lda $28			lda ip
.2a56		69 02		adc #$02		adc #2
.2a58		85 28		sta $28			sta ip
.2a5a		a5 29		lda $29			lda ip+1
.2a5c		69 00		adc #$00		adc #0
.2a5e		85 29		sta $29			sta ip+1
.2a60		80 0e		bra $2a70		bra done
.2a62							dobranch:
.2a62		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2a64		b2 28		lda ($28)		lda (ip)
.2a66		85 32		sta $32			sta tmp
.2a68		b1 28		lda ($28),y		lda (ip),y
.2a6a		85 29		sta $29			sta ip+1
.2a6c		a5 32		lda $32			lda tmp
.2a6e		85 28		sta $28			sta ip
.2a70							done:
.2a70		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2a72		4c f9 12	jmp $12f9		jmp next
.2a75						w_i:
>2a75		01					.byte $01
>2a76		69					.text 'i'
>2a77		13 2a					.word w_x28x2bloopx29
.2a79						xt_i:
>0101							limit       .word ?
>0103							current     .word ?
.2a79		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2a7b		ba		tsx			tsx
.2a7c		bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.2a7f		bd 03 01	lda $0103,x		lda current
.2a82		a6 34		ldx $34			ldx savex           ; Restore the PSP
.2a84		94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2a86		95 00		sta $00,x		sta pstack,x
.2a88		ca		dex			dex
.2a89		ca		dex			dex
.2a8a		4c f9 12	jmp $12f9		jmp next
.2a8d						w_execute:
>2a8d		07					.byte $07
>2a8e		65 78 65 63 75 74 65			.text 'execute'
>2a95		75 2a					.word w_i
.2a97						xt_execute:
.2a97		b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2a99		85 2a		sta $2a			sta wp
.2a9b		b5 03		lda $03,x		lda pstack+3,x
.2a9d		85 2b		sta $2b			sta wp+1
.2a9f		e8		inx			inx                 ; Clean up stack
.2aa0		e8		inx			inx
.2aa1		6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2aa4						w_x28vocabularyx29:
>2aa4		0c					.byte $0C
>2aa5		28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>2aad		61 72 79 29
>2ab1		8d 2a					.word w_execute
.2ab3						xt_x28vocabularyx29:
.2ab3		18		clc			clc                 ; tmp := up + user_context
.2ab4		a5 2c		lda $2c			lda up
.2ab6		69 08		adc #$08		adc #user_context
.2ab8		85 32		sta $32			sta tmp
.2aba		a5 2d		lda $2d			lda up+1
.2abc		69 00		adc #$00		adc #0
.2abe		85 33		sta $33			sta tmp+1
.2ac0		a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.2ac2		18		clc			clc
.2ac3		a5 2a		lda $2a			lda wp
.2ac5		69 03		adc #$03		adc #3
.2ac7		92 32		sta ($32)		sta (tmp)
.2ac9		a5 2b		lda $2b			lda wp+1
.2acb		69 00		adc #$00		adc #0
.2acd		91 32		sta ($32),y		sta (tmp),y
.2acf		4c f9 12	jmp $12f9		jmp next
.2ad2						w_forth:
>2ad2		05					.byte $05
>2ad3		66 6f 72 74 68				.text 'forth'
>2ad8		a4 2a					.word w_x28vocabularyx29
.2ada						xt_forth:
.2ada		4c b3 2a	jmp $2ab3		jmp xt_x28vocabularyx29
>2add		27 2e					.word <>w_cold
.2adf						w_x3fdup:
>2adf		04					.byte $04
>2ae0		3f 64 75 70				.text '?dup'
>2ae4							.fill 12
>2af0		d2 2a					.word w_forth
.2af2						xt_x3fdup:
.2af2		4c e6 12	jmp $12e6		jmp i_enter
>2af5		5f 24					.word xt_dup
>2af7		82 29					.word xt_x28branch0x29
>2af9		fd 2a					.word l_138
>2afb		5f 24					.word xt_dup
.2afd						l_138:
>2afd		de 12					.word i_exit
.2aff						w_x3c:
>2aff		01					.byte $01
>2b00		3c					.text '<'
>2b01							.fill 15
>2b10		df 2a					.word w_x3fdup
.2b12						xt_x3c:
.2b12		4c e6 12	jmp $12e6		jmp i_enter
>2b15		2e 26					.word xt_x2d
>2b17		d8 27					.word xt_0x3c
>2b19		de 12					.word i_exit
.2b1b						w_x3e:
>2b1b		01					.byte $01
>2b1c		3e					.text '>'
>2b1d							.fill 15
>2b2c		ff 2a					.word w_x3c
.2b2e						xt_x3e:
.2b2e		4c e6 12	jmp $12e6		jmp i_enter
>2b31		2e 26					.word xt_x2d
>2b33		0e 28					.word xt_0x3e
>2b35		de 12					.word i_exit
.2b37						w_x3d:
>2b37		01					.byte $01
>2b38		3d					.text '='
>2b39							.fill 15
>2b48		1b 2b					.word w_x3e
.2b4a						xt_x3d:
.2b4a		4c e6 12	jmp $12e6		jmp i_enter
>2b4d		2e 26					.word xt_x2d
>2b4f		f1 27					.word xt_0x3d
>2b51		de 12					.word i_exit
.2b53						w_x2f:
>2b53		01					.byte $01
>2b54		2f					.text '/'
>2b55							.fill 15
>2b64		37 2b					.word w_x3d
.2b66						xt_x2f:
.2b66		4c e6 12	jmp $12e6		jmp i_enter
>2b69		ba 26					.word xt_x2fmod
>2b6b		73 24					.word xt_swap
>2b6d		54 24					.word xt_drop
>2b6f		de 12					.word i_exit
.2b71						w_mod:
>2b71		03					.byte $03
>2b72		6d 6f 64				.text 'mod'
>2b75							.fill 13
>2b82		53 2b					.word w_x2f
.2b84						xt_mod:
.2b84		4c e6 12	jmp $12e6		jmp i_enter
>2b87		ba 26					.word xt_x2fmod
>2b89		54 24					.word xt_drop
>2b8b		de 12					.word i_exit
.2b8d						w_abs:
>2b8d		03					.byte $03
>2b8e		61 62 73				.text 'abs'
>2b91							.fill 13
>2b9e		71 2b					.word w_mod
.2ba0						xt_abs:
.2ba0		4c e6 12	jmp $12e6		jmp i_enter
>2ba3		5f 24					.word xt_dup
>2ba5		d8 27					.word xt_0x3c
>2ba7		82 29					.word xt_x28branch0x29
>2ba9		b1 2b					.word l_177
>2bab		d3 13					.word xt_0
>2bad		73 24					.word xt_swap
>2baf		2e 26					.word xt_x2d
.2bb1						l_177:
>2bb1		de 12					.word i_exit
.2bb3						w_max:
>2bb3		03					.byte $03
>2bb4		6d 61 78				.text 'max'
>2bb7							.fill 13
>2bc4		8d 2b					.word w_abs
.2bc6						xt_max:
.2bc6		4c e6 12	jmp $12e6		jmp i_enter
>2bc9		8d 24					.word xt_over
>2bcb		8d 24					.word xt_over
>2bcd		12 2b					.word xt_x3c
>2bcf		82 29					.word xt_x28branch0x29
>2bd1		db 2b					.word l_178
>2bd3		8d 24					.word xt_over
>2bd5		54 24					.word xt_drop
>2bd7		65 29					.word xt_x28branchx29
>2bd9		dd 2b					.word l_179
.2bdb						l_178:
>2bdb		54 24					.word xt_drop
.2bdd						l_179:
>2bdd		de 12					.word i_exit
.2bdf						w_min:
>2bdf		03					.byte $03
>2be0		6d 69 6e				.text 'min'
>2be3							.fill 13
>2bf0		b3 2b					.word w_max
.2bf2						xt_min:
.2bf2		4c e6 12	jmp $12e6		jmp i_enter
>2bf5		8d 24					.word xt_over
>2bf7		8d 24					.word xt_over
>2bf9		2e 2b					.word xt_x3e
>2bfb		82 29					.word xt_x28branch0x29
>2bfd		07 2c					.word l_186
>2bff		8d 24					.word xt_over
>2c01		54 24					.word xt_drop
>2c03		65 29					.word xt_x28branchx29
>2c05		09 2c					.word l_187
.2c07						l_186:
>2c07		54 24					.word xt_drop
.2c09						l_187:
>2c09		de 12					.word i_exit
.2c0b						w_rot:
>2c0b		03					.byte $03
>2c0c		72 6f 74				.text 'rot'
>2c0f							.fill 13
>2c1c		df 2b					.word w_min
.2c1e						xt_rot:
.2c1e		4c e6 12	jmp $12e6		jmp i_enter
>2c21		9f 24					.word xt_x3er
>2c23		73 24					.word xt_swap
>2c25		af 24					.word xt_rx3e
>2c27		73 24					.word xt_swap
>2c29		de 12					.word i_exit
.2c2b						w_2dup:
>2c2b		04					.byte $04
>2c2c		32 64 75 70				.text '2dup'
>2c30							.fill 12
>2c3c		0b 2c					.word w_rot
.2c3e						xt_2dup:
.2c3e		4c e6 12	jmp $12e6		jmp i_enter
>2c41		8d 24					.word xt_over
>2c43		8d 24					.word xt_over
>2c45		de 12					.word i_exit
.2c47						w_2drop:
>2c47		05					.byte $05
>2c48		32 64 72 6f 70				.text '2drop'
>2c4d							.fill 11
>2c58		2b 2c					.word w_2dup
.2c5a						xt_2drop:
.2c5a		4c e6 12	jmp $12e6		jmp i_enter
>2c5d		54 24					.word xt_drop
>2c5f		54 24					.word xt_drop
>2c61		de 12					.word i_exit
.2c63						w_lfa:
>2c63		03					.byte $03
>2c64		6c 66 61				.text 'lfa'
>2c67							.fill 13
>2c74		47 2c					.word w_2drop
.2c76						xt_lfa:
.2c76		4c e6 12	jmp $12e6		jmp i_enter
>2c79		26 14					.word xt_x28literalx29
>2c7b		05 00					.word 5
>2c7d		2e 26					.word xt_x2d
>2c7f		de 12					.word i_exit
.2c81						w_cfa:
>2c81		03					.byte $03
>2c82		63 66 61				.text 'cfa'
>2c85							.fill 13
>2c92		63 2c					.word w_lfa
.2c94						xt_cfa:
.2c94		4c e6 12	jmp $12e6		jmp i_enter
>2c97		26 14					.word xt_x28literalx29
>2c99		03 00					.word 3
>2c9b		2e 26					.word xt_x2d
>2c9d		de 12					.word i_exit
.2c9f						w_nfa:
>2c9f		03					.byte $03
>2ca0		6e 66 61				.text 'nfa'
>2ca3							.fill 13
>2cb0		81 2c					.word w_cfa
.2cb2						xt_nfa:
.2cb2		4c e6 12	jmp $12e6		jmp i_enter
>2cb5		26 14					.word xt_x28literalx29
>2cb7		16 00					.word 22
>2cb9		2e 26					.word xt_x2d
>2cbb		de 12					.word i_exit
.2cbd						w_pfa:
>2cbd		03					.byte $03
>2cbe		70 66 61				.text 'pfa'
>2cc1							.fill 13
>2cce		9f 2c					.word w_nfa
.2cd0						xt_pfa:
.2cd0		4c e6 12	jmp $12e6		jmp i_enter
>2cd3		26 14					.word xt_x28literalx29
>2cd5		16 00					.word 22
>2cd7		18 26					.word xt_x2b
>2cd9		de 12					.word i_exit
.2cdb						w_here:
>2cdb		04					.byte $04
>2cdc		68 65 72 65				.text 'here'
>2ce0							.fill 12
>2cec		bd 2c					.word w_pfa
.2cee						xt_here:
.2cee		4c e6 12	jmp $12e6		jmp i_enter
>2cf1		55 29					.word xt_dp
>2cf3		f8 24					.word xt_x40
>2cf5		de 12					.word i_exit
.2cf7						w_allot:
>2cf7		05					.byte $05
>2cf8		61 6c 6c 6f 74				.text 'allot'
>2cfd							.fill 11
>2d08		db 2c					.word w_here
.2d0a						xt_allot:
.2d0a		4c e6 12	jmp $12e6		jmp i_enter
>2d0d		55 29					.word xt_dp
>2d0f		5f 25					.word xt_x2bx21
>2d11		de 12					.word i_exit
.2d13						w_x2c:
>2d13		01					.byte $01
>2d14		2c					.text ','
>2d15							.fill 15
>2d24		f7 2c					.word w_allot
.2d26						xt_x2c:
.2d26		4c e6 12	jmp $12e6		jmp i_enter
>2d29		ee 2c					.word xt_here
>2d2b		db 24					.word xt_x21
>2d2d		ef 13					.word xt_2
>2d2f		0a 2d					.word xt_allot
>2d31		de 12					.word i_exit
.2d33						w_cx2c:
>2d33		02					.byte $02
>2d34		63 2c					.text 'c,'
>2d36							.fill 14
>2d44		13 2d					.word w_x2c
.2d46						xt_cx2c:
.2d46		4c e6 12	jmp $12e6		jmp i_enter
>2d49		ee 2c					.word xt_here
>2d4b		12 25					.word xt_cx21
>2d4d		e0 13					.word xt_1
>2d4f		0a 2d					.word xt_allot
>2d51		de 12					.word i_exit
.2d53						w_definitions:
>2d53		0b					.byte $0B
>2d54		64 65 66 69 6e 69 74 69			.text 'definitions'
>2d5c		6f 6e 73
>2d5f							.fill 5
>2d64		33 2d					.word w_cx2c
.2d66						xt_definitions:
.2d66		4c e6 12	jmp $12e6		jmp i_enter
>2d69		25 29					.word xt_context
>2d6b		f8 24					.word xt_x40
>2d6d		3d 29					.word xt_current
>2d6f		db 24					.word xt_x21
>2d71		de 12					.word i_exit
.2d73						w_latest:
>2d73		06					.byte $06
>2d74		6c 61 74 65 73 74			.text 'latest'
>2d7a							.fill 10
>2d84		53 2d					.word w_definitions
.2d86						xt_latest:
.2d86		4c e6 12	jmp $12e6		jmp i_enter
>2d89		3d 29					.word xt_current
>2d8b		f8 24					.word xt_x40
>2d8d		f8 24					.word xt_x40
>2d8f		de 12					.word i_exit
.2d91						w_count:
>2d91		05					.byte $05
>2d92		63 6f 75 6e 74				.text 'count'
>2d97							.fill 11
>2da2		73 2d					.word w_latest
.2da4						xt_count:
.2da4		4c e6 12	jmp $12e6		jmp i_enter
>2da7		5f 24					.word xt_dup
>2da9		37 27					.word xt_1x2b
>2dab		73 24					.word xt_swap
>2dad		22 25					.word xt_cx40
>2daf		de 12					.word i_exit
.2db1						w_type:
>2db1		04					.byte $04
>2db2		74 79 70 65				.text 'type'
>2db6							.fill 12
>2dc2		91 2d					.word w_count
.2dc4						xt_type:
.2dc4		4c e6 12	jmp $12e6		jmp i_enter
>2dc7		f2 2a					.word xt_x3fdup
>2dc9		82 29					.word xt_x28branch0x29
>2dcb		e3 2d					.word l_200
>2dcd		8d 24					.word xt_over
>2dcf		18 26					.word xt_x2b
>2dd1		73 24					.word xt_swap
>2dd3		b3 29					.word xt_x28dox29
.2dd5						l_201:
>2dd5		79 2a					.word xt_i
>2dd7		22 25					.word xt_cx40
>2dd9		b4 13					.word xt_emit
>2ddb		d0 29					.word xt_x28loopx29
>2ddd		d5 2d					.word l_201
.2ddf						l_202:
>2ddf		65 29					.word xt_x28branchx29
>2de1		e5 2d					.word l_203
.2de3						l_200:
>2de3		54 24					.word xt_drop
.2de5						l_203:
>2de5		de 12					.word i_exit
.2de7						w_space:
>2de7		05					.byte $05
>2de8		73 70 61 63 65				.text 'space'
>2ded							.fill 11
>2df8		b1 2d					.word w_type
.2dfa						xt_space:
.2dfa		4c e6 12	jmp $12e6		jmp i_enter
>2dfd		26 14					.word xt_x28literalx29
>2dff		20 00					.word 32
>2e01		b4 13					.word xt_emit
>2e03		de 12					.word i_exit
.2e05						w_spaces:
>2e05		06					.byte $06
>2e06		73 70 61 63 65 73			.text 'spaces'
>2e0c							.fill 10
>2e16		e7 2d					.word w_space
.2e18						xt_spaces:
.2e18		4c e6 12	jmp $12e6		jmp i_enter
>2e1b		d3 13					.word xt_0
>2e1d		b3 29					.word xt_x28dox29
.2e1f						l_204:
>2e1f		fa 2d					.word xt_space
>2e21		d0 29					.word xt_x28loopx29
>2e23		1f 2e					.word l_204
.2e25						l_205:
>2e25		de 12					.word i_exit
.2e27						w_cold:
>2e27		04					.byte $04
>2e28		63 6f 6c 64				.text 'cold'
>2e2c							.fill 12
>2e38		05 2e					.word w_spaces
.2e3a						xt_cold:
.2e3a		4c e6 12	jmp $12e6		jmp i_enter
>2e3d		26 14					.word xt_x28literalx29
>2e3f		45 2e					.word l_206
>2e41		65 29					.word xt_x28branchx29
>2e43		64 2e					.word l_207
.2e45						l_206:
>2e45		1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>2e4d		20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>2e5d		30 2e 30 30 2e 30 30
.2e64						l_207:
>2e64		a4 2d					.word xt_count
>2e66		c4 2d					.word xt_type
>2e68		c5 13					.word xt_cr
>2e6a		26 14					.word xt_x28literalx29
>2e6c		05 00					.word 5
>2e6e		18 2e					.word xt_spaces
>2e70		26 14					.word xt_x28literalx29
>2e72		0a 00					.word 10
>2e74		d3 13					.word xt_0
>2e76		b3 29					.word xt_x28dox29
.2e78						l_208:
>2e78		26 14					.word xt_x28literalx29
>2e7a		80 2e					.word l_210
>2e7c		65 29					.word xt_x28branchx29
>2e7e		92 2e					.word l_211
.2e80						l_210:
>2e80		11 48 65 6c 6c 6f 2c 20			.ptext "Hello, MetaForth!"
>2e88		4d 65 74 61 46 6f 72 74 68 21
.2e92						l_211:
>2e92		a4 2d					.word xt_count
>2e94		c4 2d					.word xt_type
>2e96		c5 13					.word xt_cr
>2e98		d0 29					.word xt_x28loopx29
>2e9a		78 2e					.word l_208
.2e9c						l_209:
>2e9c		6e 14					.word xt_unittest
>2e9e		26 14					.word xt_x28literalx29
>2ea0		a6 2e					.word l_212
>2ea2		65 29					.word xt_x28branchx29
>2ea4		bd 2e					.word l_213
.2ea6						l_212:
>2ea6		16 41 6c 6c 20 75 6e 69			.ptext "All unit tests PASSED!"
>2eae		74 20 74 65 73 74 73 20 50 41 53 53 45 44 21
.2ebd						l_213:
>2ebd		a4 2d					.word xt_count
>2ebf		c4 2d					.word xt_type
>2ec1		c5 13					.word xt_cr
>2ec3		de 12					.word i_exit

;******  Processing file: mf_post_65c02.asm

.010000	0000					endcode:

;******  Return to file: forth.asm


;******  End of listing
