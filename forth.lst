
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Wed Jan 04 21:49:33 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000						pstack = $0000          ; Location of the "bottom" of the parameter stack
=$1000						USERAREA = $1000        ; Area for user variables
=9						CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa		cc 0a				vnmi:       .word <>h_nmi
>fffc		00 b0				vreset:     .word <>boot
>fffe		cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000						MMU_MEM_CTRL = $0000
=$0001						MMU_IO_CTRL = $0001
=$00						MMU_IO_PAGE_0 = $00
=$01						MMU_IO_PAGE_1 = $01
=$02						MMU_IO_PAGE_TEXT = $02
=$03						MMU_IO_PAGE_COLOR = $03
=$d000						VKY_MST_CTRL_0 = $d000
=$01						VKY_MST_TEXT = $01
=$02						VKY_MST_OVLY = $02
=$04						VKY_MST_GRAPHICS = $04
=$08						VKY_MST_BITMAP = $08
=$10						VKY_MST_TILE = $10
=$20						VKY_MST_SPRITE = $20
=$40						VKY_MST_GAMMA = $40
=$d001						VKY_MST_CTRL_1 = $d001
=$01						VKY_MST_RES_400 = $01
=$02						VKY_MST_DBL_X = $02
=$04						VKY_MST_DBL_Y = $04
=$08						VKY_MST_SLEEP = $08
=$10						VKY_MST_OVLY_TRANS = $10
=$d004						VKY_BRD_CTRL = $d004
=$d005						VKY_BRD_BLUE = $d005
=$d006						VKY_BRD_GREEN = $d006
=$d007						VKY_BRD_RED = $d007
=$d008						VKY_BRD_SIZE_X = $d008
=$d009						VKY_BRD_SIZE_Y = $d009
=$d010						VKY_CURS_CTRL = $d010
=$01						VKY_CURS_ENABLE = $01
=$08						VKY_CURS_FLASH_1S = $08
=$0a						VKY_CURS_FLASH_0_5S = $0a
=$0c						VKY_CURS_FLASH_0_25S = $0c
=$0d						VKY_CURS_FLASH_0_125S = $0d
=$d012						VKY_CURS_CHAR = $d012
=$d014						VKY_CURS_X = $d014
=$d016						VKY_CURS_Y = $d016
=$c000						VKY_TEXT_MATRIX = $c000
=$d800						VKY_TEXT_FG_LUT = $d800
=$d840						VKY_TEXT_BG_LUT = $d840
=$c000						VKY_TEXT_FONT = $c000
=$d66c						INT_MASK_0 = $D66C
=$d660						INT_PEND_0 = $D660
=$d66d						INT_MASK_1 = $D66D
=$d661						INT_PEND_1 = $D661
=$04						INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8						CHAR_BS = 8                         ; Backspace
=12						CHAR_FF = 12                        ; Form feed character
=13						CHAR_NL = 13                        ; Newline character
>0020						shell_start .word ?                 ; Address for the recognized shell program
>0022						cur_line    .word ?                 ; Address of the current line on the text screen
>0024						src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026						dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200						curs_color  .byte ?                 ; Current color for printing
>0201						curs_x      .byte ?                 ; Current column for the text cursor
>0202						curs_y      .byte ?                 ; Current row for the text cursor
>0203						old_y       .byte ?                 ; Previous cursor row
>0204						curs_width  .byte ?                 ; Width of the screen in text columns
>0205						curs_height .byte ?                 ; Height of the screen in text columns
.b000		4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003		4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006		4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009		4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c		4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f		4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012		4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015		4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018		4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800		a9 e9		lda #$e9	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802		a0 15		ldy #$15	            ldy #>start
.0804		20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807		4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a						isetshell:
.080a		84 21		sty $21		            sty shell_start+1
.080c		85 20		sta $20		            sta shell_start
.080e		60		rts		            rts
.080f						iwarm:
.080f		78		sei		            sei                     ; Disable IRQs
.0810		d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811		a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813		9a		txs		            txs
.0814		a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816		85 01		sta $01		            sta MMU_IO_CTRL
.0818		20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b		20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e		20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821		6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824						inittext:
.0824		a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826		8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829		9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c		a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e		8d 04 02	sta $0204	            sta curs_width
.0831		a9 3c		lda #$3c	            lda #60
.0833		8d 05 02	sta $0205	            sta curs_height
.0836		a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838		8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b		a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d		8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840		a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842		8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845		a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847		8d 00 02	sta $0200	            sta curs_color
.084a		a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c		8d 03 02	sta $0203	            sta old_y
.084f		20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852		20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855		20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858		60		rts		            rts
.0859						initint:
.0859		a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b		8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e		a9 ff		lda #$ff	            lda #$ff
.0860		8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863		8d 60 d6	sta $d660	            sta INT_PEND_0
.0866		8d 61 d6	sta $d661	            sta INT_PEND_1
.0869		58		cli		            cli
.086a		60		rts		            rts
=$7f						CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b						initfont:
.086b		48		pha		            pha
.086c		da		phx		            phx
.086d		5a		phy		            phy
.086e		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870		48		pha		            pha
.0871		a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873		85 01		sta $01		            sta MMU_IO_CTRL
.0875		a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877		85 24		sta $24		            sta src_ptr
.0879		a9 0a		lda #$0a	            lda #>bios_font
.087b		85 25		sta $25		            sta src_ptr+1
.087d		a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f		85 26		sta $26		            sta dst_ptr
.0881		a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883		85 27		sta $27		            sta dst_ptr+1
.0885		a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887		a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889		b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b		91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d		c8		iny		            iny                     ; Move to the next byte
.088e		d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890		e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892		e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894		ca		dex		            dex                     ; Count down the pages moved
.0895		d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897		68		pla		            pla
.0898		85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a		7a		ply		            ply
.089b		fa		plx		            plx
.089c		68		pla		            pla
.089d		60		rts		            rts
=$f4						DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e						initlut:
.089e		48		pha		            pha
.089f		5a		phy		            phy
.08a0		a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2		48		pha		            pha
.08a3		a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5		85 01		sta $01		            sta MMU_IO_CTRL
.08a7		a0 00		ldy #$00	            ldy #0
.08a9		b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac		99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af		99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2		c8		iny		            iny
.08b3		c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5		d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7		68		pla		            pla
.08b8		85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba		7a		ply		            ply
.08bb		68		pla		            pla
.08bc		60		rts		            rts
>08bd		00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1		00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5		00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9		00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd		80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1		80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5		80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9		8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd		80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1		00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5		00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9		00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed		ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1		ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5		ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9		ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd						consclr:
.08fd		48		pha		            pha
.08fe		da		phx		            phx
.08ff		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901		85 22		sta $22		            sta cur_line
.0903		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905		85 23		sta $23		            sta cur_line+1
.0907		a0 00		ldy #$00	            ldy #0
.0909		20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c		c8		iny		            iny                     ; Move to the next line
.090d		cc 05 02	cpy $0205	            cpy curs_height
.0910		f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912		18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913		a5 22		lda $22		            lda cur_line
.0915		6d 04 02	adc $0204	            adc curs_width
.0918		85 22		sta $22		            sta cur_line
.091a		a5 23		lda $23		            lda cur_line+1
.091c		69 00		adc #$00	            adc #0
.091e		85 23		sta $23		            sta cur_line+1
.0920		80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922		9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925		9c 02 02	stz $0202	            stz curs_y
.0928		20 2e 09	jsr $092e	            jsr cursset
.092b		fa		plx		            plx
.092c		68		pla		            pla
.092d		60		rts		            rts
.092e						cursset:
.092e		48		pha		            pha
.092f		5a		phy		            phy
.0930		ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933		cd 04 02	cmp $0204	            cmp curs_width
.0936		90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938		9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b		ee 02 02	inc $0202	            inc curs_y
.093e						chk_row:
.093e		ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941		cd 05 02	cmp $0205	            cmp curs_height
.0944		90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946		ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949		3a		dec a		            dec a
.094a		8d 02 02	sta $0202	            sta curs_y
.094d		20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950		ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953		8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956		9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959		ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c		8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f		9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962		ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965		cd 02 02	cmp $0202	            cmp curs_y
.0968		f0 21		beq $098b	            beq done                ; Yes: we are done
.096a		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c		85 22		sta $22		            sta cur_line
.096e		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970		85 23		sta $23		            sta cur_line+1
.0972		ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975		8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978		f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a		18		clc		loop:       clc                     ; Move cur_line to the next line
.097b		a5 22		lda $22		            lda cur_line
.097d		6d 04 02	adc $0204	            adc curs_width
.0980		85 22		sta $22		            sta cur_line
.0982		a5 23		lda $23		            lda cur_line+1
.0984		69 00		adc #$00	            adc #0
.0986		85 23		sta $23		            sta cur_line+1
.0988		88		dey		            dey                     ; Decrement line counter
.0989		d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b		7a		ply		done:       ply
.098c		68		pla		            pla
.098d		60		rts		            rts
.098e						consscroll:
.098e		48		pha		            pha
.098f		da		phx		            phx
.0990		a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992		48		pha		            pha
.0993		a5 22		lda $22		            lda cur_line
.0995		48		pha		            pha
.0996		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998		48		pha		            pha
.0999		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b		85 26		sta $26		            sta dst_ptr
.099d		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f		85 27		sta $27		            sta dst_ptr+1
.09a1		18		clc		            clc                     ; src_ptr is the second line
.09a2		a5 26		lda $26		            lda dst_ptr
.09a4		6d 04 02	adc $0204	            adc curs_width
.09a7		85 24		sta $24		            sta src_ptr
.09a9		a5 27		lda $27		            lda dst_ptr+1
.09ab		69 00		adc #$00	            adc #0
.09ad		85 25		sta $25		            sta src_ptr+1
.09af		a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1		a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3		85 01		sta $01		            sta MMU_IO_CTRL
.09b5		a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7		b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9		91 26		sta ($26),y	            sta (dst_ptr),y
.09bb		c8		iny		            iny
.09bc		cc 04 02	cpy $0204	            cpy curs_width
.09bf		d0 f6		bne $09b7	            bne loop1
.09c1		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3		85 01		sta $01		            sta MMU_IO_CTRL
.09c5		a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7		b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9		91 26		sta ($26),y	            sta (dst_ptr),y
.09cb		c8		iny		            iny
.09cc		cc 04 02	cpy $0204	            cpy curs_width
.09cf		d0 f6		bne $09c7	            bne loop2
.09d1		a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3		85 26		sta $26		            sta dst_ptr
.09d5		a5 25		lda $25		            lda src_ptr+1
.09d7		85 27		sta $27		            sta dst_ptr+1
.09d9		18		clc		            clc                     ; Move src_ptr to the next line
.09da		a5 24		lda $24		            lda src_ptr
.09dc		6d 04 02	adc $0204	            adc curs_width
.09df		85 24		sta $24		            sta src_ptr
.09e1		a5 25		lda $25		            lda src_ptr+1
.09e3		69 00		adc #$00	            adc #0
.09e5		85 25		sta $25		            sta src_ptr+1
.09e7		e8		inx		            inx                     ; Move src line number to the next row
.09e8		ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb		d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed		a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef		85 22		sta $22		            sta cur_line
.09f1		a5 27		lda $27		            lda dst_ptr+1
.09f3		85 22		sta $22		            sta cur_line
.09f5		20 04 0a	jsr $0a04	            jsr clrline
.09f8		68		pla		            pla                     ; Restore the original I/O page
.09f9		85 01		sta $01		            sta MMU_IO_CTRL
.09fb		68		pla		            pla                     ; Restore the current line
.09fc		85 22		sta $22		            sta cur_line
.09fe		68		pla		            pla
.09ff		85 23		sta $23		            sta cur_line+1
.0a01		fa		plx		            plx
.0a02		68		pla		            pla
.0a03		60		rts		            rts
.0a04						clrline:
.0a04		48		pha		            pha
.0a05		5a		phy		            phy
.0a06		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08		48		pha		            pha
.0a09		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b		85 01		sta $01		            sta MMU_IO_CTRL
.0a0d		a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f		a9 20		lda #$20	            lda #' '
.0a11		91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13		c8		iny		            iny
.0a14		cc 04 02	cpy $0204	            cpy curs_width
.0a17		d0 f8		bne $0a11	            bne loop1
.0a19		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b		85 01		sta $01		            sta MMU_IO_CTRL
.0a1d		a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f		ad 00 02	lda $0200	            lda curs_color
.0a22		91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24		c8		iny		            iny
.0a25		cc 04 02	cpy $0204	            cpy curs_width
.0a28		d0 f8		bne $0a22	            bne loop2
.0a2a		68		pla		            pla                     ; Restore the original I/O page
.0a2b		85 01		sta $01		            sta MMU_IO_CTRL
.0a2d		7a		ply		            ply
.0a2e		68		pla		            pla
.0a2f		60		rts		            rts
.0a30						iconout:
.0a30		5a		phy		            phy
.0a31		c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33		d0 0b		bne $0a40	            bne not_cr
.0a35		9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38		ee 02 02	inc $0202	            inc curs_y
.0a3b		20 2e 09	jsr $092e	            jsr cursset
.0a3e		80 44		bra $0a84	            bra done
.0a40		c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42		d0 05		bne $0a49	            bne not_ff
.0a44		20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47		80 3b		bra $0a84	            bra done
.0a49		c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b		d0 15		bne $0a62	            bne not_bs
.0a4d		ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50		f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52		3a		dec a		            dec a                   ; No: move it back one
.0a53		8d 01 02	sta $0201	            sta curs_x
.0a56		20 2e 09	jsr $092e	            jsr cursset
.0a59						bs_leftmost:
.0a59		a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60		80 22		bra $0a84	            bra done
.0a62		85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66		48		pha		            pha
.0a67		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69		85 01		sta $01		            sta MMU_IO_CTRL
.0a6b		a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74		85 01		sta $01		            sta MMU_IO_CTRL
.0a76		ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79		91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b		68		pla		            pla                     ; Restore the I/O page
.0a7c		85 01		sta $01		            sta MMU_IO_CTRL
.0a7e		ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81		20 2e 09	jsr $092e	            jsr cursset
.0a84		7a		ply		done:       ply
.0a85		60		rts		            rts
.0a86						iprintah:
.0a86		da		phx		            phx
.0a87		48		pha		            pha
.0a88		4a		lsr a		            lsr a
.0a89		4a		lsr a		            lsr a
.0a8a		4a		lsr a		            lsr a
.0a8b		4a		lsr a		            lsr a
.0a8c		29 0f		and #$0f	            and #$0f
.0a8e		aa		tax		            tax                     ; Convert it to an index
.0a8f		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95		68		pla		            pla
.0a96		29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98		aa		tax		            tax                     ; Convert it to an index
.0a99		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f		fa		plx		            plx
.0aa0		60		rts		            rts
.0aa1						iprintyah:
.0aa1		48		pha		            pha
.0aa2		98		tya		            tya
.0aa3		20 12 b0	jsr $b012	            jsr printah
.0aa6		68		pla		            pla
.0aa7		20 12 b0	jsr $b012	            jsr printah
.0aaa		60		rts		            rts
>0aab		30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3		38 39 41 42 43 44 45 46
.0abb						iprints:
.0abb		48		pha		            pha
.0abc		5a		phy		            phy
.0abd		a0 00		ldy #$00	            ldy #0
.0abf		b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1		f0 06		beq $0ac9	            beq done
.0ac3		20 09 b0	jsr $b009	            jsr conout
.0ac6		c8		iny		            iny
.0ac7		d0 f6		bne $0abf	            bne loop
.0ac9		7a		ply		done:       ply
.0aca		68		pla		            pla
.0acb		60		rts		            rts
.0acc						h_nmi:
.0acc		40		rti		            rti                     ; Just return
.0acd						h_irq:
.0acd		48		pha		            pha
.0ace		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0		48		pha		            pha
.0ad1		64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3		ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6		89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8		f0 03		beq $0add	            beq done                ; No: we're done
.0ada		20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add						done:
.0add		a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf		8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2		8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5		68		pla		            pla                     ; Restore the IO page settings
.0ae6		85 01		sta $01		            sta MMU_IO_CTRL
.0ae8		68		pla		            pla
.0ae9		40		rti		            rti                     ; Just return
>0aea		00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2		7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02		00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12		38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22		00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32		00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52		30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62		10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72		04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82		48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92		1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2		10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2		10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2		00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2		00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2		00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2		10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02		28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12		60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22		08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32		10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52		00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62		00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72		10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92		7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2		7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2		38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2		00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2		00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2		38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2		10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02		18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12		7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22		38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32		38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42		44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52		44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62		38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72		38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82		38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92		44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2		44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2		44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2		3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2		00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2		00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02		00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12		00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22		00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32		00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42		40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52		00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62		00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72		00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82		00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92		00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2		00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2		00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2		0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2		30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2		7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2		48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02		10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12		20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22		00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32		28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42		28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52		20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62		10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72		00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82		10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92		20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2		20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2		28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2		00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2		44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2		18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2		10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002		10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012		14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022		10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032		00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042		42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052		10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062		00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072		cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082		10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092		10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2		00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2		28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2		00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2		28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2		00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2		10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102		10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112		10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122		28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132		00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142		00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152		00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162		10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172		00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182		28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192		00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2		28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2		10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2		ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2		00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202		00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212		00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222		00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232		38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242		3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252		00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262		38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272		10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282		08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292		10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2		00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2		00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2		1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2		38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2		00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642						KBD_SCAN = $d642
=$d644						KBD_STAT = $d644
=$01						KBD_RDY = $01
=$01						KBD_ST_F0 = $01
=$02						KBD_ST_E0 = $02
=$80						KBD_SHIFT = $80
=$81						KBD_CTRL = $81
=$82						KBD_ALT = $82
=$83						KBD_OS = $83
=$84						KBD_CAP = $84
=$01						KBD_MOD_SHIFT = $01
=$02						KBD_MOD_CTRL = $02
=$04						KBD_MOD_ALT = $04
=$08						KBD_MOD_OS = $08
=$10						KBD_MOD_CAP = $10
=80						KBD_BUFFER_SIZE = 80
>0206						kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207						kbd_mods    .byte ?         ; The current state of the modifier keys
>0208						kbd_buffer  .fill 80        ; Keyboard buffer
>0258						kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea						initkbd:
.12ea		9c 06 02	stz $0206	            stz kbd_state
.12ed		9c 07 02	stz $0207	            stz kbd_mods
.12f0		9c 58 02	stz $0258	            stz kbd_head
.12f3		60		rts		            rts
.12f4						kbd_status:
.12f4		ad 58 02	lda $0258	            lda kbd_head
.12f7		f0 03		beq $12fc	            beq is_empty
.12f9		a9 01		lda #$01	            lda #1
.12fb		60		rts		            rts
.12fc						is_empty:
.12fc		60		rts		            rts
.12fd						kbd_enqueue:
.12fd		da		phx		            phx
.12fe		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301		e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303		b0 07		bcs $130c	            bge done
.1305		9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308		e8		inx		            inx
.1309		8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c						done:
.130c		fa		plx		            plx
.130d		60		rts		            rts
.130e						kbd_dequeue:
.130e		da		phx		            phx
.130f		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312		f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314		ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317		48		pha		            pha                     ; Save it temporarily to the stack
.1318		a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a						loop:
.131a		bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d		9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320		e8		inx		            inx                     ; Move to the next character
.1321		ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324		d0 f4		bne $131a	            bne loop
.1326		ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329		68		pla		            pla                     ; Get the character back and return
.132a		80 02		bra $132e	            bra done
.132c						is_empty:
.132c		a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e						done:
.132e		fa		plx		            plx
.132f		60		rts		            rts
.1330						handlekbd:
.1330		ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333		29 01		and #$01	            and #KBD_RDY
.1335		d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337		ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a		f0 08		beq $1344	            beq st_0        ; If base state...
.133c		c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e		f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340		9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343						done:
.1343		60		rts		            rts
.1344						st_0:
.1344		ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347		c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349		d0 07		bne $1352	            bne not_f0
.134b		a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d		8d 06 02	sta $0206	            sta kbd_state
.1350		80 f1		bra $1343	            bra done
.1352		c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354		d0 07		bne $135d	            bne not_f0e0
.1356		a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358		8d 06 02	sta $0206	            sta kbd_state
.135b		80 e6		bra $1343	            bra done
.135d						not_f0e0:
.135d		48		pha		            pha
.135e		ad 07 02	lda $0207	            lda kbd_mods
.1361		89 10		bit #$10	            bit #KBD_MOD_CAP
.1363		d0 0b		bne $1370	            bne read_caps
.1365		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367		d0 19		bne $1382	            bne read_shift
.1369		68		pla		            pla
.136a		aa		tax		            tax
.136b		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e		80 17		bra $1387	            bra proc_ascii
.1370						read_caps:
.1370		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372		d0 07		bne $137b	            bne read_caps_shift
.1374		68		pla		            pla
.1375		aa		tax		            tax
.1376		bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379		80 0c		bra $1387	            bra proc_ascii
.137b						read_caps_shift:
.137b		68		pla		            pla
.137c		aa		tax		            tax
.137d		bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380		80 05		bra $1387	            bra proc_ascii
.1382						read_shift:
.1382		68		pla		            pla
.1383		aa		tax		            tax
.1384		bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387						proc_ascii:
.1387		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389		f0 09		beq $1394	            beq raise_shift
.138b		c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d		f0 0f		beq $139e	            beq toggle_caps
.138f		20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392		80 af		bra $1343	            bra done
.1394						raise_shift:
.1394		ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397		09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399		8d 07 02	sta $0207	            sta kbd_mods
.139c		80 a5		bra $1343	            bra done
.139e						toggle_caps:
.139e		ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1		49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3		8d 07 02	sta $0207	            sta kbd_mods
.13a6		80 9b		bra $1343	            bra done
.13a8						st_f0:
.13a8		ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab		aa		tax		            tax
.13ac		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1		d0 08		bne $13bb	            bne exit_f0
.13b3		ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6		29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8		8d 07 02	sta $0207	            sta kbd_mods
.13bb						exit_f0:
.13bb		9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be		80 83		bra $1343	            bra done
>13c0		00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8		00 00 00 00 00 08 60 00
>13d0		00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8		00 00 7a 73 61 77 32 00
>13e0		00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8		00 20 76 66 74 72 35 00
>13f0		00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8		00 00 6d 6a 75 37 38 00
>1400		00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408		00 2e 2f 6c 3b 70 2d 00
>1410		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418		84 80 0d 5d 00 5c 00 00
>1420		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428		00 00 00 00 00 00 00 00
>1430		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438		00 00 00 00 00 00 00 00
>1440		00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448		00 00 00 00 00 08 7e 00
>1450		00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458		00 00 5a 53 41 57 40 00
>1460		00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468		00 20 56 46 54 52 25 00
>1470		00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478		00 00 4d 4a 55 26 2a 00
>1480		00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488		00 3e 3f 4c 3a 50 5f 00
>1490		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498		84 80 0d 7d 00 7c 00 00
>14a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8		00 00 00 00 00 00 00 00
>14b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8		00 00 00 00 00 00 00 00
>14c0		00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8		00 00 00 00 00 08 60 00
>14d0		00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8		00 00 5a 53 41 57 32 00
>14e0		00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8		00 20 56 46 54 52 35 00
>14f0		00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8		00 00 4d 4a 55 37 38 00
>1500		00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508		00 2e 2f 4c 3b 50 2d 00
>1510		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518		84 80 0d 5d 00 5c 00 00
>1520		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528		00 00 00 00 00 00 00 00
>1530		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538		00 00 00 00 00 00 00 00
>1540		00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548		00 00 00 00 00 08 7e 00
>1550		00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558		00 00 7a 73 61 77 40 00
>1560		00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568		00 20 76 66 74 72 25 00
>1570		00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578		00 00 6d 6a 75 26 2a 00
>1580		00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588		00 3e 3f 6c 3a 70 5f 00
>1590		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598		84 80 0d 7d 00 7c 00 00
>15a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8		00 00 00 00 00 00 00 00
>15b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8		00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028						ip      .word ?         ; Instruction pointer
>002a						wp      .word ?         ; Word pointer
>002c						up      .word ?         ; User pointer
>002e						donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030						test    .word ?         ; Pointer to the current test name
>0032						tmp     .word ?
>0034						savex   .byte ?
>0035						counter .byte ?         ; A counter used for some code
>0036						sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0		4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8		68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5						init_user:
>15d5		6e 00				        .word $006e     ; Initial PSP (S0)
>15d7		ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9		0a 00				        .word 10        ; Initial BASE
>15db		00 00				        .word 0         ; Initial STATE
>15dd		00 00				        .word 0         ; Initial CONTEXT
>15df		00 00				        .word 0         ; Initial CURRENT
>15e1		00 00				        .word <>endcode ; Initial DP
>15e3		00 00				        .word 0         ; Initial >IN
>15e5		00 00				        .word 0         ; Initial TIB
>15e7		00 00				        .word 0         ; Initial SOURCE-ID
.15e9						init_user_end:
=0						user_s0 = 0
=2						user_r0 = 2
=4						user_base = 4
=6						user_state = 6
=8						user_context = 8
=10						user_current = 10
=12						user_dp = 12
=14						user_in = 14
=16						user_tib = 16
=18						user_source_id = 18
.15e9		a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15eb		9a		txs		        txs
.15ec		a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15ee		a9 01		lda #$01	        lda #<vstart
.15f0		85 28		sta $28		        sta ip
.15f2		a9 16		lda #$16	        lda #>vstart
.15f4		85 29		sta $29		        sta ip+1
.15f6		a9 00		lda #$00	        lda #<USERAREA
.15f8		85 2c		sta $2c		        sta up
.15fa		a9 10		lda #$10	        lda #>USERAREA
.15fc		85 2d		sta $2d		        sta up+1
.15fe		4c 23 16	jmp $1623	        jmp next
>1601		71 33				vstart  .word xt_cold
>1603		d4 16				        .word xt_halt
.1605		6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.1608		68		pla		i_exit  pla             ; ip := pop()
.1609		85 28		sta $28		        sta ip
.160b		68		pla		        pla
.160c		85 29		sta $29		        sta ip+1
.160e		80 13		bra $1623	        bra next        ; jmp next
.1610		a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1612		48		pha		        pha
.1613		a5 28		lda $28		        lda ip
.1615		48		pha		        pha
.1616		18		clc		        clc             ; ip := wp + 3
.1617		a5 2a		lda $2a		        lda wp
.1619		69 03		adc #$03	        adc #3
.161b		85 28		sta $28		        sta ip
.161d		a5 2b		lda $2b		        lda wp+1
.161f		69 00		adc #$00	        adc #0
.1621		85 29		sta $29		        sta ip+1
.1623		a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1625		b2 28		lda ($28)	        lda (ip)
.1627		85 2a		sta $2a		        sta wp
.1629		b1 28		lda ($28),y	        lda (ip),y
.162b		85 2b		sta $2b		        sta wp+1
.162d		18		clc		        clc             ; ip := ip + 2
.162e		a5 28		lda $28		        lda ip
.1630		69 02		adc #$02	        adc #2
.1632		85 28		sta $28		        sta ip
.1634		a5 29		lda $29		        lda ip+1
.1636		69 00		adc #$00	        adc #0
.1638		85 29		sta $29		        sta ip+1
.163a		6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.163d						w_testname:
>163d		08					.byte $08
>163e		74 65 73 74 6e 61 6d 65			.text 'testname'
>1646		00 00					.word 0
.1648						xt_testname:
.1648		b5 02		lda $02,x		lda pstack+2,x
.164a		85 30		sta $30			sta test
.164c		b5 03		lda $03,x		lda pstack+3,x
.164e		85 31		sta $31			sta test+1
.1650		e8		inx			inx
.1651		e8		inx			inx
.1652		4c 23 16	jmp $1623		jmp next
.1655						w_assertx3d:
>1655		07					.byte $07
>1656		61 73 73 65 72 74 3d			.text 'assert='
>165d		3d 16					.word w_testname
.165f						xt_assertx3d:
.165f		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1661		d5 04		cmp $04,x		cmp pstack+4,x
.1663		d0 0e		bne $1673		bne fail            ; If not, fail
.1665		b5 03		lda $03,x		lda pstack+3,x
.1667		d5 05		cmp $05,x		cmp pstack+5,x
.1669		d0 08		bne $1673		bne fail
.166b		8a		txa			txa                 ; If so, clean up the stack
.166c		18		clc			clc
.166d		69 04		adc #$04		adc #4
.166f		aa		tax			tax
.1670		4c 23 16	jmp $1623		jmp next            ; And continue
.1673							fail:
.1673		a9 b0		lda #$b0		lda #<leadin        ; Print the failure message
.1675		85 24		sta $24			sta src_ptr
.1677		a9 16		lda #$16		lda #>leadin
.1679		85 25		sta $25			sta src_ptr+1
.167b		20 18 b0	jsr $b018		jsr prints
.167e		a5 30		lda $30			lda test            ; Print the name of the test
.1680		85 24		sta $24			sta src_ptr
.1682		a5 31		lda $31			lda test+1
.1684		85 25		sta $25			sta src_ptr+1
.1686		20 18 b0	jsr $b018		jsr prints
.1689		a9 c3		lda #$c3		lda #<actual        ; Print the "Actual" label
.168b		85 24		sta $24			sta src_ptr
.168d		a9 16		lda #$16		lda #>actual
.168f		85 25		sta $25			sta src_ptr+1
.1691		20 18 b0	jsr $b018		jsr prints
.1694		b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.1696		b5 04		lda $04,x		lda pstack+4,x
.1698		20 15 b0	jsr $b015		jsr printyah
.169b		a9 b7		lda #$b7		lda #<expected      ; Print the "Expected" label
.169d		85 24		sta $24			sta src_ptr
.169f		a9 16		lda #$16		lda #>expected
.16a1		85 25		sta $25			sta src_ptr+1
.16a3		20 18 b0	jsr $b018		jsr prints
.16a6		b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16a8		b5 02		lda $02,x		lda pstack+2,x
.16aa		20 15 b0	jsr $b015		jsr printyah
.16ad							lock:
.16ad		ea		nop			nop                 ; Lock up
.16ae		80 fd		bra $16ad		bra lock
.16b0							leadin:
>16b0		46 41 49 4c 3a 20 00			.null "FAIL: "
.16b7							expected:
>16b7		20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16bf		44 3a 20 00
.16c3							actual:
>16c3		20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16cb		20 00
.16cd						w_halt:
>16cd		04					.byte $04
>16ce		68 61 6c 74				.text 'halt'
>16d2		55 16					.word w_assertx3d
.16d4						xt_halt:
.16d4							lock:
.16d4		ea		nop			nop
.16d5		80 fd		bra $16d4		bra lock
.16d7						w_emit:
>16d7		04					.byte $04
>16d8		65 6d 69 74				.text 'emit'
>16dc		cd 16					.word w_halt
.16de						xt_emit:
.16de		b5 02		lda $02,x		lda pstack+2,x
.16e0		da		phx			phx
.16e1		20 09 b0	jsr $b009		jsr conout
.16e4		fa		plx			plx
.16e5		e8		inx			inx
.16e6		e8		inx			inx
.16e7		4c 23 16	jmp $1623		jmp next
.16ea						w_keyx3f:
>16ea		04					.byte $04
>16eb		6b 65 79 3f				.text 'key?'
>16ef		d7 16					.word w_emit
.16f1						xt_keyx3f:
.16f1		20 0c b0	jsr $b00c		jsr constat
.16f4		29 01		and #$01		and #1
.16f6		f0 06		beq $16fe		beq waiting
.16f8		74 00		stz $00,x		stz pstack,x
.16fa		74 01		stz $01,x		stz pstack+1,x
.16fc		80 06		bra $1704		bra done
.16fe							waiting:
.16fe		a9 ff		lda #$ff		lda #$ff
.1700		95 00		sta $00,x		sta pstack,x
.1702		95 01		sta $01,x		sta pstack+1,x
.1704							done:
.1704		ca		dex			dex
.1705		ca		dex			dex
.1706		4c 23 16	jmp $1623		jmp next
.1709						w_key:
>1709		03					.byte $03
>170a		6b 65 79				.text 'key'
>170d		ea 16					.word w_keyx3f
.170f						xt_key:
.170f		da		phx			phx
.1710							wait:
.1710		20 0f b0	jsr $b00f		jsr conin
.1713		c9 00		cmp #$00		cmp #0
.1715		f0 f9		beq $1710		beq wait
.1717		fa		plx			plx
.1718		95 00		sta $00,x		sta pstack,x
.171a		74 01		stz $01,x		stz pstack+1,x
.171c		ca		dex			dex
.171d		ca		dex			dex
.171e		4c 23 16	jmp $1623		jmp next
.1721						w_cr:
>1721		02					.byte $02
>1722		63 72					.text 'cr'
>1724		09 17					.word w_key
.1726						xt_cr:
.1726		da		phx			phx
.1727		a9 0d		lda #$0d		lda #$0d
.1729		20 09 b0	jsr $b009		jsr conout
.172c		fa		plx			plx
.172d		4c 23 16	jmp $1623		jmp next
.1730						w_0:
>1730		01					.byte $01
>1731		30					.text '0'
>1732		21 17					.word w_cr
.1734						xt_0:
.1734		74 01		stz $01,x		stz pstack+1,x
.1736		74 00		stz $00,x		stz pstack,x
.1738		ca		dex			dex
.1739		ca		dex			dex
.173a		4c 23 16	jmp $1623		jmp next
.173d						w_1:
>173d		01					.byte $01
>173e		31					.text '1'
>173f		30 17					.word w_0
.1741						xt_1:
.1741		74 01		stz $01,x		stz pstack+1,x
.1743		a9 01		lda #$01		lda #1
.1745		95 00		sta $00,x		sta pstack,x
.1747		ca		dex			dex
.1748		ca		dex			dex
.1749		4c 23 16	jmp $1623		jmp next
.174c						w_2:
>174c		01					.byte $01
>174d		32					.text '2'
>174e		3d 17					.word w_1
.1750						xt_2:
.1750		74 01		stz $01,x		stz pstack+1,x
.1752		a9 02		lda #$02		lda #2
.1754		95 00		sta $00,x		sta pstack,x
.1756		ca		dex			dex
.1757		ca		dex			dex
.1758		4c 23 16	jmp $1623		jmp next
.175b						w_x2d1:
>175b		02					.byte $02
>175c		2d 31					.text '-1'
>175e		4c 17					.word w_2
.1760						xt_x2d1:
.1760		a9 ff		lda #$ff		lda #$ff
.1762		95 01		sta $01,x		sta pstack+1,x
.1764		95 00		sta $00,x		sta pstack,x
.1766		ca		dex			dex
.1767		ca		dex			dex
.1768		4c 23 16	jmp $1623		jmp next
.176b						w_x2d2:
>176b		02					.byte $02
>176c		2d 32					.text '-2'
>176e		5b 17					.word w_x2d1
.1770						xt_x2d2:
.1770		a9 fe		lda #$fe		lda #$fe
.1772		95 01		sta $01,x		sta pstack+1,x
.1774		95 00		sta $00,x		sta pstack,x
.1776		ca		dex			dex
.1777		ca		dex			dex
.1778		4c 23 16	jmp $1623		jmp next
.177b						w_x28literalx29:
>177b		09					.byte $09
>177c		28 6c 69 74 65 72 61 6c			.text '(literal)'
>1784		29
>1785		6b 17					.word w_x2d2
.1787						xt_x28literalx29:
.1787		a0 01		ldy #$01		ldy #1
.1789		b2 28		lda ($28)		lda (ip)
.178b		95 00		sta $00,x		sta pstack,x
.178d		b1 28		lda ($28),y		lda (ip),y
.178f		95 01		sta $01,x		sta pstack+1,x
.1791		ca		dex			dex
.1792		ca		dex			dex
.1793		18		clc			clc
.1794		a5 28		lda $28			lda ip
.1796		69 02		adc #$02		adc #2
.1798		85 28		sta $28			sta ip
.179a		a5 29		lda $29			lda ip+1
.179c		69 00		adc #$00		adc #0
.179e		85 29		sta $29			sta ip+1
.17a0		4c 23 16	jmp $1623		jmp next
.17a3						w_depth:
>17a3		05					.byte $05
>17a4		64 65 70 74 68				.text 'depth'
>17a9		7b 17					.word w_x28literalx29
.17ab						xt_depth:
.17ab		86 32		stx $32			stx tmp
.17ad		38		sec			sec
.17ae		a9 6e		lda #$6e		lda #$6e
.17b0		e5 32		sbc $32			sbc tmp
.17b2		4a		lsr a			lsr a
.17b3		74 01		stz $01,x		stz pstack+1,x
.17b5		95 00		sta $00,x		sta pstack,x
.17b7		ca		dex			dex
.17b8		ca		dex			dex
.17b9		4c 23 16	jmp $1623		jmp next
.17bc						w_unittest:
>17bc		08					.byte $08
>17bd		75 6e 69 74 74 65 73 74			.text 'unittest'
>17c5							.fill 8
>17cd		a3 17					.word w_depth
.17cf						xt_unittest:
.17cf		4c 10 16	jmp $1610		jmp i_enter
>17d2		87 17					.word xt_x28literalx29
>17d4		da 17					.word l_2
>17d6		7b 2d					.word xt_x28branchx29
>17d8		e6 17					.word l_3
.17da						l_2:
>17da		64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>17e2		3e 20 30 00
.17e6						l_3:
>17e6		48 16					.word xt_testname
>17e8		ab 17					.word xt_depth
>17ea		34 17					.word xt_0
>17ec		5f 16					.word xt_assertx3d
>17ee		87 17					.word xt_x28literalx29
>17f0		f6 17					.word l_4
>17f2		7b 2d					.word xt_x28branchx29
>17f4		06 18					.word l_5
.17f6						l_4:
>17f6		30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>17fe		2d 2d 3e 20 30 20 31 00
.1806						l_5:
>1806		48 16					.word xt_testname
>1808		34 17					.word xt_0
>180a		ab 17					.word xt_depth
>180c		41 17					.word xt_1
>180e		5f 16					.word xt_assertx3d
>1810		34 17					.word xt_0
>1812		5f 16					.word xt_assertx3d
>1814		87 17					.word xt_x28literalx29
>1816		1c 18					.word l_6
>1818		7b 2d					.word xt_x28branchx29
>181a		34 18					.word l_7
.181c						l_6:
>181c		31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>1824		70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.1834						l_7:
>1834		48 16					.word xt_testname
>1836		41 17					.word xt_1
>1838		41 17					.word xt_1
>183a		41 17					.word xt_1
>183c		ab 17					.word xt_depth
>183e		87 17					.word xt_x28literalx29
>1840		03 00					.word 3
>1842		5f 16					.word xt_assertx3d
>1844		41 17					.word xt_1
>1846		5f 16					.word xt_assertx3d
>1848		41 17					.word xt_1
>184a		5f 16					.word xt_assertx3d
>184c		41 17					.word xt_1
>184e		5f 16					.word xt_assertx3d
>1850		87 17					.word xt_x28literalx29
>1852		58 18					.word l_8
>1854		7b 2d					.word xt_x28branchx29
>1856		67 18					.word l_9
.1858						l_8:
>1858		31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>1860		20 2d 2d 3e 20 31 00
.1867						l_9:
>1867		48 16					.word xt_testname
>1869		41 17					.word xt_1
>186b		50 17					.word xt_2
>186d		b5 27					.word xt_drop
>186f		41 17					.word xt_1
>1871		5f 16					.word xt_assertx3d
>1873		87 17					.word xt_x28literalx29
>1875		7b 18					.word l_10
>1877		7b 2d					.word xt_x28branchx29
>1879		8e 18					.word l_11
.187b						l_10:
>187b		31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1883		6f 70 20 2d 2d 3e 20 31 20 32 00
.188e						l_11:
>188e		48 16					.word xt_testname
>1890		41 17					.word xt_1
>1892		50 17					.word xt_2
>1894		87 17					.word xt_x28literalx29
>1896		03 00					.word 3
>1898		b5 27					.word xt_drop
>189a		50 17					.word xt_2
>189c		5f 16					.word xt_assertx3d
>189e		41 17					.word xt_1
>18a0		5f 16					.word xt_assertx3d
>18a2		87 17					.word xt_x28literalx29
>18a4		aa 18					.word l_12
>18a6		7b 2d					.word xt_x28branchx29
>18a8		b8 18					.word l_13
.18aa						l_12:
>18aa		31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>18b2		3e 20 31 20 31 00
.18b8						l_13:
>18b8		48 16					.word xt_testname
>18ba		41 17					.word xt_1
>18bc		c0 27					.word xt_dup
>18be		41 17					.word xt_1
>18c0		5f 16					.word xt_assertx3d
>18c2		41 17					.word xt_1
>18c4		5f 16					.word xt_assertx3d
>18c6		87 17					.word xt_x28literalx29
>18c8		ce 18					.word l_14
>18ca		7b 2d					.word xt_x28branchx29
>18cc		e0 18					.word l_15
.18ce						l_14:
>18ce		31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>18d6		2d 2d 3e 20 31 20 32 20 32 00
.18e0						l_15:
>18e0		48 16					.word xt_testname
>18e2		41 17					.word xt_1
>18e4		50 17					.word xt_2
>18e6		c0 27					.word xt_dup
>18e8		50 17					.word xt_2
>18ea		5f 16					.word xt_assertx3d
>18ec		50 17					.word xt_2
>18ee		5f 16					.word xt_assertx3d
>18f0		41 17					.word xt_1
>18f2		5f 16					.word xt_assertx3d
>18f4		87 17					.word xt_x28literalx29
>18f6		fc 18					.word l_16
>18f8		7b 2d					.word xt_x28branchx29
>18fa		11 19					.word l_17
.18fc						l_16:
>18fc		31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1904		61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1911						l_17:
>1911		48 16					.word xt_testname
>1913		41 17					.word xt_1
>1915		50 17					.word xt_2
>1917		87 17					.word xt_x28literalx29
>1919		03 00					.word 3
>191b		d4 27					.word xt_swap
>191d		50 17					.word xt_2
>191f		5f 16					.word xt_assertx3d
>1921		87 17					.word xt_x28literalx29
>1923		03 00					.word 3
>1925		5f 16					.word xt_assertx3d
>1927		41 17					.word xt_1
>1929		5f 16					.word xt_assertx3d
>192b		87 17					.word xt_x28literalx29
>192d		33 19					.word l_18
>192f		7b 2d					.word xt_x28branchx29
>1931		46 19					.word l_19
.1933						l_18:
>1933		31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>193b		20 2d 2d 3e 20 31 20 32 20 31 00
.1946						l_19:
>1946		48 16					.word xt_testname
>1948		41 17					.word xt_1
>194a		50 17					.word xt_2
>194c		ee 27					.word xt_over
>194e		41 17					.word xt_1
>1950		5f 16					.word xt_assertx3d
>1952		50 17					.word xt_2
>1954		5f 16					.word xt_assertx3d
>1956		41 17					.word xt_1
>1958		5f 16					.word xt_assertx3d
>195a		87 17					.word xt_x28literalx29
>195c		62 19					.word l_20
>195e		7b 2d					.word xt_x28branchx29
>1960		82 19					.word l_21
.1962						l_20:
>1962		35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>196a		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>197a		3e 20 35 35 35 35 68 00
.1982						l_21:
>1982		48 16					.word xt_testname
>1984		87 17					.word xt_x28literalx29
>1986		55 55					.word 21845
>1988		87 17					.word xt_x28literalx29
>198a		04 00					.word 4
>198c		3c 28					.word xt_x21
>198e		87 17					.word xt_x28literalx29
>1990		04 00					.word 4
>1992		59 28					.word xt_x40
>1994		87 17					.word xt_x28literalx29
>1996		55 55					.word 21845
>1998		5f 16					.word xt_assertx3d
>199a		87 17					.word xt_x28literalx29
>199c		a2 19					.word l_22
>199e		7b 2d					.word xt_x28branchx29
>19a0		c2 19					.word l_23
.19a2						l_22:
>19a2		61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>19aa		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>19ba		3e 20 61 61 61 61 68 00
.19c2						l_23:
>19c2		48 16					.word xt_testname
>19c4		87 17					.word xt_x28literalx29
>19c6		aa aa					.word 43690
>19c8		87 17					.word xt_x28literalx29
>19ca		04 00					.word 4
>19cc		3c 28					.word xt_x21
>19ce		87 17					.word xt_x28literalx29
>19d0		04 00					.word 4
>19d2		59 28					.word xt_x40
>19d4		87 17					.word xt_x28literalx29
>19d6		aa aa					.word 43690
>19d8		5f 16					.word xt_assertx3d
>19da		87 17					.word xt_x28literalx29
>19dc		e2 19					.word l_24
>19de		7b 2d					.word xt_x28branchx29
>19e0		00 1a					.word l_25
.19e2						l_24:
>19e2		35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>19ea		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>19fa		3e 20 35 35 68 00
.1a00						l_25:
>1a00		48 16					.word xt_testname
>1a02		87 17					.word xt_x28literalx29
>1a04		55 00					.word 85
>1a06		87 17					.word xt_x28literalx29
>1a08		03 00					.word 3
>1a0a		73 28					.word xt_cx21
>1a0c		87 17					.word xt_x28literalx29
>1a0e		03 00					.word 3
>1a10		83 28					.word xt_cx40
>1a12		87 17					.word xt_x28literalx29
>1a14		55 00					.word 85
>1a16		5f 16					.word xt_assertx3d
>1a18		87 17					.word xt_x28literalx29
>1a1a		20 1a					.word l_26
>1a1c		7b 2d					.word xt_x28branchx29
>1a1e		3e 1a					.word l_27
.1a20						l_26:
>1a20		61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1a28		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1a38		3e 20 61 61 68 00
.1a3e						l_27:
>1a3e		48 16					.word xt_testname
>1a40		87 17					.word xt_x28literalx29
>1a42		aa 00					.word 170
>1a44		87 17					.word xt_x28literalx29
>1a46		03 00					.word 3
>1a48		73 28					.word xt_cx21
>1a4a		87 17					.word xt_x28literalx29
>1a4c		03 00					.word 3
>1a4e		83 28					.word xt_cx40
>1a50		87 17					.word xt_x28literalx29
>1a52		aa 00					.word 170
>1a54		5f 16					.word xt_assertx3d
>1a56		87 17					.word xt_x28literalx29
>1a58		5e 1a					.word l_28
>1a5a		7b 2d					.word xt_x28branchx29
>1a5c		6a 1a					.word l_29
.1a5e						l_28:
>1a5e		31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1a66		3e 20 31 00
.1a6a						l_29:
>1a6a		48 16					.word xt_testname
>1a6c		41 17					.word xt_1
>1a6e		34 17					.word xt_0
>1a70		e6 29					.word xt_x2b
>1a72		41 17					.word xt_1
>1a74		5f 16					.word xt_assertx3d
>1a76		87 17					.word xt_x28literalx29
>1a78		7e 1a					.word l_30
>1a7a		7b 2d					.word xt_x28branchx29
>1a7c		8a 1a					.word l_31
.1a7e						l_30:
>1a7e		31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1a86		3e 20 32 00
.1a8a						l_31:
>1a8a		48 16					.word xt_testname
>1a8c		41 17					.word xt_1
>1a8e		41 17					.word xt_1
>1a90		e6 29					.word xt_x2b
>1a92		50 17					.word xt_2
>1a94		5f 16					.word xt_assertx3d
>1a96		87 17					.word xt_x28literalx29
>1a98		9e 1a					.word l_32
>1a9a		7b 2d					.word xt_x28branchx29
>1a9c		ac 1a					.word l_33
.1a9e						l_32:
>1a9e		33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1aa6		2d 3e 20 31 33 00
.1aac						l_33:
>1aac		48 16					.word xt_testname
>1aae		87 17					.word xt_x28literalx29
>1ab0		03 00					.word 3
>1ab2		87 17					.word xt_x28literalx29
>1ab4		0a 00					.word 10
>1ab6		e6 29					.word xt_x2b
>1ab8		87 17					.word xt_x28literalx29
>1aba		0d 00					.word 13
>1abc		5f 16					.word xt_assertx3d
>1abe		87 17					.word xt_x28literalx29
>1ac0		c6 1a					.word l_34
>1ac2		7b 2d					.word xt_x28branchx29
>1ac4		d6 1a					.word l_35
.1ac6						l_34:
>1ac6		66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1ace		2b 20 2d 2d 3e 20 34 00
.1ad6						l_35:
>1ad6		48 16					.word xt_testname
>1ad8		87 17					.word xt_x28literalx29
>1ada		ff ff					.word 65535
>1adc		87 17					.word xt_x28literalx29
>1ade		05 00					.word 5
>1ae0		e6 29					.word xt_x2b
>1ae2		87 17					.word xt_x28literalx29
>1ae4		04 00					.word 4
>1ae6		5f 16					.word xt_assertx3d
>1ae8		87 17					.word xt_x28literalx29
>1aea		f0 1a					.word l_36
>1aec		7b 2d					.word xt_x28branchx29
>1aee		fc 1a					.word l_37
.1af0						l_36:
>1af0		34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1af8		3e 20 31 00
.1afc						l_37:
>1afc		48 16					.word xt_testname
>1afe		87 17					.word xt_x28literalx29
>1b00		04 00					.word 4
>1b02		87 17					.word xt_x28literalx29
>1b04		03 00					.word 3
>1b06		fc 29					.word xt_x2d
>1b08		41 17					.word xt_1
>1b0a		5f 16					.word xt_assertx3d
>1b0c		87 17					.word xt_x28literalx29
>1b0e		14 1b					.word l_38
>1b10		7b 2d					.word xt_x28branchx29
>1b12		24 1b					.word l_39
.1b14						l_38:
>1b14		33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1b1c		3e 20 66 66 66 66 68 00
.1b24						l_39:
>1b24		48 16					.word xt_testname
>1b26		87 17					.word xt_x28literalx29
>1b28		03 00					.word 3
>1b2a		87 17					.word xt_x28literalx29
>1b2c		04 00					.word 4
>1b2e		fc 29					.word xt_x2d
>1b30		87 17					.word xt_x28literalx29
>1b32		ff ff					.word 65535
>1b34		5f 16					.word xt_assertx3d
>1b36		87 17					.word xt_x28literalx29
>1b38		3e 1b					.word l_40
>1b3a		7b 2d					.word xt_x28branchx29
>1b3c		4b 1b					.word l_41
.1b3e						l_40:
>1b3e		31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1b46		2d 3e 20 35 00
.1b4b						l_41:
>1b4b		48 16					.word xt_testname
>1b4d		87 17					.word xt_x28literalx29
>1b4f		0a 00					.word 10
>1b51		87 17					.word xt_x28literalx29
>1b53		05 00					.word 5
>1b55		fc 29					.word xt_x2d
>1b57		87 17					.word xt_x28literalx29
>1b59		05 00					.word 5
>1b5b		5f 16					.word xt_assertx3d
>1b5d		87 17					.word xt_x28literalx29
>1b5f		65 1b					.word l_42
>1b61		7b 2d					.word xt_x28branchx29
>1b63		76 1b					.word l_43
.1b65						l_42:
>1b65		31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>1b6d		20 2d 2d 3e 20 31 20 30 00
.1b76						l_43:
>1b76		48 16					.word xt_testname
>1b78		41 17					.word xt_1
>1b7a		87 17					.word xt_x28literalx29
>1b7c		03 00					.word 3
>1b7e		88 2a					.word xt_x2fmod
>1b80		34 17					.word xt_0
>1b82		5f 16					.word xt_assertx3d
>1b84		41 17					.word xt_1
>1b86		5f 16					.word xt_assertx3d
>1b88		87 17					.word xt_x28literalx29
>1b8a		90 1b					.word l_44
>1b8c		7b 2d					.word xt_x28branchx29
>1b8e		a1 1b					.word l_45
.1b90						l_44:
>1b90		32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1b98		20 2d 2d 3e 20 32 20 30 00
.1ba1						l_45:
>1ba1		48 16					.word xt_testname
>1ba3		50 17					.word xt_2
>1ba5		87 17					.word xt_x28literalx29
>1ba7		03 00					.word 3
>1ba9		88 2a					.word xt_x2fmod
>1bab		34 17					.word xt_0
>1bad		5f 16					.word xt_assertx3d
>1baf		50 17					.word xt_2
>1bb1		5f 16					.word xt_assertx3d
>1bb3		87 17					.word xt_x28literalx29
>1bb5		bb 1b					.word l_46
>1bb7		7b 2d					.word xt_x28branchx29
>1bb9		cc 1b					.word l_47
.1bbb						l_46:
>1bbb		33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1bc3		20 2d 2d 3e 20 30 20 31 00
.1bcc						l_47:
>1bcc		48 16					.word xt_testname
>1bce		87 17					.word xt_x28literalx29
>1bd0		03 00					.word 3
>1bd2		87 17					.word xt_x28literalx29
>1bd4		03 00					.word 3
>1bd6		88 2a					.word xt_x2fmod
>1bd8		41 17					.word xt_1
>1bda		5f 16					.word xt_assertx3d
>1bdc		34 17					.word xt_0
>1bde		5f 16					.word xt_assertx3d
>1be0		87 17					.word xt_x28literalx29
>1be2		e8 1b					.word l_48
>1be4		7b 2d					.word xt_x28branchx29
>1be6		f9 1b					.word l_49
.1be8						l_48:
>1be8		34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>1bf0		20 2d 2d 3e 20 31 20 31 00
.1bf9						l_49:
>1bf9		48 16					.word xt_testname
>1bfb		87 17					.word xt_x28literalx29
>1bfd		04 00					.word 4
>1bff		87 17					.word xt_x28literalx29
>1c01		03 00					.word 3
>1c03		88 2a					.word xt_x2fmod
>1c05		41 17					.word xt_1
>1c07		5f 16					.word xt_assertx3d
>1c09		41 17					.word xt_1
>1c0b		5f 16					.word xt_assertx3d
>1c0d		87 17					.word xt_x28literalx29
>1c0f		15 1c					.word l_50
>1c11		7b 2d					.word xt_x28branchx29
>1c13		26 1c					.word l_51
.1c15						l_50:
>1c15		36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>1c1d		20 2d 2d 3e 20 30 20 32 00
.1c26						l_51:
>1c26		48 16					.word xt_testname
>1c28		87 17					.word xt_x28literalx29
>1c2a		06 00					.word 6
>1c2c		87 17					.word xt_x28literalx29
>1c2e		03 00					.word 3
>1c30		88 2a					.word xt_x2fmod
>1c32		50 17					.word xt_2
>1c34		5f 16					.word xt_assertx3d
>1c36		34 17					.word xt_0
>1c38		5f 16					.word xt_assertx3d
>1c3a		87 17					.word xt_x28literalx29
>1c3c		42 1c					.word l_52
>1c3e		7b 2d					.word xt_x28branchx29
>1c40		4d 1c					.word l_53
.1c42						l_52:
>1c42		31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1c4a		20 32 00
.1c4d						l_53:
>1c4d		48 16					.word xt_testname
>1c4f		41 17					.word xt_1
>1c51		05 2b					.word xt_1x2b
>1c53		50 17					.word xt_2
>1c55		5f 16					.word xt_assertx3d
>1c57		87 17					.word xt_x28literalx29
>1c59		5f 1c					.word l_54
>1c5b		7b 2d					.word xt_x28branchx29
>1c5d		6a 1c					.word l_55
.1c5f						l_54:
>1c5f		30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1c67		20 31 00
.1c6a						l_55:
>1c6a		48 16					.word xt_testname
>1c6c		34 17					.word xt_0
>1c6e		05 2b					.word xt_1x2b
>1c70		41 17					.word xt_1
>1c72		5f 16					.word xt_assertx3d
>1c74		87 17					.word xt_x28literalx29
>1c76		7c 1c					.word l_56
>1c78		7b 2d					.word xt_x28branchx29
>1c7a		89 1c					.word l_57
.1c7c						l_56:
>1c7c		32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1c84		3e 20 32 31 00
.1c89						l_57:
>1c89		48 16					.word xt_testname
>1c8b		87 17					.word xt_x28literalx29
>1c8d		14 00					.word 20
>1c8f		05 2b					.word xt_1x2b
>1c91		87 17					.word xt_x28literalx29
>1c93		15 00					.word 21
>1c95		5f 16					.word xt_assertx3d
>1c97		87 17					.word xt_x28literalx29
>1c99		9f 1c					.word l_58
>1c9b		7b 2d					.word xt_x28branchx29
>1c9d		ae 1c					.word l_59
.1c9f						l_58:
>1c9f		66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1ca7		20 2d 2d 3e 20 30 00
.1cae						l_59:
>1cae		48 16					.word xt_testname
>1cb0		87 17					.word xt_x28literalx29
>1cb2		ff ff					.word 65535
>1cb4		05 2b					.word xt_1x2b
>1cb6		34 17					.word xt_0
>1cb8		5f 16					.word xt_assertx3d
>1cba		87 17					.word xt_x28literalx29
>1cbc		c2 1c					.word l_60
>1cbe		7b 2d					.word xt_x28branchx29
>1cc0		cd 1c					.word l_61
.1cc2						l_60:
>1cc2		31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1cca		20 33 00
.1ccd						l_61:
>1ccd		48 16					.word xt_testname
>1ccf		41 17					.word xt_1
>1cd1		13 2b					.word xt_2x2b
>1cd3		87 17					.word xt_x28literalx29
>1cd5		03 00					.word 3
>1cd7		5f 16					.word xt_assertx3d
>1cd9		87 17					.word xt_x28literalx29
>1cdb		e1 1c					.word l_62
>1cdd		7b 2d					.word xt_x28branchx29
>1cdf		ec 1c					.word l_63
.1ce1						l_62:
>1ce1		30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1ce9		20 32 00
.1cec						l_63:
>1cec		48 16					.word xt_testname
>1cee		34 17					.word xt_0
>1cf0		13 2b					.word xt_2x2b
>1cf2		50 17					.word xt_2
>1cf4		5f 16					.word xt_assertx3d
>1cf6		87 17					.word xt_x28literalx29
>1cf8		fe 1c					.word l_64
>1cfa		7b 2d					.word xt_x28branchx29
>1cfc		0b 1d					.word l_65
.1cfe						l_64:
>1cfe		32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>1d06		3e 20 32 32 00
.1d0b						l_65:
>1d0b		48 16					.word xt_testname
>1d0d		87 17					.word xt_x28literalx29
>1d0f		14 00					.word 20
>1d11		13 2b					.word xt_2x2b
>1d13		87 17					.word xt_x28literalx29
>1d15		16 00					.word 22
>1d17		5f 16					.word xt_assertx3d
>1d19		87 17					.word xt_x28literalx29
>1d1b		21 1d					.word l_66
>1d1d		7b 2d					.word xt_x28branchx29
>1d1f		30 1d					.word l_67
.1d21						l_66:
>1d21		66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>1d29		20 2d 2d 3e 20 30 00
.1d30						l_67:
>1d30		48 16					.word xt_testname
>1d32		87 17					.word xt_x28literalx29
>1d34		fe ff					.word 65534
>1d36		13 2b					.word xt_2x2b
>1d38		34 17					.word xt_0
>1d3a		5f 16					.word xt_assertx3d
>1d3c		87 17					.word xt_x28literalx29
>1d3e		44 1d					.word l_68
>1d40		7b 2d					.word xt_x28branchx29
>1d42		4f 1d					.word l_69
.1d44						l_68:
>1d44		31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>1d4c		20 30 00
.1d4f						l_69:
>1d4f		48 16					.word xt_testname
>1d51		41 17					.word xt_1
>1d53		28 2b					.word xt_1x2d
>1d55		34 17					.word xt_0
>1d57		5f 16					.word xt_assertx3d
>1d59		87 17					.word xt_x28literalx29
>1d5b		61 1d					.word l_70
>1d5d		7b 2d					.word xt_x28branchx29
>1d5f		70 1d					.word l_71
.1d61						l_70:
>1d61		30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1d69		20 66 66 66 66 68 00
.1d70						l_71:
>1d70		48 16					.word xt_testname
>1d72		34 17					.word xt_0
>1d74		28 2b					.word xt_1x2d
>1d76		87 17					.word xt_x28literalx29
>1d78		ff ff					.word 65535
>1d7a		5f 16					.word xt_assertx3d
>1d7c		87 17					.word xt_x28literalx29
>1d7e		84 1d					.word l_72
>1d80		7b 2d					.word xt_x28branchx29
>1d82		91 1d					.word l_73
.1d84						l_72:
>1d84		32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1d8c		3e 20 31 39 00
.1d91						l_73:
>1d91		48 16					.word xt_testname
>1d93		87 17					.word xt_x28literalx29
>1d95		14 00					.word 20
>1d97		28 2b					.word xt_1x2d
>1d99		87 17					.word xt_x28literalx29
>1d9b		13 00					.word 19
>1d9d		5f 16					.word xt_assertx3d
>1d9f		87 17					.word xt_x28literalx29
>1da1		a7 1d					.word l_74
>1da3		7b 2d					.word xt_x28branchx29
>1da5		ba 1d					.word l_75
.1da7						l_74:
>1da7		66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1daf		20 2d 2d 3e 20 66 66 66 65 68 00
.1dba						l_75:
>1dba		48 16					.word xt_testname
>1dbc		87 17					.word xt_x28literalx29
>1dbe		ff ff					.word 65535
>1dc0		28 2b					.word xt_1x2d
>1dc2		87 17					.word xt_x28literalx29
>1dc4		fe ff					.word 65534
>1dc6		5f 16					.word xt_assertx3d
>1dc8		87 17					.word xt_x28literalx29
>1dca		d0 1d					.word l_76
>1dcc		7b 2d					.word xt_x28branchx29
>1dce		df 1d					.word l_77
.1dd0						l_76:
>1dd0		31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1dd8		20 66 66 66 66 68 00
.1ddf						l_77:
>1ddf		48 16					.word xt_testname
>1de1		41 17					.word xt_1
>1de3		38 2b					.word xt_2x2d
>1de5		87 17					.word xt_x28literalx29
>1de7		ff ff					.word 65535
>1de9		5f 16					.word xt_assertx3d
>1deb		87 17					.word xt_x28literalx29
>1ded		f3 1d					.word l_78
>1def		7b 2d					.word xt_x28branchx29
>1df1		02 1e					.word l_79
.1df3						l_78:
>1df3		30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1dfb		20 66 66 66 65 68 00
.1e02						l_79:
>1e02		48 16					.word xt_testname
>1e04		34 17					.word xt_0
>1e06		38 2b					.word xt_2x2d
>1e08		87 17					.word xt_x28literalx29
>1e0a		fe ff					.word 65534
>1e0c		5f 16					.word xt_assertx3d
>1e0e		87 17					.word xt_x28literalx29
>1e10		16 1e					.word l_80
>1e12		7b 2d					.word xt_x28branchx29
>1e14		23 1e					.word l_81
.1e16						l_80:
>1e16		32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1e1e		3e 20 31 38 00
.1e23						l_81:
>1e23		48 16					.word xt_testname
>1e25		87 17					.word xt_x28literalx29
>1e27		14 00					.word 20
>1e29		38 2b					.word xt_2x2d
>1e2b		87 17					.word xt_x28literalx29
>1e2d		12 00					.word 18
>1e2f		5f 16					.word xt_assertx3d
>1e31		87 17					.word xt_x28literalx29
>1e33		39 1e					.word l_82
>1e35		7b 2d					.word xt_x28branchx29
>1e37		4c 1e					.word l_83
.1e39						l_82:
>1e39		66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1e41		20 2d 2d 3e 20 66 66 66 64 68 00
.1e4c						l_83:
>1e4c		48 16					.word xt_testname
>1e4e		87 17					.word xt_x28literalx29
>1e50		ff ff					.word 65535
>1e52		38 2b					.word xt_2x2d
>1e54		87 17					.word xt_x28literalx29
>1e56		fd ff					.word 65533
>1e58		5f 16					.word xt_assertx3d
>1e5a		87 17					.word xt_x28literalx29
>1e5c		62 1e					.word l_84
>1e5e		7b 2d					.word xt_x28branchx29
>1e60		7c 1e					.word l_85
.1e62						l_84:
>1e62		30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1e6a		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1e7a		68 00
.1e7c						l_85:
>1e7c		48 16					.word xt_testname
>1e7e		87 17					.word xt_x28literalx29
>1e80		00 00					.word 0
>1e82		87 17					.word xt_x28literalx29
>1e84		00 00					.word 0
>1e86		4e 2b					.word xt_and
>1e88		87 17					.word xt_x28literalx29
>1e8a		00 00					.word 0
>1e8c		5f 16					.word xt_assertx3d
>1e8e		87 17					.word xt_x28literalx29
>1e90		96 1e					.word l_86
>1e92		7b 2d					.word xt_x28branchx29
>1e94		b0 1e					.word l_87
.1e96						l_86:
>1e96		30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1e9e		66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1eae		68 00
.1eb0						l_87:
>1eb0		48 16					.word xt_testname
>1eb2		87 17					.word xt_x28literalx29
>1eb4		00 00					.word 0
>1eb6		87 17					.word xt_x28literalx29
>1eb8		ff ff					.word 65535
>1eba		4e 2b					.word xt_and
>1ebc		87 17					.word xt_x28literalx29
>1ebe		00 00					.word 0
>1ec0		5f 16					.word xt_assertx3d
>1ec2		87 17					.word xt_x28literalx29
>1ec4		ca 1e					.word l_88
>1ec6		7b 2d					.word xt_x28branchx29
>1ec8		e4 1e					.word l_89
.1eca						l_88:
>1eca		66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1ed2		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1ee2		68 00
.1ee4						l_89:
>1ee4		48 16					.word xt_testname
>1ee6		87 17					.word xt_x28literalx29
>1ee8		ff ff					.word 65535
>1eea		87 17					.word xt_x28literalx29
>1eec		00 00					.word 0
>1eee		4e 2b					.word xt_and
>1ef0		87 17					.word xt_x28literalx29
>1ef2		00 00					.word 0
>1ef4		5f 16					.word xt_assertx3d
>1ef6		87 17					.word xt_x28literalx29
>1ef8		fe 1e					.word l_90
>1efa		7b 2d					.word xt_x28branchx29
>1efc		18 1f					.word l_91
.1efe						l_90:
>1efe		66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1f06		66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1f16		68 00
.1f18						l_91:
>1f18		48 16					.word xt_testname
>1f1a		87 17					.word xt_x28literalx29
>1f1c		ff ff					.word 65535
>1f1e		87 17					.word xt_x28literalx29
>1f20		ff ff					.word 65535
>1f22		4e 2b					.word xt_and
>1f24		87 17					.word xt_x28literalx29
>1f26		ff ff					.word 65535
>1f28		5f 16					.word xt_assertx3d
>1f2a		87 17					.word xt_x28literalx29
>1f2c		32 1f					.word l_92
>1f2e		7b 2d					.word xt_x28branchx29
>1f30		4b 1f					.word l_93
.1f32						l_92:
>1f32		30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1f3a		30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1f4a		00
.1f4b						l_93:
>1f4b		48 16					.word xt_testname
>1f4d		87 17					.word xt_x28literalx29
>1f4f		00 00					.word 0
>1f51		87 17					.word xt_x28literalx29
>1f53		00 00					.word 0
>1f55		64 2b					.word xt_or
>1f57		87 17					.word xt_x28literalx29
>1f59		00 00					.word 0
>1f5b		5f 16					.word xt_assertx3d
>1f5d		87 17					.word xt_x28literalx29
>1f5f		65 1f					.word l_94
>1f61		7b 2d					.word xt_x28branchx29
>1f63		7e 1f					.word l_95
.1f65						l_94:
>1f65		30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1f6d		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1f7d		00
.1f7e						l_95:
>1f7e		48 16					.word xt_testname
>1f80		87 17					.word xt_x28literalx29
>1f82		00 00					.word 0
>1f84		87 17					.word xt_x28literalx29
>1f86		ff ff					.word 65535
>1f88		64 2b					.word xt_or
>1f8a		87 17					.word xt_x28literalx29
>1f8c		ff ff					.word 65535
>1f8e		5f 16					.word xt_assertx3d
>1f90		87 17					.word xt_x28literalx29
>1f92		98 1f					.word l_96
>1f94		7b 2d					.word xt_x28branchx29
>1f96		b1 1f					.word l_97
.1f98						l_96:
>1f98		66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>1fa0		30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1fb0		00
.1fb1						l_97:
>1fb1		48 16					.word xt_testname
>1fb3		87 17					.word xt_x28literalx29
>1fb5		ff ff					.word 65535
>1fb7		87 17					.word xt_x28literalx29
>1fb9		00 00					.word 0
>1fbb		64 2b					.word xt_or
>1fbd		87 17					.word xt_x28literalx29
>1fbf		ff ff					.word 65535
>1fc1		5f 16					.word xt_assertx3d
>1fc3		87 17					.word xt_x28literalx29
>1fc5		cb 1f					.word l_98
>1fc7		7b 2d					.word xt_x28branchx29
>1fc9		e4 1f					.word l_99
.1fcb						l_98:
>1fcb		66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>1fd3		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1fe3		00
.1fe4						l_99:
>1fe4		48 16					.word xt_testname
>1fe6		87 17					.word xt_x28literalx29
>1fe8		ff ff					.word 65535
>1fea		87 17					.word xt_x28literalx29
>1fec		ff ff					.word 65535
>1fee		64 2b					.word xt_or
>1ff0		87 17					.word xt_x28literalx29
>1ff2		ff ff					.word 65535
>1ff4		5f 16					.word xt_assertx3d
>1ff6		87 17					.word xt_x28literalx29
>1ff8		fe 1f					.word l_100
>1ffa		7b 2d					.word xt_x28branchx29
>1ffc		18 20					.word l_101
.1ffe						l_100:
>1ffe		30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>2006		30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2016		68 00
.2018						l_101:
>2018		48 16					.word xt_testname
>201a		87 17					.word xt_x28literalx29
>201c		00 00					.word 0
>201e		87 17					.word xt_x28literalx29
>2020		00 00					.word 0
>2022		7b 2b					.word xt_xor
>2024		87 17					.word xt_x28literalx29
>2026		00 00					.word 0
>2028		5f 16					.word xt_assertx3d
>202a		87 17					.word xt_x28literalx29
>202c		32 20					.word l_102
>202e		7b 2d					.word xt_x28branchx29
>2030		4c 20					.word l_103
.2032						l_102:
>2032		30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>203a		66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>204a		68 00
.204c						l_103:
>204c		48 16					.word xt_testname
>204e		87 17					.word xt_x28literalx29
>2050		00 00					.word 0
>2052		87 17					.word xt_x28literalx29
>2054		ff ff					.word 65535
>2056		7b 2b					.word xt_xor
>2058		87 17					.word xt_x28literalx29
>205a		ff ff					.word 65535
>205c		5f 16					.word xt_assertx3d
>205e		87 17					.word xt_x28literalx29
>2060		66 20					.word l_104
>2062		7b 2d					.word xt_x28branchx29
>2064		80 20					.word l_105
.2066						l_104:
>2066		66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>206e		30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>207e		68 00
.2080						l_105:
>2080		48 16					.word xt_testname
>2082		87 17					.word xt_x28literalx29
>2084		ff ff					.word 65535
>2086		87 17					.word xt_x28literalx29
>2088		00 00					.word 0
>208a		7b 2b					.word xt_xor
>208c		87 17					.word xt_x28literalx29
>208e		ff ff					.word 65535
>2090		5f 16					.word xt_assertx3d
>2092		87 17					.word xt_x28literalx29
>2094		9a 20					.word l_106
>2096		7b 2d					.word xt_x28branchx29
>2098		b4 20					.word l_107
.209a						l_106:
>209a		66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>20a2		66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>20b2		68 00
.20b4						l_107:
>20b4		48 16					.word xt_testname
>20b6		87 17					.word xt_x28literalx29
>20b8		ff ff					.word 65535
>20ba		87 17					.word xt_x28literalx29
>20bc		ff ff					.word 65535
>20be		7b 2b					.word xt_xor
>20c0		87 17					.word xt_x28literalx29
>20c2		00 00					.word 0
>20c4		5f 16					.word xt_assertx3d
>20c6		87 17					.word xt_x28literalx29
>20c8		ce 20					.word l_108
>20ca		7b 2d					.word xt_x28branchx29
>20cc		e2 20					.word l_109
.20ce						l_108:
>20ce		30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>20d6		74 20 2d 2d 3e 20 66 66 66 66 68 00
.20e2						l_109:
>20e2		48 16					.word xt_testname
>20e4		87 17					.word xt_x28literalx29
>20e6		00 00					.word 0
>20e8		92 2b					.word xt_not
>20ea		87 17					.word xt_x28literalx29
>20ec		ff ff					.word 65535
>20ee		5f 16					.word xt_assertx3d
>20f0		87 17					.word xt_x28literalx29
>20f2		f8 20					.word l_110
>20f4		7b 2d					.word xt_x28branchx29
>20f6		0c 21					.word l_111
.20f8						l_110:
>20f8		66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>2100		74 20 2d 2d 3e 20 30 30 30 30 68 00
.210c						l_111:
>210c		48 16					.word xt_testname
>210e		87 17					.word xt_x28literalx29
>2110		ff ff					.word 65535
>2112		92 2b					.word xt_not
>2114		87 17					.word xt_x28literalx29
>2116		00 00					.word 0
>2118		5f 16					.word xt_assertx3d
>211a		87 17					.word xt_x28literalx29
>211c		22 21					.word l_112
>211e		7b 2d					.word xt_x28branchx29
>2120		31 21					.word l_113
.2122						l_112:
>2122		30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>212a		20 30 30 30 30 68 00
.2131						l_113:
>2131		48 16					.word xt_testname
>2133		34 17					.word xt_0
>2135		a6 2b					.word xt_0x3c
>2137		87 17					.word xt_x28literalx29
>2139		00 00					.word 0
>213b		5f 16					.word xt_assertx3d
>213d		87 17					.word xt_x28literalx29
>213f		45 21					.word l_114
>2141		7b 2d					.word xt_x28branchx29
>2143		54 21					.word l_115
.2145						l_114:
>2145		33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>214d		20 30 30 30 30 68 00
.2154						l_115:
>2154		48 16					.word xt_testname
>2156		87 17					.word xt_x28literalx29
>2158		03 00					.word 3
>215a		a6 2b					.word xt_0x3c
>215c		87 17					.word xt_x28literalx29
>215e		00 00					.word 0
>2160		5f 16					.word xt_assertx3d
>2162		87 17					.word xt_x28literalx29
>2164		6a 21					.word l_116
>2166		7b 2d					.word xt_x28branchx29
>2168		7d 21					.word l_117
.216a						l_116:
>216a		66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>2172		20 2d 2d 3e 20 66 66 66 66 68 00
.217d						l_117:
>217d		48 16					.word xt_testname
>217f		87 17					.word xt_x28literalx29
>2181		ff ff					.word 65535
>2183		a6 2b					.word xt_0x3c
>2185		87 17					.word xt_x28literalx29
>2187		ff ff					.word 65535
>2189		5f 16					.word xt_assertx3d
>218b		87 17					.word xt_x28literalx29
>218d		93 21					.word l_118
>218f		7b 2d					.word xt_x28branchx29
>2191		a2 21					.word l_119
.2193						l_118:
>2193		30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>219b		20 66 66 66 66 68 00
.21a2						l_119:
>21a2		48 16					.word xt_testname
>21a4		34 17					.word xt_0
>21a6		bf 2b					.word xt_0x3d
>21a8		87 17					.word xt_x28literalx29
>21aa		ff ff					.word 65535
>21ac		5f 16					.word xt_assertx3d
>21ae		87 17					.word xt_x28literalx29
>21b0		b6 21					.word l_120
>21b2		7b 2d					.word xt_x28branchx29
>21b4		c5 21					.word l_121
.21b6						l_120:
>21b6		33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>21be		20 30 30 30 30 68 00
.21c5						l_121:
>21c5		48 16					.word xt_testname
>21c7		87 17					.word xt_x28literalx29
>21c9		03 00					.word 3
>21cb		bf 2b					.word xt_0x3d
>21cd		87 17					.word xt_x28literalx29
>21cf		00 00					.word 0
>21d1		5f 16					.word xt_assertx3d
>21d3		87 17					.word xt_x28literalx29
>21d5		db 21					.word l_122
>21d7		7b 2d					.word xt_x28branchx29
>21d9		ee 21					.word l_123
.21db						l_122:
>21db		66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>21e3		20 2d 2d 3e 20 30 30 30 30 68 00
.21ee						l_123:
>21ee		48 16					.word xt_testname
>21f0		87 17					.word xt_x28literalx29
>21f2		ff ff					.word 65535
>21f4		bf 2b					.word xt_0x3d
>21f6		87 17					.word xt_x28literalx29
>21f8		00 00					.word 0
>21fa		5f 16					.word xt_assertx3d
>21fc		87 17					.word xt_x28literalx29
>21fe		04 22					.word l_124
>2200		7b 2d					.word xt_x28branchx29
>2202		13 22					.word l_125
.2204						l_124:
>2204		30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>220c		20 30 30 30 30 68 00
.2213						l_125:
>2213		48 16					.word xt_testname
>2215		34 17					.word xt_0
>2217		dc 2b					.word xt_0x3e
>2219		87 17					.word xt_x28literalx29
>221b		00 00					.word 0
>221d		5f 16					.word xt_assertx3d
>221f		87 17					.word xt_x28literalx29
>2221		27 22					.word l_126
>2223		7b 2d					.word xt_x28branchx29
>2225		36 22					.word l_127
.2227						l_126:
>2227		33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>222f		20 66 66 66 66 68 00
.2236						l_127:
>2236		48 16					.word xt_testname
>2238		87 17					.word xt_x28literalx29
>223a		03 00					.word 3
>223c		dc 2b					.word xt_0x3e
>223e		87 17					.word xt_x28literalx29
>2240		ff ff					.word 65535
>2242		5f 16					.word xt_assertx3d
>2244		87 17					.word xt_x28literalx29
>2246		4c 22					.word l_128
>2248		7b 2d					.word xt_x28branchx29
>224a		5f 22					.word l_129
.224c						l_128:
>224c		66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>2254		20 2d 2d 3e 20 30 30 30 30 68 00
.225f						l_129:
>225f		48 16					.word xt_testname
>2261		87 17					.word xt_x28literalx29
>2263		ff ff					.word 65535
>2265		dc 2b					.word xt_0x3e
>2267		87 17					.word xt_x28literalx29
>2269		00 00					.word 0
>226b		5f 16					.word xt_assertx3d
>226d		87 17					.word xt_x28literalx29
>226f		75 22					.word l_130
>2271		7b 2d					.word xt_x28branchx29
>2273		8c 22					.word l_131
.2275						l_130:
>2275		63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>227d		2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.228c						l_131:
>228c		48 16					.word xt_testname
>228e		45 2c					.word xt_cells
>2290		50 17					.word xt_2
>2292		fc 29					.word xt_x2d
>2294		bf 2b					.word xt_0x3d
>2296		87 17					.word xt_x28literalx29
>2298		ff ff					.word 65535
>229a		5f 16					.word xt_assertx3d
>229c		87 17					.word xt_x28literalx29
>229e		a4 22					.word l_132
>22a0		7b 2d					.word xt_x28branchx29
>22a2		b9 22					.word l_133
.22a4						l_132:
>22a4		62 6c 20 33 32 20 2d 20			.null "bl 32 - 0= --> ffffh"
>22ac		30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.22b9						l_133:
>22b9		48 16					.word xt_testname
>22bb		5d 2c					.word xt_bl
>22bd		87 17					.word xt_x28literalx29
>22bf		20 00					.word 32
>22c1		fc 29					.word xt_x2d
>22c3		bf 2b					.word xt_0x3d
>22c5		87 17					.word xt_x28literalx29
>22c7		ff ff					.word 65535
>22c9		5f 16					.word xt_assertx3d
>22cb		87 17					.word xt_x28literalx29
>22cd		d3 22					.word l_134
>22cf		7b 2d					.word xt_x28branchx29
>22d1		e5 22					.word l_135
.22d3						l_134:
>22d3		27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>22db		75 74 65 20 2d 2d 3e 20 31 00
.22e5						l_135:
>22e5		48 16					.word xt_testname
>22e7		87 17					.word xt_x28literalx29
>22e9		41 17					.word xt_1
>22eb		ea 2e					.word xt_execute
>22ed		41 17					.word xt_1
>22ef		5f 16					.word xt_assertx3d
>22f1		87 17					.word xt_x28literalx29
>22f3		f9 22					.word l_136
>22f5		7b 2d					.word xt_x28branchx29
>22f7		0f 23					.word l_137
.22f9						l_136:
>22f9		31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>2301		65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.230f						l_137:
>230f		48 16					.word xt_testname
>2311		41 17					.word xt_1
>2313		50 17					.word xt_2
>2315		87 17					.word xt_x28literalx29
>2317		e6 29					.word xt_x2b
>2319		ea 2e					.word xt_execute
>231b		87 17					.word xt_x28literalx29
>231d		03 00					.word 3
>231f		5f 16					.word xt_assertx3d
>2321		87 17					.word xt_x28literalx29
>2323		29 23					.word l_139
>2325		7b 2d					.word xt_x28branchx29
>2327		36 23					.word l_140
.2329						l_139:
>2329		30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>2331		2d 3e 20 30 00
.2336						l_140:
>2336		48 16					.word xt_testname
>2338		34 17					.word xt_0
>233a		45 2f					.word xt_x3fdup
>233c		34 17					.word xt_0
>233e		5f 16					.word xt_assertx3d
>2340		87 17					.word xt_x28literalx29
>2342		48 23					.word l_141
>2344		7b 2d					.word xt_x28branchx29
>2346		57 23					.word l_142
.2348						l_141:
>2348		31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>2350		2d 3e 20 31 20 31 00
.2357						l_142:
>2357		48 16					.word xt_testname
>2359		41 17					.word xt_1
>235b		45 2f					.word xt_x3fdup
>235d		41 17					.word xt_1
>235f		5f 16					.word xt_assertx3d
>2361		41 17					.word xt_1
>2363		5f 16					.word xt_assertx3d
>2365		87 17					.word xt_x28literalx29
>2367		6d 23					.word l_143
>2369		7b 2d					.word xt_x28branchx29
>236b		7d 23					.word l_144
.236d						l_143:
>236d		31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>2375		3e 20 66 66 66 66 68 00
.237d						l_144:
>237d		48 16					.word xt_testname
>237f		41 17					.word xt_1
>2381		50 17					.word xt_2
>2383		65 2f					.word xt_x3c
>2385		87 17					.word xt_x28literalx29
>2387		ff ff					.word 65535
>2389		5f 16					.word xt_assertx3d
>238b		87 17					.word xt_x28literalx29
>238d		93 23					.word l_145
>238f		7b 2d					.word xt_x28branchx29
>2391		a3 23					.word l_146
.2393						l_145:
>2393		32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>239b		3e 20 30 30 30 30 68 00
.23a3						l_146:
>23a3		48 16					.word xt_testname
>23a5		50 17					.word xt_2
>23a7		41 17					.word xt_1
>23a9		65 2f					.word xt_x3c
>23ab		87 17					.word xt_x28literalx29
>23ad		00 00					.word 0
>23af		5f 16					.word xt_assertx3d
>23b1		87 17					.word xt_x28literalx29
>23b3		b9 23					.word l_147
>23b5		7b 2d					.word xt_x28branchx29
>23b7		cd 23					.word l_148
.23b9						l_147:
>23b9		30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>23c1		3c 20 2d 2d 3e 20 30 30 30 30 68 00
.23cd						l_148:
>23cd		48 16					.word xt_testname
>23cf		34 17					.word xt_0
>23d1		87 17					.word xt_x28literalx29
>23d3		ff ff					.word 65535
>23d5		65 2f					.word xt_x3c
>23d7		87 17					.word xt_x28literalx29
>23d9		00 00					.word 0
>23db		5f 16					.word xt_assertx3d
>23dd		87 17					.word xt_x28literalx29
>23df		e5 23					.word l_149
>23e1		7b 2d					.word xt_x28branchx29
>23e3		f9 23					.word l_150
.23e5						l_149:
>23e5		66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>23ed		3c 20 2d 2d 3e 20 66 66 66 66 68 00
.23f9						l_150:
>23f9		48 16					.word xt_testname
>23fb		87 17					.word xt_x28literalx29
>23fd		ff ff					.word 65535
>23ff		34 17					.word xt_0
>2401		65 2f					.word xt_x3c
>2403		87 17					.word xt_x28literalx29
>2405		ff ff					.word 65535
>2407		5f 16					.word xt_assertx3d
>2409		87 17					.word xt_x28literalx29
>240b		11 24					.word l_151
>240d		7b 2d					.word xt_x28branchx29
>240f		21 24					.word l_152
.2411						l_151:
>2411		31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2419		3e 20 30 30 30 30 68 00
.2421						l_152:
>2421		48 16					.word xt_testname
>2423		41 17					.word xt_1
>2425		50 17					.word xt_2
>2427		81 2f					.word xt_x3e
>2429		87 17					.word xt_x28literalx29
>242b		00 00					.word 0
>242d		5f 16					.word xt_assertx3d
>242f		87 17					.word xt_x28literalx29
>2431		37 24					.word l_153
>2433		7b 2d					.word xt_x28branchx29
>2435		47 24					.word l_154
.2437						l_153:
>2437		32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>243f		3e 20 66 66 66 66 68 00
.2447						l_154:
>2447		48 16					.word xt_testname
>2449		50 17					.word xt_2
>244b		41 17					.word xt_1
>244d		81 2f					.word xt_x3e
>244f		87 17					.word xt_x28literalx29
>2451		ff ff					.word 65535
>2453		5f 16					.word xt_assertx3d
>2455		87 17					.word xt_x28literalx29
>2457		5d 24					.word l_155
>2459		7b 2d					.word xt_x28branchx29
>245b		71 24					.word l_156
.245d						l_155:
>245d		30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2465		3e 20 2d 2d 3e 20 66 66 66 66 68 00
.2471						l_156:
>2471		48 16					.word xt_testname
>2473		34 17					.word xt_0
>2475		87 17					.word xt_x28literalx29
>2477		ff ff					.word 65535
>2479		81 2f					.word xt_x3e
>247b		87 17					.word xt_x28literalx29
>247d		ff ff					.word 65535
>247f		5f 16					.word xt_assertx3d
>2481		87 17					.word xt_x28literalx29
>2483		89 24					.word l_157
>2485		7b 2d					.word xt_x28branchx29
>2487		9d 24					.word l_158
.2489						l_157:
>2489		66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>2491		3e 20 2d 2d 3e 20 30 30 30 30 68 00
.249d						l_158:
>249d		48 16					.word xt_testname
>249f		87 17					.word xt_x28literalx29
>24a1		ff ff					.word 65535
>24a3		34 17					.word xt_0
>24a5		81 2f					.word xt_x3e
>24a7		87 17					.word xt_x28literalx29
>24a9		00 00					.word 0
>24ab		5f 16					.word xt_assertx3d
>24ad		87 17					.word xt_x28literalx29
>24af		b5 24					.word l_159
>24b1		7b 2d					.word xt_x28branchx29
>24b3		c5 24					.word l_160
.24b5						l_159:
>24b5		31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>24bd		3e 20 30 30 30 30 68 00
.24c5						l_160:
>24c5		48 16					.word xt_testname
>24c7		41 17					.word xt_1
>24c9		34 17					.word xt_0
>24cb		9d 2f					.word xt_x3d
>24cd		87 17					.word xt_x28literalx29
>24cf		00 00					.word 0
>24d1		5f 16					.word xt_assertx3d
>24d3		87 17					.word xt_x28literalx29
>24d5		db 24					.word l_161
>24d7		7b 2d					.word xt_x28branchx29
>24d9		eb 24					.word l_162
.24db						l_161:
>24db		31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>24e3		3e 20 66 66 66 66 68 00
.24eb						l_162:
>24eb		48 16					.word xt_testname
>24ed		41 17					.word xt_1
>24ef		41 17					.word xt_1
>24f1		9d 2f					.word xt_x3d
>24f3		87 17					.word xt_x28literalx29
>24f5		ff ff					.word 65535
>24f7		5f 16					.word xt_assertx3d
>24f9		87 17					.word xt_x28literalx29
>24fb		01 25					.word l_163
>24fd		7b 2d					.word xt_x28branchx29
>24ff		15 25					.word l_164
.2501						l_163:
>2501		66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2509		3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2515						l_164:
>2515		48 16					.word xt_testname
>2517		87 17					.word xt_x28literalx29
>2519		ff ff					.word 65535
>251b		34 17					.word xt_0
>251d		9d 2f					.word xt_x3d
>251f		87 17					.word xt_x28literalx29
>2521		00 00					.word 0
>2523		5f 16					.word xt_assertx3d
>2525		87 17					.word xt_x28literalx29
>2527		2d 25					.word l_165
>2529		7b 2d					.word xt_x28branchx29
>252b		45 25					.word l_166
.252d						l_165:
>252d		66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2535		66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2545						l_166:
>2545		48 16					.word xt_testname
>2547		87 17					.word xt_x28literalx29
>2549		ff ff					.word 65535
>254b		87 17					.word xt_x28literalx29
>254d		ff ff					.word 65535
>254f		9d 2f					.word xt_x3d
>2551		87 17					.word xt_x28literalx29
>2553		ff ff					.word 65535
>2555		5f 16					.word xt_assertx3d
>2557		87 17					.word xt_x28literalx29
>2559		5f 25					.word l_167
>255b		7b 2d					.word xt_x28branchx29
>255d		6f 25					.word l_168
.255f						l_167:
>255f		30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2567		3e 20 66 66 66 66 68 00
.256f						l_168:
>256f		48 16					.word xt_testname
>2571		34 17					.word xt_0
>2573		34 17					.word xt_0
>2575		9d 2f					.word xt_x3d
>2577		87 17					.word xt_x28literalx29
>2579		ff ff					.word 65535
>257b		5f 16					.word xt_assertx3d
>257d		87 17					.word xt_x28literalx29
>257f		85 25					.word l_169
>2581		7b 2d					.word xt_x28branchx29
>2583		91 25					.word l_170
.2585						l_169:
>2585		36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>258d		3e 20 32 00
.2591						l_170:
>2591		48 16					.word xt_testname
>2593		87 17					.word xt_x28literalx29
>2595		06 00					.word 6
>2597		87 17					.word xt_x28literalx29
>2599		03 00					.word 3
>259b		b9 2f					.word xt_x2f
>259d		50 17					.word xt_2
>259f		5f 16					.word xt_assertx3d
>25a1		87 17					.word xt_x28literalx29
>25a3		a9 25					.word l_171
>25a5		7b 2d					.word xt_x28branchx29
>25a7		b6 25					.word l_172
.25a9						l_171:
>25a9		31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>25b1		2d 3e 20 33 00
.25b6						l_172:
>25b6		48 16					.word xt_testname
>25b8		87 17					.word xt_x28literalx29
>25ba		0a 00					.word 10
>25bc		87 17					.word xt_x28literalx29
>25be		03 00					.word 3
>25c0		b9 2f					.word xt_x2f
>25c2		87 17					.word xt_x28literalx29
>25c4		03 00					.word 3
>25c6		5f 16					.word xt_assertx3d
>25c8		87 17					.word xt_x28literalx29
>25ca		d0 25					.word l_173
>25cc		7b 2d					.word xt_x28branchx29
>25ce		de 25					.word l_174
.25d0						l_173:
>25d0		36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>25d8		2d 2d 3e 20 30 00
.25de						l_174:
>25de		48 16					.word xt_testname
>25e0		87 17					.word xt_x28literalx29
>25e2		06 00					.word 6
>25e4		87 17					.word xt_x28literalx29
>25e6		03 00					.word 3
>25e8		d7 2f					.word xt_mod
>25ea		34 17					.word xt_0
>25ec		5f 16					.word xt_assertx3d
>25ee		87 17					.word xt_x28literalx29
>25f0		f6 25					.word l_175
>25f2		7b 2d					.word xt_x28branchx29
>25f4		05 26					.word l_176
.25f6						l_175:
>25f6		31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>25fe		20 2d 2d 3e 20 31 00
.2605						l_176:
>2605		48 16					.word xt_testname
>2607		87 17					.word xt_x28literalx29
>2609		0a 00					.word 10
>260b		87 17					.word xt_x28literalx29
>260d		03 00					.word 3
>260f		d7 2f					.word xt_mod
>2611		41 17					.word xt_1
>2613		5f 16					.word xt_assertx3d
>2615		87 17					.word xt_x28literalx29
>2617		1d 26					.word l_180
>2619		7b 2d					.word xt_x28branchx29
>261b		2b 26					.word l_181
.261d						l_180:
>261d		31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2625		2d 2d 3e 20 32 00
.262b						l_181:
>262b		48 16					.word xt_testname
>262d		41 17					.word xt_1
>262f		50 17					.word xt_2
>2631		19 30					.word xt_max
>2633		50 17					.word xt_2
>2635		5f 16					.word xt_assertx3d
>2637		87 17					.word xt_x28literalx29
>2639		3f 26					.word l_182
>263b		7b 2d					.word xt_x28branchx29
>263d		4d 26					.word l_183
.263f						l_182:
>263f		33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2647		2d 2d 3e 20 33 00
.264d						l_183:
>264d		48 16					.word xt_testname
>264f		87 17					.word xt_x28literalx29
>2651		03 00					.word 3
>2653		34 17					.word xt_0
>2655		19 30					.word xt_max
>2657		87 17					.word xt_x28literalx29
>2659		03 00					.word 3
>265b		5f 16					.word xt_assertx3d
>265d		87 17					.word xt_x28literalx29
>265f		65 26					.word l_184
>2661		7b 2d					.word xt_x28branchx29
>2663		7f 26					.word l_185
.2665						l_184:
>2665		66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>266d		66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>267d		68 00
.267f						l_185:
>267f		48 16					.word xt_testname
>2681		87 17					.word xt_x28literalx29
>2683		fe ff					.word 65534
>2685		87 17					.word xt_x28literalx29
>2687		ff ff					.word 65535
>2689		19 30					.word xt_max
>268b		87 17					.word xt_x28literalx29
>268d		ff ff					.word 65535
>268f		5f 16					.word xt_assertx3d
>2691		87 17					.word xt_x28literalx29
>2693		99 26					.word l_188
>2695		7b 2d					.word xt_x28branchx29
>2697		a7 26					.word l_189
.2699						l_188:
>2699		31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>26a1		2d 2d 3e 20 31 00
.26a7						l_189:
>26a7		48 16					.word xt_testname
>26a9		41 17					.word xt_1
>26ab		50 17					.word xt_2
>26ad		45 30					.word xt_min
>26af		41 17					.word xt_1
>26b1		5f 16					.word xt_assertx3d
>26b3		87 17					.word xt_x28literalx29
>26b5		bb 26					.word l_190
>26b7		7b 2d					.word xt_x28branchx29
>26b9		c9 26					.word l_191
.26bb						l_190:
>26bb		33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>26c3		2d 2d 3e 20 30 00
.26c9						l_191:
>26c9		48 16					.word xt_testname
>26cb		87 17					.word xt_x28literalx29
>26cd		03 00					.word 3
>26cf		34 17					.word xt_0
>26d1		45 30					.word xt_min
>26d3		34 17					.word xt_0
>26d5		5f 16					.word xt_assertx3d
>26d7		87 17					.word xt_x28literalx29
>26d9		df 26					.word l_192
>26db		7b 2d					.word xt_x28branchx29
>26dd		f9 26					.word l_193
.26df						l_192:
>26df		66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>26e7		66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>26f7		68 00
.26f9						l_193:
>26f9		48 16					.word xt_testname
>26fb		87 17					.word xt_x28literalx29
>26fd		fe ff					.word 65534
>26ff		87 17					.word xt_x28literalx29
>2701		ff ff					.word 65535
>2703		45 30					.word xt_min
>2705		87 17					.word xt_x28literalx29
>2707		fe ff					.word 65534
>2709		5f 16					.word xt_assertx3d
>270b		87 17					.word xt_x28literalx29
>270d		13 27					.word l_194
>270f		7b 2d					.word xt_x28branchx29
>2711		27 27					.word l_195
.2713						l_194:
>2713		31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>271b		74 20 2d 2d 3e 20 32 20 33 20 31 00
.2727						l_195:
>2727		48 16					.word xt_testname
>2729		41 17					.word xt_1
>272b		50 17					.word xt_2
>272d		87 17					.word xt_x28literalx29
>272f		03 00					.word 3
>2731		71 30					.word xt_rot
>2733		41 17					.word xt_1
>2735		5f 16					.word xt_assertx3d
>2737		87 17					.word xt_x28literalx29
>2739		03 00					.word 3
>273b		5f 16					.word xt_assertx3d
>273d		50 17					.word xt_2
>273f		5f 16					.word xt_assertx3d
>2741		87 17					.word xt_x28literalx29
>2743		49 27					.word l_196
>2745		7b 2d					.word xt_x28branchx29
>2747		5e 27					.word l_197
.2749						l_196:
>2749		31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>2751		20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.275e						l_197:
>275e		48 16					.word xt_testname
>2760		41 17					.word xt_1
>2762		50 17					.word xt_2
>2764		91 30					.word xt_2dup
>2766		50 17					.word xt_2
>2768		5f 16					.word xt_assertx3d
>276a		41 17					.word xt_1
>276c		5f 16					.word xt_assertx3d
>276e		50 17					.word xt_2
>2770		5f 16					.word xt_assertx3d
>2772		41 17					.word xt_1
>2774		5f 16					.word xt_assertx3d
>2776		87 17					.word xt_x28literalx29
>2778		7e 27					.word l_198
>277a		7b 2d					.word xt_x28branchx29
>277c		94 27					.word l_199
.277e						l_198:
>277e		31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>2786		32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.2794						l_199:
>2794		48 16					.word xt_testname
>2796		41 17					.word xt_1
>2798		50 17					.word xt_2
>279a		87 17					.word xt_x28literalx29
>279c		03 00					.word 3
>279e		87 17					.word xt_x28literalx29
>27a0		04 00					.word 4
>27a2		ad 30					.word xt_2drop
>27a4		50 17					.word xt_2
>27a6		5f 16					.word xt_assertx3d
>27a8		41 17					.word xt_1
>27aa		5f 16					.word xt_assertx3d
>27ac		08 16					.word i_exit
.27ae						w_drop:
>27ae		04					.byte $04
>27af		64 72 6f 70				.text 'drop'
>27b3		bc 17					.word w_unittest
.27b5						xt_drop:
.27b5		e8		inx			inx
.27b6		e8		inx			inx
.27b7		4c 23 16	jmp $1623		jmp next
.27ba						w_dup:
>27ba		03					.byte $03
>27bb		64 75 70				.text 'dup'
>27be		ae 27					.word w_drop
.27c0						xt_dup:
.27c0		b5 02		lda $02,x		lda pstack+2,x
.27c2		95 00		sta $00,x		sta pstack,x
.27c4		b5 03		lda $03,x		lda pstack+3,x
.27c6		95 01		sta $01,x		sta pstack+1,x
.27c8		ca		dex			dex
.27c9		ca		dex			dex
.27ca		4c 23 16	jmp $1623		jmp next
.27cd						w_swap:
>27cd		04					.byte $04
>27ce		73 77 61 70				.text 'swap'
>27d2		ba 27					.word w_dup
.27d4						xt_swap:
.27d4		b5 02		lda $02,x		lda pstack+2,x
.27d6		b4 04		ldy $04,x		ldy pstack+4,x
.27d8		94 02		sty $02,x		sty pstack+2,x
.27da		95 04		sta $04,x		sta pstack+4,x
.27dc		b5 03		lda $03,x		lda pstack+3,x
.27de		b4 05		ldy $05,x		ldy pstack+5,x
.27e0		94 03		sty $03,x		sty pstack+3,x
.27e2		95 05		sta $05,x		sta pstack+5,x
.27e4		4c 23 16	jmp $1623		jmp next
.27e7						w_over:
>27e7		04					.byte $04
>27e8		6f 76 65 72				.text 'over'
>27ec		cd 27					.word w_swap
.27ee						xt_over:
.27ee		b5 04		lda $04,x		lda pstack+4,x
.27f0		95 00		sta $00,x		sta pstack,x
.27f2		b5 05		lda $05,x		lda pstack+5,x
.27f4		95 01		sta $01,x		sta pstack+1,x
.27f6		ca		dex			dex
.27f7		ca		dex			dex
.27f8		4c 23 16	jmp $1623		jmp next
.27fb						w_x3er:
>27fb		02					.byte $02
>27fc		3e 72					.text '>r'
>27fe		e7 27					.word w_over
.2800						xt_x3er:
.2800		b5 03		lda $03,x		lda pstack+3,x
.2802		48		pha			pha
.2803		b5 02		lda $02,x		lda pstack+2,x
.2805		48		pha			pha
.2806		e8		inx			inx
.2807		e8		inx			inx
.2808		4c 23 16	jmp $1623		jmp next
.280b						w_rx3e:
>280b		02					.byte $02
>280c		72 3e					.text 'r>'
>280e		fb 27					.word w_x3er
.2810						xt_rx3e:
.2810		68		pla			pla
.2811		95 00		sta $00,x		sta pstack,x
.2813		68		pla			pla
.2814		95 01		sta $01,x		sta pstack+1,x
.2816		ca		dex			dex
.2817		ca		dex			dex
.2818		4c 23 16	jmp $1623		jmp next
.281b						w_r:
>281b		01					.byte $01
>281c		72					.text 'r'
>281d		0b 28					.word w_rx3e
.281f						xt_r:
.281f		68		pla			pla
.2820		95 00		sta $00,x		sta pstack,x
.2822		68		pla			pla
.2823		95 01		sta $01,x		sta pstack+1,x
.2825		48		pha			pha
.2826		b5 00		lda $00,x		lda pstack,x
.2828		48		pha			pha
.2829		ca		dex			dex
.282a		ca		dex			dex
.282b		4c 23 16	jmp $1623		jmp next
.282e						w_rdrop:
>282e		05					.byte $05
>282f		72 64 72 6f 70				.text 'rdrop'
>2834		1b 28					.word w_r
.2836						xt_rdrop:
.2836		68		pla			pla
.2837		68		pla			pla
.2838						w_x21:
>2838		01					.byte $01
>2839		21					.text '!'
>283a		2e 28					.word w_rdrop
.283c						xt_x21:
.283c		b5 02		lda $02,x		lda pstack+2,x
.283e		85 32		sta $32			sta tmp
.2840		b5 03		lda $03,x		lda pstack+3,x
.2842		85 33		sta $33			sta tmp+1
.2844		a0 01		ldy #$01		ldy #1
.2846		b5 04		lda $04,x		lda pstack+4,x
.2848		92 32		sta ($32)		sta (tmp)
.284a		b5 05		lda $05,x		lda pstack+5,x
.284c		91 32		sta ($32),y		sta (tmp),y
.284e		e8		inx			inx
.284f		e8		inx			inx
.2850		e8		inx			inx
.2851		e8		inx			inx
.2852		4c 23 16	jmp $1623		jmp next
.2855						w_x40:
>2855		01					.byte $01
>2856		40					.text '@'
>2857		38 28					.word w_x21
.2859						xt_x40:
.2859		b5 02		lda $02,x		lda pstack+2,x
.285b		85 32		sta $32			sta tmp
.285d		b5 03		lda $03,x		lda pstack+3,x
.285f		85 33		sta $33			sta tmp+1
.2861		a0 01		ldy #$01		ldy #1
.2863		b2 32		lda ($32)		lda (tmp)
.2865		95 02		sta $02,x		sta pstack+2,x
.2867		b1 32		lda ($32),y		lda (tmp),y
.2869		95 03		sta $03,x		sta pstack+3,x
.286b		4c 23 16	jmp $1623		jmp next
.286e						w_cx21:
>286e		02					.byte $02
>286f		63 21					.text 'c!'
>2871		55 28					.word w_x40
.2873						xt_cx21:
.2873		b5 04		lda $04,x		lda pstack+4,x
.2875		81 02		sta ($02,x)		sta (pstack+2,x)
.2877		e8		inx			inx
.2878		e8		inx			inx
.2879		e8		inx			inx
.287a		e8		inx			inx
.287b		4c 23 16	jmp $1623		jmp next
.287e						w_cx40:
>287e		02					.byte $02
>287f		63 40					.text 'c@'
>2881		6e 28					.word w_cx21
.2883						xt_cx40:
.2883		a1 02		lda ($02,x)		lda (pstack+2,x)
.2885		95 02		sta $02,x		sta pstack+2,x
.2887		74 03		stz $03,x		stz pstack+3,x
.2889		4c 23 16	jmp $1623		jmp next
.288c						w_fill:
>288c		04					.byte $04
>288d		66 69 6c 6c				.text 'fill'
>2891		7e 28					.word w_cx40
.2893						xt_fill:
.2893							loop:
.2893		b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.2895		d0 04		bne $289b		bne do_write
.2897		b5 04		lda $04,x		lda pstack+4,x
.2899		f0 19		beq $28b4		beq done                ; Yes: we're done...
.289b							do_write:
.289b		b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.289d		81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.289f		f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.28a1		d0 02		bne $28a5		bne deccount
.28a3		f6 06		inc $06,x		inc pstack+6,x
.28a5							deccount:
.28a5		38		sec			sec                     ; Decrement the count
.28a6		b5 03		lda $03,x		lda pstack+3,x
.28a8		e9 01		sbc #$01		sbc #1
.28aa		95 03		sta $03,x		sta pstack+3,x
.28ac		b5 04		lda $04,x		lda pstack+4,x
.28ae		e9 00		sbc #$00		sbc #0
.28b0		95 04		sta $04,x		sta pstack+4,x
.28b2		80 df		bra $2893		bra loop                ; And check again
.28b4							done:
.28b4		8a		txa			txa                     ; Clean up the parameter stack
.28b5		69 06		adc #$06		adc #6
.28b7		aa		tax			tax
.28b8		4c 23 16	jmp $1623		jmp next
.28bb						w_x2bx21:
>28bb		02					.byte $02
>28bc		2b 21					.text '+!'
>28be		8c 28					.word w_fill
.28c0						xt_x2bx21:
.28c0		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the low byte
.28c2		1a		inc a			inc a
.28c3		81 02		sta ($02,x)		sta (pstack+2,x)
.28c5		d0 11		bne $28d8		bne done                ; If it does not roll over, we're done
.28c7		b5 02		lda $02,x		lda pstack+2,x          ; Increment the pointer
.28c9		1a		inc a			inc a
.28ca		95 02		sta $02,x		sta pstack+2,x
.28cc		d0 05		bne $28d3		bne inc2
.28ce		b5 03		lda $03,x		lda pstack+3,x
.28d0		1a		inc a			inc a
.28d1		95 03		sta $03,x		sta pstack+3,x
.28d3							inc2:
.28d3		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the high byte
.28d5		1a		inc a			inc a
.28d6		81 02		sta ($02,x)		sta (pstack+2,x)
.28d8							done:
.28d8		e8		inx			inx                     ; Clean up the stack
.28d9		e8		inx			inx
.28da		4c 23 16	jmp $1623		jmp next
.28dd						w_enclose:
>28dd		07					.byte $07
>28de		65 6e 63 6c 6f 73 65			.text 'enclose'
>28e5		bb 28					.word w_x2bx21
.28e7						xt_enclose:
.28e7		b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.28e9		85 25		sta $25			sta src_ptr+1
.28eb		b5 04		lda $04,x		lda pstack+4,x
.28ed		85 24		sta $24			sta src_ptr
.28ef		b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.28f1		85 32		sta $32			sta tmp
.28f3		8a		txa			txa
.28f4		38		sec			sec
.28f5		e9 04		sbc #$04		sbc #4
.28f7		aa		tax			tax
.28f8		74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.28fa		74 06		stz $06,x		stz pstack+6,x
.28fc		74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.28fe		74 04		stz $04,x		stz pstack+4,x
.2900		74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.2902		74 02		stz $02,x		stz pstack+2,x
.2904		a0 00		ldy #$00		ldy #0
.2906							loop1:
.2906		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2908		d0 03		bne $290d		bne chk_delim1          ; NUL? No:; check it against the delimiter
.290a							none:
.290a		4c 23 16	jmp $1623		jmp next                ; Yes: we want to return 0s
.290d							chk_delim1:
.290d		c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.290f		f0 13		beq $2924		beq skip2               ; Yes: skip the character
.2911		a5 32		lda $32			lda tmp                 ; Check the delimiter
.2913		c9 20		cmp #$20		cmp #' '                ; Is it BL?
.2915		d0 0b		bne $2922		bne found               ; No: ok, we've found the first character;
.2917		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.2919		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.291b		d0 05		bne $2922		bne found               ; No: we found the first character
.291d		c8		iny			iny                     ; Move to the next character
.291e		f0 ea		beq $290a		beq none                ; If we've rolled over, we found nothing
.2920		80 e4		bra $2906		bra loop1               ; Otherwise: check the next character
.2922							found:
.2922		94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.2924							skip2:
.2924		c8		iny			iny                     ; Go to the next character
.2925		f0 1c		beq $2943		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.2927							loop2:
.2927		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2929		f0 18		beq $2943		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.292b		c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.292d		f0 0c		beq $293b		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.292f		a5 32		lda $32			lda tmp                 ; Get the delimiter
.2931		c9 20		cmp #$20		cmp #' '                ; Is it space?
.2933		d0 ef		bne $2924		bne skip2               ; No: go to the next character
.2935		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.2937		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.2939		d0 e9		bne $2924		bne skip2               ; No: go to the next character
.293b							found_delim:
.293b		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.293d		c8		iny			iny
.293e		94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.2940		4c 23 16	jmp $1623		jmp next                ; And we're done
.2943							found_nul:
.2943		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.2945		94 02		sty $02,x		sty pstack+2,x          ; And to n3
.2947		4c 23 16	jmp $1623		jmp next                ; And we're done
.294a						w_move:
>294a		04					.byte $04
>294b		6d 6f 76 65				.text 'move'
>294f		dd 28					.word w_enclose
.2951						xt_move:
.2951		38		sec			sec                     ; Compare addr1 and addr2
.2952		b5 06		lda $06,x		lda pstack+6,x
.2954		f5 04		sbc $04,x		sbc pstack+4,x
.2956		85 32		sta $32			sta tmp
.2958		b5 07		lda $07,x		lda pstack+7,x
.295a		f5 05		sbc $05,x		sbc pstack+5,x
.295c		85 33		sta $33			sta tmp+1
.295e		30 24		bmi $2984		bmi a1less
.2960		f0 72		beq $29d4		beq chklo
.2962							a1greater:
.2962		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2964		d0 50		bne $29b6		bne docopy1
.2966		b5 03		lda $03,x		lda pstack+3,x
.2968		f0 72		beq $29dc		beq done                ; Yes: we're done;
.296a		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.296c		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.296e		f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.2970		d0 02		bne $2974		bne inc2
.2972		f6 07		inc $07,x		inc pstack+7,x
.2974							inc2:
.2974		f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.2976		d0 02		bne $297a		bne dec_count
.2978		f6 03		inc $03,x		inc pstack+3,x
.297a							dec_count:
.297a		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.297c		d0 02		bne $2980		bne l1
.297e		d6 03		dec $03,x		dec pstack+3,x
.2980							l1:
.2980		d6 02		dec $02,x		dec pstack+2,x
.2982		80 de		bra $2962		bra a1greater
.2984							a1less:
.2984		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2986		d0 02		bne $298a		bne l2
.2988		d6 05		dec $05,x		dec pstack+5,x
.298a							l2:
.298a		d6 04		dec $04,x		dec pstack+4,x
.298c		18		clc			clc                     ; addr2 := addr2 + u
.298d		b5 04		lda $04,x		lda pstack+4,x
.298f		75 02		adc $02,x		adc pstack+2,x
.2991		95 04		sta $04,x		sta pstack+4,x
.2993		b5 05		lda $05,x		lda pstack+5,x
.2995		75 03		adc $03,x		adc pstack+3,x
.2997		95 05		sta $05,x		sta pstack+5,x
.2999		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.299b		d0 02		bne $299f		bne l3
.299d		d6 07		dec $07,x		dec pstack+7,x
.299f							l3:
.299f		d6 06		dec $06,x		dec pstack+6,x
.29a1		18		clc			clc                     ; addr1 := addr1 + u
.29a2		b5 06		lda $06,x		lda pstack+6,x
.29a4		75 02		adc $02,x		adc pstack+2,x
.29a6		95 06		sta $06,x		sta pstack+6,x
.29a8		b5 07		lda $07,x		lda pstack+7,x
.29aa		75 03		adc $03,x		adc pstack+3,x
.29ac		95 07		sta $07,x		sta pstack+7,x
.29ae							loop2:
.29ae		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.29b0		d0 04		bne $29b6		bne docopy1
.29b2		b5 03		lda $03,x		lda pstack+3,x
.29b4		f0 26		beq $29dc		beq done                ; Yes: we're done;
.29b6							docopy1:
.29b6		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.29b8		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.29ba		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.29bc		d0 02		bne $29c0		bne l4
.29be		d6 07		dec $07,x		dec pstack+7,x
.29c0							l4:
.29c0		d6 06		dec $06,x		dec pstack+6,x
.29c2		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.29c4		d0 02		bne $29c8		bne l5
.29c6		d6 05		dec $05,x		dec pstack+5,x
.29c8							l5:
.29c8		d6 04		dec $04,x		dec pstack+4,x
.29ca		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.29cc		d0 02		bne $29d0		bne l6
.29ce		d6 03		dec $03,x		dec pstack+3,x
.29d0							l6:
.29d0		d6 02		dec $02,x		dec pstack+2,x
.29d2		80 da		bra $29ae		bra loop2
.29d4							chklo:
.29d4		a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.29d6		30 ac		bmi $2984		bmi a1less
.29d8		f0 02		beq $29dc		beq done                ; If equal, we don't need to move the data
.29da		80 86		bra $2962		bra a1greater
.29dc							done:
.29dc		8a		txa			txa
.29dd		18		clc			clc
.29de		69 06		adc #$06		adc #6
.29e0		aa		tax			tax
.29e1		60		rts			rts
.29e2						w_x2b:
>29e2		01					.byte $01
>29e3		2b					.text '+'
>29e4		4a 29					.word w_move
.29e6						xt_x2b:
.29e6		18		clc			clc
.29e7		b5 04		lda $04,x		lda pstack+4,x
.29e9		75 02		adc $02,x		adc pstack+2,x
.29eb		95 04		sta $04,x		sta pstack+4,x
.29ed		b5 05		lda $05,x		lda pstack+5,x
.29ef		75 03		adc $03,x		adc pstack+3,x
.29f1		95 05		sta $05,x		sta pstack+5,x
.29f3		e8		inx			inx
.29f4		e8		inx			inx
.29f5		4c 23 16	jmp $1623		jmp next
.29f8						w_x2d:
>29f8		01					.byte $01
>29f9		2d					.text '-'
>29fa		e2 29					.word w_x2b
.29fc						xt_x2d:
.29fc		38		sec			sec
.29fd		b5 04		lda $04,x		lda pstack+4,x
.29ff		f5 02		sbc $02,x		sbc pstack+2,x
.2a01		95 04		sta $04,x		sta pstack+4,x
.2a03		b5 05		lda $05,x		lda pstack+5,x
.2a05		f5 03		sbc $03,x		sbc pstack+3,x
.2a07		95 05		sta $05,x		sta pstack+5,x
.2a09		e8		inx			inx
.2a0a		e8		inx			inx
.2a0b		4c 23 16	jmp $1623		jmp next
.2a0e						w_x2a:
>2a0e		01					.byte $01
>2a0f		2a					.text '*'
>2a10		f8 29					.word w_x2d
.2a12						xt_x2a:
.2a12		64 36		stz $36			stz sign
.2a14		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2a16		10 11		bpl $2a29		bpl chk_n2
.2a18		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2a1a		85 36		sta $36			sta sign
.2a1c		38		sec			sec             ; Negate n1
.2a1d		a9 00		lda #$00		lda #0
.2a1f		f5 04		sbc $04,x		sbc pstack+4,x
.2a21		95 04		sta $04,x		sta pstack+4,x
.2a23		a9 00		lda #$00		lda #0
.2a25		f5 05		sbc $05,x		sbc pstack+5,x
.2a27		95 05		sta $05,x		sta pstack+5,x
.2a29							chk_n2:
.2a29		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2a2b		10 13		bpl $2a40		bpl init_tmp
.2a2d		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2a2f		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2a31		85 36		sta $36			sta sign
.2a33		38		sec			sec             ; Negate n2
.2a34		a9 00		lda #$00		lda #0
.2a36		f5 02		sbc $02,x		sbc pstack+2,x
.2a38		95 02		sta $02,x		sta pstack+2,x
.2a3a		a9 00		lda #$00		lda #0
.2a3c		f5 03		sbc $03,x		sbc pstack+3,x
.2a3e		95 03		sta $03,x		sta pstack+3,x
.2a40							init_tmp:
.2a40		a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2a42		85 34		sta $34			sta tmp+2
.2a44		a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2a46							l1:
.2a46		56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.2a48		76 02		ror $02,x		ror pstack+2,x
.2a4a		90 0b		bcc $2a57		bcc l2          ; 0 or 1?
.2a4c		a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.2a4d		18		clc			clc
.2a4e		b5 04		lda $04,x		lda pstack+4,x
.2a50		65 34		adc $34			adc tmp+2
.2a52		85 34		sta $34			sta tmp+2
.2a54		98		tya			tya
.2a55		75 05		adc $05,x		adc pstack+5,x
.2a57							l2:
.2a57		6a		ror a			ror A
.2a58		66 34		ror $34			ror tmp+2
.2a5a		66 33		ror $33			ror tmp+1
.2a5c		66 32		ror $32			ror tmp
.2a5e		3a		dec a			dec a
.2a5f		d0 e5		bne $2a46		bne l1
.2a61		85 35		sta $35			sta tmp+3
.2a63		a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2a65		95 04		sta $04,x		sta pstack+4,x
.2a67		a5 33		lda $33			lda tmp+1
.2a69		95 05		sta $05,x		sta pstack+5,x
.2a6b		e8		inx			inx             ; Clean up parameter stack
.2a6c		e8		inx			inx
.2a6d		a5 36		lda $36			lda sign        ; Check the sign
.2a6f		10 0d		bpl $2a7e		bpl done
.2a71		38		sec			sec             ; If negative, negate result
.2a72		a9 00		lda #$00		lda #0
.2a74		f5 02		sbc $02,x		sbc pstack+2,x
.2a76		95 02		sta $02,x		sta pstack+2,x
.2a78		a9 00		lda #$00		lda #0
.2a7a		f5 03		sbc $03,x		sbc pstack+3,x
.2a7c		95 03		sta $03,x		sta pstack+3,x
.2a7e							done:
.2a7e		4c 23 16	jmp $1623		jmp next
.2a81						w_x2fmod:
>2a81		04					.byte $04
>2a82		2f 6d 6f 64				.text '/mod'
>2a86		0e 2a					.word w_x2a
.2a88						xt_x2fmod:
.2a88		64 36		stz $36			stz sign
.2a8a		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2a8c		10 11		bpl $2a9f		bpl chk_n2
.2a8e		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2a90		85 36		sta $36			sta sign
.2a92		38		sec			sec             ; Negate n1
.2a93		a9 00		lda #$00		lda #0
.2a95		f5 04		sbc $04,x		sbc pstack+4,x
.2a97		95 04		sta $04,x		sta pstack+4,x
.2a99		a9 00		lda #$00		lda #0
.2a9b		f5 05		sbc $05,x		sbc pstack+5,x
.2a9d		95 05		sta $05,x		sta pstack+5,x
.2a9f							chk_n2:
.2a9f		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2aa1		10 13		bpl $2ab6		bpl init_tmp
.2aa3		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2aa5		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2aa7		85 36		sta $36			sta sign
.2aa9		38		sec			sec             ; Negate n2
.2aaa		a9 00		lda #$00		lda #0
.2aac		f5 02		sbc $02,x		sbc pstack+2,x
.2aae		95 02		sta $02,x		sta pstack+2,x
.2ab0		a9 00		lda #$00		lda #0
.2ab2		f5 03		sbc $03,x		sbc pstack+3,x
.2ab4		95 03		sta $03,x		sta pstack+3,x
.2ab6							init_tmp:
.2ab6		64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.2ab8		64 33		stz $33			stz tmp+1
.2aba		a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.2abc		85 35		sta $35			sta counter
.2abe							l1:
.2abe		16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.2ac0		36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.2ac2		26 32		rol $32			rol tmp
.2ac4		26 33		rol $33			rol tmp+1
.2ac6		a5 32		lda $32			lda tmp
.2ac8		38		sec			sec             ; Trial subtraction
.2ac9		f5 02		sbc $02,x		sbc pstack+2,x
.2acb		a8		tay			tay
.2acc		b5 33		lda $33,x		lda tmp+1,x
.2ace		f5 03		sbc $03,x		sbc pstack+3,x
.2ad0		90 06		bcc $2ad8		bcc l2          ; Did subtraction succeed?
.2ad2		85 33		sta $33			sta tmp+1       ; If yes, save it
.2ad4		84 32		sty $32			sty tmp
.2ad6		f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.2ad8							l2:
.2ad8		c6 35		dec $35			dec counter
.2ada		d0 e2		bne $2abe		bne l1
.2adc		b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2ade		95 03		sta $03,x		sta pstack+3,x
.2ae0		b5 04		lda $04,x		lda pstack+4,x
.2ae2		95 02		sta $02,x		sta pstack+2,x
.2ae4		a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2ae6		95 04		sta $04,x		sta pstack+4,x
.2ae8		a5 33		lda $33			lda tmp+1
.2aea		95 05		sta $05,x		sta pstack+5,x
.2aec		a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2aee		10 0d		bpl $2afd		bpl done
.2af0		38		sec			sec             ; Negate the quotient
.2af1		a9 00		lda #$00		lda #0
.2af3		f5 02		sbc $02,x		sbc pstack+2,x
.2af5		95 02		sta $02,x		sta pstack+2,x
.2af7		a9 00		lda #$00		lda #0
.2af9		f5 03		sbc $03,x		sbc pstack+3,x
.2afb		95 03		sta $03,x		sta pstack+3,x
.2afd							done:
.2afd		4c 23 16	jmp $1623		jmp next
.2b00						w_1x2b:
>2b00		02					.byte $02
>2b01		31 2b					.text '1+'
>2b03		81 2a					.word w_x2fmod
.2b05						xt_1x2b:
.2b05		f6 02		inc $02,x		inc pstack+2,x
.2b07		d0 02		bne $2b0b		bne skip
.2b09		f6 03		inc $03,x		inc pstack+3,x
.2b0b							skip:
.2b0b		4c 23 16	jmp $1623		jmp next
.2b0e						w_2x2b:
>2b0e		02					.byte $02
>2b0f		32 2b					.text '2+'
>2b11		00 2b					.word w_1x2b
.2b13						xt_2x2b:
.2b13		18		clc			clc
.2b14		b5 02		lda $02,x		lda pstack+2,x
.2b16		69 02		adc #$02		adc #2
.2b18		95 02		sta $02,x		sta pstack+2,x
.2b1a		b5 03		lda $03,x		lda pstack+3,x
.2b1c		69 00		adc #$00		adc #0
.2b1e		95 03		sta $03,x		sta pstack+3,x
.2b20		4c 23 16	jmp $1623		jmp next
.2b23						w_1x2d:
>2b23		02					.byte $02
>2b24		31 2d					.text '1-'
>2b26		0e 2b					.word w_2x2b
.2b28						xt_1x2d:
.2b28		b5 02		lda $02,x		lda pstack+2,x
.2b2a		d0 02		bne $2b2e		bne l1
.2b2c		d6 03		dec $03,x		dec pstack+3,x
.2b2e							l1:
.2b2e		d6 02		dec $02,x		dec pstack+2,x
.2b30		4c 23 16	jmp $1623		jmp next
.2b33						w_2x2d:
>2b33		02					.byte $02
>2b34		32 2d					.text '2-'
>2b36		23 2b					.word w_1x2d
.2b38						xt_2x2d:
.2b38		38		sec			sec
.2b39		b5 02		lda $02,x		lda pstack+2,x
.2b3b		e9 02		sbc #$02		sbc #2
.2b3d		95 02		sta $02,x		sta pstack+2,x
.2b3f		b5 03		lda $03,x		lda pstack+3,x
.2b41		e9 00		sbc #$00		sbc #0
.2b43		95 03		sta $03,x		sta pstack+3,x
.2b45		4c 23 16	jmp $1623		jmp next
.2b48						w_and:
>2b48		03					.byte $03
>2b49		61 6e 64				.text 'and'
>2b4c		33 2b					.word w_2x2d
.2b4e						xt_and:
.2b4e		b5 02		lda $02,x		lda pstack+2,x
.2b50		35 04		and $04,x		and pstack+4,x
.2b52		95 04		sta $04,x		sta pstack+4,x
.2b54		b5 03		lda $03,x		lda pstack+3,x
.2b56		35 05		and $05,x		and pstack+5,x
.2b58		95 05		sta $05,x		sta pstack+5,x
.2b5a		e8		inx			inx
.2b5b		e8		inx			inx
.2b5c		4c 23 16	jmp $1623		jmp next
.2b5f						w_or:
>2b5f		02					.byte $02
>2b60		6f 72					.text 'or'
>2b62		48 2b					.word w_and
.2b64						xt_or:
.2b64		b5 02		lda $02,x		lda pstack+2,x
.2b66		15 04		ora $04,x		ora pstack+4,x
.2b68		95 04		sta $04,x		sta pstack+4,x
.2b6a		b5 03		lda $03,x		lda pstack+3,x
.2b6c		15 05		ora $05,x		ora pstack+5,x
.2b6e		95 05		sta $05,x		sta pstack+5,x
.2b70		e8		inx			inx
.2b71		e8		inx			inx
.2b72		4c 23 16	jmp $1623		jmp next
.2b75						w_xor:
>2b75		03					.byte $03
>2b76		78 6f 72				.text 'xor'
>2b79		5f 2b					.word w_or
.2b7b						xt_xor:
.2b7b		b5 02		lda $02,x		lda pstack+2,x
.2b7d		55 04		eor $04,x		eor pstack+4,x
.2b7f		95 04		sta $04,x		sta pstack+4,x
.2b81		b5 03		lda $03,x		lda pstack+3,x
.2b83		55 05		eor $05,x		eor pstack+5,x
.2b85		95 05		sta $05,x		sta pstack+5,x
.2b87		e8		inx			inx
.2b88		e8		inx			inx
.2b89		4c 23 16	jmp $1623		jmp next
.2b8c						w_not:
>2b8c		03					.byte $03
>2b8d		6e 6f 74				.text 'not'
>2b90		75 2b					.word w_xor
.2b92						xt_not:
.2b92		b5 02		lda $02,x		lda pstack+2,x
.2b94		49 ff		eor #$ff		eor #$ff
.2b96		95 02		sta $02,x		sta pstack+2,x
.2b98		b5 03		lda $03,x		lda pstack+3,x
.2b9a		49 ff		eor #$ff		eor #$ff
.2b9c		95 03		sta $03,x		sta pstack+3,x
.2b9e		4c 23 16	jmp $1623		jmp next
.2ba1						w_0x3c:
>2ba1		02					.byte $02
>2ba2		30 3c					.text '0<'
>2ba4		8c 2b					.word w_not
.2ba6						xt_0x3c:
.2ba6		b5 03		lda $03,x		lda pstack+3,x
.2ba8		30 07		bmi $2bb1		bmi istrue
.2baa		74 02		stz $02,x		stz pstack+2,x
.2bac		74 03		stz $03,x		stz pstack+3,x
.2bae		4c 23 16	jmp $1623		jmp next
.2bb1							istrue:
.2bb1		a9 ff		lda #$ff		lda #$ff
.2bb3		95 02		sta $02,x		sta pstack+2,x
.2bb5		95 03		sta $03,x		sta pstack+3,x
.2bb7		4c 23 16	jmp $1623		jmp next
.2bba						w_0x3d:
>2bba		02					.byte $02
>2bbb		30 3d					.text '0='
>2bbd		a1 2b					.word w_0x3c
.2bbf						xt_0x3d:
.2bbf		b5 02		lda $02,x		lda pstack+2,x
.2bc1		d0 0d		bne $2bd0		bne isfalse
.2bc3		b5 03		lda $03,x		lda pstack+3,x
.2bc5		d0 09		bne $2bd0		bne isfalse
.2bc7		a9 ff		lda #$ff		lda #$ff
.2bc9		95 02		sta $02,x		sta pstack+2,x
.2bcb		95 03		sta $03,x		sta pstack+3,x
.2bcd		4c 23 16	jmp $1623		jmp next
.2bd0							isfalse:
.2bd0		74 02		stz $02,x		stz pstack+2,x
.2bd2		74 03		stz $03,x		stz pstack+3,x
.2bd4		4c 23 16	jmp $1623		jmp next
.2bd7						w_0x3e:
>2bd7		02					.byte $02
>2bd8		30 3e					.text '0>'
>2bda		ba 2b					.word w_0x3d
.2bdc						xt_0x3e:
.2bdc		b5 03		lda $03,x		lda pstack+3,x
.2bde		30 0f		bmi $2bef		bmi isfalse
.2be0		d0 04		bne $2be6		bne istrue
.2be2		b5 02		lda $02,x		lda pstack+2,x
.2be4		f0 09		beq $2bef		beq isfalse
.2be6							istrue:
.2be6		a9 ff		lda #$ff		lda #$ff
.2be8		95 02		sta $02,x		sta pstack+2,x
.2bea		95 03		sta $03,x		sta pstack+3,x
.2bec		4c 23 16	jmp $1623		jmp next
.2bef							isfalse:
.2bef		74 02		stz $02,x		stz pstack+2,x
.2bf1		74 03		stz $03,x		stz pstack+3,x
.2bf3		4c 23 16	jmp $1623		jmp next
.2bf6						w_x28variablex29:
>2bf6		0a					.byte $0A
>2bf7		28 76 61 72 69 61 62 6c			.text '(variable)'
>2bff		65 29
>2c01		d7 2b					.word w_0x3e
.2c03						xt_x28variablex29:
.2c03		18		clc			clc                     ; push(wp + 3)
.2c04		a5 2a		lda $2a			lda wp
.2c06		69 03		adc #$03		adc #3
.2c08		95 00		sta $00,x		sta pstack,x
.2c0a		a5 2b		lda $2b			lda wp+1
.2c0c		69 00		adc #$00		adc #0
.2c0e		95 01		sta $01,x		sta pstack+1,x
.2c10		ca		dex			dex
.2c11		ca		dex			dex
.2c12		4c 23 16	jmp $1623		jmp next
.2c15						w_x28constantx29:
>2c15		0a					.byte $0A
>2c16		28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2c1e		74 29
>2c20		f6 2b					.word w_x28variablex29
.2c22						xt_x28constantx29:
.2c22		a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2c24		b1 2a		lda ($2a),y		lda (wp),y
.2c26		95 00		sta $00,x		sta pstack,x
.2c28		c8		iny			iny
.2c29		b1 2a		lda ($2a),y		lda (wp),y
.2c2b		95 01		sta $01,x		sta pstack+1,x
.2c2d		ca		dex			dex
.2c2e		ca		dex			dex
.2c2f		4c 23 16	jmp $1623		jmp next
.2c32						w_cells:
>2c32		05					.byte $05
>2c33		63 65 6c 6c 73				.text 'cells'
>2c38							.fill 11
>2c43		15 2c					.word w_x28constantx29
.2c45						xt_cells:
.2c45		4c 22 2c	jmp $2c22		jmp xt_x28constantx29
>2c48		02 00					.word 2
.2c4a						w_bl:
>2c4a		02					.byte $02
>2c4b		62 6c					.text 'bl'
>2c4d							.fill 14
>2c5b		32 2c					.word w_cells
.2c5d						xt_bl:
.2c5d		4c 22 2c	jmp $2c22		jmp xt_x28constantx29
>2c60		20 00					.word 32
.2c62						w_x28userx29:
>2c62		06					.byte $06
>2c63		28 75 73 65 72 29			.text '(user)'
>2c69		4a 2c					.word w_bl
.2c6b						xt_x28userx29:
.2c6b		18		clc			clc                     ; push(up + memory(wp + 3))
.2c6c		a0 03		ldy #$03		ldy #3
.2c6e		a5 2c		lda $2c			lda up
.2c70		71 2a		adc ($2a),y		adc (wp),y
.2c72		95 00		sta $00,x		sta pstack,x
.2c74		c8		iny			iny
.2c75		a5 2d		lda $2d			lda up+1
.2c77		71 2a		adc ($2a),y		adc (wp),y
.2c79		95 01		sta $01,x		sta pstack+1,x
.2c7b		ca		dex			dex
.2c7c		ca		dex			dex
.2c7d		4c 23 16	jmp $1623		jmp next
.2c80						w_s0:
>2c80		02					.byte $02
>2c81		73 30					.text 's0'
>2c83							.fill 14
>2c91		62 2c					.word w_x28userx29
.2c93						xt_s0:
.2c93		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2c96		00 00					.word 0
.2c98						w_r0:
>2c98		02					.byte $02
>2c99		72 30					.text 'r0'
>2c9b							.fill 14
>2ca9		80 2c					.word w_s0
.2cab						xt_r0:
.2cab		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2cae		01 00					.word 1
.2cb0						w_base:
>2cb0		04					.byte $04
>2cb1		62 61 73 65				.text 'base'
>2cb5							.fill 12
>2cc1		98 2c					.word w_r0
.2cc3						xt_base:
.2cc3		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2cc6		02 00					.word 2
.2cc8						w_state:
>2cc8		05					.byte $05
>2cc9		73 74 61 74 65				.text 'state'
>2cce							.fill 11
>2cd9		b0 2c					.word w_base
.2cdb						xt_state:
.2cdb		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2cde		03 00					.word 3
.2ce0						w_context:
>2ce0		07					.byte $07
>2ce1		63 6f 6e 74 65 78 74			.text 'context'
>2ce8							.fill 9
>2cf1		c8 2c					.word w_state
.2cf3						xt_context:
.2cf3		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2cf6		04 00					.word 4
.2cf8						w_current:
>2cf8		07					.byte $07
>2cf9		63 75 72 72 65 6e 74			.text 'current'
>2d00							.fill 9
>2d09		e0 2c					.word w_context
.2d0b						xt_current:
.2d0b		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2d0e		05 00					.word 5
.2d10						w_dp:
>2d10		02					.byte $02
>2d11		64 70					.text 'dp'
>2d13							.fill 14
>2d21		f8 2c					.word w_current
.2d23						xt_dp:
.2d23		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2d26		06 00					.word 6
.2d28						w_x3ein:
>2d28		03					.byte $03
>2d29		3e 69 6e				.text '>in'
>2d2c							.fill 13
>2d39		10 2d					.word w_dp
.2d3b						xt_x3ein:
.2d3b		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2d3e		07 00					.word 7
.2d40						w_tib:
>2d40		03					.byte $03
>2d41		74 69 62				.text 'tib'
>2d44							.fill 13
>2d51		28 2d					.word w_x3ein
.2d53						xt_tib:
.2d53		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2d56		08 00					.word 8
.2d58						w_sourcex2did:
>2d58		09					.byte $09
>2d59		73 6f 75 72 63 65 2d 69			.text 'source-id'
>2d61		64
>2d62							.fill 7
>2d69		40 2d					.word w_tib
.2d6b						xt_sourcex2did:
.2d6b		4c 6b 2c	jmp $2c6b		jmp xt_x28userx29
>2d6e		09 00					.word 9
.2d70						w_x28branchx29:
>2d70		08					.byte $08
>2d71		28 62 72 61 6e 63 68 29			.text '(branch)'
>2d79		58 2d					.word w_sourcex2did
.2d7b						xt_x28branchx29:
.2d7b		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2d7d		b2 28		lda ($28)		lda (ip)
.2d7f		85 32		sta $32			sta tmp
.2d81		b1 28		lda ($28),y		lda (ip),y
.2d83		85 29		sta $29			sta ip+1
.2d85		a5 32		lda $32			lda tmp
.2d87		85 28		sta $28			sta ip
.2d89		4c 23 16	jmp $1623		jmp next
.2d8c						w_x28branch0x29:
>2d8c		09					.byte $09
>2d8d		28 62 72 61 6e 63 68 30			.text '(branch0)'
>2d95		29
>2d96		70 2d					.word w_x28branchx29
.2d98						xt_x28branch0x29:
.2d98		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2d9a		d0 04		bne $2da0		bne nobranch        ; No: skip over the branch address
.2d9c		b5 03		lda $03,x		lda pstack+3,x
.2d9e		f0 0f		beq $2daf		beq dobranch        ; Yes: take the branch
.2da0							nobranch:
.2da0		18		clc			clc                 ; No: skip over the branch address
.2da1		a5 28		lda $28			lda ip
.2da3		69 02		adc #$02		adc #2
.2da5		85 28		sta $28			sta ip
.2da7		a5 29		lda $29			lda ip+1
.2da9		69 00		adc #$00		adc #0
.2dab		85 29		sta $29			sta ip+1
.2dad		80 0e		bra $2dbd		bra done
.2daf							dobranch:
.2daf		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2db1		b2 28		lda ($28)		lda (ip)
.2db3		85 32		sta $32			sta tmp
.2db5		b1 28		lda ($28),y		lda (ip),y
.2db7		85 29		sta $29			sta ip+1
.2db9		a5 32		lda $32			lda tmp
.2dbb		85 28		sta $28			sta ip
.2dbd							done:
.2dbd		e8		inx			inx                 ; clean up the parameter stack
.2dbe		e8		inx			inx
.2dbf		4c 23 16	jmp $1623		jmp next
.2dc2						w_x28dox29:
>2dc2		04					.byte $04
>2dc3		28 64 6f 29				.text '(do)'
>2dc7		8c 2d					.word w_x28branch0x29
.2dc9						xt_x28dox29:
.2dc9		b5 03		lda $03,x		lda pstack+3,x
.2dcb		48		pha			pha
.2dcc		b5 02		lda $02,x		lda pstack+2,x
.2dce		48		pha			pha
.2dcf		b5 05		lda $05,x		lda pstack+5,x
.2dd1		48		pha			pha
.2dd2		b5 04		lda $04,x		lda pstack+4,x
.2dd4		48		pha			pha
.2dd5		18		clc			clc
.2dd6		8a		txa			txa
.2dd7		69 04		adc #$04		adc #4
.2dd9		aa		tax			tax
.2dda		4c 23 16	jmp $1623		jmp next
.2ddd						w_x3ei:
>2ddd		02					.byte $02
>2dde		3e 69					.text '>i'
>2de0		c2 2d					.word w_x28dox29
.2de2						xt_x3ei:
>0101							limit       .word ?
>0103							current     .word ?
.2de2		b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.2de4		85 33		sta $33			sta tmp+1
.2de6		b5 02		lda $02,x		lda pstack+2,x
.2de8		85 32		sta $32			sta tmp
.2dea		ca		dex			dex
.2deb		ca		dex			dex
.2dec		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2dee		ba		tsx			tsx
.2def		a5 33		lda $33			lda tmp+1           ; current := tmp = n
.2df1		9d 04 01	sta $0104,x		sta current+1
.2df4		a5 32		lda $32			lda tmp
.2df6		9d 03 01	sta $0103,x		sta current
.2df9		a6 34		ldx $34			ldx savex
.2dfb		4c 23 16	jmp $1623		jmp next
.2dfe						w_leave:
>2dfe		05					.byte $05
>2dff		6c 65 61 76 65				.text 'leave'
>2e04		dd 2d					.word w_x3ei
.2e06						xt_leave:
>0101							limit       .word ?
>0103							current     .word ?
.2e06		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e08		ba		tsx			tsx
.2e09		bd 04 01	lda $0104,x		lda current+1       ; limit := current
.2e0c		9d 02 01	sta $0102,x		sta limit+1
.2e0f		bd 03 01	lda $0103,x		lda current
.2e12		9d 01 01	sta $0101,x		sta limit
.2e15		a6 34		ldx $34			ldx savex
.2e17		4c 23 16	jmp $1623		jmp next
.2e1a						w_x28loopx29:
>2e1a		06					.byte $06
>2e1b		28 6c 6f 6f 70 29			.text '(loop)'
>2e21		fe 2d					.word w_leave
.2e23						xt_x28loopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2e23		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e25		ba		tsx			tsx
.2e26		fe 03 01	inc $0103,x		inc current         ; Increment current
.2e29		d0 03		bne $2e2e		bne chk_current
.2e2b		fe 04 01	inc $0104,x		inc current+1
.2e2e							chk_current:
.2e2e		bd 03 01	lda $0103,x		lda current         ; current == limit?
.2e31		dd 01 01	cmp $0101,x		cmp limit
.2e34		d0 1d		bne $2e53		bne dobranch
.2e36		bd 04 01	lda $0104,x		lda current+1
.2e39		dd 02 01	cmp $0102,x		cmp limit+1
.2e3c		d0 15		bne $2e53		bne dobranch
.2e3e							nobranch:
.2e3e		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2e3f		18		clc			clc
.2e40		69 04		adc #$04		adc #4
.2e42		aa		tax			tax
.2e43		9a		txs			txs
.2e44		18		clc			clc                 ; And skip over the branch address
.2e45		a5 28		lda $28			lda ip
.2e47		69 02		adc #$02		adc #2
.2e49		85 28		sta $28			sta ip
.2e4b		a5 29		lda $29			lda ip+1
.2e4d		69 00		adc #$00		adc #0
.2e4f		85 29		sta $29			sta ip+1
.2e51		80 0e		bra $2e61		bra done
.2e53							dobranch:
.2e53		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2e55		b2 28		lda ($28)		lda (ip)
.2e57		85 32		sta $32			sta tmp
.2e59		b1 28		lda ($28),y		lda (ip),y
.2e5b		85 29		sta $29			sta ip+1
.2e5d		a5 32		lda $32			lda tmp
.2e5f		85 28		sta $28			sta ip
.2e61							done:
.2e61		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2e63		4c 23 16	jmp $1623		jmp next
.2e66						w_x28x2bloopx29:
>2e66		07					.byte $07
>2e67		28 2b 6c 6f 6f 70 29			.text '(+loop)'
>2e6e		1a 2e					.word w_x28loopx29
.2e70						xt_x28x2bloopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2e70		b5 03		lda $03,x		lda pstack+3,x
.2e72		85 33		sta $33			sta tmp+1
.2e74		b5 02		lda $02,x		lda pstack+2,x
.2e76		85 32		sta $32			sta tmp
.2e78		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e7a		ba		tsx			tsx
.2e7b		18		clc			clc                 ; Increment current by n
.2e7c		bd 03 01	lda $0103,x		lda current
.2e7f		65 32		adc $32			adc tmp
.2e81		9d 03 01	sta $0103,x		sta current
.2e84		bd 04 01	lda $0104,x		lda current+1
.2e87		65 33		adc $33			adc tmp+1
.2e89		9d 04 01	sta $0104,x		sta current+1
.2e8c		e6 34		inc $34			inc savex           ; Remove n from the stack
.2e8e		e6 34		inc $34			inc savex
.2e90							chk_current:
.2e90		bd 04 01	lda $0104,x		lda current+1       ; Is current < limit
.2e93		dd 02 01	cmp $0102,x		cmp limit+1
.2e96		d0 06		bne $2e9e		bne chk_ne
.2e98		bd 03 01	lda $0103,x		lda current
.2e9b		dd 01 01	cmp $0101,x		cmp limit
.2e9e							chk_ne:
.2e9e		90 15		bcc $2eb5		bcc dobranch        ; Yes: take the branch
.2ea0							nobranch:
.2ea0		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2ea1		18		clc			clc
.2ea2		69 04		adc #$04		adc #4
.2ea4		aa		tax			tax
.2ea5		9a		txs			txs
.2ea6		18		clc			clc                 ; And skip over the branch address
.2ea7		a5 28		lda $28			lda ip
.2ea9		69 02		adc #$02		adc #2
.2eab		85 28		sta $28			sta ip
.2ead		a5 29		lda $29			lda ip+1
.2eaf		69 00		adc #$00		adc #0
.2eb1		85 29		sta $29			sta ip+1
.2eb3		80 0e		bra $2ec3		bra done
.2eb5							dobranch:
.2eb5		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2eb7		b2 28		lda ($28)		lda (ip)
.2eb9		85 32		sta $32			sta tmp
.2ebb		b1 28		lda ($28),y		lda (ip),y
.2ebd		85 29		sta $29			sta ip+1
.2ebf		a5 32		lda $32			lda tmp
.2ec1		85 28		sta $28			sta ip
.2ec3							done:
.2ec3		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2ec5		4c 23 16	jmp $1623		jmp next
.2ec8						w_i:
>2ec8		01					.byte $01
>2ec9		69					.text 'i'
>2eca		66 2e					.word w_x28x2bloopx29
.2ecc						xt_i:
>0101							limit       .word ?
>0103							current     .word ?
.2ecc		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2ece		ba		tsx			tsx
.2ecf		bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.2ed2		bd 03 01	lda $0103,x		lda current
.2ed5		a6 34		ldx $34			ldx savex           ; Restore the PSP
.2ed7		94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2ed9		95 00		sta $00,x		sta pstack,x
.2edb		ca		dex			dex
.2edc		ca		dex			dex
.2edd		4c 23 16	jmp $1623		jmp next
.2ee0						w_execute:
>2ee0		07					.byte $07
>2ee1		65 78 65 63 75 74 65			.text 'execute'
>2ee8		c8 2e					.word w_i
.2eea						xt_execute:
.2eea		b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2eec		85 2a		sta $2a			sta wp
.2eee		b5 03		lda $03,x		lda pstack+3,x
.2ef0		85 2b		sta $2b			sta wp+1
.2ef2		e8		inx			inx                 ; Clean up stack
.2ef3		e8		inx			inx
.2ef4		6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2ef7						w_x28vocabularyx29:
>2ef7		0c					.byte $0C
>2ef8		28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>2f00		61 72 79 29
>2f04		e0 2e					.word w_execute
.2f06						xt_x28vocabularyx29:
.2f06		18		clc			clc                 ; tmp := up + user_context
.2f07		a5 2c		lda $2c			lda up
.2f09		69 08		adc #$08		adc #user_context
.2f0b		85 32		sta $32			sta tmp
.2f0d		a5 2d		lda $2d			lda up+1
.2f0f		69 00		adc #$00		adc #0
.2f11		85 33		sta $33			sta tmp+1
.2f13		a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.2f15		18		clc			clc
.2f16		a5 2a		lda $2a			lda wp
.2f18		69 03		adc #$03		adc #3
.2f1a		92 32		sta ($32)		sta (tmp)
.2f1c		a5 2b		lda $2b			lda wp+1
.2f1e		69 00		adc #$00		adc #0
.2f20		91 32		sta ($32),y		sta (tmp),y
.2f22		4c 23 16	jmp $1623		jmp next
.2f25						w_forth:
>2f25		05					.byte $05
>2f26		66 6f 72 74 68				.text 'forth'
>2f2b		f7 2e					.word w_x28vocabularyx29
.2f2d						xt_forth:
.2f2d		4c 06 2f	jmp $2f06		jmp xt_x28vocabularyx29
>2f30		5e 33					.word <>w_cold
.2f32						w_x3fdup:
>2f32		04					.byte $04
>2f33		3f 64 75 70				.text '?dup'
>2f37							.fill 12
>2f43		25 2f					.word w_forth
.2f45						xt_x3fdup:
.2f45		4c 10 16	jmp $1610		jmp i_enter
>2f48		c0 27					.word xt_dup
>2f4a		98 2d					.word xt_x28branch0x29
>2f4c		50 2f					.word l_138
>2f4e		c0 27					.word xt_dup
.2f50						l_138:
>2f50		08 16					.word i_exit
.2f52						w_x3c:
>2f52		01					.byte $01
>2f53		3c					.text '<'
>2f54							.fill 15
>2f63		32 2f					.word w_x3fdup
.2f65						xt_x3c:
.2f65		4c 10 16	jmp $1610		jmp i_enter
>2f68		fc 29					.word xt_x2d
>2f6a		a6 2b					.word xt_0x3c
>2f6c		08 16					.word i_exit
.2f6e						w_x3e:
>2f6e		01					.byte $01
>2f6f		3e					.text '>'
>2f70							.fill 15
>2f7f		52 2f					.word w_x3c
.2f81						xt_x3e:
.2f81		4c 10 16	jmp $1610		jmp i_enter
>2f84		fc 29					.word xt_x2d
>2f86		dc 2b					.word xt_0x3e
>2f88		08 16					.word i_exit
.2f8a						w_x3d:
>2f8a		01					.byte $01
>2f8b		3d					.text '='
>2f8c							.fill 15
>2f9b		6e 2f					.word w_x3e
.2f9d						xt_x3d:
.2f9d		4c 10 16	jmp $1610		jmp i_enter
>2fa0		fc 29					.word xt_x2d
>2fa2		bf 2b					.word xt_0x3d
>2fa4		08 16					.word i_exit
.2fa6						w_x2f:
>2fa6		01					.byte $01
>2fa7		2f					.text '/'
>2fa8							.fill 15
>2fb7		8a 2f					.word w_x3d
.2fb9						xt_x2f:
.2fb9		4c 10 16	jmp $1610		jmp i_enter
>2fbc		88 2a					.word xt_x2fmod
>2fbe		d4 27					.word xt_swap
>2fc0		b5 27					.word xt_drop
>2fc2		08 16					.word i_exit
.2fc4						w_mod:
>2fc4		03					.byte $03
>2fc5		6d 6f 64				.text 'mod'
>2fc8							.fill 13
>2fd5		a6 2f					.word w_x2f
.2fd7						xt_mod:
.2fd7		4c 10 16	jmp $1610		jmp i_enter
>2fda		88 2a					.word xt_x2fmod
>2fdc		b5 27					.word xt_drop
>2fde		08 16					.word i_exit
.2fe0						w_abs:
>2fe0		03					.byte $03
>2fe1		61 62 73				.text 'abs'
>2fe4							.fill 13
>2ff1		c4 2f					.word w_mod
.2ff3						xt_abs:
.2ff3		4c 10 16	jmp $1610		jmp i_enter
>2ff6		c0 27					.word xt_dup
>2ff8		a6 2b					.word xt_0x3c
>2ffa		98 2d					.word xt_x28branch0x29
>2ffc		04 30					.word l_177
>2ffe		34 17					.word xt_0
>3000		d4 27					.word xt_swap
>3002		fc 29					.word xt_x2d
.3004						l_177:
>3004		08 16					.word i_exit
.3006						w_max:
>3006		03					.byte $03
>3007		6d 61 78				.text 'max'
>300a							.fill 13
>3017		e0 2f					.word w_abs
.3019						xt_max:
.3019		4c 10 16	jmp $1610		jmp i_enter
>301c		ee 27					.word xt_over
>301e		ee 27					.word xt_over
>3020		65 2f					.word xt_x3c
>3022		98 2d					.word xt_x28branch0x29
>3024		2e 30					.word l_178
>3026		ee 27					.word xt_over
>3028		b5 27					.word xt_drop
>302a		7b 2d					.word xt_x28branchx29
>302c		30 30					.word l_179
.302e						l_178:
>302e		b5 27					.word xt_drop
.3030						l_179:
>3030		08 16					.word i_exit
.3032						w_min:
>3032		03					.byte $03
>3033		6d 69 6e				.text 'min'
>3036							.fill 13
>3043		06 30					.word w_max
.3045						xt_min:
.3045		4c 10 16	jmp $1610		jmp i_enter
>3048		ee 27					.word xt_over
>304a		ee 27					.word xt_over
>304c		81 2f					.word xt_x3e
>304e		98 2d					.word xt_x28branch0x29
>3050		5a 30					.word l_186
>3052		ee 27					.word xt_over
>3054		b5 27					.word xt_drop
>3056		7b 2d					.word xt_x28branchx29
>3058		5c 30					.word l_187
.305a						l_186:
>305a		b5 27					.word xt_drop
.305c						l_187:
>305c		08 16					.word i_exit
.305e						w_rot:
>305e		03					.byte $03
>305f		72 6f 74				.text 'rot'
>3062							.fill 13
>306f		32 30					.word w_min
.3071						xt_rot:
.3071		4c 10 16	jmp $1610		jmp i_enter
>3074		00 28					.word xt_x3er
>3076		d4 27					.word xt_swap
>3078		10 28					.word xt_rx3e
>307a		d4 27					.word xt_swap
>307c		08 16					.word i_exit
.307e						w_2dup:
>307e		04					.byte $04
>307f		32 64 75 70				.text '2dup'
>3083							.fill 12
>308f		5e 30					.word w_rot
.3091						xt_2dup:
.3091		4c 10 16	jmp $1610		jmp i_enter
>3094		ee 27					.word xt_over
>3096		ee 27					.word xt_over
>3098		08 16					.word i_exit
.309a						w_2drop:
>309a		05					.byte $05
>309b		32 64 72 6f 70				.text '2drop'
>30a0							.fill 11
>30ab		7e 30					.word w_2dup
.30ad						xt_2drop:
.30ad		4c 10 16	jmp $1610		jmp i_enter
>30b0		b5 27					.word xt_drop
>30b2		b5 27					.word xt_drop
>30b4		08 16					.word i_exit
.30b6						w_lfa:
>30b6		03					.byte $03
>30b7		6c 66 61				.text 'lfa'
>30ba							.fill 13
>30c7		9a 30					.word w_2drop
.30c9						xt_lfa:
.30c9		4c 10 16	jmp $1610		jmp i_enter
>30cc		87 17					.word xt_x28literalx29
>30ce		05 00					.word 5
>30d0		fc 29					.word xt_x2d
>30d2		08 16					.word i_exit
.30d4						w_cfa:
>30d4		03					.byte $03
>30d5		63 66 61				.text 'cfa'
>30d8							.fill 13
>30e5		b6 30					.word w_lfa
.30e7						xt_cfa:
.30e7		4c 10 16	jmp $1610		jmp i_enter
>30ea		87 17					.word xt_x28literalx29
>30ec		03 00					.word 3
>30ee		fc 29					.word xt_x2d
>30f0		08 16					.word i_exit
.30f2						w_nfa:
>30f2		03					.byte $03
>30f3		6e 66 61				.text 'nfa'
>30f6							.fill 13
>3103		d4 30					.word w_cfa
.3105						xt_nfa:
.3105		4c 10 16	jmp $1610		jmp i_enter
>3108		87 17					.word xt_x28literalx29
>310a		16 00					.word 22
>310c		fc 29					.word xt_x2d
>310e		08 16					.word i_exit
.3110						w_pfa:
>3110		03					.byte $03
>3111		70 66 61				.text 'pfa'
>3114							.fill 13
>3121		f2 30					.word w_nfa
.3123						xt_pfa:
.3123		4c 10 16	jmp $1610		jmp i_enter
>3126		87 17					.word xt_x28literalx29
>3128		16 00					.word 22
>312a		e6 29					.word xt_x2b
>312c		08 16					.word i_exit
.312e						w_here:
>312e		04					.byte $04
>312f		68 65 72 65				.text 'here'
>3133							.fill 12
>313f		10 31					.word w_pfa
.3141						xt_here:
.3141		4c 10 16	jmp $1610		jmp i_enter
>3144		23 2d					.word xt_dp
>3146		59 28					.word xt_x40
>3148		08 16					.word i_exit
.314a						w_allot:
>314a		05					.byte $05
>314b		61 6c 6c 6f 74				.text 'allot'
>3150							.fill 11
>315b		2e 31					.word w_here
.315d						xt_allot:
.315d		4c 10 16	jmp $1610		jmp i_enter
>3160		23 2d					.word xt_dp
>3162		c0 28					.word xt_x2bx21
>3164		08 16					.word i_exit
.3166						w_x2c:
>3166		01					.byte $01
>3167		2c					.text ','
>3168							.fill 15
>3177		4a 31					.word w_allot
.3179						xt_x2c:
.3179		4c 10 16	jmp $1610		jmp i_enter
>317c		41 31					.word xt_here
>317e		3c 28					.word xt_x21
>3180		50 17					.word xt_2
>3182		5d 31					.word xt_allot
>3184		08 16					.word i_exit
.3186						w_cx2c:
>3186		02					.byte $02
>3187		63 2c					.text 'c,'
>3189							.fill 14
>3197		66 31					.word w_x2c
.3199						xt_cx2c:
.3199		4c 10 16	jmp $1610		jmp i_enter
>319c		41 31					.word xt_here
>319e		73 28					.word xt_cx21
>31a0		41 17					.word xt_1
>31a2		5d 31					.word xt_allot
>31a4		08 16					.word i_exit
.31a6						w_definitions:
>31a6		0b					.byte $0B
>31a7		64 65 66 69 6e 69 74 69			.text 'definitions'
>31af		6f 6e 73
>31b2							.fill 5
>31b7		86 31					.word w_cx2c
.31b9						xt_definitions:
.31b9		4c 10 16	jmp $1610		jmp i_enter
>31bc		f3 2c					.word xt_context
>31be		59 28					.word xt_x40
>31c0		0b 2d					.word xt_current
>31c2		3c 28					.word xt_x21
>31c4		08 16					.word i_exit
.31c6						w_latest:
>31c6		06					.byte $06
>31c7		6c 61 74 65 73 74			.text 'latest'
>31cd							.fill 10
>31d7		a6 31					.word w_definitions
.31d9						xt_latest:
.31d9		4c 10 16	jmp $1610		jmp i_enter
>31dc		0b 2d					.word xt_current
>31de		59 28					.word xt_x40
>31e0		59 28					.word xt_x40
>31e2		08 16					.word i_exit
.31e4						w_count:
>31e4		05					.byte $05
>31e5		63 6f 75 6e 74				.text 'count'
>31ea							.fill 11
>31f5		c6 31					.word w_latest
.31f7						xt_count:
.31f7		4c 10 16	jmp $1610		jmp i_enter
>31fa		c0 27					.word xt_dup
>31fc		05 2b					.word xt_1x2b
>31fe		d4 27					.word xt_swap
>3200		83 28					.word xt_cx40
>3202		08 16					.word i_exit
.3204						w_type:
>3204		04					.byte $04
>3205		74 79 70 65				.text 'type'
>3209							.fill 12
>3215		e4 31					.word w_count
.3217						xt_type:
.3217		4c 10 16	jmp $1610		jmp i_enter
>321a		45 2f					.word xt_x3fdup
>321c		98 2d					.word xt_x28branch0x29
>321e		42 32					.word l_200
>3220		ee 27					.word xt_over
>3222		e6 29					.word xt_x2b
>3224		d4 27					.word xt_swap
>3226		c9 2d					.word xt_x28dox29
.3228						l_201:
>3228		cc 2e					.word xt_i
>322a		83 28					.word xt_cx40
>322c		45 2f					.word xt_x3fdup
>322e		98 2d					.word xt_x28branch0x29
>3230		38 32					.word l_203
>3232		de 16					.word xt_emit
>3234		7b 2d					.word xt_x28branchx29
>3236		3a 32					.word l_204
.3238						l_203:
>3238		06 2e					.word xt_leave
.323a						l_204:
>323a		23 2e					.word xt_x28loopx29
>323c		28 32					.word l_201
.323e						l_202:
>323e		7b 2d					.word xt_x28branchx29
>3240		44 32					.word l_205
.3242						l_200:
>3242		b5 27					.word xt_drop
.3244						l_205:
>3244		08 16					.word i_exit
.3246						w_space:
>3246		05					.byte $05
>3247		73 70 61 63 65				.text 'space'
>324c							.fill 11
>3257		04 32					.word w_type
.3259						xt_space:
.3259		4c 10 16	jmp $1610		jmp i_enter
>325c		87 17					.word xt_x28literalx29
>325e		20 00					.word 32
>3260		de 16					.word xt_emit
>3262		08 16					.word i_exit
.3264						w_spaces:
>3264		06					.byte $06
>3265		73 70 61 63 65 73			.text 'spaces'
>326b							.fill 10
>3275		46 32					.word w_space
.3277						xt_spaces:
.3277		4c 10 16	jmp $1610		jmp i_enter
>327a		34 17					.word xt_0
>327c		c9 2d					.word xt_x28dox29
.327e						l_206:
>327e		59 32					.word xt_space
>3280		23 2e					.word xt_x28loopx29
>3282		7e 32					.word l_206
.3284						l_207:
>3284		08 16					.word i_exit
.3286						w_expect:
>3286		06					.byte $06
>3287		65 78 70 65 63 74			.text 'expect'
>328d							.fill 10
>3297		64 32					.word w_spaces
.3299						xt_expect:
.3299		4c 10 16	jmp $1610		jmp i_enter
>329c		ee 27					.word xt_over
>329e		e6 29					.word xt_x2b
>32a0		ee 27					.word xt_over
>32a2		c9 2d					.word xt_x28dox29
.32a4						l_208:
>32a4		0f 17					.word xt_key
>32a6		c0 27					.word xt_dup
>32a8		87 17					.word xt_x28literalx29
>32aa		08 00					.word 8
>32ac		9d 2f					.word xt_x3d
>32ae		98 2d					.word xt_x28branch0x29
>32b0		de 32					.word l_210
>32b2		b5 27					.word xt_drop
>32b4		c0 27					.word xt_dup
>32b6		cc 2e					.word xt_i
>32b8		9d 2f					.word xt_x3d
>32ba		98 2d					.word xt_x28branch0x29
>32bc		ce 32					.word l_211
>32be		cc 2e					.word xt_i
>32c0		28 2b					.word xt_1x2d
>32c2		e2 2d					.word xt_x3ei
>32c4		87 17					.word xt_x28literalx29
>32c6		07 00					.word 7
>32c8		de 16					.word xt_emit
>32ca		7b 2d					.word xt_x28branchx29
>32cc		da 32					.word l_212
.32ce						l_211:
>32ce		cc 2e					.word xt_i
>32d0		38 2b					.word xt_2x2d
>32d2		e2 2d					.word xt_x3ei
>32d4		87 17					.word xt_x28literalx29
>32d6		08 00					.word 8
>32d8		de 16					.word xt_emit
.32da						l_212:
>32da		7b 2d					.word xt_x28branchx29
>32dc		06 33					.word l_213
.32de						l_210:
>32de		c0 27					.word xt_dup
>32e0		87 17					.word xt_x28literalx29
>32e2		0d 00					.word 13
>32e4		9d 2f					.word xt_x3d
>32e6		98 2d					.word xt_x28branch0x29
>32e8		f6 32					.word l_214
>32ea		06 2e					.word xt_leave
>32ec		b5 27					.word xt_drop
>32ee		5d 2c					.word xt_bl
>32f0		34 17					.word xt_0
>32f2		7b 2d					.word xt_x28branchx29
>32f4		f8 32					.word l_215
.32f6						l_214:
>32f6		c0 27					.word xt_dup
.32f8						l_215:
>32f8		cc 2e					.word xt_i
>32fa		73 28					.word xt_cx21
>32fc		34 17					.word xt_0
>32fe		cc 2e					.word xt_i
>3300		05 2b					.word xt_1x2b
>3302		73 28					.word xt_cx21
>3304		de 16					.word xt_emit
.3306						l_213:
>3306		23 2e					.word xt_x28loopx29
>3308		a4 32					.word l_208
.330a						l_209:
>330a		b5 27					.word xt_drop
>330c		08 16					.word i_exit
.330e						w_random:
>330e		06					.byte $06
>330f		72 61 6e 64 6f 6d			.text 'random'
>3315							.fill 10
>331f		86 32					.word w_expect
.3321						xt_random:
.3321		4c 10 16	jmp $1610		jmp i_enter
>3324		87 17					.word xt_x28literalx29
>3326		a4 d6					.word 54948
>3328		59 28					.word xt_x40
>332a		08 16					.word i_exit
.332c						w_maze:
>332c		04					.byte $04
>332d		6d 61 7a 65				.text 'maze'
>3331							.fill 12
>333d		0e 33					.word w_random
.333f						xt_maze:
.333f		4c 10 16	jmp $1610		jmp i_enter
>3342		41 17					.word xt_1
>3344		87 17					.word xt_x28literalx29
>3346		a6 d6					.word 54950
>3348		73 28					.word xt_cx21
.334a						l_216:
>334a		21 33					.word xt_random
>334c		41 17					.word xt_1
>334e		4e 2b					.word xt_and
>3350		87 17					.word xt_x28literalx29
>3352		cd 00					.word 205
>3354		e6 29					.word xt_x2b
>3356		de 16					.word xt_emit
>3358		7b 2d					.word xt_x28branchx29
>335a		4a 33					.word l_216
.335c						l_217:
>335c		08 16					.word i_exit
.335e						w_cold:
>335e		04					.byte $04
>335f		63 6f 6c 64				.text 'cold'
>3363							.fill 12
>336f		2c 33					.word w_maze
.3371						xt_cold:
.3371		4c 10 16	jmp $1610		jmp i_enter
>3374		87 17					.word xt_x28literalx29
>3376		7c 33					.word l_218
>3378		7b 2d					.word xt_x28branchx29
>337a		9b 33					.word l_219
.337c						l_218:
>337c		1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>3384		20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>3394		30 2e 30 30 2e 30 30
.339b						l_219:
>339b		f7 31					.word xt_count
>339d		17 32					.word xt_type
>339f		26 17					.word xt_cr
>33a1		87 17					.word xt_x28literalx29
>33a3		a9 33					.word l_220
>33a5		7b 2d					.word xt_x28branchx29
>33a7		ac 33					.word l_221
.33a9						l_220:
>33a9		02 6f 6b				.ptext "ok"
.33ac						l_221:
>33ac		f7 31					.word xt_count
>33ae		17 32					.word xt_type
>33b0		26 17					.word xt_cr
>33b2		87 17					.word xt_x28literalx29
>33b4		00 50					.word 20480
>33b6		87 17					.word xt_x28literalx29
>33b8		50 00					.word 80
>33ba		99 32					.word xt_expect
>33bc		26 17					.word xt_cr
>33be		87 17					.word xt_x28literalx29
>33c0		c6 33					.word l_222
>33c2		7b 2d					.word xt_x28branchx29
>33c4		cf 33					.word l_223
.33c6						l_222:
>33c6		08 74 79 70 65 64 2e 2e			.ptext "typed..."
>33ce		2e
.33cf						l_223:
>33cf		f7 31					.word xt_count
>33d1		17 32					.word xt_type
>33d3		26 17					.word xt_cr
>33d5		87 17					.word xt_x28literalx29
>33d7		00 50					.word 20480
>33d9		87 17					.word xt_x28literalx29
>33db		50 00					.word 80
>33dd		17 32					.word xt_type
>33df		08 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.010000	0000					endcode:

;******  Return to file: forth.asm


;******  End of listing
