
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Thu Jan 12 21:11:42 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$a000					USERAREA = $a000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa	cc 0a				vnmi:       .word <>h_nmi
>fffc	00 b0				vreset:     .word <>boot
>fffe	cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
>0020					shell_start .word ?                 ; Address for the recognized shell program
>0022					cur_line    .word ?                 ; Address of the current line on the text screen
>0024					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200					curs_color  .byte ?                 ; Current color for printing
>0201					curs_x      .byte ?                 ; Current column for the text cursor
>0202					curs_y      .byte ?                 ; Current row for the text cursor
>0203					old_y       .byte ?                 ; Previous cursor row
>0204					curs_width  .byte ?                 ; Width of the screen in text columns
>0205					curs_height .byte ?                 ; Height of the screen in text columns
.b000	4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003	4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006	4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009	4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c	4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f	4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012	4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015	4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018	4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800	a9 e9		lda #$e9	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802	a0 15		ldy #$15	            ldy #>start
.0804	20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807	4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a					isetshell:
.080a	84 21		sty $21		            sty shell_start+1
.080c	85 20		sta $20		            sta shell_start
.080e	60		rts		            rts
.080f					iwarm:
.080f	78		sei		            sei                     ; Disable IRQs
.0810	d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811	a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813	9a		txs		            txs
.0814	a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816	85 01		sta $01		            sta MMU_IO_CTRL
.0818	20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b	20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e	20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821	6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824					inittext:
.0824	a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826	8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829	9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c	a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e	8d 04 02	sta $0204	            sta curs_width
.0831	a9 3c		lda #$3c	            lda #60
.0833	8d 05 02	sta $0205	            sta curs_height
.0836	a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838	8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b	a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d	8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840	a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842	8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845	a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847	8d 00 02	sta $0200	            sta curs_color
.084a	a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c	8d 03 02	sta $0203	            sta old_y
.084f	20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852	20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855	20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858	60		rts		            rts
.0859					initint:
.0859	a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b	8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e	a9 ff		lda #$ff	            lda #$ff
.0860	8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863	8d 60 d6	sta $d660	            sta INT_PEND_0
.0866	8d 61 d6	sta $d661	            sta INT_PEND_1
.0869	58		cli		            cli
.086a	60		rts		            rts
=$7f					CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b					initfont:
.086b	48		pha		            pha
.086c	da		phx		            phx
.086d	5a		phy		            phy
.086e	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870	48		pha		            pha
.0871	a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873	85 01		sta $01		            sta MMU_IO_CTRL
.0875	a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877	85 24		sta $24		            sta src_ptr
.0879	a9 0a		lda #$0a	            lda #>bios_font
.087b	85 25		sta $25		            sta src_ptr+1
.087d	a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f	85 26		sta $26		            sta dst_ptr
.0881	a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883	85 27		sta $27		            sta dst_ptr+1
.0885	a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887	a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889	b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b	91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d	c8		iny		            iny                     ; Move to the next byte
.088e	d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890	e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892	e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894	ca		dex		            dex                     ; Count down the pages moved
.0895	d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897	68		pla		            pla
.0898	85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a	7a		ply		            ply
.089b	fa		plx		            plx
.089c	68		pla		            pla
.089d	60		rts		            rts
=$f4					DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e					initlut:
.089e	48		pha		            pha
.089f	5a		phy		            phy
.08a0	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2	48		pha		            pha
.08a3	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5	85 01		sta $01		            sta MMU_IO_CTRL
.08a7	a0 00		ldy #$00	            ldy #0
.08a9	b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2	c8		iny		            iny
.08b3	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5	d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7	68		pla		            pla
.08b8	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba	7a		ply		            ply
.08bb	68		pla		            pla
.08bc	60		rts		            rts
>08bd	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd					consclr:
.08fd	48		pha		            pha
.08fe	da		phx		            phx
.08ff	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901	85 22		sta $22		            sta cur_line
.0903	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905	85 23		sta $23		            sta cur_line+1
.0907	a0 00		ldy #$00	            ldy #0
.0909	20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c	c8		iny		            iny                     ; Move to the next line
.090d	cc 05 02	cpy $0205	            cpy curs_height
.0910	f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913	a5 22		lda $22		            lda cur_line
.0915	6d 04 02	adc $0204	            adc curs_width
.0918	85 22		sta $22		            sta cur_line
.091a	a5 23		lda $23		            lda cur_line+1
.091c	69 00		adc #$00	            adc #0
.091e	85 23		sta $23		            sta cur_line+1
.0920	80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922	9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925	9c 02 02	stz $0202	            stz curs_y
.0928	20 2e 09	jsr $092e	            jsr cursset
.092b	fa		plx		            plx
.092c	68		pla		            pla
.092d	60		rts		            rts
.092e					cursset:
.092e	48		pha		            pha
.092f	5a		phy		            phy
.0930	ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933	cd 04 02	cmp $0204	            cmp curs_width
.0936	90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938	9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b	ee 02 02	inc $0202	            inc curs_y
.093e					chk_row:
.093e	ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941	cd 05 02	cmp $0205	            cmp curs_height
.0944	90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946	ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949	3a		dec a		            dec a
.094a	8d 02 02	sta $0202	            sta curs_y
.094d	20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950	ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953	8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959	ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962	ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965	cd 02 02	cmp $0202	            cmp curs_y
.0968	f0 21		beq $098b	            beq done                ; Yes: we are done
.096a	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c	85 22		sta $22		            sta cur_line
.096e	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970	85 23		sta $23		            sta cur_line+1
.0972	ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975	8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978	f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a	18		clc		loop:       clc                     ; Move cur_line to the next line
.097b	a5 22		lda $22		            lda cur_line
.097d	6d 04 02	adc $0204	            adc curs_width
.0980	85 22		sta $22		            sta cur_line
.0982	a5 23		lda $23		            lda cur_line+1
.0984	69 00		adc #$00	            adc #0
.0986	85 23		sta $23		            sta cur_line+1
.0988	88		dey		            dey                     ; Decrement line counter
.0989	d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b	7a		ply		done:       ply
.098c	68		pla		            pla
.098d	60		rts		            rts
.098e					consscroll:
.098e	48		pha		            pha
.098f	da		phx		            phx
.0990	a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992	48		pha		            pha
.0993	a5 22		lda $22		            lda cur_line
.0995	48		pha		            pha
.0996	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998	48		pha		            pha
.0999	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b	85 26		sta $26		            sta dst_ptr
.099d	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f	85 27		sta $27		            sta dst_ptr+1
.09a1	18		clc		            clc                     ; src_ptr is the second line
.09a2	a5 26		lda $26		            lda dst_ptr
.09a4	6d 04 02	adc $0204	            adc curs_width
.09a7	85 24		sta $24		            sta src_ptr
.09a9	a5 27		lda $27		            lda dst_ptr+1
.09ab	69 00		adc #$00	            adc #0
.09ad	85 25		sta $25		            sta src_ptr+1
.09af	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3	85 01		sta $01		            sta MMU_IO_CTRL
.09b5	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7	b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9	91 26		sta ($26),y	            sta (dst_ptr),y
.09bb	c8		iny		            iny
.09bc	cc 04 02	cpy $0204	            cpy curs_width
.09bf	d0 f6		bne $09b7	            bne loop1
.09c1	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3	85 01		sta $01		            sta MMU_IO_CTRL
.09c5	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7	b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9	91 26		sta ($26),y	            sta (dst_ptr),y
.09cb	c8		iny		            iny
.09cc	cc 04 02	cpy $0204	            cpy curs_width
.09cf	d0 f6		bne $09c7	            bne loop2
.09d1	a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3	85 26		sta $26		            sta dst_ptr
.09d5	a5 25		lda $25		            lda src_ptr+1
.09d7	85 27		sta $27		            sta dst_ptr+1
.09d9	18		clc		            clc                     ; Move src_ptr to the next line
.09da	a5 24		lda $24		            lda src_ptr
.09dc	6d 04 02	adc $0204	            adc curs_width
.09df	85 24		sta $24		            sta src_ptr
.09e1	a5 25		lda $25		            lda src_ptr+1
.09e3	69 00		adc #$00	            adc #0
.09e5	85 25		sta $25		            sta src_ptr+1
.09e7	e8		inx		            inx                     ; Move src line number to the next row
.09e8	ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb	d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed	a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef	85 22		sta $22		            sta cur_line
.09f1	a5 27		lda $27		            lda dst_ptr+1
.09f3	85 22		sta $22		            sta cur_line
.09f5	20 04 0a	jsr $0a04	            jsr clrline
.09f8	68		pla		            pla                     ; Restore the original I/O page
.09f9	85 01		sta $01		            sta MMU_IO_CTRL
.09fb	68		pla		            pla                     ; Restore the current line
.09fc	85 22		sta $22		            sta cur_line
.09fe	68		pla		            pla
.09ff	85 23		sta $23		            sta cur_line+1
.0a01	fa		plx		            plx
.0a02	68		pla		            pla
.0a03	60		rts		            rts
.0a04					clrline:
.0a04	48		pha		            pha
.0a05	5a		phy		            phy
.0a06	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08	48		pha		            pha
.0a09	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b	85 01		sta $01		            sta MMU_IO_CTRL
.0a0d	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f	a9 20		lda #$20	            lda #' '
.0a11	91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13	c8		iny		            iny
.0a14	cc 04 02	cpy $0204	            cpy curs_width
.0a17	d0 f8		bne $0a11	            bne loop1
.0a19	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b	85 01		sta $01		            sta MMU_IO_CTRL
.0a1d	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f	ad 00 02	lda $0200	            lda curs_color
.0a22	91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24	c8		iny		            iny
.0a25	cc 04 02	cpy $0204	            cpy curs_width
.0a28	d0 f8		bne $0a22	            bne loop2
.0a2a	68		pla		            pla                     ; Restore the original I/O page
.0a2b	85 01		sta $01		            sta MMU_IO_CTRL
.0a2d	7a		ply		            ply
.0a2e	68		pla		            pla
.0a2f	60		rts		            rts
.0a30					iconout:
.0a30	5a		phy		            phy
.0a31	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33	d0 0b		bne $0a40	            bne not_cr
.0a35	9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38	ee 02 02	inc $0202	            inc curs_y
.0a3b	20 2e 09	jsr $092e	            jsr cursset
.0a3e	80 44		bra $0a84	            bra done
.0a40	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42	d0 05		bne $0a49	            bne not_ff
.0a44	20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47	80 3b		bra $0a84	            bra done
.0a49	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b	d0 15		bne $0a62	            bne not_bs
.0a4d	ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50	f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52	3a		dec a		            dec a                   ; No: move it back one
.0a53	8d 01 02	sta $0201	            sta curs_x
.0a56	20 2e 09	jsr $092e	            jsr cursset
.0a59					bs_leftmost:
.0a59	a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60	80 22		bra $0a84	            bra done
.0a62	85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66	48		pha		            pha
.0a67	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69	85 01		sta $01		            sta MMU_IO_CTRL
.0a6b	a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74	85 01		sta $01		            sta MMU_IO_CTRL
.0a76	ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79	91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b	68		pla		            pla                     ; Restore the I/O page
.0a7c	85 01		sta $01		            sta MMU_IO_CTRL
.0a7e	ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81	20 2e 09	jsr $092e	            jsr cursset
.0a84	7a		ply		done:       ply
.0a85	60		rts		            rts
.0a86					iprintah:
.0a86	da		phx		            phx
.0a87	48		pha		            pha
.0a88	4a		lsr a		            lsr a
.0a89	4a		lsr a		            lsr a
.0a8a	4a		lsr a		            lsr a
.0a8b	4a		lsr a		            lsr a
.0a8c	29 0f		and #$0f	            and #$0f
.0a8e	aa		tax		            tax                     ; Convert it to an index
.0a8f	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95	68		pla		            pla
.0a96	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98	aa		tax		            tax                     ; Convert it to an index
.0a99	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f	fa		plx		            plx
.0aa0	60		rts		            rts
.0aa1					iprintyah:
.0aa1	48		pha		            pha
.0aa2	98		tya		            tya
.0aa3	20 12 b0	jsr $b012	            jsr printah
.0aa6	68		pla		            pla
.0aa7	20 12 b0	jsr $b012	            jsr printah
.0aaa	60		rts		            rts
>0aab	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3	38 39 41 42 43 44 45 46
.0abb					iprints:
.0abb	48		pha		            pha
.0abc	5a		phy		            phy
.0abd	a0 00		ldy #$00	            ldy #0
.0abf	b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1	f0 06		beq $0ac9	            beq done
.0ac3	20 09 b0	jsr $b009	            jsr conout
.0ac6	c8		iny		            iny
.0ac7	d0 f6		bne $0abf	            bne loop
.0ac9	7a		ply		done:       ply
.0aca	68		pla		            pla
.0acb	60		rts		            rts
.0acc					h_nmi:
.0acc	40		rti		            rti                     ; Just return
.0acd					h_irq:
.0acd	48		pha		            pha
.0ace	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0	48		pha		            pha
.0ad1	64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3	ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6	89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8	f0 03		beq $0add	            beq done                ; No: we're done
.0ada	20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add					done:
.0add	a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf	8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2	8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5	68		pla		            pla                     ; Restore the IO page settings
.0ae6	85 01		sta $01		            sta MMU_IO_CTRL
.0ae8	68		pla		            pla
.0ae9	40		rti		            rti                     ; Just return
>0aea	00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2	7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02	00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12	38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32	00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52	30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62	10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72	04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82	48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92	1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2	10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2	10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2	00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2	00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2	00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2	10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02	28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12	60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22	08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32	10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52	00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62	00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72	10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92	7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2	7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2	38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2	00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2	00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2	38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2	10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02	18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12	7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22	38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32	38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42	44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52	44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62	38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72	38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82	38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92	44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2	44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2	44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2	3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2	00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2	00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02	00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12	00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22	00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32	00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42	40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52	00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62	00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72	00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82	00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92	00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2	00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2	00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2	0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2	30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2	7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2	48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02	10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12	20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22	00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32	28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42	28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52	20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62	10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72	00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82	10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92	20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2	20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2	28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2	00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2	44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2	18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2	10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002	10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012	14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022	10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032	00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042	42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052	10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062	00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072	cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082	10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092	10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2	00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2	28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2	00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2	28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2	00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2	10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102	10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112	10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122	28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132	00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142	00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152	00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162	10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172	00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182	28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192	00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2	28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2	10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2	ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2	00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202	00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212	00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222	00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232	38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242	3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252	00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262	38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272	10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282	08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292	10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2	00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2	00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2	1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2	38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2	00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642					KBD_SCAN = $d642
=$d644					KBD_STAT = $d644
=$01					KBD_RDY = $01
=$01					KBD_ST_F0 = $01
=$02					KBD_ST_E0 = $02
=$80					KBD_SHIFT = $80
=$81					KBD_CTRL = $81
=$82					KBD_ALT = $82
=$83					KBD_OS = $83
=$84					KBD_CAP = $84
=$01					KBD_MOD_SHIFT = $01
=$02					KBD_MOD_CTRL = $02
=$04					KBD_MOD_ALT = $04
=$08					KBD_MOD_OS = $08
=$10					KBD_MOD_CAP = $10
=80					KBD_BUFFER_SIZE = 80
>0206					kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207					kbd_mods    .byte ?         ; The current state of the modifier keys
>0208					kbd_buffer  .fill 80        ; Keyboard buffer
>0258					kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea					initkbd:
.12ea	9c 06 02	stz $0206	            stz kbd_state
.12ed	9c 07 02	stz $0207	            stz kbd_mods
.12f0	9c 58 02	stz $0258	            stz kbd_head
.12f3	60		rts		            rts
.12f4					kbd_status:
.12f4	ad 58 02	lda $0258	            lda kbd_head
.12f7	f0 03		beq $12fc	            beq is_empty
.12f9	a9 01		lda #$01	            lda #1
.12fb	60		rts		            rts
.12fc					is_empty:
.12fc	60		rts		            rts
.12fd					kbd_enqueue:
.12fd	da		phx		            phx
.12fe	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301	e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303	b0 07		bcs $130c	            bge done
.1305	9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308	e8		inx		            inx
.1309	8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c					done:
.130c	fa		plx		            plx
.130d	60		rts		            rts
.130e					kbd_dequeue:
.130e	da		phx		            phx
.130f	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312	f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314	ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317	48		pha		            pha                     ; Save it temporarily to the stack
.1318	a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a					loop:
.131a	bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d	9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320	e8		inx		            inx                     ; Move to the next character
.1321	ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324	d0 f4		bne $131a	            bne loop
.1326	ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329	68		pla		            pla                     ; Get the character back and return
.132a	80 02		bra $132e	            bra done
.132c					is_empty:
.132c	a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e					done:
.132e	fa		plx		            plx
.132f	60		rts		            rts
.1330					handlekbd:
.1330	ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333	29 01		and #$01	            and #KBD_RDY
.1335	d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337	ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a	f0 08		beq $1344	            beq st_0        ; If base state...
.133c	c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e	f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340	9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343					done:
.1343	60		rts		            rts
.1344					st_0:
.1344	ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347	c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349	d0 07		bne $1352	            bne not_f0
.134b	a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d	8d 06 02	sta $0206	            sta kbd_state
.1350	80 f1		bra $1343	            bra done
.1352	c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354	d0 07		bne $135d	            bne not_f0e0
.1356	a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358	8d 06 02	sta $0206	            sta kbd_state
.135b	80 e6		bra $1343	            bra done
.135d					not_f0e0:
.135d	48		pha		            pha
.135e	ad 07 02	lda $0207	            lda kbd_mods
.1361	89 10		bit #$10	            bit #KBD_MOD_CAP
.1363	d0 0b		bne $1370	            bne read_caps
.1365	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367	d0 19		bne $1382	            bne read_shift
.1369	68		pla		            pla
.136a	aa		tax		            tax
.136b	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e	80 17		bra $1387	            bra proc_ascii
.1370					read_caps:
.1370	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372	d0 07		bne $137b	            bne read_caps_shift
.1374	68		pla		            pla
.1375	aa		tax		            tax
.1376	bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379	80 0c		bra $1387	            bra proc_ascii
.137b					read_caps_shift:
.137b	68		pla		            pla
.137c	aa		tax		            tax
.137d	bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380	80 05		bra $1387	            bra proc_ascii
.1382					read_shift:
.1382	68		pla		            pla
.1383	aa		tax		            tax
.1384	bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387					proc_ascii:
.1387	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389	f0 09		beq $1394	            beq raise_shift
.138b	c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d	f0 0f		beq $139e	            beq toggle_caps
.138f	20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392	80 af		bra $1343	            bra done
.1394					raise_shift:
.1394	ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397	09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399	8d 07 02	sta $0207	            sta kbd_mods
.139c	80 a5		bra $1343	            bra done
.139e					toggle_caps:
.139e	ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1	49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3	8d 07 02	sta $0207	            sta kbd_mods
.13a6	80 9b		bra $1343	            bra done
.13a8					st_f0:
.13a8	ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab	aa		tax		            tax
.13ac	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1	d0 08		bne $13bb	            bne exit_f0
.13b3	ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6	29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8	8d 07 02	sta $0207	            sta kbd_mods
.13bb					exit_f0:
.13bb	9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be	80 83		bra $1343	            bra done
>13c0	00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8	00 00 00 00 00 08 60 00
>13d0	00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8	00 00 7a 73 61 77 32 00
>13e0	00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8	00 20 76 66 74 72 35 00
>13f0	00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8	00 00 6d 6a 75 37 38 00
>1400	00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408	00 2e 2f 6c 3b 70 2d 00
>1410	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418	84 80 0d 5d 00 5c 00 00
>1420	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428	00 00 00 00 00 00 00 00
>1430	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438	00 00 00 00 00 00 00 00
>1440	00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448	00 00 00 00 00 08 7e 00
>1450	00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458	00 00 5a 53 41 57 40 00
>1460	00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468	00 20 56 46 54 52 25 00
>1470	00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478	00 00 4d 4a 55 26 2a 00
>1480	00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488	00 3e 3f 4c 3a 50 5f 00
>1490	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498	84 80 0d 7d 00 7c 00 00
>14a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8	00 00 00 00 00 00 00 00
>14b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8	00 00 00 00 00 00 00 00
>14c0	00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8	00 00 00 00 00 08 60 00
>14d0	00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8	00 00 5a 53 41 57 32 00
>14e0	00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8	00 20 56 46 54 52 35 00
>14f0	00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8	00 00 4d 4a 55 37 38 00
>1500	00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508	00 2e 2f 4c 3b 50 2d 00
>1510	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518	84 80 0d 5d 00 5c 00 00
>1520	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528	00 00 00 00 00 00 00 00
>1530	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538	00 00 00 00 00 00 00 00
>1540	00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548	00 00 00 00 00 08 7e 00
>1550	00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558	00 00 7a 73 61 77 40 00
>1560	00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568	00 20 76 66 74 72 25 00
>1570	00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578	00 00 6d 6a 75 26 2a 00
>1580	00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588	00 3e 3f 6c 3a 70 5f 00
>1590	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598	84 80 0d 7d 00 7c 00 00
>15a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8	00 00 00 00 00 00 00 00
>15b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8	00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028					ip      .word ?         ; Instruction pointer
>002a					wp      .word ?         ; Word pointer
>002c					up      .word ?         ; User pointer
>002e					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030					test    .word ?         ; Pointer to the current test name
>0032					tmp     .word ?
>0034					savex   .byte ?
>0035					counter .byte ?         ; A counter used for some code
>0036					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0	4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8	68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5					init_user:
>15d5	6e 00				        .word $006e     ; Initial PSP (S0)
>15d7	ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9	0a 00				        .word 10        ; Initial BASE
>15db	00 00				        .word 0         ; Initial STATE
>15dd	00 00				        .word 0         ; Initial CONTEXT
>15df	00 00				        .word 0         ; Initial CURRENT
>15e1	d9 35				        .word <>endcode ; Initial DP
>15e3	00 00				        .word 0         ; Initial >IN
>15e5	00 bf				        .word $bf00     ; Initial TIB
>15e7	00 00				        .word 0         ; Initial SOURCE-ID
.15e9					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
.15e9	a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15eb	9a		txs		        txs
.15ec	a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15ee	a9 01		lda #$01	        lda #<vstart
.15f0	85 28		sta $28		        sta ip
.15f2	a9 16		lda #$16	        lda #>vstart
.15f4	85 29		sta $29		        sta ip+1
.15f6	a9 00		lda #$00	        lda #<USERAREA
.15f8	85 2c		sta $2c		        sta up
.15fa	a9 a0		lda #$a0	        lda #>USERAREA
.15fc	85 2d		sta $2d		        sta up+1
.15fe	4c 23 16	jmp $1623	        jmp next
>1601	59 35				vstart  .word xt_cold
>1603	d4 16				        .word xt_halt
.1605	6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.1608	68		pla		i_exit  pla             ; ip := pop()
.1609	85 28		sta $28		        sta ip
.160b	68		pla		        pla
.160c	85 29		sta $29		        sta ip+1
.160e	80 13		bra $1623	        bra next        ; jmp next
.1610	a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1612	48		pha		        pha
.1613	a5 28		lda $28		        lda ip
.1615	48		pha		        pha
.1616	18		clc		        clc             ; ip := wp + 3
.1617	a5 2a		lda $2a		        lda wp
.1619	69 03		adc #$03	        adc #3
.161b	85 28		sta $28		        sta ip
.161d	a5 2b		lda $2b		        lda wp+1
.161f	69 00		adc #$00	        adc #0
.1621	85 29		sta $29		        sta ip+1
.1623	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1625	b2 28		lda ($28)	        lda (ip)
.1627	85 2a		sta $2a		        sta wp
.1629	b1 28		lda ($28),y	        lda (ip),y
.162b	85 2b		sta $2b		        sta wp+1
.162d	18		clc		        clc             ; ip := ip + 2
.162e	a5 28		lda $28		        lda ip
.1630	69 02		adc #$02	        adc #2
.1632	85 28		sta $28		        sta ip
.1634	a5 29		lda $29		        lda ip+1
.1636	69 00		adc #$00	        adc #0
.1638	85 29		sta $29		        sta ip+1
.163a	6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.163d					w_testname:
>163d	08					.byte $08
>163e	74 65 73 74 6e 61 6d 65			.text 'testname'
>1646	00 00					.word 0
.1648					xt_testname:
.1648	b5 02		lda $02,x		lda pstack+2,x
.164a	85 30		sta $30			sta test
.164c	b5 03		lda $03,x		lda pstack+3,x
.164e	85 31		sta $31			sta test+1
.1650	e8		inx			inx
.1651	e8		inx			inx
.1652	4c 23 16	jmp $1623		jmp next
.1655					w_assertx3d:
>1655	07					.byte $07
>1656	61 73 73 65 72 74 3d			.text 'assert='
>165d	3d 16					.word w_testname
.165f					xt_assertx3d:
.165f	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1661	d5 04		cmp $04,x		cmp pstack+4,x
.1663	d0 0e		bne $1673		bne fail            ; If not, fail
.1665	b5 03		lda $03,x		lda pstack+3,x
.1667	d5 05		cmp $05,x		cmp pstack+5,x
.1669	d0 08		bne $1673		bne fail
.166b	8a		txa			txa                 ; If so, clean up the stack
.166c	18		clc			clc
.166d	69 04		adc #$04		adc #4
.166f	aa		tax			tax
.1670	4c 23 16	jmp $1623		jmp next            ; And continue
.1673						fail:
.1673	a9 b0		lda #$b0		lda #<leadin        ; Print the failure message
.1675	85 24		sta $24			sta src_ptr
.1677	a9 16		lda #$16		lda #>leadin
.1679	85 25		sta $25			sta src_ptr+1
.167b	20 18 b0	jsr $b018		jsr prints
.167e	a5 30		lda $30			lda test            ; Print the name of the test
.1680	85 24		sta $24			sta src_ptr
.1682	a5 31		lda $31			lda test+1
.1684	85 25		sta $25			sta src_ptr+1
.1686	20 18 b0	jsr $b018		jsr prints
.1689	a9 c3		lda #$c3		lda #<actual        ; Print the "Actual" label
.168b	85 24		sta $24			sta src_ptr
.168d	a9 16		lda #$16		lda #>actual
.168f	85 25		sta $25			sta src_ptr+1
.1691	20 18 b0	jsr $b018		jsr prints
.1694	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.1696	b5 04		lda $04,x		lda pstack+4,x
.1698	20 15 b0	jsr $b015		jsr printyah
.169b	a9 b7		lda #$b7		lda #<expected      ; Print the "Expected" label
.169d	85 24		sta $24			sta src_ptr
.169f	a9 16		lda #$16		lda #>expected
.16a1	85 25		sta $25			sta src_ptr+1
.16a3	20 18 b0	jsr $b018		jsr prints
.16a6	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16a8	b5 02		lda $02,x		lda pstack+2,x
.16aa	20 15 b0	jsr $b015		jsr printyah
.16ad						lock:
.16ad	ea		nop			nop                 ; Lock up
.16ae	80 fd		bra $16ad		bra lock
.16b0						leadin:
>16b0	46 41 49 4c 3a 20 00			.null "FAIL: "
.16b7						expected:
>16b7	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16bf	44 3a 20 00
.16c3						actual:
>16c3	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16cb	20 00
.16cd					w_halt:
>16cd	04					.byte $04
>16ce	68 61 6c 74				.text 'halt'
>16d2	55 16					.word w_assertx3d
.16d4					xt_halt:
.16d4	a9 38		lda #$38		lda #<registers         ; Print register banner
.16d6	85 24		sta $24			sta src_ptr
.16d8	a9 17		lda #$17		lda #>registers
.16da	85 25		sta $25			sta src_ptr+1
.16dc	20 18 b0	jsr $b018		jsr prints
.16df	a4 29		ldy $29			ldy ip+1                ; Print the IP
.16e1	a5 28		lda $28			lda ip
.16e3	20 15 b0	jsr $b015		jsr printyah
.16e6	a9 20		lda #$20		lda #' '
.16e8	20 09 b0	jsr $b009		jsr conout
.16eb	a4 2b		ldy $2b			ldy wp+1                ; Print the WP
.16ed	a5 2a		lda $2a			lda wp
.16ef	20 15 b0	jsr $b015		jsr printyah
.16f2	a9 20		lda #$20		lda #' '
.16f4	20 09 b0	jsr $b009		jsr conout
.16f7	86 34		stx $34			stx savex               ; Print the return stack pointer
.16f9	a0 01		ldy #$01		ldy #$01
.16fb	ba		tsx			tsx
.16fc	8a		txa			txa
.16fd	20 15 b0	jsr $b015		jsr printyah
.1700	a6 34		ldx $34			ldx savex
.1702	a9 20		lda #$20		lda #' '
.1704	20 09 b0	jsr $b009		jsr conout
.1707	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.1709	8a		txa			txa
.170a	20 15 b0	jsr $b015		jsr printyah
.170d	a9 0d		lda #$0d		lda #13
.170f	20 09 b0	jsr $b009		jsr conout
.1712	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.1714	b0 1f		bcs $1735		bge lock
.1716	a9 17		lda #$17		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.1718	85 25		sta $25			sta src_ptr+1
.171a	a9 53		lda #$53		lda #<stackmsg
.171c	85 24		sta $24			sta src_ptr
.171e	20 18 b0	jsr $b018		jsr prints
.1721						loop:
.1721	e0 6e		cpx #$6e		cpx #$6e
.1723	b0 10		bcs $1735		bge lock
.1725	b4 03		ldy $03,x		ldy pstack+3,x
.1727	b5 02		lda $02,x		lda pstack+2,x
.1729	e8		inx			inx
.172a	e8		inx			inx
.172b	20 15 b0	jsr $b015		jsr printyah
.172e	a9 20		lda #$20		lda #' '
.1730	20 09 b0	jsr $b009		jsr conout
.1733	80 ec		bra $1721		bra loop
.1735						lock:
.1735						wait:
.1735	ea		nop			nop
.1736	80 fd		bra $1735		bra wait
>1738	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>1740	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>1750	7c 20 00				.null "| "
>1753	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>175b	65 72 20 53 74 61 63 6b 3a 0d 00
.1766					w_emit:
>1766	04					.byte $04
>1767	65 6d 69 74				.text 'emit'
>176b	cd 16					.word w_halt
.176d					xt_emit:
.176d	b5 02		lda $02,x		lda pstack+2,x
.176f	da		phx			phx
.1770	20 09 b0	jsr $b009		jsr conout
.1773	fa		plx			plx
.1774	e8		inx			inx
.1775	e8		inx			inx
.1776	4c 23 16	jmp $1623		jmp next
.1779					w_keyx3f:
>1779	04					.byte $04
>177a	6b 65 79 3f				.text 'key?'
>177e	66 17					.word w_emit
.1780					xt_keyx3f:
.1780	20 0c b0	jsr $b00c		jsr constat
.1783	29 01		and #$01		and #1
.1785	f0 06		beq $178d		beq waiting
.1787	74 00		stz $00,x		stz pstack,x
.1789	74 01		stz $01,x		stz pstack+1,x
.178b	80 06		bra $1793		bra done
.178d						waiting:
.178d	a9 ff		lda #$ff		lda #$ff
.178f	95 00		sta $00,x		sta pstack,x
.1791	95 01		sta $01,x		sta pstack+1,x
.1793						done:
.1793	ca		dex			dex
.1794	ca		dex			dex
.1795	4c 23 16	jmp $1623		jmp next
.1798					w_key:
>1798	03					.byte $03
>1799	6b 65 79				.text 'key'
>179c	79 17					.word w_keyx3f
.179e					xt_key:
.179e	da		phx			phx
.179f						wait:
.179f	20 0f b0	jsr $b00f		jsr conin
.17a2	c9 00		cmp #$00		cmp #0
.17a4	f0 f9		beq $179f		beq wait
.17a6	fa		plx			plx
.17a7	95 00		sta $00,x		sta pstack,x
.17a9	74 01		stz $01,x		stz pstack+1,x
.17ab	ca		dex			dex
.17ac	ca		dex			dex
.17ad	4c 23 16	jmp $1623		jmp next
.17b0					w_cr:
>17b0	02					.byte $02
>17b1	63 72					.text 'cr'
>17b3	98 17					.word w_key
.17b5					xt_cr:
.17b5	da		phx			phx
.17b6	a9 0d		lda #$0d		lda #$0d
.17b8	20 09 b0	jsr $b009		jsr conout
.17bb	fa		plx			plx
.17bc	4c 23 16	jmp $1623		jmp next
.17bf					w_0:
>17bf	01					.byte $01
>17c0	30					.text '0'
>17c1	b0 17					.word w_cr
.17c3					xt_0:
.17c3	74 01		stz $01,x		stz pstack+1,x
.17c5	74 00		stz $00,x		stz pstack,x
.17c7	ca		dex			dex
.17c8	ca		dex			dex
.17c9	4c 23 16	jmp $1623		jmp next
.17cc					w_1:
>17cc	01					.byte $01
>17cd	31					.text '1'
>17ce	bf 17					.word w_0
.17d0					xt_1:
.17d0	74 01		stz $01,x		stz pstack+1,x
.17d2	a9 01		lda #$01		lda #1
.17d4	95 00		sta $00,x		sta pstack,x
.17d6	ca		dex			dex
.17d7	ca		dex			dex
.17d8	4c 23 16	jmp $1623		jmp next
.17db					w_2:
>17db	01					.byte $01
>17dc	32					.text '2'
>17dd	cc 17					.word w_1
.17df					xt_2:
.17df	74 01		stz $01,x		stz pstack+1,x
.17e1	a9 02		lda #$02		lda #2
.17e3	95 00		sta $00,x		sta pstack,x
.17e5	ca		dex			dex
.17e6	ca		dex			dex
.17e7	4c 23 16	jmp $1623		jmp next
.17ea					w_x2d1:
>17ea	02					.byte $02
>17eb	2d 31					.text '-1'
>17ed	db 17					.word w_2
.17ef					xt_x2d1:
.17ef	a9 ff		lda #$ff		lda #$ff
.17f1	95 01		sta $01,x		sta pstack+1,x
.17f3	95 00		sta $00,x		sta pstack,x
.17f5	ca		dex			dex
.17f6	ca		dex			dex
.17f7	4c 23 16	jmp $1623		jmp next
.17fa					w_x2d2:
>17fa	02					.byte $02
>17fb	2d 32					.text '-2'
>17fd	ea 17					.word w_x2d1
.17ff					xt_x2d2:
.17ff	a9 fe		lda #$fe		lda #$fe
.1801	95 01		sta $01,x		sta pstack+1,x
.1803	95 00		sta $00,x		sta pstack,x
.1805	ca		dex			dex
.1806	ca		dex			dex
.1807	4c 23 16	jmp $1623		jmp next
.180a					w_x28literalx29:
>180a	09					.byte $09
>180b	28 6c 69 74 65 72 61 6c			.text '(literal)'
>1813	29
>1814	fa 17					.word w_x2d2
.1816					xt_x28literalx29:
.1816	a0 01		ldy #$01		ldy #1
.1818	b2 28		lda ($28)		lda (ip)
.181a	95 00		sta $00,x		sta pstack,x
.181c	b1 28		lda ($28),y		lda (ip),y
.181e	95 01		sta $01,x		sta pstack+1,x
.1820	ca		dex			dex
.1821	ca		dex			dex
.1822	18		clc			clc
.1823	a5 28		lda $28			lda ip
.1825	69 02		adc #$02		adc #2
.1827	85 28		sta $28			sta ip
.1829	a5 29		lda $29			lda ip+1
.182b	69 00		adc #$00		adc #0
.182d	85 29		sta $29			sta ip+1
.182f	4c 23 16	jmp $1623		jmp next
.1832					w_depth:
>1832	05					.byte $05
>1833	64 65 70 74 68				.text 'depth'
>1838	0a 18					.word w_x28literalx29
.183a					xt_depth:
.183a	86 32		stx $32			stx tmp
.183c	38		sec			sec
.183d	a9 6e		lda #$6e		lda #$6e
.183f	e5 32		sbc $32			sbc tmp
.1841	4a		lsr a			lsr a
.1842	74 01		stz $01,x		stz pstack+1,x
.1844	95 00		sta $00,x		sta pstack,x
.1846	ca		dex			dex
.1847	ca		dex			dex
.1848	4c 23 16	jmp $1623		jmp next
.184b					w_unittest:
>184b	08					.byte $08
>184c	75 6e 69 74 74 65 73 74			.text 'unittest'
>1854						.fill 8
>185c	32 18					.word w_depth
.185e					xt_unittest:
.185e	4c 10 16	jmp $1610		jmp i_enter
>1861	16 18					.word xt_x28literalx29
>1863	69 18					.word l_2
>1865	19 2d					.word xt_x28branchx29
>1867	75 18					.word l_3
.1869					l_2:
>1869	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1871	3e 20 30 00
.1875					l_3:
>1875	48 16					.word xt_testname
>1877	3a 18					.word xt_depth
>1879	c3 17					.word xt_0
>187b	5f 16					.word xt_assertx3d
>187d	16 18					.word xt_x28literalx29
>187f	85 18					.word l_4
>1881	19 2d					.word xt_x28branchx29
>1883	95 18					.word l_5
.1885					l_4:
>1885	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>188d	2d 2d 3e 20 30 20 31 00
.1895					l_5:
>1895	48 16					.word xt_testname
>1897	c3 17					.word xt_0
>1899	3a 18					.word xt_depth
>189b	d0 17					.word xt_1
>189d	5f 16					.word xt_assertx3d
>189f	c3 17					.word xt_0
>18a1	5f 16					.word xt_assertx3d
>18a3	16 18					.word xt_x28literalx29
>18a5	ab 18					.word l_6
>18a7	19 2d					.word xt_x28branchx29
>18a9	c3 18					.word l_7
.18ab					l_6:
>18ab	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>18b3	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.18c3					l_7:
>18c3	48 16					.word xt_testname
>18c5	d0 17					.word xt_1
>18c7	d0 17					.word xt_1
>18c9	d0 17					.word xt_1
>18cb	3a 18					.word xt_depth
>18cd	16 18					.word xt_x28literalx29
>18cf	03 00					.word 3
>18d1	5f 16					.word xt_assertx3d
>18d3	d0 17					.word xt_1
>18d5	5f 16					.word xt_assertx3d
>18d7	d0 17					.word xt_1
>18d9	5f 16					.word xt_assertx3d
>18db	d0 17					.word xt_1
>18dd	5f 16					.word xt_assertx3d
>18df	16 18					.word xt_x28literalx29
>18e1	e7 18					.word l_8
>18e3	19 2d					.word xt_x28branchx29
>18e5	f6 18					.word l_9
.18e7					l_8:
>18e7	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>18ef	20 2d 2d 3e 20 31 00
.18f6					l_9:
>18f6	48 16					.word xt_testname
>18f8	d0 17					.word xt_1
>18fa	df 17					.word xt_2
>18fc	15 28					.word xt_drop
>18fe	d0 17					.word xt_1
>1900	5f 16					.word xt_assertx3d
>1902	16 18					.word xt_x28literalx29
>1904	0a 19					.word l_10
>1906	19 2d					.word xt_x28branchx29
>1908	1d 19					.word l_11
.190a					l_10:
>190a	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>1912	6f 70 20 2d 2d 3e 20 31 20 32 00
.191d					l_11:
>191d	48 16					.word xt_testname
>191f	d0 17					.word xt_1
>1921	df 17					.word xt_2
>1923	16 18					.word xt_x28literalx29
>1925	03 00					.word 3
>1927	15 28					.word xt_drop
>1929	df 17					.word xt_2
>192b	5f 16					.word xt_assertx3d
>192d	d0 17					.word xt_1
>192f	5f 16					.word xt_assertx3d
>1931	16 18					.word xt_x28literalx29
>1933	39 19					.word l_12
>1935	19 2d					.word xt_x28branchx29
>1937	47 19					.word l_13
.1939					l_12:
>1939	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1941	3e 20 31 20 31 00
.1947					l_13:
>1947	48 16					.word xt_testname
>1949	d0 17					.word xt_1
>194b	20 28					.word xt_dup
>194d	d0 17					.word xt_1
>194f	5f 16					.word xt_assertx3d
>1951	d0 17					.word xt_1
>1953	5f 16					.word xt_assertx3d
>1955	16 18					.word xt_x28literalx29
>1957	5d 19					.word l_14
>1959	19 2d					.word xt_x28branchx29
>195b	6f 19					.word l_15
.195d					l_14:
>195d	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1965	2d 2d 3e 20 31 20 32 20 32 00
.196f					l_15:
>196f	48 16					.word xt_testname
>1971	d0 17					.word xt_1
>1973	df 17					.word xt_2
>1975	20 28					.word xt_dup
>1977	df 17					.word xt_2
>1979	5f 16					.word xt_assertx3d
>197b	df 17					.word xt_2
>197d	5f 16					.word xt_assertx3d
>197f	d0 17					.word xt_1
>1981	5f 16					.word xt_assertx3d
>1983	16 18					.word xt_x28literalx29
>1985	8b 19					.word l_16
>1987	19 2d					.word xt_x28branchx29
>1989	a0 19					.word l_17
.198b					l_16:
>198b	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1993	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.19a0					l_17:
>19a0	48 16					.word xt_testname
>19a2	d0 17					.word xt_1
>19a4	df 17					.word xt_2
>19a6	16 18					.word xt_x28literalx29
>19a8	03 00					.word 3
>19aa	34 28					.word xt_swap
>19ac	df 17					.word xt_2
>19ae	5f 16					.word xt_assertx3d
>19b0	16 18					.word xt_x28literalx29
>19b2	03 00					.word 3
>19b4	5f 16					.word xt_assertx3d
>19b6	d0 17					.word xt_1
>19b8	5f 16					.word xt_assertx3d
>19ba	16 18					.word xt_x28literalx29
>19bc	c2 19					.word l_18
>19be	19 2d					.word xt_x28branchx29
>19c0	d5 19					.word l_19
.19c2					l_18:
>19c2	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>19ca	20 2d 2d 3e 20 31 20 32 20 31 00
.19d5					l_19:
>19d5	48 16					.word xt_testname
>19d7	d0 17					.word xt_1
>19d9	df 17					.word xt_2
>19db	4e 28					.word xt_over
>19dd	d0 17					.word xt_1
>19df	5f 16					.word xt_assertx3d
>19e1	df 17					.word xt_2
>19e3	5f 16					.word xt_assertx3d
>19e5	d0 17					.word xt_1
>19e7	5f 16					.word xt_assertx3d
>19e9	16 18					.word xt_x28literalx29
>19eb	f1 19					.word l_20
>19ed	19 2d					.word xt_x28branchx29
>19ef	11 1a					.word l_21
.19f1					l_20:
>19f1	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>19f9	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1a09	3e 20 35 35 35 35 68 00
.1a11					l_21:
>1a11	48 16					.word xt_testname
>1a13	16 18					.word xt_x28literalx29
>1a15	55 55					.word 21845
>1a17	16 18					.word xt_x28literalx29
>1a19	04 00					.word 4
>1a1b	9c 28					.word xt_x21
>1a1d	16 18					.word xt_x28literalx29
>1a1f	04 00					.word 4
>1a21	b9 28					.word xt_x40
>1a23	16 18					.word xt_x28literalx29
>1a25	55 55					.word 21845
>1a27	5f 16					.word xt_assertx3d
>1a29	16 18					.word xt_x28literalx29
>1a2b	31 1a					.word l_22
>1a2d	19 2d					.word xt_x28branchx29
>1a2f	51 1a					.word l_23
.1a31					l_22:
>1a31	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1a39	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1a49	3e 20 61 61 61 61 68 00
.1a51					l_23:
>1a51	48 16					.word xt_testname
>1a53	16 18					.word xt_x28literalx29
>1a55	aa aa					.word 43690
>1a57	16 18					.word xt_x28literalx29
>1a59	04 00					.word 4
>1a5b	9c 28					.word xt_x21
>1a5d	16 18					.word xt_x28literalx29
>1a5f	04 00					.word 4
>1a61	b9 28					.word xt_x40
>1a63	16 18					.word xt_x28literalx29
>1a65	aa aa					.word 43690
>1a67	5f 16					.word xt_assertx3d
>1a69	16 18					.word xt_x28literalx29
>1a6b	71 1a					.word l_24
>1a6d	19 2d					.word xt_x28branchx29
>1a6f	8f 1a					.word l_25
.1a71					l_24:
>1a71	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1a79	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1a89	3e 20 35 35 68 00
.1a8f					l_25:
>1a8f	48 16					.word xt_testname
>1a91	16 18					.word xt_x28literalx29
>1a93	55 00					.word 85
>1a95	16 18					.word xt_x28literalx29
>1a97	03 00					.word 3
>1a99	d3 28					.word xt_cx21
>1a9b	16 18					.word xt_x28literalx29
>1a9d	03 00					.word 3
>1a9f	e3 28					.word xt_cx40
>1aa1	16 18					.word xt_x28literalx29
>1aa3	55 00					.word 85
>1aa5	5f 16					.word xt_assertx3d
>1aa7	16 18					.word xt_x28literalx29
>1aa9	af 1a					.word l_26
>1aab	19 2d					.word xt_x28branchx29
>1aad	cd 1a					.word l_27
.1aaf					l_26:
>1aaf	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1ab7	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1ac7	3e 20 61 61 68 00
.1acd					l_27:
>1acd	48 16					.word xt_testname
>1acf	16 18					.word xt_x28literalx29
>1ad1	aa 00					.word 170
>1ad3	16 18					.word xt_x28literalx29
>1ad5	03 00					.word 3
>1ad7	d3 28					.word xt_cx21
>1ad9	16 18					.word xt_x28literalx29
>1adb	03 00					.word 3
>1add	e3 28					.word xt_cx40
>1adf	16 18					.word xt_x28literalx29
>1ae1	aa 00					.word 170
>1ae3	5f 16					.word xt_assertx3d
>1ae5	16 18					.word xt_x28literalx29
>1ae7	ed 1a					.word l_28
>1ae9	19 2d					.word xt_x28branchx29
>1aeb	f9 1a					.word l_29
.1aed					l_28:
>1aed	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1af5	3e 20 31 00
.1af9					l_29:
>1af9	48 16					.word xt_testname
>1afb	d0 17					.word xt_1
>1afd	c3 17					.word xt_0
>1aff	8c 2a					.word xt_x2b
>1b01	d0 17					.word xt_1
>1b03	5f 16					.word xt_assertx3d
>1b05	16 18					.word xt_x28literalx29
>1b07	0d 1b					.word l_30
>1b09	19 2d					.word xt_x28branchx29
>1b0b	19 1b					.word l_31
.1b0d					l_30:
>1b0d	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1b15	3e 20 32 00
.1b19					l_31:
>1b19	48 16					.word xt_testname
>1b1b	d0 17					.word xt_1
>1b1d	d0 17					.word xt_1
>1b1f	8c 2a					.word xt_x2b
>1b21	df 17					.word xt_2
>1b23	5f 16					.word xt_assertx3d
>1b25	16 18					.word xt_x28literalx29
>1b27	2d 1b					.word l_32
>1b29	19 2d					.word xt_x28branchx29
>1b2b	3b 1b					.word l_33
.1b2d					l_32:
>1b2d	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1b35	2d 3e 20 31 33 00
.1b3b					l_33:
>1b3b	48 16					.word xt_testname
>1b3d	16 18					.word xt_x28literalx29
>1b3f	03 00					.word 3
>1b41	16 18					.word xt_x28literalx29
>1b43	0a 00					.word 10
>1b45	8c 2a					.word xt_x2b
>1b47	16 18					.word xt_x28literalx29
>1b49	0d 00					.word 13
>1b4b	5f 16					.word xt_assertx3d
>1b4d	16 18					.word xt_x28literalx29
>1b4f	55 1b					.word l_34
>1b51	19 2d					.word xt_x28branchx29
>1b53	65 1b					.word l_35
.1b55					l_34:
>1b55	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1b5d	2b 20 2d 2d 3e 20 34 00
.1b65					l_35:
>1b65	48 16					.word xt_testname
>1b67	16 18					.word xt_x28literalx29
>1b69	ff ff					.word 65535
>1b6b	16 18					.word xt_x28literalx29
>1b6d	05 00					.word 5
>1b6f	8c 2a					.word xt_x2b
>1b71	16 18					.word xt_x28literalx29
>1b73	04 00					.word 4
>1b75	5f 16					.word xt_assertx3d
>1b77	16 18					.word xt_x28literalx29
>1b79	7f 1b					.word l_36
>1b7b	19 2d					.word xt_x28branchx29
>1b7d	8b 1b					.word l_37
.1b7f					l_36:
>1b7f	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1b87	3e 20 31 00
.1b8b					l_37:
>1b8b	48 16					.word xt_testname
>1b8d	16 18					.word xt_x28literalx29
>1b8f	04 00					.word 4
>1b91	16 18					.word xt_x28literalx29
>1b93	03 00					.word 3
>1b95	a2 2a					.word xt_x2d
>1b97	d0 17					.word xt_1
>1b99	5f 16					.word xt_assertx3d
>1b9b	16 18					.word xt_x28literalx29
>1b9d	a3 1b					.word l_38
>1b9f	19 2d					.word xt_x28branchx29
>1ba1	b3 1b					.word l_39
.1ba3					l_38:
>1ba3	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1bab	3e 20 66 66 66 66 68 00
.1bb3					l_39:
>1bb3	48 16					.word xt_testname
>1bb5	16 18					.word xt_x28literalx29
>1bb7	03 00					.word 3
>1bb9	16 18					.word xt_x28literalx29
>1bbb	04 00					.word 4
>1bbd	a2 2a					.word xt_x2d
>1bbf	16 18					.word xt_x28literalx29
>1bc1	ff ff					.word 65535
>1bc3	5f 16					.word xt_assertx3d
>1bc5	16 18					.word xt_x28literalx29
>1bc7	cd 1b					.word l_40
>1bc9	19 2d					.word xt_x28branchx29
>1bcb	da 1b					.word l_41
.1bcd					l_40:
>1bcd	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1bd5	2d 3e 20 35 00
.1bda					l_41:
>1bda	48 16					.word xt_testname
>1bdc	16 18					.word xt_x28literalx29
>1bde	0a 00					.word 10
>1be0	16 18					.word xt_x28literalx29
>1be2	05 00					.word 5
>1be4	a2 2a					.word xt_x2d
>1be6	16 18					.word xt_x28literalx29
>1be8	05 00					.word 5
>1bea	5f 16					.word xt_assertx3d
>1bec	16 18					.word xt_x28literalx29
>1bee	f4 1b					.word l_42
>1bf0	19 2d					.word xt_x28branchx29
>1bf2	05 1c					.word l_43
.1bf4					l_42:
>1bf4	31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>1bfc	20 2d 2d 3e 20 31 20 30 00
.1c05					l_43:
>1c05	48 16					.word xt_testname
>1c07	d0 17					.word xt_1
>1c09	16 18					.word xt_x28literalx29
>1c0b	03 00					.word 3
>1c0d	2e 2b					.word xt_x2fmod
>1c0f	c3 17					.word xt_0
>1c11	5f 16					.word xt_assertx3d
>1c13	d0 17					.word xt_1
>1c15	5f 16					.word xt_assertx3d
>1c17	16 18					.word xt_x28literalx29
>1c19	1f 1c					.word l_44
>1c1b	19 2d					.word xt_x28branchx29
>1c1d	30 1c					.word l_45
.1c1f					l_44:
>1c1f	32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1c27	20 2d 2d 3e 20 32 20 30 00
.1c30					l_45:
>1c30	48 16					.word xt_testname
>1c32	df 17					.word xt_2
>1c34	16 18					.word xt_x28literalx29
>1c36	03 00					.word 3
>1c38	2e 2b					.word xt_x2fmod
>1c3a	c3 17					.word xt_0
>1c3c	5f 16					.word xt_assertx3d
>1c3e	df 17					.word xt_2
>1c40	5f 16					.word xt_assertx3d
>1c42	16 18					.word xt_x28literalx29
>1c44	4a 1c					.word l_46
>1c46	19 2d					.word xt_x28branchx29
>1c48	5b 1c					.word l_47
.1c4a					l_46:
>1c4a	33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1c52	20 2d 2d 3e 20 30 20 31 00
.1c5b					l_47:
>1c5b	48 16					.word xt_testname
>1c5d	16 18					.word xt_x28literalx29
>1c5f	03 00					.word 3
>1c61	16 18					.word xt_x28literalx29
>1c63	03 00					.word 3
>1c65	2e 2b					.word xt_x2fmod
>1c67	d0 17					.word xt_1
>1c69	5f 16					.word xt_assertx3d
>1c6b	c3 17					.word xt_0
>1c6d	5f 16					.word xt_assertx3d
>1c6f	16 18					.word xt_x28literalx29
>1c71	77 1c					.word l_48
>1c73	19 2d					.word xt_x28branchx29
>1c75	88 1c					.word l_49
.1c77					l_48:
>1c77	34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>1c7f	20 2d 2d 3e 20 31 20 31 00
.1c88					l_49:
>1c88	48 16					.word xt_testname
>1c8a	16 18					.word xt_x28literalx29
>1c8c	04 00					.word 4
>1c8e	16 18					.word xt_x28literalx29
>1c90	03 00					.word 3
>1c92	2e 2b					.word xt_x2fmod
>1c94	d0 17					.word xt_1
>1c96	5f 16					.word xt_assertx3d
>1c98	d0 17					.word xt_1
>1c9a	5f 16					.word xt_assertx3d
>1c9c	16 18					.word xt_x28literalx29
>1c9e	a4 1c					.word l_50
>1ca0	19 2d					.word xt_x28branchx29
>1ca2	b5 1c					.word l_51
.1ca4					l_50:
>1ca4	36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>1cac	20 2d 2d 3e 20 30 20 32 00
.1cb5					l_51:
>1cb5	48 16					.word xt_testname
>1cb7	16 18					.word xt_x28literalx29
>1cb9	06 00					.word 6
>1cbb	16 18					.word xt_x28literalx29
>1cbd	03 00					.word 3
>1cbf	2e 2b					.word xt_x2fmod
>1cc1	df 17					.word xt_2
>1cc3	5f 16					.word xt_assertx3d
>1cc5	c3 17					.word xt_0
>1cc7	5f 16					.word xt_assertx3d
>1cc9	16 18					.word xt_x28literalx29
>1ccb	d1 1c					.word l_52
>1ccd	19 2d					.word xt_x28branchx29
>1ccf	dc 1c					.word l_53
.1cd1					l_52:
>1cd1	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1cd9	20 32 00
.1cdc					l_53:
>1cdc	48 16					.word xt_testname
>1cde	d0 17					.word xt_1
>1ce0	ab 2b					.word xt_1x2b
>1ce2	df 17					.word xt_2
>1ce4	5f 16					.word xt_assertx3d
>1ce6	16 18					.word xt_x28literalx29
>1ce8	ee 1c					.word l_54
>1cea	19 2d					.word xt_x28branchx29
>1cec	f9 1c					.word l_55
.1cee					l_54:
>1cee	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1cf6	20 31 00
.1cf9					l_55:
>1cf9	48 16					.word xt_testname
>1cfb	c3 17					.word xt_0
>1cfd	ab 2b					.word xt_1x2b
>1cff	d0 17					.word xt_1
>1d01	5f 16					.word xt_assertx3d
>1d03	16 18					.word xt_x28literalx29
>1d05	0b 1d					.word l_56
>1d07	19 2d					.word xt_x28branchx29
>1d09	18 1d					.word l_57
.1d0b					l_56:
>1d0b	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1d13	3e 20 32 31 00
.1d18					l_57:
>1d18	48 16					.word xt_testname
>1d1a	16 18					.word xt_x28literalx29
>1d1c	14 00					.word 20
>1d1e	ab 2b					.word xt_1x2b
>1d20	16 18					.word xt_x28literalx29
>1d22	15 00					.word 21
>1d24	5f 16					.word xt_assertx3d
>1d26	16 18					.word xt_x28literalx29
>1d28	2e 1d					.word l_58
>1d2a	19 2d					.word xt_x28branchx29
>1d2c	3d 1d					.word l_59
.1d2e					l_58:
>1d2e	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1d36	20 2d 2d 3e 20 30 00
.1d3d					l_59:
>1d3d	48 16					.word xt_testname
>1d3f	16 18					.word xt_x28literalx29
>1d41	ff ff					.word 65535
>1d43	ab 2b					.word xt_1x2b
>1d45	c3 17					.word xt_0
>1d47	5f 16					.word xt_assertx3d
>1d49	16 18					.word xt_x28literalx29
>1d4b	51 1d					.word l_60
>1d4d	19 2d					.word xt_x28branchx29
>1d4f	5c 1d					.word l_61
.1d51					l_60:
>1d51	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1d59	20 33 00
.1d5c					l_61:
>1d5c	48 16					.word xt_testname
>1d5e	d0 17					.word xt_1
>1d60	b9 2b					.word xt_2x2b
>1d62	16 18					.word xt_x28literalx29
>1d64	03 00					.word 3
>1d66	5f 16					.word xt_assertx3d
>1d68	16 18					.word xt_x28literalx29
>1d6a	70 1d					.word l_62
>1d6c	19 2d					.word xt_x28branchx29
>1d6e	7b 1d					.word l_63
.1d70					l_62:
>1d70	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1d78	20 32 00
.1d7b					l_63:
>1d7b	48 16					.word xt_testname
>1d7d	c3 17					.word xt_0
>1d7f	b9 2b					.word xt_2x2b
>1d81	df 17					.word xt_2
>1d83	5f 16					.word xt_assertx3d
>1d85	16 18					.word xt_x28literalx29
>1d87	8d 1d					.word l_64
>1d89	19 2d					.word xt_x28branchx29
>1d8b	9a 1d					.word l_65
.1d8d					l_64:
>1d8d	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>1d95	3e 20 32 32 00
.1d9a					l_65:
>1d9a	48 16					.word xt_testname
>1d9c	16 18					.word xt_x28literalx29
>1d9e	14 00					.word 20
>1da0	b9 2b					.word xt_2x2b
>1da2	16 18					.word xt_x28literalx29
>1da4	16 00					.word 22
>1da6	5f 16					.word xt_assertx3d
>1da8	16 18					.word xt_x28literalx29
>1daa	b0 1d					.word l_66
>1dac	19 2d					.word xt_x28branchx29
>1dae	bf 1d					.word l_67
.1db0					l_66:
>1db0	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>1db8	20 2d 2d 3e 20 30 00
.1dbf					l_67:
>1dbf	48 16					.word xt_testname
>1dc1	16 18					.word xt_x28literalx29
>1dc3	fe ff					.word 65534
>1dc5	b9 2b					.word xt_2x2b
>1dc7	c3 17					.word xt_0
>1dc9	5f 16					.word xt_assertx3d
>1dcb	16 18					.word xt_x28literalx29
>1dcd	d3 1d					.word l_68
>1dcf	19 2d					.word xt_x28branchx29
>1dd1	de 1d					.word l_69
.1dd3					l_68:
>1dd3	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>1ddb	20 30 00
.1dde					l_69:
>1dde	48 16					.word xt_testname
>1de0	d0 17					.word xt_1
>1de2	ce 2b					.word xt_1x2d
>1de4	c3 17					.word xt_0
>1de6	5f 16					.word xt_assertx3d
>1de8	16 18					.word xt_x28literalx29
>1dea	f0 1d					.word l_70
>1dec	19 2d					.word xt_x28branchx29
>1dee	ff 1d					.word l_71
.1df0					l_70:
>1df0	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1df8	20 66 66 66 66 68 00
.1dff					l_71:
>1dff	48 16					.word xt_testname
>1e01	c3 17					.word xt_0
>1e03	ce 2b					.word xt_1x2d
>1e05	16 18					.word xt_x28literalx29
>1e07	ff ff					.word 65535
>1e09	5f 16					.word xt_assertx3d
>1e0b	16 18					.word xt_x28literalx29
>1e0d	13 1e					.word l_72
>1e0f	19 2d					.word xt_x28branchx29
>1e11	20 1e					.word l_73
.1e13					l_72:
>1e13	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1e1b	3e 20 31 39 00
.1e20					l_73:
>1e20	48 16					.word xt_testname
>1e22	16 18					.word xt_x28literalx29
>1e24	14 00					.word 20
>1e26	ce 2b					.word xt_1x2d
>1e28	16 18					.word xt_x28literalx29
>1e2a	13 00					.word 19
>1e2c	5f 16					.word xt_assertx3d
>1e2e	16 18					.word xt_x28literalx29
>1e30	36 1e					.word l_74
>1e32	19 2d					.word xt_x28branchx29
>1e34	49 1e					.word l_75
.1e36					l_74:
>1e36	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1e3e	20 2d 2d 3e 20 66 66 66 65 68 00
.1e49					l_75:
>1e49	48 16					.word xt_testname
>1e4b	16 18					.word xt_x28literalx29
>1e4d	ff ff					.word 65535
>1e4f	ce 2b					.word xt_1x2d
>1e51	16 18					.word xt_x28literalx29
>1e53	fe ff					.word 65534
>1e55	5f 16					.word xt_assertx3d
>1e57	16 18					.word xt_x28literalx29
>1e59	5f 1e					.word l_76
>1e5b	19 2d					.word xt_x28branchx29
>1e5d	6e 1e					.word l_77
.1e5f					l_76:
>1e5f	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1e67	20 66 66 66 66 68 00
.1e6e					l_77:
>1e6e	48 16					.word xt_testname
>1e70	d0 17					.word xt_1
>1e72	de 2b					.word xt_2x2d
>1e74	16 18					.word xt_x28literalx29
>1e76	ff ff					.word 65535
>1e78	5f 16					.word xt_assertx3d
>1e7a	16 18					.word xt_x28literalx29
>1e7c	82 1e					.word l_78
>1e7e	19 2d					.word xt_x28branchx29
>1e80	91 1e					.word l_79
.1e82					l_78:
>1e82	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1e8a	20 66 66 66 65 68 00
.1e91					l_79:
>1e91	48 16					.word xt_testname
>1e93	c3 17					.word xt_0
>1e95	de 2b					.word xt_2x2d
>1e97	16 18					.word xt_x28literalx29
>1e99	fe ff					.word 65534
>1e9b	5f 16					.word xt_assertx3d
>1e9d	16 18					.word xt_x28literalx29
>1e9f	a5 1e					.word l_80
>1ea1	19 2d					.word xt_x28branchx29
>1ea3	b2 1e					.word l_81
.1ea5					l_80:
>1ea5	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1ead	3e 20 31 38 00
.1eb2					l_81:
>1eb2	48 16					.word xt_testname
>1eb4	16 18					.word xt_x28literalx29
>1eb6	14 00					.word 20
>1eb8	de 2b					.word xt_2x2d
>1eba	16 18					.word xt_x28literalx29
>1ebc	12 00					.word 18
>1ebe	5f 16					.word xt_assertx3d
>1ec0	16 18					.word xt_x28literalx29
>1ec2	c8 1e					.word l_82
>1ec4	19 2d					.word xt_x28branchx29
>1ec6	db 1e					.word l_83
.1ec8					l_82:
>1ec8	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1ed0	20 2d 2d 3e 20 66 66 66 64 68 00
.1edb					l_83:
>1edb	48 16					.word xt_testname
>1edd	16 18					.word xt_x28literalx29
>1edf	ff ff					.word 65535
>1ee1	de 2b					.word xt_2x2d
>1ee3	16 18					.word xt_x28literalx29
>1ee5	fd ff					.word 65533
>1ee7	5f 16					.word xt_assertx3d
>1ee9	16 18					.word xt_x28literalx29
>1eeb	f1 1e					.word l_84
>1eed	19 2d					.word xt_x28branchx29
>1eef	0b 1f					.word l_85
.1ef1					l_84:
>1ef1	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1ef9	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f09	68 00
.1f0b					l_85:
>1f0b	48 16					.word xt_testname
>1f0d	16 18					.word xt_x28literalx29
>1f0f	00 00					.word 0
>1f11	16 18					.word xt_x28literalx29
>1f13	00 00					.word 0
>1f15	f4 2b					.word xt_and
>1f17	16 18					.word xt_x28literalx29
>1f19	00 00					.word 0
>1f1b	5f 16					.word xt_assertx3d
>1f1d	16 18					.word xt_x28literalx29
>1f1f	25 1f					.word l_86
>1f21	19 2d					.word xt_x28branchx29
>1f23	3f 1f					.word l_87
.1f25					l_86:
>1f25	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1f2d	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f3d	68 00
.1f3f					l_87:
>1f3f	48 16					.word xt_testname
>1f41	16 18					.word xt_x28literalx29
>1f43	00 00					.word 0
>1f45	16 18					.word xt_x28literalx29
>1f47	ff ff					.word 65535
>1f49	f4 2b					.word xt_and
>1f4b	16 18					.word xt_x28literalx29
>1f4d	00 00					.word 0
>1f4f	5f 16					.word xt_assertx3d
>1f51	16 18					.word xt_x28literalx29
>1f53	59 1f					.word l_88
>1f55	19 2d					.word xt_x28branchx29
>1f57	73 1f					.word l_89
.1f59					l_88:
>1f59	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1f61	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f71	68 00
.1f73					l_89:
>1f73	48 16					.word xt_testname
>1f75	16 18					.word xt_x28literalx29
>1f77	ff ff					.word 65535
>1f79	16 18					.word xt_x28literalx29
>1f7b	00 00					.word 0
>1f7d	f4 2b					.word xt_and
>1f7f	16 18					.word xt_x28literalx29
>1f81	00 00					.word 0
>1f83	5f 16					.word xt_assertx3d
>1f85	16 18					.word xt_x28literalx29
>1f87	8d 1f					.word l_90
>1f89	19 2d					.word xt_x28branchx29
>1f8b	a7 1f					.word l_91
.1f8d					l_90:
>1f8d	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1f95	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1fa5	68 00
.1fa7					l_91:
>1fa7	48 16					.word xt_testname
>1fa9	16 18					.word xt_x28literalx29
>1fab	ff ff					.word 65535
>1fad	16 18					.word xt_x28literalx29
>1faf	ff ff					.word 65535
>1fb1	f4 2b					.word xt_and
>1fb3	16 18					.word xt_x28literalx29
>1fb5	ff ff					.word 65535
>1fb7	5f 16					.word xt_assertx3d
>1fb9	16 18					.word xt_x28literalx29
>1fbb	c1 1f					.word l_92
>1fbd	19 2d					.word xt_x28branchx29
>1fbf	da 1f					.word l_93
.1fc1					l_92:
>1fc1	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1fc9	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1fd9	00
.1fda					l_93:
>1fda	48 16					.word xt_testname
>1fdc	16 18					.word xt_x28literalx29
>1fde	00 00					.word 0
>1fe0	16 18					.word xt_x28literalx29
>1fe2	00 00					.word 0
>1fe4	0a 2c					.word xt_or
>1fe6	16 18					.word xt_x28literalx29
>1fe8	00 00					.word 0
>1fea	5f 16					.word xt_assertx3d
>1fec	16 18					.word xt_x28literalx29
>1fee	f4 1f					.word l_94
>1ff0	19 2d					.word xt_x28branchx29
>1ff2	0d 20					.word l_95
.1ff4					l_94:
>1ff4	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1ffc	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>200c	00
.200d					l_95:
>200d	48 16					.word xt_testname
>200f	16 18					.word xt_x28literalx29
>2011	00 00					.word 0
>2013	16 18					.word xt_x28literalx29
>2015	ff ff					.word 65535
>2017	0a 2c					.word xt_or
>2019	16 18					.word xt_x28literalx29
>201b	ff ff					.word 65535
>201d	5f 16					.word xt_assertx3d
>201f	16 18					.word xt_x28literalx29
>2021	27 20					.word l_96
>2023	19 2d					.word xt_x28branchx29
>2025	40 20					.word l_97
.2027					l_96:
>2027	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>202f	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>203f	00
.2040					l_97:
>2040	48 16					.word xt_testname
>2042	16 18					.word xt_x28literalx29
>2044	ff ff					.word 65535
>2046	16 18					.word xt_x28literalx29
>2048	00 00					.word 0
>204a	0a 2c					.word xt_or
>204c	16 18					.word xt_x28literalx29
>204e	ff ff					.word 65535
>2050	5f 16					.word xt_assertx3d
>2052	16 18					.word xt_x28literalx29
>2054	5a 20					.word l_98
>2056	19 2d					.word xt_x28branchx29
>2058	73 20					.word l_99
.205a					l_98:
>205a	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>2062	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2072	00
.2073					l_99:
>2073	48 16					.word xt_testname
>2075	16 18					.word xt_x28literalx29
>2077	ff ff					.word 65535
>2079	16 18					.word xt_x28literalx29
>207b	ff ff					.word 65535
>207d	0a 2c					.word xt_or
>207f	16 18					.word xt_x28literalx29
>2081	ff ff					.word 65535
>2083	5f 16					.word xt_assertx3d
>2085	16 18					.word xt_x28literalx29
>2087	8d 20					.word l_100
>2089	19 2d					.word xt_x28branchx29
>208b	a7 20					.word l_101
.208d					l_100:
>208d	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>2095	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>20a5	68 00
.20a7					l_101:
>20a7	48 16					.word xt_testname
>20a9	16 18					.word xt_x28literalx29
>20ab	00 00					.word 0
>20ad	16 18					.word xt_x28literalx29
>20af	00 00					.word 0
>20b1	21 2c					.word xt_xor
>20b3	16 18					.word xt_x28literalx29
>20b5	00 00					.word 0
>20b7	5f 16					.word xt_assertx3d
>20b9	16 18					.word xt_x28literalx29
>20bb	c1 20					.word l_102
>20bd	19 2d					.word xt_x28branchx29
>20bf	db 20					.word l_103
.20c1					l_102:
>20c1	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>20c9	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>20d9	68 00
.20db					l_103:
>20db	48 16					.word xt_testname
>20dd	16 18					.word xt_x28literalx29
>20df	00 00					.word 0
>20e1	16 18					.word xt_x28literalx29
>20e3	ff ff					.word 65535
>20e5	21 2c					.word xt_xor
>20e7	16 18					.word xt_x28literalx29
>20e9	ff ff					.word 65535
>20eb	5f 16					.word xt_assertx3d
>20ed	16 18					.word xt_x28literalx29
>20ef	f5 20					.word l_104
>20f1	19 2d					.word xt_x28branchx29
>20f3	0f 21					.word l_105
.20f5					l_104:
>20f5	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>20fd	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>210d	68 00
.210f					l_105:
>210f	48 16					.word xt_testname
>2111	16 18					.word xt_x28literalx29
>2113	ff ff					.word 65535
>2115	16 18					.word xt_x28literalx29
>2117	00 00					.word 0
>2119	21 2c					.word xt_xor
>211b	16 18					.word xt_x28literalx29
>211d	ff ff					.word 65535
>211f	5f 16					.word xt_assertx3d
>2121	16 18					.word xt_x28literalx29
>2123	29 21					.word l_106
>2125	19 2d					.word xt_x28branchx29
>2127	43 21					.word l_107
.2129					l_106:
>2129	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>2131	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2141	68 00
.2143					l_107:
>2143	48 16					.word xt_testname
>2145	16 18					.word xt_x28literalx29
>2147	ff ff					.word 65535
>2149	16 18					.word xt_x28literalx29
>214b	ff ff					.word 65535
>214d	21 2c					.word xt_xor
>214f	16 18					.word xt_x28literalx29
>2151	00 00					.word 0
>2153	5f 16					.word xt_assertx3d
>2155	16 18					.word xt_x28literalx29
>2157	5d 21					.word l_108
>2159	19 2d					.word xt_x28branchx29
>215b	71 21					.word l_109
.215d					l_108:
>215d	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>2165	74 20 2d 2d 3e 20 66 66 66 66 68 00
.2171					l_109:
>2171	48 16					.word xt_testname
>2173	16 18					.word xt_x28literalx29
>2175	00 00					.word 0
>2177	38 2c					.word xt_not
>2179	16 18					.word xt_x28literalx29
>217b	ff ff					.word 65535
>217d	5f 16					.word xt_assertx3d
>217f	16 18					.word xt_x28literalx29
>2181	87 21					.word l_110
>2183	19 2d					.word xt_x28branchx29
>2185	9b 21					.word l_111
.2187					l_110:
>2187	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>218f	74 20 2d 2d 3e 20 30 30 30 30 68 00
.219b					l_111:
>219b	48 16					.word xt_testname
>219d	16 18					.word xt_x28literalx29
>219f	ff ff					.word 65535
>21a1	38 2c					.word xt_not
>21a3	16 18					.word xt_x28literalx29
>21a5	00 00					.word 0
>21a7	5f 16					.word xt_assertx3d
>21a9	16 18					.word xt_x28literalx29
>21ab	b1 21					.word l_112
>21ad	19 2d					.word xt_x28branchx29
>21af	c0 21					.word l_113
.21b1					l_112:
>21b1	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>21b9	20 30 30 30 30 68 00
.21c0					l_113:
>21c0	48 16					.word xt_testname
>21c2	c3 17					.word xt_0
>21c4	4c 2c					.word xt_0x3c
>21c6	16 18					.word xt_x28literalx29
>21c8	00 00					.word 0
>21ca	5f 16					.word xt_assertx3d
>21cc	16 18					.word xt_x28literalx29
>21ce	d4 21					.word l_114
>21d0	19 2d					.word xt_x28branchx29
>21d2	e3 21					.word l_115
.21d4					l_114:
>21d4	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>21dc	20 30 30 30 30 68 00
.21e3					l_115:
>21e3	48 16					.word xt_testname
>21e5	16 18					.word xt_x28literalx29
>21e7	03 00					.word 3
>21e9	4c 2c					.word xt_0x3c
>21eb	16 18					.word xt_x28literalx29
>21ed	00 00					.word 0
>21ef	5f 16					.word xt_assertx3d
>21f1	16 18					.word xt_x28literalx29
>21f3	f9 21					.word l_116
>21f5	19 2d					.word xt_x28branchx29
>21f7	0c 22					.word l_117
.21f9					l_116:
>21f9	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>2201	20 2d 2d 3e 20 66 66 66 66 68 00
.220c					l_117:
>220c	48 16					.word xt_testname
>220e	16 18					.word xt_x28literalx29
>2210	ff ff					.word 65535
>2212	4c 2c					.word xt_0x3c
>2214	16 18					.word xt_x28literalx29
>2216	ff ff					.word 65535
>2218	5f 16					.word xt_assertx3d
>221a	16 18					.word xt_x28literalx29
>221c	22 22					.word l_118
>221e	19 2d					.word xt_x28branchx29
>2220	31 22					.word l_119
.2222					l_118:
>2222	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>222a	20 66 66 66 66 68 00
.2231					l_119:
>2231	48 16					.word xt_testname
>2233	c3 17					.word xt_0
>2235	65 2c					.word xt_0x3d
>2237	16 18					.word xt_x28literalx29
>2239	ff ff					.word 65535
>223b	5f 16					.word xt_assertx3d
>223d	16 18					.word xt_x28literalx29
>223f	45 22					.word l_120
>2241	19 2d					.word xt_x28branchx29
>2243	54 22					.word l_121
.2245					l_120:
>2245	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>224d	20 30 30 30 30 68 00
.2254					l_121:
>2254	48 16					.word xt_testname
>2256	16 18					.word xt_x28literalx29
>2258	03 00					.word 3
>225a	65 2c					.word xt_0x3d
>225c	16 18					.word xt_x28literalx29
>225e	00 00					.word 0
>2260	5f 16					.word xt_assertx3d
>2262	16 18					.word xt_x28literalx29
>2264	6a 22					.word l_122
>2266	19 2d					.word xt_x28branchx29
>2268	7d 22					.word l_123
.226a					l_122:
>226a	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>2272	20 2d 2d 3e 20 30 30 30 30 68 00
.227d					l_123:
>227d	48 16					.word xt_testname
>227f	16 18					.word xt_x28literalx29
>2281	ff ff					.word 65535
>2283	65 2c					.word xt_0x3d
>2285	16 18					.word xt_x28literalx29
>2287	00 00					.word 0
>2289	5f 16					.word xt_assertx3d
>228b	16 18					.word xt_x28literalx29
>228d	93 22					.word l_124
>228f	19 2d					.word xt_x28branchx29
>2291	a2 22					.word l_125
.2293					l_124:
>2293	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>229b	20 30 30 30 30 68 00
.22a2					l_125:
>22a2	48 16					.word xt_testname
>22a4	c3 17					.word xt_0
>22a6	82 2c					.word xt_0x3e
>22a8	16 18					.word xt_x28literalx29
>22aa	00 00					.word 0
>22ac	5f 16					.word xt_assertx3d
>22ae	16 18					.word xt_x28literalx29
>22b0	b6 22					.word l_126
>22b2	19 2d					.word xt_x28branchx29
>22b4	c5 22					.word l_127
.22b6					l_126:
>22b6	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>22be	20 66 66 66 66 68 00
.22c5					l_127:
>22c5	48 16					.word xt_testname
>22c7	16 18					.word xt_x28literalx29
>22c9	03 00					.word 3
>22cb	82 2c					.word xt_0x3e
>22cd	16 18					.word xt_x28literalx29
>22cf	ff ff					.word 65535
>22d1	5f 16					.word xt_assertx3d
>22d3	16 18					.word xt_x28literalx29
>22d5	db 22					.word l_128
>22d7	19 2d					.word xt_x28branchx29
>22d9	ee 22					.word l_129
.22db					l_128:
>22db	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>22e3	20 2d 2d 3e 20 30 30 30 30 68 00
.22ee					l_129:
>22ee	48 16					.word xt_testname
>22f0	16 18					.word xt_x28literalx29
>22f2	ff ff					.word 65535
>22f4	82 2c					.word xt_0x3e
>22f6	16 18					.word xt_x28literalx29
>22f8	00 00					.word 0
>22fa	5f 16					.word xt_assertx3d
>22fc	16 18					.word xt_x28literalx29
>22fe	04 23					.word l_130
>2300	19 2d					.word xt_x28branchx29
>2302	1b 23					.word l_131
.2304					l_130:
>2304	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>230c	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.231b					l_131:
>231b	48 16					.word xt_testname
>231d	eb 2c					.word xt_cells
>231f	df 17					.word xt_2
>2321	a2 2a					.word xt_x2d
>2323	65 2c					.word xt_0x3d
>2325	16 18					.word xt_x28literalx29
>2327	ff ff					.word 65535
>2329	5f 16					.word xt_assertx3d
>232b	16 18					.word xt_x28literalx29
>232d	33 23					.word l_132
>232f	19 2d					.word xt_x28branchx29
>2331	45 23					.word l_133
.2333					l_132:
>2333	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>233b	75 74 65 20 2d 2d 3e 20 31 00
.2345					l_133:
>2345	48 16					.word xt_testname
>2347	16 18					.word xt_x28literalx29
>2349	d0 17					.word xt_1
>234b	d8 2e					.word xt_execute
>234d	d0 17					.word xt_1
>234f	5f 16					.word xt_assertx3d
>2351	16 18					.word xt_x28literalx29
>2353	59 23					.word l_134
>2355	19 2d					.word xt_x28branchx29
>2357	6f 23					.word l_135
.2359					l_134:
>2359	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>2361	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.236f					l_135:
>236f	48 16					.word xt_testname
>2371	d0 17					.word xt_1
>2373	df 17					.word xt_2
>2375	16 18					.word xt_x28literalx29
>2377	8c 2a					.word xt_x2b
>2379	d8 2e					.word xt_execute
>237b	16 18					.word xt_x28literalx29
>237d	03 00					.word 3
>237f	5f 16					.word xt_assertx3d
>2381	16 18					.word xt_x28literalx29
>2383	89 23					.word l_137
>2385	19 2d					.word xt_x28branchx29
>2387	96 23					.word l_138
.2389					l_137:
>2389	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>2391	2d 3e 20 30 00
.2396					l_138:
>2396	48 16					.word xt_testname
>2398	c3 17					.word xt_0
>239a	83 30					.word xt_x3fdup
>239c	c3 17					.word xt_0
>239e	5f 16					.word xt_assertx3d
>23a0	16 18					.word xt_x28literalx29
>23a2	a8 23					.word l_139
>23a4	19 2d					.word xt_x28branchx29
>23a6	b7 23					.word l_140
.23a8					l_139:
>23a8	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>23b0	2d 3e 20 31 20 31 00
.23b7					l_140:
>23b7	48 16					.word xt_testname
>23b9	d0 17					.word xt_1
>23bb	83 30					.word xt_x3fdup
>23bd	d0 17					.word xt_1
>23bf	5f 16					.word xt_assertx3d
>23c1	d0 17					.word xt_1
>23c3	5f 16					.word xt_assertx3d
>23c5	16 18					.word xt_x28literalx29
>23c7	cd 23					.word l_141
>23c9	19 2d					.word xt_x28branchx29
>23cb	dd 23					.word l_142
.23cd					l_141:
>23cd	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>23d5	3e 20 66 66 66 66 68 00
.23dd					l_142:
>23dd	48 16					.word xt_testname
>23df	d0 17					.word xt_1
>23e1	df 17					.word xt_2
>23e3	a3 30					.word xt_x3c
>23e5	16 18					.word xt_x28literalx29
>23e7	ff ff					.word 65535
>23e9	5f 16					.word xt_assertx3d
>23eb	16 18					.word xt_x28literalx29
>23ed	f3 23					.word l_143
>23ef	19 2d					.word xt_x28branchx29
>23f1	03 24					.word l_144
.23f3					l_143:
>23f3	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>23fb	3e 20 30 30 30 30 68 00
.2403					l_144:
>2403	48 16					.word xt_testname
>2405	df 17					.word xt_2
>2407	d0 17					.word xt_1
>2409	a3 30					.word xt_x3c
>240b	16 18					.word xt_x28literalx29
>240d	00 00					.word 0
>240f	5f 16					.word xt_assertx3d
>2411	16 18					.word xt_x28literalx29
>2413	19 24					.word l_145
>2415	19 2d					.word xt_x28branchx29
>2417	2d 24					.word l_146
.2419					l_145:
>2419	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2421	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.242d					l_146:
>242d	48 16					.word xt_testname
>242f	c3 17					.word xt_0
>2431	16 18					.word xt_x28literalx29
>2433	ff ff					.word 65535
>2435	a3 30					.word xt_x3c
>2437	16 18					.word xt_x28literalx29
>2439	00 00					.word 0
>243b	5f 16					.word xt_assertx3d
>243d	16 18					.word xt_x28literalx29
>243f	45 24					.word l_147
>2441	19 2d					.word xt_x28branchx29
>2443	59 24					.word l_148
.2445					l_147:
>2445	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>244d	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2459					l_148:
>2459	48 16					.word xt_testname
>245b	16 18					.word xt_x28literalx29
>245d	ff ff					.word 65535
>245f	c3 17					.word xt_0
>2461	a3 30					.word xt_x3c
>2463	16 18					.word xt_x28literalx29
>2465	ff ff					.word 65535
>2467	5f 16					.word xt_assertx3d
>2469	16 18					.word xt_x28literalx29
>246b	71 24					.word l_149
>246d	19 2d					.word xt_x28branchx29
>246f	81 24					.word l_150
.2471					l_149:
>2471	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2479	3e 20 30 30 30 30 68 00
.2481					l_150:
>2481	48 16					.word xt_testname
>2483	d0 17					.word xt_1
>2485	df 17					.word xt_2
>2487	bf 30					.word xt_x3e
>2489	16 18					.word xt_x28literalx29
>248b	00 00					.word 0
>248d	5f 16					.word xt_assertx3d
>248f	16 18					.word xt_x28literalx29
>2491	97 24					.word l_151
>2493	19 2d					.word xt_x28branchx29
>2495	a7 24					.word l_152
.2497					l_151:
>2497	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>249f	3e 20 66 66 66 66 68 00
.24a7					l_152:
>24a7	48 16					.word xt_testname
>24a9	df 17					.word xt_2
>24ab	d0 17					.word xt_1
>24ad	bf 30					.word xt_x3e
>24af	16 18					.word xt_x28literalx29
>24b1	ff ff					.word 65535
>24b3	5f 16					.word xt_assertx3d
>24b5	16 18					.word xt_x28literalx29
>24b7	bd 24					.word l_153
>24b9	19 2d					.word xt_x28branchx29
>24bb	d1 24					.word l_154
.24bd					l_153:
>24bd	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>24c5	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.24d1					l_154:
>24d1	48 16					.word xt_testname
>24d3	c3 17					.word xt_0
>24d5	16 18					.word xt_x28literalx29
>24d7	ff ff					.word 65535
>24d9	bf 30					.word xt_x3e
>24db	16 18					.word xt_x28literalx29
>24dd	ff ff					.word 65535
>24df	5f 16					.word xt_assertx3d
>24e1	16 18					.word xt_x28literalx29
>24e3	e9 24					.word l_155
>24e5	19 2d					.word xt_x28branchx29
>24e7	fd 24					.word l_156
.24e9					l_155:
>24e9	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>24f1	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.24fd					l_156:
>24fd	48 16					.word xt_testname
>24ff	16 18					.word xt_x28literalx29
>2501	ff ff					.word 65535
>2503	c3 17					.word xt_0
>2505	bf 30					.word xt_x3e
>2507	16 18					.word xt_x28literalx29
>2509	00 00					.word 0
>250b	5f 16					.word xt_assertx3d
>250d	16 18					.word xt_x28literalx29
>250f	15 25					.word l_157
>2511	19 2d					.word xt_x28branchx29
>2513	25 25					.word l_158
.2515					l_157:
>2515	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>251d	3e 20 30 30 30 30 68 00
.2525					l_158:
>2525	48 16					.word xt_testname
>2527	d0 17					.word xt_1
>2529	c3 17					.word xt_0
>252b	db 30					.word xt_x3d
>252d	16 18					.word xt_x28literalx29
>252f	00 00					.word 0
>2531	5f 16					.word xt_assertx3d
>2533	16 18					.word xt_x28literalx29
>2535	3b 25					.word l_159
>2537	19 2d					.word xt_x28branchx29
>2539	4b 25					.word l_160
.253b					l_159:
>253b	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>2543	3e 20 66 66 66 66 68 00
.254b					l_160:
>254b	48 16					.word xt_testname
>254d	d0 17					.word xt_1
>254f	d0 17					.word xt_1
>2551	db 30					.word xt_x3d
>2553	16 18					.word xt_x28literalx29
>2555	ff ff					.word 65535
>2557	5f 16					.word xt_assertx3d
>2559	16 18					.word xt_x28literalx29
>255b	61 25					.word l_161
>255d	19 2d					.word xt_x28branchx29
>255f	75 25					.word l_162
.2561					l_161:
>2561	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2569	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2575					l_162:
>2575	48 16					.word xt_testname
>2577	16 18					.word xt_x28literalx29
>2579	ff ff					.word 65535
>257b	c3 17					.word xt_0
>257d	db 30					.word xt_x3d
>257f	16 18					.word xt_x28literalx29
>2581	00 00					.word 0
>2583	5f 16					.word xt_assertx3d
>2585	16 18					.word xt_x28literalx29
>2587	8d 25					.word l_163
>2589	19 2d					.word xt_x28branchx29
>258b	a5 25					.word l_164
.258d					l_163:
>258d	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2595	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.25a5					l_164:
>25a5	48 16					.word xt_testname
>25a7	16 18					.word xt_x28literalx29
>25a9	ff ff					.word 65535
>25ab	16 18					.word xt_x28literalx29
>25ad	ff ff					.word 65535
>25af	db 30					.word xt_x3d
>25b1	16 18					.word xt_x28literalx29
>25b3	ff ff					.word 65535
>25b5	5f 16					.word xt_assertx3d
>25b7	16 18					.word xt_x28literalx29
>25b9	bf 25					.word l_165
>25bb	19 2d					.word xt_x28branchx29
>25bd	cf 25					.word l_166
.25bf					l_165:
>25bf	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>25c7	3e 20 66 66 66 66 68 00
.25cf					l_166:
>25cf	48 16					.word xt_testname
>25d1	c3 17					.word xt_0
>25d3	c3 17					.word xt_0
>25d5	db 30					.word xt_x3d
>25d7	16 18					.word xt_x28literalx29
>25d9	ff ff					.word 65535
>25db	5f 16					.word xt_assertx3d
>25dd	16 18					.word xt_x28literalx29
>25df	e5 25					.word l_167
>25e1	19 2d					.word xt_x28branchx29
>25e3	f1 25					.word l_168
.25e5					l_167:
>25e5	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>25ed	3e 20 32 00
.25f1					l_168:
>25f1	48 16					.word xt_testname
>25f3	16 18					.word xt_x28literalx29
>25f5	06 00					.word 6
>25f7	16 18					.word xt_x28literalx29
>25f9	03 00					.word 3
>25fb	f7 30					.word xt_x2f
>25fd	df 17					.word xt_2
>25ff	5f 16					.word xt_assertx3d
>2601	16 18					.word xt_x28literalx29
>2603	09 26					.word l_169
>2605	19 2d					.word xt_x28branchx29
>2607	16 26					.word l_170
.2609					l_169:
>2609	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2611	2d 3e 20 33 00
.2616					l_170:
>2616	48 16					.word xt_testname
>2618	16 18					.word xt_x28literalx29
>261a	0a 00					.word 10
>261c	16 18					.word xt_x28literalx29
>261e	03 00					.word 3
>2620	f7 30					.word xt_x2f
>2622	16 18					.word xt_x28literalx29
>2624	03 00					.word 3
>2626	5f 16					.word xt_assertx3d
>2628	16 18					.word xt_x28literalx29
>262a	30 26					.word l_171
>262c	19 2d					.word xt_x28branchx29
>262e	3e 26					.word l_172
.2630					l_171:
>2630	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>2638	2d 2d 3e 20 30 00
.263e					l_172:
>263e	48 16					.word xt_testname
>2640	16 18					.word xt_x28literalx29
>2642	06 00					.word 6
>2644	16 18					.word xt_x28literalx29
>2646	03 00					.word 3
>2648	15 31					.word xt_mod
>264a	c3 17					.word xt_0
>264c	5f 16					.word xt_assertx3d
>264e	16 18					.word xt_x28literalx29
>2650	56 26					.word l_173
>2652	19 2d					.word xt_x28branchx29
>2654	65 26					.word l_174
.2656					l_173:
>2656	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>265e	20 2d 2d 3e 20 31 00
.2665					l_174:
>2665	48 16					.word xt_testname
>2667	16 18					.word xt_x28literalx29
>2669	0a 00					.word 10
>266b	16 18					.word xt_x28literalx29
>266d	03 00					.word 3
>266f	15 31					.word xt_mod
>2671	d0 17					.word xt_1
>2673	5f 16					.word xt_assertx3d
>2675	16 18					.word xt_x28literalx29
>2677	7d 26					.word l_178
>2679	19 2d					.word xt_x28branchx29
>267b	8b 26					.word l_179
.267d					l_178:
>267d	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2685	2d 2d 3e 20 32 00
.268b					l_179:
>268b	48 16					.word xt_testname
>268d	d0 17					.word xt_1
>268f	df 17					.word xt_2
>2691	57 31					.word xt_max
>2693	df 17					.word xt_2
>2695	5f 16					.word xt_assertx3d
>2697	16 18					.word xt_x28literalx29
>2699	9f 26					.word l_180
>269b	19 2d					.word xt_x28branchx29
>269d	ad 26					.word l_181
.269f					l_180:
>269f	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>26a7	2d 2d 3e 20 33 00
.26ad					l_181:
>26ad	48 16					.word xt_testname
>26af	16 18					.word xt_x28literalx29
>26b1	03 00					.word 3
>26b3	c3 17					.word xt_0
>26b5	57 31					.word xt_max
>26b7	16 18					.word xt_x28literalx29
>26b9	03 00					.word 3
>26bb	5f 16					.word xt_assertx3d
>26bd	16 18					.word xt_x28literalx29
>26bf	c5 26					.word l_182
>26c1	19 2d					.word xt_x28branchx29
>26c3	df 26					.word l_183
.26c5					l_182:
>26c5	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>26cd	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>26dd	68 00
.26df					l_183:
>26df	48 16					.word xt_testname
>26e1	16 18					.word xt_x28literalx29
>26e3	fe ff					.word 65534
>26e5	16 18					.word xt_x28literalx29
>26e7	ff ff					.word 65535
>26e9	57 31					.word xt_max
>26eb	16 18					.word xt_x28literalx29
>26ed	ff ff					.word 65535
>26ef	5f 16					.word xt_assertx3d
>26f1	16 18					.word xt_x28literalx29
>26f3	f9 26					.word l_186
>26f5	19 2d					.word xt_x28branchx29
>26f7	07 27					.word l_187
.26f9					l_186:
>26f9	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>2701	2d 2d 3e 20 31 00
.2707					l_187:
>2707	48 16					.word xt_testname
>2709	d0 17					.word xt_1
>270b	df 17					.word xt_2
>270d	83 31					.word xt_min
>270f	d0 17					.word xt_1
>2711	5f 16					.word xt_assertx3d
>2713	16 18					.word xt_x28literalx29
>2715	1b 27					.word l_188
>2717	19 2d					.word xt_x28branchx29
>2719	29 27					.word l_189
.271b					l_188:
>271b	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>2723	2d 2d 3e 20 30 00
.2729					l_189:
>2729	48 16					.word xt_testname
>272b	16 18					.word xt_x28literalx29
>272d	03 00					.word 3
>272f	c3 17					.word xt_0
>2731	83 31					.word xt_min
>2733	c3 17					.word xt_0
>2735	5f 16					.word xt_assertx3d
>2737	16 18					.word xt_x28literalx29
>2739	3f 27					.word l_190
>273b	19 2d					.word xt_x28branchx29
>273d	59 27					.word l_191
.273f					l_190:
>273f	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>2747	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2757	68 00
.2759					l_191:
>2759	48 16					.word xt_testname
>275b	16 18					.word xt_x28literalx29
>275d	fe ff					.word 65534
>275f	16 18					.word xt_x28literalx29
>2761	ff ff					.word 65535
>2763	83 31					.word xt_min
>2765	16 18					.word xt_x28literalx29
>2767	fe ff					.word 65534
>2769	5f 16					.word xt_assertx3d
>276b	16 18					.word xt_x28literalx29
>276d	73 27					.word l_192
>276f	19 2d					.word xt_x28branchx29
>2771	87 27					.word l_193
.2773					l_192:
>2773	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>277b	74 20 2d 2d 3e 20 32 20 33 20 31 00
.2787					l_193:
>2787	48 16					.word xt_testname
>2789	d0 17					.word xt_1
>278b	df 17					.word xt_2
>278d	16 18					.word xt_x28literalx29
>278f	03 00					.word 3
>2791	af 31					.word xt_rot
>2793	d0 17					.word xt_1
>2795	5f 16					.word xt_assertx3d
>2797	16 18					.word xt_x28literalx29
>2799	03 00					.word 3
>279b	5f 16					.word xt_assertx3d
>279d	df 17					.word xt_2
>279f	5f 16					.word xt_assertx3d
>27a1	16 18					.word xt_x28literalx29
>27a3	a9 27					.word l_194
>27a5	19 2d					.word xt_x28branchx29
>27a7	be 27					.word l_195
.27a9					l_194:
>27a9	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>27b1	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.27be					l_195:
>27be	48 16					.word xt_testname
>27c0	d0 17					.word xt_1
>27c2	df 17					.word xt_2
>27c4	cf 31					.word xt_2dup
>27c6	df 17					.word xt_2
>27c8	5f 16					.word xt_assertx3d
>27ca	d0 17					.word xt_1
>27cc	5f 16					.word xt_assertx3d
>27ce	df 17					.word xt_2
>27d0	5f 16					.word xt_assertx3d
>27d2	d0 17					.word xt_1
>27d4	5f 16					.word xt_assertx3d
>27d6	16 18					.word xt_x28literalx29
>27d8	de 27					.word l_196
>27da	19 2d					.word xt_x28branchx29
>27dc	f4 27					.word l_197
.27de					l_196:
>27de	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>27e6	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.27f4					l_197:
>27f4	48 16					.word xt_testname
>27f6	d0 17					.word xt_1
>27f8	df 17					.word xt_2
>27fa	16 18					.word xt_x28literalx29
>27fc	03 00					.word 3
>27fe	16 18					.word xt_x28literalx29
>2800	04 00					.word 4
>2802	eb 31					.word xt_2drop
>2804	df 17					.word xt_2
>2806	5f 16					.word xt_assertx3d
>2808	d0 17					.word xt_1
>280a	5f 16					.word xt_assertx3d
>280c	08 16					.word i_exit
.280e					w_drop:
>280e	04					.byte $04
>280f	64 72 6f 70				.text 'drop'
>2813	4b 18					.word w_unittest
.2815					xt_drop:
.2815	e8		inx			inx
.2816	e8		inx			inx
.2817	4c 23 16	jmp $1623		jmp next
.281a					w_dup:
>281a	03					.byte $03
>281b	64 75 70				.text 'dup'
>281e	0e 28					.word w_drop
.2820					xt_dup:
.2820	b5 02		lda $02,x		lda pstack+2,x
.2822	95 00		sta $00,x		sta pstack,x
.2824	b5 03		lda $03,x		lda pstack+3,x
.2826	95 01		sta $01,x		sta pstack+1,x
.2828	ca		dex			dex
.2829	ca		dex			dex
.282a	4c 23 16	jmp $1623		jmp next
.282d					w_swap:
>282d	04					.byte $04
>282e	73 77 61 70				.text 'swap'
>2832	1a 28					.word w_dup
.2834					xt_swap:
.2834	b5 02		lda $02,x		lda pstack+2,x
.2836	b4 04		ldy $04,x		ldy pstack+4,x
.2838	94 02		sty $02,x		sty pstack+2,x
.283a	95 04		sta $04,x		sta pstack+4,x
.283c	b5 03		lda $03,x		lda pstack+3,x
.283e	b4 05		ldy $05,x		ldy pstack+5,x
.2840	94 03		sty $03,x		sty pstack+3,x
.2842	95 05		sta $05,x		sta pstack+5,x
.2844	4c 23 16	jmp $1623		jmp next
.2847					w_over:
>2847	04					.byte $04
>2848	6f 76 65 72				.text 'over'
>284c	2d 28					.word w_swap
.284e					xt_over:
.284e	b5 04		lda $04,x		lda pstack+4,x
.2850	95 00		sta $00,x		sta pstack,x
.2852	b5 05		lda $05,x		lda pstack+5,x
.2854	95 01		sta $01,x		sta pstack+1,x
.2856	ca		dex			dex
.2857	ca		dex			dex
.2858	4c 23 16	jmp $1623		jmp next
.285b					w_x3er:
>285b	02					.byte $02
>285c	3e 72					.text '>r'
>285e	47 28					.word w_over
.2860					xt_x3er:
.2860	b5 03		lda $03,x		lda pstack+3,x
.2862	48		pha			pha
.2863	b5 02		lda $02,x		lda pstack+2,x
.2865	48		pha			pha
.2866	e8		inx			inx
.2867	e8		inx			inx
.2868	4c 23 16	jmp $1623		jmp next
.286b					w_rx3e:
>286b	02					.byte $02
>286c	72 3e					.text 'r>'
>286e	5b 28					.word w_x3er
.2870					xt_rx3e:
.2870	68		pla			pla
.2871	95 00		sta $00,x		sta pstack,x
.2873	68		pla			pla
.2874	95 01		sta $01,x		sta pstack+1,x
.2876	ca		dex			dex
.2877	ca		dex			dex
.2878	4c 23 16	jmp $1623		jmp next
.287b					w_r:
>287b	01					.byte $01
>287c	72					.text 'r'
>287d	6b 28					.word w_rx3e
.287f					xt_r:
.287f	68		pla			pla
.2880	95 00		sta $00,x		sta pstack,x
.2882	68		pla			pla
.2883	95 01		sta $01,x		sta pstack+1,x
.2885	48		pha			pha
.2886	b5 00		lda $00,x		lda pstack,x
.2888	48		pha			pha
.2889	ca		dex			dex
.288a	ca		dex			dex
.288b	4c 23 16	jmp $1623		jmp next
.288e					w_rdrop:
>288e	05					.byte $05
>288f	72 64 72 6f 70				.text 'rdrop'
>2894	7b 28					.word w_r
.2896					xt_rdrop:
.2896	68		pla			pla
.2897	68		pla			pla
.2898					w_x21:
>2898	01					.byte $01
>2899	21					.text '!'
>289a	8e 28					.word w_rdrop
.289c					xt_x21:
.289c	b5 02		lda $02,x		lda pstack+2,x
.289e	85 32		sta $32			sta tmp
.28a0	b5 03		lda $03,x		lda pstack+3,x
.28a2	85 33		sta $33			sta tmp+1
.28a4	a0 01		ldy #$01		ldy #1
.28a6	b5 04		lda $04,x		lda pstack+4,x
.28a8	92 32		sta ($32)		sta (tmp)
.28aa	b5 05		lda $05,x		lda pstack+5,x
.28ac	91 32		sta ($32),y		sta (tmp),y
.28ae	e8		inx			inx
.28af	e8		inx			inx
.28b0	e8		inx			inx
.28b1	e8		inx			inx
.28b2	4c 23 16	jmp $1623		jmp next
.28b5					w_x40:
>28b5	01					.byte $01
>28b6	40					.text '@'
>28b7	98 28					.word w_x21
.28b9					xt_x40:
.28b9	b5 02		lda $02,x		lda pstack+2,x
.28bb	85 32		sta $32			sta tmp
.28bd	b5 03		lda $03,x		lda pstack+3,x
.28bf	85 33		sta $33			sta tmp+1
.28c1	a0 01		ldy #$01		ldy #1
.28c3	b2 32		lda ($32)		lda (tmp)
.28c5	95 02		sta $02,x		sta pstack+2,x
.28c7	b1 32		lda ($32),y		lda (tmp),y
.28c9	95 03		sta $03,x		sta pstack+3,x
.28cb	4c 23 16	jmp $1623		jmp next
.28ce					w_cx21:
>28ce	02					.byte $02
>28cf	63 21					.text 'c!'
>28d1	b5 28					.word w_x40
.28d3					xt_cx21:
.28d3	b5 04		lda $04,x		lda pstack+4,x
.28d5	81 02		sta ($02,x)		sta (pstack+2,x)
.28d7	e8		inx			inx
.28d8	e8		inx			inx
.28d9	e8		inx			inx
.28da	e8		inx			inx
.28db	4c 23 16	jmp $1623		jmp next
.28de					w_cx40:
>28de	02					.byte $02
>28df	63 40					.text 'c@'
>28e1	ce 28					.word w_cx21
.28e3					xt_cx40:
.28e3	a1 02		lda ($02,x)		lda (pstack+2,x)
.28e5	95 02		sta $02,x		sta pstack+2,x
.28e7	74 03		stz $03,x		stz pstack+3,x
.28e9	4c 23 16	jmp $1623		jmp next
.28ec					w_fill:
>28ec	04					.byte $04
>28ed	66 69 6c 6c				.text 'fill'
>28f1	de 28					.word w_cx40
.28f3					xt_fill:
.28f3						loop:
.28f3	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.28f5	d0 04		bne $28fb		bne do_write
.28f7	b5 04		lda $04,x		lda pstack+4,x
.28f9	f0 19		beq $2914		beq done                ; Yes: we're done...
.28fb						do_write:
.28fb	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.28fd	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.28ff	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.2901	d0 02		bne $2905		bne deccount
.2903	f6 06		inc $06,x		inc pstack+6,x
.2905						deccount:
.2905	38		sec			sec                     ; Decrement the count
.2906	b5 03		lda $03,x		lda pstack+3,x
.2908	e9 01		sbc #$01		sbc #1
.290a	95 03		sta $03,x		sta pstack+3,x
.290c	b5 04		lda $04,x		lda pstack+4,x
.290e	e9 00		sbc #$00		sbc #0
.2910	95 04		sta $04,x		sta pstack+4,x
.2912	80 df		bra $28f3		bra loop                ; And check again
.2914						done:
.2914	8a		txa			txa                     ; Clean up the parameter stack
.2915	69 06		adc #$06		adc #6
.2917	aa		tax			tax
.2918	4c 23 16	jmp $1623		jmp next
.291b					w_x2bx21:
>291b	02					.byte $02
>291c	2b 21					.text '+!'
>291e	ec 28					.word w_fill
.2920					xt_x2bx21:
.2920	b5 03		lda $03,x		lda pstack+3,x
.2922	85 33		sta $33			sta tmp+1
.2924	b5 02		lda $02,x		lda pstack+2,x
.2926	85 32		sta $32			sta tmp
.2928	18		clc			clc
.2929	a0 01		ldy #$01		ldy #1
.292b	b2 32		lda ($32)		lda (tmp)
.292d	75 04		adc $04,x		adc pstack+4,x
.292f	92 32		sta ($32)		sta (tmp)
.2931	b1 32		lda ($32),y		lda (tmp),y
.2933	75 05		adc $05,x		adc pstack+5,x
.2935	91 32		sta ($32),y		sta (tmp),y
.2937						done:
.2937	e8		inx			inx                     ; Clean up the stack
.2938	e8		inx			inx
.2939	e8		inx			inx
.293a	e8		inx			inx
.293b	4c 23 16	jmp $1623		jmp next
.293e					w_enclose:
>293e	07					.byte $07
>293f	65 6e 63 6c 6f 73 65			.text 'enclose'
>2946	1b 29					.word w_x2bx21
.2948					xt_enclose:
.2948	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.294a	85 25		sta $25			sta src_ptr+1
.294c	b5 04		lda $04,x		lda pstack+4,x
.294e	85 24		sta $24			sta src_ptr
.2950	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.2952	85 32		sta $32			sta tmp
.2954	8a		txa			txa
.2955	38		sec			sec
.2956	e9 04		sbc #$04		sbc #4
.2958	aa		tax			tax
.2959	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.295b	74 06		stz $06,x		stz pstack+6,x
.295d	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.295f	74 04		stz $04,x		stz pstack+4,x
.2961	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.2963	74 02		stz $02,x		stz pstack+2,x
.2965	a0 00		ldy #$00		ldy #0
.2967						loop1:
.2967	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2969	d0 03		bne $296e		bne chk_delim1          ; NUL? No:; check it against the delimiter
.296b						none:
.296b	4c 23 16	jmp $1623		jmp next                ; Yes: we want to return 0s
.296e						chk_delim1:
.296e	c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.2970	f0 13		beq $2985		beq skip2               ; Yes: skip the character
.2972	a5 32		lda $32			lda tmp                 ; Check the delimiter
.2974	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.2976	d0 0b		bne $2983		bne found               ; No: ok, we've found the first character;
.2978	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.297a	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.297c	d0 05		bne $2983		bne found               ; No: we found the first character
.297e	c8		iny			iny                     ; Move to the next character
.297f	f0 ea		beq $296b		beq none                ; If we've rolled over, we found nothing
.2981	80 e4		bra $2967		bra loop1               ; Otherwise: check the next character
.2983						found:
.2983	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.2985						skip2:
.2985	c8		iny			iny                     ; Go to the next character
.2986	f0 1c		beq $29a4		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.2988						loop2:
.2988	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.298a	f0 18		beq $29a4		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.298c	c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.298e	f0 0c		beq $299c		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.2990	a5 32		lda $32			lda tmp                 ; Get the delimiter
.2992	c9 20		cmp #$20		cmp #' '                ; Is it space?
.2994	d0 ef		bne $2985		bne skip2               ; No: go to the next character
.2996	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.2998	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.299a	d0 e9		bne $2985		bne skip2               ; No: go to the next character
.299c						found_delim:
.299c	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.299e	c8		iny			iny
.299f	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.29a1	4c 23 16	jmp $1623		jmp next                ; And we're done
.29a4						found_nul:
.29a4	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.29a6	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.29a8	4c 23 16	jmp $1623		jmp next                ; And we're done
.29ab					w_cmove:
>29ab	05					.byte $05
>29ac	63 6d 6f 76 65				.text 'cmove'
>29b1	3e 29					.word w_enclose
.29b3					xt_cmove:
.29b3	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.29b5	85 33		sta $33			sta tmp+1
.29b7	b5 02		lda $02,x		lda pstack+2,x
.29b9	85 32		sta $32			sta tmp
.29bb	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.29bd	85 27		sta $27			sta dst_ptr+1
.29bf	b5 04		lda $04,x		lda pstack+4,x
.29c1	85 26		sta $26			sta dst_ptr
.29c3	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.29c5	85 25		sta $25			sta src_ptr+1
.29c7	b5 06		lda $06,x		lda pstack+6,x
.29c9	85 24		sta $24			sta src_ptr
.29cb	8a		txa			txa                     ; Clean up the stack
.29cc	18		clc			clc
.29cd	69 06		adc #$06		adc #6
.29cf	85 34		sta $34			sta savex               ; And save it for later restoration
.29d1	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.29d3	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.29d5						loop:
.29d5	e4 33		cpx $33			cpx tmp+1               ; is tmp == X:Y?
.29d7	d0 04		bne $29dd		bne copy
.29d9	c4 32		cpy $32			cpy tmp
.29db	f0 0e		beq $29eb		beq done                ; Yes: we're done
.29dd						copy:
.29dd	b1 24		lda ($24),y		lda (src_ptr),y         ; Copy the byte
.29df	91 26		sta ($26),y		sta (dst_ptr),y
.29e1	c8		iny			iny                     ; Move to the next byte
.29e2	d0 f1		bne $29d5		bne loop                ; Repeat for 256 bytes
.29e4	e8		inx			inx                     ; Move to the next block of 256
.29e5	e6 25		inc $25			inc src_ptr+1
.29e7	e6 27		inc $27			inc dst_ptr+1
.29e9	80 ea		bra $29d5		bra loop                ; And continue the loop
.29eb						done:
.29eb	a6 34		ldx $34			ldx savex
.29ed	4c 23 16	jmp $1623		jmp next
.29f0					w_move:
>29f0	04					.byte $04
>29f1	6d 6f 76 65				.text 'move'
>29f5	ab 29					.word w_cmove
.29f7					xt_move:
.29f7	38		sec			sec                     ; Compare addr1 and addr2
.29f8	b5 06		lda $06,x		lda pstack+6,x
.29fa	f5 04		sbc $04,x		sbc pstack+4,x
.29fc	85 32		sta $32			sta tmp
.29fe	b5 07		lda $07,x		lda pstack+7,x
.2a00	f5 05		sbc $05,x		sbc pstack+5,x
.2a02	85 33		sta $33			sta tmp+1
.2a04	30 24		bmi $2a2a		bmi a1less
.2a06	f0 72		beq $2a7a		beq chklo
.2a08						a1greater:
.2a08	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2a0a	d0 50		bne $2a5c		bne docopy1
.2a0c	b5 03		lda $03,x		lda pstack+3,x
.2a0e	f0 72		beq $2a82		beq done                ; Yes: we're done;
.2a10	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2a12	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2a14	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.2a16	d0 02		bne $2a1a		bne inc2
.2a18	f6 07		inc $07,x		inc pstack+7,x
.2a1a						inc2:
.2a1a	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.2a1c	d0 02		bne $2a20		bne dec_count
.2a1e	f6 03		inc $03,x		inc pstack+3,x
.2a20						dec_count:
.2a20	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2a22	d0 02		bne $2a26		bne l1
.2a24	d6 03		dec $03,x		dec pstack+3,x
.2a26						l1:
.2a26	d6 02		dec $02,x		dec pstack+2,x
.2a28	80 de		bra $2a08		bra a1greater
.2a2a						a1less:
.2a2a	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2a2c	d0 02		bne $2a30		bne l2
.2a2e	d6 05		dec $05,x		dec pstack+5,x
.2a30						l2:
.2a30	d6 04		dec $04,x		dec pstack+4,x
.2a32	18		clc			clc                     ; addr2 := addr2 + u
.2a33	b5 04		lda $04,x		lda pstack+4,x
.2a35	75 02		adc $02,x		adc pstack+2,x
.2a37	95 04		sta $04,x		sta pstack+4,x
.2a39	b5 05		lda $05,x		lda pstack+5,x
.2a3b	75 03		adc $03,x		adc pstack+3,x
.2a3d	95 05		sta $05,x		sta pstack+5,x
.2a3f	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2a41	d0 02		bne $2a45		bne l3
.2a43	d6 07		dec $07,x		dec pstack+7,x
.2a45						l3:
.2a45	d6 06		dec $06,x		dec pstack+6,x
.2a47	18		clc			clc                     ; addr1 := addr1 + u
.2a48	b5 06		lda $06,x		lda pstack+6,x
.2a4a	75 02		adc $02,x		adc pstack+2,x
.2a4c	95 06		sta $06,x		sta pstack+6,x
.2a4e	b5 07		lda $07,x		lda pstack+7,x
.2a50	75 03		adc $03,x		adc pstack+3,x
.2a52	95 07		sta $07,x		sta pstack+7,x
.2a54						loop2:
.2a54	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2a56	d0 04		bne $2a5c		bne docopy1
.2a58	b5 03		lda $03,x		lda pstack+3,x
.2a5a	f0 26		beq $2a82		beq done                ; Yes: we're done;
.2a5c						docopy1:
.2a5c	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2a5e	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2a60	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2a62	d0 02		bne $2a66		bne l4
.2a64	d6 07		dec $07,x		dec pstack+7,x
.2a66						l4:
.2a66	d6 06		dec $06,x		dec pstack+6,x
.2a68	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2a6a	d0 02		bne $2a6e		bne l5
.2a6c	d6 05		dec $05,x		dec pstack+5,x
.2a6e						l5:
.2a6e	d6 04		dec $04,x		dec pstack+4,x
.2a70	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2a72	d0 02		bne $2a76		bne l6
.2a74	d6 03		dec $03,x		dec pstack+3,x
.2a76						l6:
.2a76	d6 02		dec $02,x		dec pstack+2,x
.2a78	80 da		bra $2a54		bra loop2
.2a7a						chklo:
.2a7a	a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2a7c	30 ac		bmi $2a2a		bmi a1less
.2a7e	f0 02		beq $2a82		beq done                ; If equal, we don't need to move the data
.2a80	80 86		bra $2a08		bra a1greater
.2a82						done:
.2a82	8a		txa			txa
.2a83	18		clc			clc
.2a84	69 06		adc #$06		adc #6
.2a86	aa		tax			tax
.2a87	60		rts			rts
.2a88					w_x2b:
>2a88	01					.byte $01
>2a89	2b					.text '+'
>2a8a	f0 29					.word w_move
.2a8c					xt_x2b:
.2a8c	18		clc			clc
.2a8d	b5 04		lda $04,x		lda pstack+4,x
.2a8f	75 02		adc $02,x		adc pstack+2,x
.2a91	95 04		sta $04,x		sta pstack+4,x
.2a93	b5 05		lda $05,x		lda pstack+5,x
.2a95	75 03		adc $03,x		adc pstack+3,x
.2a97	95 05		sta $05,x		sta pstack+5,x
.2a99	e8		inx			inx
.2a9a	e8		inx			inx
.2a9b	4c 23 16	jmp $1623		jmp next
.2a9e					w_x2d:
>2a9e	01					.byte $01
>2a9f	2d					.text '-'
>2aa0	88 2a					.word w_x2b
.2aa2					xt_x2d:
.2aa2	38		sec			sec
.2aa3	b5 04		lda $04,x		lda pstack+4,x
.2aa5	f5 02		sbc $02,x		sbc pstack+2,x
.2aa7	95 04		sta $04,x		sta pstack+4,x
.2aa9	b5 05		lda $05,x		lda pstack+5,x
.2aab	f5 03		sbc $03,x		sbc pstack+3,x
.2aad	95 05		sta $05,x		sta pstack+5,x
.2aaf	e8		inx			inx
.2ab0	e8		inx			inx
.2ab1	4c 23 16	jmp $1623		jmp next
.2ab4					w_x2a:
>2ab4	01					.byte $01
>2ab5	2a					.text '*'
>2ab6	9e 2a					.word w_x2d
.2ab8					xt_x2a:
.2ab8	64 36		stz $36			stz sign
.2aba	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2abc	10 11		bpl $2acf		bpl chk_n2
.2abe	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2ac0	85 36		sta $36			sta sign
.2ac2	38		sec			sec             ; Negate n1
.2ac3	a9 00		lda #$00		lda #0
.2ac5	f5 04		sbc $04,x		sbc pstack+4,x
.2ac7	95 04		sta $04,x		sta pstack+4,x
.2ac9	a9 00		lda #$00		lda #0
.2acb	f5 05		sbc $05,x		sbc pstack+5,x
.2acd	95 05		sta $05,x		sta pstack+5,x
.2acf						chk_n2:
.2acf	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2ad1	10 13		bpl $2ae6		bpl init_tmp
.2ad3	a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2ad5	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2ad7	85 36		sta $36			sta sign
.2ad9	38		sec			sec             ; Negate n2
.2ada	a9 00		lda #$00		lda #0
.2adc	f5 02		sbc $02,x		sbc pstack+2,x
.2ade	95 02		sta $02,x		sta pstack+2,x
.2ae0	a9 00		lda #$00		lda #0
.2ae2	f5 03		sbc $03,x		sbc pstack+3,x
.2ae4	95 03		sta $03,x		sta pstack+3,x
.2ae6						init_tmp:
.2ae6	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2ae8	85 34		sta $34			sta tmp+2
.2aea	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2aec						l1:
.2aec	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.2aee	76 02		ror $02,x		ror pstack+2,x
.2af0	90 0b		bcc $2afd		bcc l2          ; 0 or 1?
.2af2	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.2af3	18		clc			clc
.2af4	b5 04		lda $04,x		lda pstack+4,x
.2af6	65 34		adc $34			adc tmp+2
.2af8	85 34		sta $34			sta tmp+2
.2afa	98		tya			tya
.2afb	75 05		adc $05,x		adc pstack+5,x
.2afd						l2:
.2afd	6a		ror a			ror A
.2afe	66 34		ror $34			ror tmp+2
.2b00	66 33		ror $33			ror tmp+1
.2b02	66 32		ror $32			ror tmp
.2b04	3a		dec a			dec a
.2b05	d0 e5		bne $2aec		bne l1
.2b07	85 35		sta $35			sta tmp+3
.2b09	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2b0b	95 04		sta $04,x		sta pstack+4,x
.2b0d	a5 33		lda $33			lda tmp+1
.2b0f	95 05		sta $05,x		sta pstack+5,x
.2b11	e8		inx			inx             ; Clean up parameter stack
.2b12	e8		inx			inx
.2b13	a5 36		lda $36			lda sign        ; Check the sign
.2b15	10 0d		bpl $2b24		bpl done
.2b17	38		sec			sec             ; If negative, negate result
.2b18	a9 00		lda #$00		lda #0
.2b1a	f5 02		sbc $02,x		sbc pstack+2,x
.2b1c	95 02		sta $02,x		sta pstack+2,x
.2b1e	a9 00		lda #$00		lda #0
.2b20	f5 03		sbc $03,x		sbc pstack+3,x
.2b22	95 03		sta $03,x		sta pstack+3,x
.2b24						done:
.2b24	4c 23 16	jmp $1623		jmp next
.2b27					w_x2fmod:
>2b27	04					.byte $04
>2b28	2f 6d 6f 64				.text '/mod'
>2b2c	b4 2a					.word w_x2a
.2b2e					xt_x2fmod:
.2b2e	64 36		stz $36			stz sign
.2b30	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2b32	10 11		bpl $2b45		bpl chk_n2
.2b34	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2b36	85 36		sta $36			sta sign
.2b38	38		sec			sec             ; Negate n1
.2b39	a9 00		lda #$00		lda #0
.2b3b	f5 04		sbc $04,x		sbc pstack+4,x
.2b3d	95 04		sta $04,x		sta pstack+4,x
.2b3f	a9 00		lda #$00		lda #0
.2b41	f5 05		sbc $05,x		sbc pstack+5,x
.2b43	95 05		sta $05,x		sta pstack+5,x
.2b45						chk_n2:
.2b45	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2b47	10 13		bpl $2b5c		bpl init_tmp
.2b49	a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2b4b	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2b4d	85 36		sta $36			sta sign
.2b4f	38		sec			sec             ; Negate n2
.2b50	a9 00		lda #$00		lda #0
.2b52	f5 02		sbc $02,x		sbc pstack+2,x
.2b54	95 02		sta $02,x		sta pstack+2,x
.2b56	a9 00		lda #$00		lda #0
.2b58	f5 03		sbc $03,x		sbc pstack+3,x
.2b5a	95 03		sta $03,x		sta pstack+3,x
.2b5c						init_tmp:
.2b5c	64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.2b5e	64 33		stz $33			stz tmp+1
.2b60	a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.2b62	85 35		sta $35			sta counter
.2b64						l1:
.2b64	16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.2b66	36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.2b68	26 32		rol $32			rol tmp
.2b6a	26 33		rol $33			rol tmp+1
.2b6c	a5 32		lda $32			lda tmp
.2b6e	38		sec			sec             ; Trial subtraction
.2b6f	f5 02		sbc $02,x		sbc pstack+2,x
.2b71	a8		tay			tay
.2b72	b5 33		lda $33,x		lda tmp+1,x
.2b74	f5 03		sbc $03,x		sbc pstack+3,x
.2b76	90 06		bcc $2b7e		bcc l2          ; Did subtraction succeed?
.2b78	85 33		sta $33			sta tmp+1       ; If yes, save it
.2b7a	84 32		sty $32			sty tmp
.2b7c	f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.2b7e						l2:
.2b7e	c6 35		dec $35			dec counter
.2b80	d0 e2		bne $2b64		bne l1
.2b82	b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2b84	95 03		sta $03,x		sta pstack+3,x
.2b86	b5 04		lda $04,x		lda pstack+4,x
.2b88	95 02		sta $02,x		sta pstack+2,x
.2b8a	a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2b8c	95 04		sta $04,x		sta pstack+4,x
.2b8e	a5 33		lda $33			lda tmp+1
.2b90	95 05		sta $05,x		sta pstack+5,x
.2b92	a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2b94	10 0d		bpl $2ba3		bpl done
.2b96	38		sec			sec             ; Negate the quotient
.2b97	a9 00		lda #$00		lda #0
.2b99	f5 02		sbc $02,x		sbc pstack+2,x
.2b9b	95 02		sta $02,x		sta pstack+2,x
.2b9d	a9 00		lda #$00		lda #0
.2b9f	f5 03		sbc $03,x		sbc pstack+3,x
.2ba1	95 03		sta $03,x		sta pstack+3,x
.2ba3						done:
.2ba3	4c 23 16	jmp $1623		jmp next
.2ba6					w_1x2b:
>2ba6	02					.byte $02
>2ba7	31 2b					.text '1+'
>2ba9	27 2b					.word w_x2fmod
.2bab					xt_1x2b:
.2bab	f6 02		inc $02,x		inc pstack+2,x
.2bad	d0 02		bne $2bb1		bne skip
.2baf	f6 03		inc $03,x		inc pstack+3,x
.2bb1						skip:
.2bb1	4c 23 16	jmp $1623		jmp next
.2bb4					w_2x2b:
>2bb4	02					.byte $02
>2bb5	32 2b					.text '2+'
>2bb7	a6 2b					.word w_1x2b
.2bb9					xt_2x2b:
.2bb9	18		clc			clc
.2bba	b5 02		lda $02,x		lda pstack+2,x
.2bbc	69 02		adc #$02		adc #2
.2bbe	95 02		sta $02,x		sta pstack+2,x
.2bc0	b5 03		lda $03,x		lda pstack+3,x
.2bc2	69 00		adc #$00		adc #0
.2bc4	95 03		sta $03,x		sta pstack+3,x
.2bc6	4c 23 16	jmp $1623		jmp next
.2bc9					w_1x2d:
>2bc9	02					.byte $02
>2bca	31 2d					.text '1-'
>2bcc	b4 2b					.word w_2x2b
.2bce					xt_1x2d:
.2bce	b5 02		lda $02,x		lda pstack+2,x
.2bd0	d0 02		bne $2bd4		bne l1
.2bd2	d6 03		dec $03,x		dec pstack+3,x
.2bd4						l1:
.2bd4	d6 02		dec $02,x		dec pstack+2,x
.2bd6	4c 23 16	jmp $1623		jmp next
.2bd9					w_2x2d:
>2bd9	02					.byte $02
>2bda	32 2d					.text '2-'
>2bdc	c9 2b					.word w_1x2d
.2bde					xt_2x2d:
.2bde	38		sec			sec
.2bdf	b5 02		lda $02,x		lda pstack+2,x
.2be1	e9 02		sbc #$02		sbc #2
.2be3	95 02		sta $02,x		sta pstack+2,x
.2be5	b5 03		lda $03,x		lda pstack+3,x
.2be7	e9 00		sbc #$00		sbc #0
.2be9	95 03		sta $03,x		sta pstack+3,x
.2beb	4c 23 16	jmp $1623		jmp next
.2bee					w_and:
>2bee	03					.byte $03
>2bef	61 6e 64				.text 'and'
>2bf2	d9 2b					.word w_2x2d
.2bf4					xt_and:
.2bf4	b5 02		lda $02,x		lda pstack+2,x
.2bf6	35 04		and $04,x		and pstack+4,x
.2bf8	95 04		sta $04,x		sta pstack+4,x
.2bfa	b5 03		lda $03,x		lda pstack+3,x
.2bfc	35 05		and $05,x		and pstack+5,x
.2bfe	95 05		sta $05,x		sta pstack+5,x
.2c00	e8		inx			inx
.2c01	e8		inx			inx
.2c02	4c 23 16	jmp $1623		jmp next
.2c05					w_or:
>2c05	02					.byte $02
>2c06	6f 72					.text 'or'
>2c08	ee 2b					.word w_and
.2c0a					xt_or:
.2c0a	b5 02		lda $02,x		lda pstack+2,x
.2c0c	15 04		ora $04,x		ora pstack+4,x
.2c0e	95 04		sta $04,x		sta pstack+4,x
.2c10	b5 03		lda $03,x		lda pstack+3,x
.2c12	15 05		ora $05,x		ora pstack+5,x
.2c14	95 05		sta $05,x		sta pstack+5,x
.2c16	e8		inx			inx
.2c17	e8		inx			inx
.2c18	4c 23 16	jmp $1623		jmp next
.2c1b					w_xor:
>2c1b	03					.byte $03
>2c1c	78 6f 72				.text 'xor'
>2c1f	05 2c					.word w_or
.2c21					xt_xor:
.2c21	b5 02		lda $02,x		lda pstack+2,x
.2c23	55 04		eor $04,x		eor pstack+4,x
.2c25	95 04		sta $04,x		sta pstack+4,x
.2c27	b5 03		lda $03,x		lda pstack+3,x
.2c29	55 05		eor $05,x		eor pstack+5,x
.2c2b	95 05		sta $05,x		sta pstack+5,x
.2c2d	e8		inx			inx
.2c2e	e8		inx			inx
.2c2f	4c 23 16	jmp $1623		jmp next
.2c32					w_not:
>2c32	03					.byte $03
>2c33	6e 6f 74				.text 'not'
>2c36	1b 2c					.word w_xor
.2c38					xt_not:
.2c38	b5 02		lda $02,x		lda pstack+2,x
.2c3a	49 ff		eor #$ff		eor #$ff
.2c3c	95 02		sta $02,x		sta pstack+2,x
.2c3e	b5 03		lda $03,x		lda pstack+3,x
.2c40	49 ff		eor #$ff		eor #$ff
.2c42	95 03		sta $03,x		sta pstack+3,x
.2c44	4c 23 16	jmp $1623		jmp next
.2c47					w_0x3c:
>2c47	02					.byte $02
>2c48	30 3c					.text '0<'
>2c4a	32 2c					.word w_not
.2c4c					xt_0x3c:
.2c4c	b5 03		lda $03,x		lda pstack+3,x
.2c4e	30 07		bmi $2c57		bmi istrue
.2c50	74 02		stz $02,x		stz pstack+2,x
.2c52	74 03		stz $03,x		stz pstack+3,x
.2c54	4c 23 16	jmp $1623		jmp next
.2c57						istrue:
.2c57	a9 ff		lda #$ff		lda #$ff
.2c59	95 02		sta $02,x		sta pstack+2,x
.2c5b	95 03		sta $03,x		sta pstack+3,x
.2c5d	4c 23 16	jmp $1623		jmp next
.2c60					w_0x3d:
>2c60	02					.byte $02
>2c61	30 3d					.text '0='
>2c63	47 2c					.word w_0x3c
.2c65					xt_0x3d:
.2c65	b5 02		lda $02,x		lda pstack+2,x
.2c67	d0 0d		bne $2c76		bne isfalse
.2c69	b5 03		lda $03,x		lda pstack+3,x
.2c6b	d0 09		bne $2c76		bne isfalse
.2c6d	a9 ff		lda #$ff		lda #$ff
.2c6f	95 02		sta $02,x		sta pstack+2,x
.2c71	95 03		sta $03,x		sta pstack+3,x
.2c73	4c 23 16	jmp $1623		jmp next
.2c76						isfalse:
.2c76	74 02		stz $02,x		stz pstack+2,x
.2c78	74 03		stz $03,x		stz pstack+3,x
.2c7a	4c 23 16	jmp $1623		jmp next
.2c7d					w_0x3e:
>2c7d	02					.byte $02
>2c7e	30 3e					.text '0>'
>2c80	60 2c					.word w_0x3d
.2c82					xt_0x3e:
.2c82	b5 03		lda $03,x		lda pstack+3,x
.2c84	30 0f		bmi $2c95		bmi isfalse
.2c86	d0 04		bne $2c8c		bne istrue
.2c88	b5 02		lda $02,x		lda pstack+2,x
.2c8a	f0 09		beq $2c95		beq isfalse
.2c8c						istrue:
.2c8c	a9 ff		lda #$ff		lda #$ff
.2c8e	95 02		sta $02,x		sta pstack+2,x
.2c90	95 03		sta $03,x		sta pstack+3,x
.2c92	4c 23 16	jmp $1623		jmp next
.2c95						isfalse:
.2c95	74 02		stz $02,x		stz pstack+2,x
.2c97	74 03		stz $03,x		stz pstack+3,x
.2c99	4c 23 16	jmp $1623		jmp next
.2c9c					w_x28variablex29:
>2c9c	0a					.byte $0A
>2c9d	28 76 61 72 69 61 62 6c			.text '(variable)'
>2ca5	65 29
>2ca7	7d 2c					.word w_0x3e
.2ca9					xt_x28variablex29:
.2ca9	18		clc			clc                     ; push(wp + 3)
.2caa	a5 2a		lda $2a			lda wp
.2cac	69 03		adc #$03		adc #3
.2cae	95 00		sta $00,x		sta pstack,x
.2cb0	a5 2b		lda $2b			lda wp+1
.2cb2	69 00		adc #$00		adc #0
.2cb4	95 01		sta $01,x		sta pstack+1,x
.2cb6	ca		dex			dex
.2cb7	ca		dex			dex
.2cb8	4c 23 16	jmp $1623		jmp next
.2cbb					w_x28constantx29:
>2cbb	0a					.byte $0A
>2cbc	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2cc4	74 29
>2cc6	9c 2c					.word w_x28variablex29
.2cc8					xt_x28constantx29:
.2cc8	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2cca	b1 2a		lda ($2a),y		lda (wp),y
.2ccc	95 00		sta $00,x		sta pstack,x
.2cce	c8		iny			iny
.2ccf	b1 2a		lda ($2a),y		lda (wp),y
.2cd1	95 01		sta $01,x		sta pstack+1,x
.2cd3	ca		dex			dex
.2cd4	ca		dex			dex
.2cd5	4c 23 16	jmp $1623		jmp next
.2cd8					w_cells:
>2cd8	05					.byte $05
>2cd9	63 65 6c 6c 73				.text 'cells'
>2cde						.fill 11
>2ce9	bb 2c					.word w_x28constantx29
.2ceb					xt_cells:
.2ceb	4c c8 2c	jmp $2cc8		jmp xt_x28constantx29
>2cee	02 00					.word 2
.2cf0					w_x28userx29:
>2cf0	06					.byte $06
>2cf1	28 75 73 65 72 29			.text '(user)'
>2cf7	d8 2c					.word w_cells
.2cf9					xt_x28userx29:
.2cf9	18		clc			clc                     ; push(up + memory(wp + 3))
.2cfa	a0 03		ldy #$03		ldy #3
.2cfc	a5 2c		lda $2c			lda up
.2cfe	71 2a		adc ($2a),y		adc (wp),y
.2d00	95 00		sta $00,x		sta pstack,x
.2d02	c8		iny			iny
.2d03	a5 2d		lda $2d			lda up+1
.2d05	71 2a		adc ($2a),y		adc (wp),y
.2d07	95 01		sta $01,x		sta pstack+1,x
.2d09	ca		dex			dex
.2d0a	ca		dex			dex
.2d0b	4c 23 16	jmp $1623		jmp next
.2d0e					w_x28branchx29:
>2d0e	08					.byte $08
>2d0f	28 62 72 61 6e 63 68 29			.text '(branch)'
>2d17	f0 2c					.word w_x28userx29
.2d19					xt_x28branchx29:
.2d19	a0 01		ldy #$01		ldy #1              ; ip := branch address
.2d1b	b2 28		lda ($28)		lda (ip)
.2d1d	85 32		sta $32			sta tmp
.2d1f	b1 28		lda ($28),y		lda (ip),y
.2d21	85 29		sta $29			sta ip+1
.2d23	a5 32		lda $32			lda tmp
.2d25	85 28		sta $28			sta ip
.2d27	4c 23 16	jmp $1623		jmp next
.2d2a					w_x28branch0x29:
>2d2a	09					.byte $09
>2d2b	28 62 72 61 6e 63 68 30			.text '(branch0)'
>2d33	29
>2d34	0e 2d					.word w_x28branchx29
.2d36					xt_x28branch0x29:
.2d36	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2d38	d0 04		bne $2d3e		bne nobranch        ; No: skip over the branch address
.2d3a	b5 03		lda $03,x		lda pstack+3,x
.2d3c	f0 0f		beq $2d4d		beq dobranch        ; Yes: take the branch
.2d3e						nobranch:
.2d3e	18		clc			clc                 ; No: skip over the branch address
.2d3f	a5 28		lda $28			lda ip
.2d41	69 02		adc #$02		adc #2
.2d43	85 28		sta $28			sta ip
.2d45	a5 29		lda $29			lda ip+1
.2d47	69 00		adc #$00		adc #0
.2d49	85 29		sta $29			sta ip+1
.2d4b	80 0e		bra $2d5b		bra done
.2d4d						dobranch:
.2d4d	a0 01		ldy #$01		ldy #1              ; ip := branch address
.2d4f	b2 28		lda ($28)		lda (ip)
.2d51	85 32		sta $32			sta tmp
.2d53	b1 28		lda ($28),y		lda (ip),y
.2d55	85 29		sta $29			sta ip+1
.2d57	a5 32		lda $32			lda tmp
.2d59	85 28		sta $28			sta ip
.2d5b						done:
.2d5b	e8		inx			inx                 ; clean up the parameter stack
.2d5c	e8		inx			inx
.2d5d	4c 23 16	jmp $1623		jmp next
.2d60					w_x28dox29:
>2d60	04					.byte $04
>2d61	28 64 6f 29				.text '(do)'
>2d65	2a 2d					.word w_x28branch0x29
.2d67					xt_x28dox29:
.2d67	b5 03		lda $03,x		lda pstack+3,x
.2d69	48		pha			pha
.2d6a	b5 02		lda $02,x		lda pstack+2,x
.2d6c	48		pha			pha
.2d6d	b5 05		lda $05,x		lda pstack+5,x
.2d6f	48		pha			pha
.2d70	b5 04		lda $04,x		lda pstack+4,x
.2d72	48		pha			pha
.2d73	18		clc			clc
.2d74	8a		txa			txa
.2d75	69 04		adc #$04		adc #4
.2d77	aa		tax			tax
.2d78	4c 23 16	jmp $1623		jmp next
.2d7b					w_x3ei:
>2d7b	02					.byte $02
>2d7c	3e 69					.text '>i'
>2d7e	60 2d					.word w_x28dox29
.2d80					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.2d80	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.2d82	85 33		sta $33			sta tmp+1
.2d84	b5 02		lda $02,x		lda pstack+2,x
.2d86	85 32		sta $32			sta tmp
.2d88	e8		inx			inx
.2d89	e8		inx			inx
.2d8a	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2d8c	ba		tsx			tsx
.2d8d	a5 33		lda $33			lda tmp+1           ; current := tmp = n
.2d8f	9d 04 01	sta $0104,x		sta current+1
.2d92	a5 32		lda $32			lda tmp
.2d94	9d 03 01	sta $0103,x		sta current
.2d97	a6 34		ldx $34			ldx savex
.2d99	4c 23 16	jmp $1623		jmp next
.2d9c					w_leave:
>2d9c	05					.byte $05
>2d9d	6c 65 61 76 65				.text 'leave'
>2da2	7b 2d					.word w_x3ei
.2da4					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.2da4	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2da6	ba		tsx			tsx
.2da7	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.2daa	9d 02 01	sta $0102,x		sta limit+1
.2dad	bd 03 01	lda $0103,x		lda current
.2db0	9d 01 01	sta $0101,x		sta limit
.2db3	a6 34		ldx $34			ldx savex
.2db5	4c 23 16	jmp $1623		jmp next
.2db8					w_x28loopx29:
>2db8	06					.byte $06
>2db9	28 6c 6f 6f 70 29			.text '(loop)'
>2dbf	9c 2d					.word w_leave
.2dc1					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.2dc1	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2dc3	ba		tsx			tsx
.2dc4	fe 03 01	inc $0103,x		inc current         ; Increment current
.2dc7	d0 03		bne $2dcc		bne chk_current
.2dc9	fe 04 01	inc $0104,x		inc current+1
.2dcc						chk_current:
.2dcc	38		sec			sec
.2dcd	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2dd0	fd 02 01	sbc $0102,x		sbc limit+1
.2dd3	50 02		bvc $2dd7		bvc label1          ; the equality comparison is in the Z flag here
.2dd5	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2dd7						label1:
.2dd7	30 23		bmi $2dfc		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2dd9	50 02		bvc $2ddd		bvc label2          ; the Z flag was affected only if V is 1
.2ddb	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2ddd						label2:
.2ddd	d0 08		bne $2de7		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2ddf	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2de2	fd 01 01	sbc $0101,x		sbc limit
.2de5	90 15		bcc $2dfc		bcc dobranch        ; if current < limit then current < limit
.2de7						nobranch:
.2de7	8a		txa			txa                 ; Yes: Remove the context from the return stack
.2de8	18		clc			clc
.2de9	69 04		adc #$04		adc #4
.2deb	aa		tax			tax
.2dec	9a		txs			txs
.2ded	18		clc			clc                 ; And skip over the branch address
.2dee	a5 28		lda $28			lda ip
.2df0	69 02		adc #$02		adc #2
.2df2	85 28		sta $28			sta ip
.2df4	a5 29		lda $29			lda ip+1
.2df6	69 00		adc #$00		adc #0
.2df8	85 29		sta $29			sta ip+1
.2dfa	80 0e		bra $2e0a		bra done
.2dfc						dobranch:
.2dfc	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2dfe	b2 28		lda ($28)		lda (ip)
.2e00	85 32		sta $32			sta tmp
.2e02	b1 28		lda ($28),y		lda (ip),y
.2e04	85 29		sta $29			sta ip+1
.2e06	a5 32		lda $32			lda tmp
.2e08	85 28		sta $28			sta ip
.2e0a						done:
.2e0a	a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2e0c	4c 23 16	jmp $1623		jmp next
.2e0f					w_x28x2bloopx29:
>2e0f	07					.byte $07
>2e10	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>2e17	b8 2d					.word w_x28loopx29
.2e19					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.2e19	b4 03		ldy $03,x		ldy pstack+3,x
.2e1b	85 33		sta $33			sta tmp+1
.2e1d	b5 02		lda $02,x		lda pstack+2,x
.2e1f	85 32		sta $32			sta tmp
.2e21	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e23	ba		tsx			tsx
.2e24	18		clc			clc                 ; Increment current by n
.2e25	bd 03 01	lda $0103,x		lda current
.2e28	65 32		adc $32			adc tmp
.2e2a	9d 03 01	sta $0103,x		sta current
.2e2d	bd 04 01	lda $0104,x		lda current+1
.2e30	65 33		adc $33			adc tmp+1
.2e32	9d 04 01	sta $0104,x		sta current+1
.2e35	e6 34		inc $34			inc savex           ; Remove n from the stack
.2e37	e6 34		inc $34			inc savex
.2e39						chk_current:
.2e39	38		sec			sec
.2e3a	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2e3d	fd 02 01	sbc $0102,x		sbc limit+1
.2e40	50 02		bvc $2e44		bvc label1          ; the equality comparison is in the Z flag here
.2e42	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2e44						label1:
.2e44	30 23		bmi $2e69		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2e46	50 02		bvc $2e4a		bvc label2          ; the Z flag was affected only if V is 1
.2e48	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2e4a						label2:
.2e4a	d0 08		bne $2e54		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2e4c	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2e4f	fd 01 01	sbc $0101,x		sbc limit
.2e52	90 15		bcc $2e69		bcc dobranch        ; if current < limit then current < limit
.2e54						nobranch:
.2e54	8a		txa			txa                 ; Yes: Remove the context from the return stack
.2e55	18		clc			clc
.2e56	69 04		adc #$04		adc #4
.2e58	aa		tax			tax
.2e59	9a		txs			txs
.2e5a	18		clc			clc                 ; And skip over the branch address
.2e5b	a5 28		lda $28			lda ip
.2e5d	69 02		adc #$02		adc #2
.2e5f	85 28		sta $28			sta ip
.2e61	a5 29		lda $29			lda ip+1
.2e63	69 00		adc #$00		adc #0
.2e65	85 29		sta $29			sta ip+1
.2e67	80 0e		bra $2e77		bra done
.2e69						dobranch:
.2e69	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2e6b	b2 28		lda ($28)		lda (ip)
.2e6d	85 32		sta $32			sta tmp
.2e6f	b1 28		lda ($28),y		lda (ip),y
.2e71	85 29		sta $29			sta ip+1
.2e73	a5 32		lda $32			lda tmp
.2e75	85 28		sta $28			sta ip
.2e77						done:
.2e77	a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2e79	4c 23 16	jmp $1623		jmp next
.2e7c					w_i:
>2e7c	01					.byte $01
>2e7d	69					.text 'i'
>2e7e	0f 2e					.word w_x28x2bloopx29
.2e80					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.2e80	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e82	ba		tsx			tsx
.2e83	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.2e86	bd 03 01	lda $0103,x		lda current
.2e89	a6 34		ldx $34			ldx savex           ; Restore the PSP
.2e8b	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2e8d	95 00		sta $00,x		sta pstack,x
.2e8f	ca		dex			dex
.2e90	ca		dex			dex
.2e91	4c 23 16	jmp $1623		jmp next
.2e94					w_x28ofx29:
>2e94	04					.byte $04
>2e95	28 6f 66 29				.text '(of)'
>2e99	7c 2e					.word w_i
.2e9b					xt_x28ofx29:
.2e9b	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.2e9d	d5 04		cmp $04,x		cmp pstack+4,x
.2e9f	d0 1a		bne $2ebb		bne not_eq
.2ea1	b5 03		lda $03,x		lda pstack+3,x
.2ea3	d5 05		cmp $05,x		cmp pstack+5,x
.2ea5	d0 14		bne $2ebb		bne not_eq
.2ea7	e8		inx			inx
.2ea8	e8		inx			inx
.2ea9	e8		inx			inx
.2eaa	e8		inx			inx
.2eab	18		clc			clc                 ; Skip over the branch target
.2eac	a5 28		lda $28			lda ip
.2eae	69 02		adc #$02		adc #2
.2eb0	85 28		sta $28			sta ip
.2eb2	a5 29		lda $29			lda ip+1
.2eb4	69 00		adc #$00		adc #0
.2eb6	85 29		sta $29			sta ip+1
.2eb8	4c 23 16	jmp $1623		jmp next
.2ebb						not_eq:
.2ebb	e8		inx			inx                 ; Remove n2 from stack
.2ebc	e8		inx			inx
.2ebd	a0 01		ldy #$01		ldy #1              ; Take the branch target
.2ebf	b2 28		lda ($28)		lda (ip)
.2ec1	85 32		sta $32			sta tmp
.2ec3	b1 28		lda ($28),y		lda (ip),y
.2ec5	85 29		sta $29			sta ip+1
.2ec7	a5 32		lda $32			lda tmp
.2ec9	85 28		sta $28			sta ip
.2ecb	4c 23 16	jmp $1623		jmp next
.2ece					w_execute:
>2ece	07					.byte $07
>2ecf	65 78 65 63 75 74 65			.text 'execute'
>2ed6	94 2e					.word w_x28ofx29
.2ed8					xt_execute:
.2ed8	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2eda	85 2a		sta $2a			sta wp
.2edc	b5 03		lda $03,x		lda pstack+3,x
.2ede	85 2b		sta $2b			sta wp+1
.2ee0	e8		inx			inx                 ; Clean up stack
.2ee1	e8		inx			inx
.2ee2	6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2ee5					w_x28vocabularyx29:
>2ee5	0c					.byte $0C
>2ee6	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>2eee	61 72 79 29
>2ef2	ce 2e					.word w_execute
.2ef4					xt_x28vocabularyx29:
.2ef4	18		clc			clc                 ; tmp := up + user_context
.2ef5	a5 2c		lda $2c			lda up
.2ef7	69 08		adc #$08		adc #user_context
.2ef9	85 32		sta $32			sta tmp
.2efb	a5 2d		lda $2d			lda up+1
.2efd	69 00		adc #$00		adc #0
.2eff	85 33		sta $33			sta tmp+1
.2f01	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.2f03	18		clc			clc
.2f04	a5 2a		lda $2a			lda wp
.2f06	69 03		adc #$03		adc #3
.2f08	92 32		sta ($32)		sta (tmp)
.2f0a	a5 2b		lda $2b			lda wp+1
.2f0c	69 00		adc #$00		adc #0
.2f0e	91 32		sta ($32),y		sta (tmp),y
.2f10	4c 23 16	jmp $1623		jmp next
.2f13					w_forth:
>2f13	05					.byte $05
>2f14	66 6f 72 74 68				.text 'forth'
>2f19	e5 2e					.word w_x28vocabularyx29
.2f1b					xt_forth:
.2f1b	4c f4 2e	jmp $2ef4		jmp xt_x28vocabularyx29
>2f1e	46 35					.word <>w_cold
.2f20					w_bs:
>2f20	02					.byte $02
>2f21	62 73					.text 'bs'
>2f23						.fill 14
>2f31	13 2f					.word w_forth
.2f33					xt_bs:
.2f33	4c c8 2c	jmp $2cc8		jmp xt_x28constantx29
>2f36	08 00					.word 8
.2f38					w_nl:
>2f38	02					.byte $02
>2f39	6e 6c					.text 'nl'
>2f3b						.fill 14
>2f49	20 2f					.word w_bs
.2f4b					xt_nl:
.2f4b	4c c8 2c	jmp $2cc8		jmp xt_x28constantx29
>2f4e	0d 00					.word 13
.2f50					w_bl:
>2f50	02					.byte $02
>2f51	62 6c					.text 'bl'
>2f53						.fill 14
>2f61	38 2f					.word w_nl
.2f63					xt_bl:
.2f63	4c c8 2c	jmp $2cc8		jmp xt_x28constantx29
>2f66	20 00					.word 32
.2f68					w_s0:
>2f68	02					.byte $02
>2f69	73 30					.text 's0'
>2f6b						.fill 14
>2f79	50 2f					.word w_bl
.2f7b					xt_s0:
.2f7b	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2f7e	00 00					.word 0
.2f80					w_r0:
>2f80	02					.byte $02
>2f81	72 30					.text 'r0'
>2f83						.fill 14
>2f91	68 2f					.word w_s0
.2f93					xt_r0:
.2f93	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2f96	02 00					.word 2
.2f98					w_base:
>2f98	04					.byte $04
>2f99	62 61 73 65				.text 'base'
>2f9d						.fill 12
>2fa9	80 2f					.word w_r0
.2fab					xt_base:
.2fab	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2fae	04 00					.word 4
.2fb0					w_state:
>2fb0	05					.byte $05
>2fb1	73 74 61 74 65				.text 'state'
>2fb6						.fill 11
>2fc1	98 2f					.word w_base
.2fc3					xt_state:
.2fc3	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2fc6	06 00					.word 6
.2fc8					w_context:
>2fc8	07					.byte $07
>2fc9	63 6f 6e 74 65 78 74			.text 'context'
>2fd0						.fill 9
>2fd9	b0 2f					.word w_state
.2fdb					xt_context:
.2fdb	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2fde	08 00					.word 8
.2fe0					w_current:
>2fe0	07					.byte $07
>2fe1	63 75 72 72 65 6e 74			.text 'current'
>2fe8						.fill 9
>2ff1	c8 2f					.word w_context
.2ff3					xt_current:
.2ff3	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>2ff6	0a 00					.word 10
.2ff8					w_dp:
>2ff8	02					.byte $02
>2ff9	64 70					.text 'dp'
>2ffb						.fill 14
>3009	e0 2f					.word w_current
.300b					xt_dp:
.300b	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>300e	0c 00					.word 12
.3010					w_x3ein:
>3010	03					.byte $03
>3011	3e 69 6e				.text '>in'
>3014						.fill 13
>3021	f8 2f					.word w_dp
.3023					xt_x3ein:
.3023	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>3026	0e 00					.word 14
.3028					w_tib:
>3028	03					.byte $03
>3029	74 69 62				.text 'tib'
>302c						.fill 13
>3039	10 30					.word w_x3ein
.303b					xt_tib:
.303b	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>303e	10 00					.word 16
.3040					w_sourcex2did:
>3040	09					.byte $09
>3041	73 6f 75 72 63 65 2d 69			.text 'source-id'
>3049	64
>304a						.fill 7
>3051	28 30					.word w_tib
.3053					xt_sourcex2did:
.3053	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>3056	12 00					.word 18
.3058					w_blk:
>3058	03					.byte $03
>3059	62 6c 6b				.text 'blk'
>305c						.fill 13
>3069	40 30					.word w_sourcex2did
.306b					xt_blk:
.306b	4c f9 2c	jmp $2cf9		jmp xt_x28userx29
>306e	14 00					.word 20
.3070					w_x3fdup:
>3070	04					.byte $04
>3071	3f 64 75 70				.text '?dup'
>3075						.fill 12
>3081	58 30					.word w_blk
.3083					xt_x3fdup:
.3083	4c 10 16	jmp $1610		jmp i_enter
>3086	20 28					.word xt_dup
>3088	36 2d					.word xt_x28branch0x29
>308a	8e 30					.word l_136
>308c	20 28					.word xt_dup
.308e					l_136:
>308e	08 16					.word i_exit
.3090					w_x3c:
>3090	01					.byte $01
>3091	3c					.text '<'
>3092						.fill 15
>30a1	70 30					.word w_x3fdup
.30a3					xt_x3c:
.30a3	4c 10 16	jmp $1610		jmp i_enter
>30a6	a2 2a					.word xt_x2d
>30a8	4c 2c					.word xt_0x3c
>30aa	08 16					.word i_exit
.30ac					w_x3e:
>30ac	01					.byte $01
>30ad	3e					.text '>'
>30ae						.fill 15
>30bd	90 30					.word w_x3c
.30bf					xt_x3e:
.30bf	4c 10 16	jmp $1610		jmp i_enter
>30c2	a2 2a					.word xt_x2d
>30c4	82 2c					.word xt_0x3e
>30c6	08 16					.word i_exit
.30c8					w_x3d:
>30c8	01					.byte $01
>30c9	3d					.text '='
>30ca						.fill 15
>30d9	ac 30					.word w_x3e
.30db					xt_x3d:
.30db	4c 10 16	jmp $1610		jmp i_enter
>30de	a2 2a					.word xt_x2d
>30e0	65 2c					.word xt_0x3d
>30e2	08 16					.word i_exit
.30e4					w_x2f:
>30e4	01					.byte $01
>30e5	2f					.text '/'
>30e6						.fill 15
>30f5	c8 30					.word w_x3d
.30f7					xt_x2f:
.30f7	4c 10 16	jmp $1610		jmp i_enter
>30fa	2e 2b					.word xt_x2fmod
>30fc	34 28					.word xt_swap
>30fe	15 28					.word xt_drop
>3100	08 16					.word i_exit
.3102					w_mod:
>3102	03					.byte $03
>3103	6d 6f 64				.text 'mod'
>3106						.fill 13
>3113	e4 30					.word w_x2f
.3115					xt_mod:
.3115	4c 10 16	jmp $1610		jmp i_enter
>3118	2e 2b					.word xt_x2fmod
>311a	15 28					.word xt_drop
>311c	08 16					.word i_exit
.311e					w_abs:
>311e	03					.byte $03
>311f	61 62 73				.text 'abs'
>3122						.fill 13
>312f	02 31					.word w_mod
.3131					xt_abs:
.3131	4c 10 16	jmp $1610		jmp i_enter
>3134	20 28					.word xt_dup
>3136	4c 2c					.word xt_0x3c
>3138	36 2d					.word xt_x28branch0x29
>313a	42 31					.word l_175
>313c	c3 17					.word xt_0
>313e	34 28					.word xt_swap
>3140	a2 2a					.word xt_x2d
.3142					l_175:
>3142	08 16					.word i_exit
.3144					w_max:
>3144	03					.byte $03
>3145	6d 61 78				.text 'max'
>3148						.fill 13
>3155	1e 31					.word w_abs
.3157					xt_max:
.3157	4c 10 16	jmp $1610		jmp i_enter
>315a	4e 28					.word xt_over
>315c	4e 28					.word xt_over
>315e	a3 30					.word xt_x3c
>3160	36 2d					.word xt_x28branch0x29
>3162	6c 31					.word l_176
>3164	4e 28					.word xt_over
>3166	15 28					.word xt_drop
>3168	19 2d					.word xt_x28branchx29
>316a	6e 31					.word l_177
.316c					l_176:
>316c	15 28					.word xt_drop
.316e					l_177:
>316e	08 16					.word i_exit
.3170					w_min:
>3170	03					.byte $03
>3171	6d 69 6e				.text 'min'
>3174						.fill 13
>3181	44 31					.word w_max
.3183					xt_min:
.3183	4c 10 16	jmp $1610		jmp i_enter
>3186	4e 28					.word xt_over
>3188	4e 28					.word xt_over
>318a	bf 30					.word xt_x3e
>318c	36 2d					.word xt_x28branch0x29
>318e	98 31					.word l_184
>3190	4e 28					.word xt_over
>3192	15 28					.word xt_drop
>3194	19 2d					.word xt_x28branchx29
>3196	9a 31					.word l_185
.3198					l_184:
>3198	15 28					.word xt_drop
.319a					l_185:
>319a	08 16					.word i_exit
.319c					w_rot:
>319c	03					.byte $03
>319d	72 6f 74				.text 'rot'
>31a0						.fill 13
>31ad	70 31					.word w_min
.31af					xt_rot:
.31af	4c 10 16	jmp $1610		jmp i_enter
>31b2	60 28					.word xt_x3er
>31b4	34 28					.word xt_swap
>31b6	70 28					.word xt_rx3e
>31b8	34 28					.word xt_swap
>31ba	08 16					.word i_exit
.31bc					w_2dup:
>31bc	04					.byte $04
>31bd	32 64 75 70				.text '2dup'
>31c1						.fill 12
>31cd	9c 31					.word w_rot
.31cf					xt_2dup:
.31cf	4c 10 16	jmp $1610		jmp i_enter
>31d2	4e 28					.word xt_over
>31d4	4e 28					.word xt_over
>31d6	08 16					.word i_exit
.31d8					w_2drop:
>31d8	05					.byte $05
>31d9	32 64 72 6f 70				.text '2drop'
>31de						.fill 11
>31e9	bc 31					.word w_2dup
.31eb					xt_2drop:
.31eb	4c 10 16	jmp $1610		jmp i_enter
>31ee	15 28					.word xt_drop
>31f0	15 28					.word xt_drop
>31f2	08 16					.word i_exit
.31f4					w_lfa:
>31f4	03					.byte $03
>31f5	6c 66 61				.text 'lfa'
>31f8						.fill 13
>3205	d8 31					.word w_2drop
.3207					xt_lfa:
.3207	4c 10 16	jmp $1610		jmp i_enter
>320a	16 18					.word xt_x28literalx29
>320c	05 00					.word 5
>320e	a2 2a					.word xt_x2d
>3210	08 16					.word i_exit
.3212					w_cfa:
>3212	03					.byte $03
>3213	63 66 61				.text 'cfa'
>3216						.fill 13
>3223	f4 31					.word w_lfa
.3225					xt_cfa:
.3225	4c 10 16	jmp $1610		jmp i_enter
>3228	16 18					.word xt_x28literalx29
>322a	03 00					.word 3
>322c	a2 2a					.word xt_x2d
>322e	08 16					.word i_exit
.3230					w_nfa:
>3230	03					.byte $03
>3231	6e 66 61				.text 'nfa'
>3234						.fill 13
>3241	12 32					.word w_cfa
.3243					xt_nfa:
.3243	4c 10 16	jmp $1610		jmp i_enter
>3246	16 18					.word xt_x28literalx29
>3248	16 00					.word 22
>324a	a2 2a					.word xt_x2d
>324c	08 16					.word i_exit
.324e					w_pfa:
>324e	03					.byte $03
>324f	70 66 61				.text 'pfa'
>3252						.fill 13
>325f	30 32					.word w_nfa
.3261					xt_pfa:
.3261	4c 10 16	jmp $1610		jmp i_enter
>3264	16 18					.word xt_x28literalx29
>3266	16 00					.word 22
>3268	8c 2a					.word xt_x2b
>326a	08 16					.word i_exit
.326c					w_here:
>326c	04					.byte $04
>326d	68 65 72 65				.text 'here'
>3271						.fill 12
>327d	4e 32					.word w_pfa
.327f					xt_here:
.327f	4c 10 16	jmp $1610		jmp i_enter
>3282	0b 30					.word xt_dp
>3284	b9 28					.word xt_x40
>3286	08 16					.word i_exit
.3288					w_allot:
>3288	05					.byte $05
>3289	61 6c 6c 6f 74				.text 'allot'
>328e						.fill 11
>3299	6c 32					.word w_here
.329b					xt_allot:
.329b	4c 10 16	jmp $1610		jmp i_enter
>329e	0b 30					.word xt_dp
>32a0	20 29					.word xt_x2bx21
>32a2	08 16					.word i_exit
.32a4					w_x2c:
>32a4	01					.byte $01
>32a5	2c					.text ','
>32a6						.fill 15
>32b5	88 32					.word w_allot
.32b7					xt_x2c:
.32b7	4c 10 16	jmp $1610		jmp i_enter
>32ba	7f 32					.word xt_here
>32bc	9c 28					.word xt_x21
>32be	df 17					.word xt_2
>32c0	9b 32					.word xt_allot
>32c2	08 16					.word i_exit
.32c4					w_cx2c:
>32c4	02					.byte $02
>32c5	63 2c					.text 'c,'
>32c7						.fill 14
>32d5	a4 32					.word w_x2c
.32d7					xt_cx2c:
.32d7	4c 10 16	jmp $1610		jmp i_enter
>32da	7f 32					.word xt_here
>32dc	d3 28					.word xt_cx21
>32de	d0 17					.word xt_1
>32e0	9b 32					.word xt_allot
>32e2	08 16					.word i_exit
.32e4					w_definitions:
>32e4	0b					.byte $0B
>32e5	64 65 66 69 6e 69 74 69			.text 'definitions'
>32ed	6f 6e 73
>32f0						.fill 5
>32f5	c4 32					.word w_cx2c
.32f7					xt_definitions:
.32f7	4c 10 16	jmp $1610		jmp i_enter
>32fa	db 2f					.word xt_context
>32fc	b9 28					.word xt_x40
>32fe	f3 2f					.word xt_current
>3300	9c 28					.word xt_x21
>3302	08 16					.word i_exit
.3304					w_latest:
>3304	06					.byte $06
>3305	6c 61 74 65 73 74			.text 'latest'
>330b						.fill 10
>3315	e4 32					.word w_definitions
.3317					xt_latest:
.3317	4c 10 16	jmp $1610		jmp i_enter
>331a	f3 2f					.word xt_current
>331c	b9 28					.word xt_x40
>331e	b9 28					.word xt_x40
>3320	08 16					.word i_exit
.3322					w_count:
>3322	05					.byte $05
>3323	63 6f 75 6e 74				.text 'count'
>3328						.fill 11
>3333	04 33					.word w_latest
.3335					xt_count:
.3335	4c 10 16	jmp $1610		jmp i_enter
>3338	20 28					.word xt_dup
>333a	ab 2b					.word xt_1x2b
>333c	34 28					.word xt_swap
>333e	e3 28					.word xt_cx40
>3340	08 16					.word i_exit
.3342					w_type:
>3342	04					.byte $04
>3343	74 79 70 65				.text 'type'
>3347						.fill 12
>3353	22 33					.word w_count
.3355					xt_type:
.3355	4c 10 16	jmp $1610		jmp i_enter
>3358	83 30					.word xt_x3fdup
>335a	36 2d					.word xt_x28branch0x29
>335c	80 33					.word l_198
>335e	4e 28					.word xt_over
>3360	8c 2a					.word xt_x2b
>3362	34 28					.word xt_swap
>3364	67 2d					.word xt_x28dox29
.3366					l_199:
>3366	80 2e					.word xt_i
>3368	e3 28					.word xt_cx40
>336a	83 30					.word xt_x3fdup
>336c	36 2d					.word xt_x28branch0x29
>336e	76 33					.word l_201
>3370	6d 17					.word xt_emit
>3372	19 2d					.word xt_x28branchx29
>3374	78 33					.word l_202
.3376					l_201:
>3376	a4 2d					.word xt_leave
.3378					l_202:
>3378	c1 2d					.word xt_x28loopx29
>337a	66 33					.word l_199
.337c					l_200:
>337c	19 2d					.word xt_x28branchx29
>337e	82 33					.word l_203
.3380					l_198:
>3380	15 28					.word xt_drop
.3382					l_203:
>3382	08 16					.word i_exit
.3384					w_space:
>3384	05					.byte $05
>3385	73 70 61 63 65				.text 'space'
>338a						.fill 11
>3395	42 33					.word w_type
.3397					xt_space:
.3397	4c 10 16	jmp $1610		jmp i_enter
>339a	16 18					.word xt_x28literalx29
>339c	20 00					.word 32
>339e	6d 17					.word xt_emit
>33a0	08 16					.word i_exit
.33a2					w_spaces:
>33a2	06					.byte $06
>33a3	73 70 61 63 65 73			.text 'spaces'
>33a9						.fill 10
>33b3	84 33					.word w_space
.33b5					xt_spaces:
.33b5	4c 10 16	jmp $1610		jmp i_enter
>33b8	c3 17					.word xt_0
>33ba	67 2d					.word xt_x28dox29
.33bc					l_204:
>33bc	97 33					.word xt_space
>33be	c1 2d					.word xt_x28loopx29
>33c0	bc 33					.word l_204
.33c2					l_205:
>33c2	08 16					.word i_exit
.33c4					w_expect:
>33c4	06					.byte $06
>33c5	65 78 70 65 63 74			.text 'expect'
>33cb						.fill 10
>33d5	a2 33					.word w_spaces
.33d7					xt_expect:
.33d7	4c 10 16	jmp $1610		jmp i_enter
>33da	4e 28					.word xt_over
>33dc	8c 2a					.word xt_x2b
>33de	4e 28					.word xt_over
>33e0	67 2d					.word xt_x28dox29
.33e2					l_206:
>33e2	9e 17					.word xt_key
>33e4	33 2f					.word xt_bs
>33e6	9b 2e					.word xt_x28ofx29
>33e8	14 34					.word l_209
>33ea	20 28					.word xt_dup
>33ec	80 2e					.word xt_i
>33ee	db 30					.word xt_x3d
>33f0	38 2c					.word xt_not
>33f2	36 2d					.word xt_x28branch0x29
>33f4	10 34					.word l_210
>33f6	33 2f					.word xt_bs
>33f8	6d 17					.word xt_emit
>33fa	63 2f					.word xt_bl
>33fc	6d 17					.word xt_emit
>33fe	33 2f					.word xt_bs
>3400	6d 17					.word xt_emit
>3402	c3 17					.word xt_0
>3404	80 2e					.word xt_i
>3406	ce 2b					.word xt_1x2d
>3408	d3 28					.word xt_cx21
>340a	80 2e					.word xt_i
>340c	de 2b					.word xt_2x2d
>340e	80 2d					.word xt_x3ei
.3410					l_210:
>3410	19 2d					.word xt_x28branchx29
>3412	34 34					.word l_208
.3414					l_209:
>3414	4b 2f					.word xt_nl
>3416	9b 2e					.word xt_x28ofx29
>3418	20 34					.word l_211
>341a	a4 2d					.word xt_leave
>341c	19 2d					.word xt_x28branchx29
>341e	34 34					.word l_208
.3420					l_211:
>3420	20 28					.word xt_dup
>3422	20 28					.word xt_dup
>3424	80 2e					.word xt_i
>3426	d3 28					.word xt_cx21
>3428	c3 17					.word xt_0
>342a	80 2e					.word xt_i
>342c	ab 2b					.word xt_1x2b
>342e	d3 28					.word xt_cx21
>3430	6d 17					.word xt_emit
>3432	15 28					.word xt_drop
.3434					l_208:
>3434	c1 2d					.word xt_x28loopx29
>3436	e2 33					.word l_206
.3438					l_207:
>3438	15 28					.word xt_drop
>343a	08 16					.word i_exit
.343c					w_query:
>343c	05					.byte $05
>343d	71 75 65 72 79				.text 'query'
>3442						.fill 11
>344d	c4 33					.word w_expect
.344f					xt_query:
.344f	4c 10 16	jmp $1610		jmp i_enter
>3452	3b 30					.word xt_tib
>3454	b9 28					.word xt_x40
>3456	16 18					.word xt_x28literalx29
>3458	50 00					.word 80
>345a	d7 33					.word xt_expect
>345c	c3 17					.word xt_0
>345e	23 30					.word xt_x3ein
>3460	9c 28					.word xt_x21
>3462	08 16					.word i_exit
.3464					w_erase:
>3464	05					.byte $05
>3465	65 72 61 73 65				.text 'erase'
>346a						.fill 11
>3475	3c 34					.word w_query
.3477					xt_erase:
.3477	4c 10 16	jmp $1610		jmp i_enter
>347a	c3 17					.word xt_0
>347c	f3 28					.word xt_fill
>347e	08 16					.word i_exit
.3480					w_blanks:
>3480	06					.byte $06
>3481	62 6c 61 6e 6b 73			.text 'blanks'
>3487						.fill 10
>3491	64 34					.word w_erase
.3493					xt_blanks:
.3493	4c 10 16	jmp $1610		jmp i_enter
>3496	63 2f					.word xt_bl
>3498	f3 28					.word xt_fill
>349a	08 16					.word i_exit
.349c					w_word:
>349c	04					.byte $04
>349d	77 6f 72 64				.text 'word'
>34a1						.fill 12
>34ad	80 34					.word w_blanks
.34af					xt_word:
.34af	4c 10 16	jmp $1610		jmp i_enter
>34b2	3b 30					.word xt_tib
>34b4	b9 28					.word xt_x40
>34b6	23 30					.word xt_x3ein
>34b8	b9 28					.word xt_x40
>34ba	8c 2a					.word xt_x2b
>34bc	34 28					.word xt_swap
>34be	48 29					.word xt_enclose
>34c0	23 30					.word xt_x3ein
>34c2	20 29					.word xt_x2bx21
>34c4	4e 28					.word xt_over
>34c6	a2 2a					.word xt_x2d
>34c8	60 28					.word xt_x3er
>34ca	7f 28					.word xt_r
>34cc	7f 32					.word xt_here
>34ce	d3 28					.word xt_cx21
>34d0	8c 2a					.word xt_x2b
>34d2	7f 32					.word xt_here
>34d4	ab 2b					.word xt_1x2b
>34d6	70 28					.word xt_rx3e
>34d8	b3 29					.word xt_cmove
>34da	08 16					.word i_exit
.34dc					w_initrandom:
>34dc	0a					.byte $0A
>34dd	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>34e5	6f 6d
>34e7						.fill 6
>34ed	9c 34					.word w_word
.34ef					xt_initrandom:
.34ef	4c 10 16	jmp $1610		jmp i_enter
>34f2	d0 17					.word xt_1
>34f4	16 18					.word xt_x28literalx29
>34f6	a6 d6					.word 54950
>34f8	d3 28					.word xt_cx21
>34fa	08 16					.word i_exit
.34fc					w_random:
>34fc	06					.byte $06
>34fd	72 61 6e 64 6f 6d			.text 'random'
>3503						.fill 10
>350d	dc 34					.word w_initrandom
.350f					xt_random:
.350f	4c 10 16	jmp $1610		jmp i_enter
>3512	16 18					.word xt_x28literalx29
>3514	a4 d6					.word 54948
>3516	b9 28					.word xt_x40
>3518	08 16					.word i_exit
.351a					w_maze:
>351a	04					.byte $04
>351b	6d 61 7a 65				.text 'maze'
>351f						.fill 12
>352b	fc 34					.word w_random
.352d					xt_maze:
.352d	4c 10 16	jmp $1610		jmp i_enter
>3530	ef 34					.word xt_initrandom
.3532					l_212:
>3532	0f 35					.word xt_random
>3534	d0 17					.word xt_1
>3536	f4 2b					.word xt_and
>3538	16 18					.word xt_x28literalx29
>353a	cd 00					.word 205
>353c	8c 2a					.word xt_x2b
>353e	6d 17					.word xt_emit
>3540	19 2d					.word xt_x28branchx29
>3542	32 35					.word l_212
.3544					l_213:
>3544	08 16					.word i_exit
.3546					w_cold:
>3546	04					.byte $04
>3547	63 6f 6c 64				.text 'cold'
>354b						.fill 12
>3557	1a 35					.word w_maze
.3559					xt_cold:
.3559	4c 10 16	jmp $1610		jmp i_enter
>355c	c3 17					.word xt_0
>355e	6b 30					.word xt_blk
>3560	9c 28					.word xt_x21
>3562	16 18					.word xt_x28literalx29
>3564	00 40					.word 16384
>3566	0b 30					.word xt_dp
>3568	9c 28					.word xt_x21
>356a	16 18					.word xt_x28literalx29
>356c	00 bf					.word 48896
>356e	3b 30					.word xt_tib
>3570	9c 28					.word xt_x21
>3572	16 18					.word xt_x28literalx29
>3574	7a 35					.word l_214
>3576	19 2d					.word xt_x28branchx29
>3578	99 35					.word l_215
.357a					l_214:
>357a	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>3582	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>3592	30 2e 30 30 2e 30 30
.3599					l_215:
>3599	35 33					.word xt_count
>359b	55 33					.word xt_type
>359d	b5 17					.word xt_cr
>359f	16 18					.word xt_x28literalx29
>35a1	a7 35					.word l_216
>35a3	19 2d					.word xt_x28branchx29
>35a5	aa 35					.word l_217
.35a7					l_216:
>35a7	02 6f 6b				.ptext "ok"
.35aa					l_217:
>35aa	35 33					.word xt_count
>35ac	55 33					.word xt_type
>35ae	b5 17					.word xt_cr
>35b0	4f 34					.word xt_query
>35b2	63 2f					.word xt_bl
>35b4	af 34					.word xt_word
>35b6	b5 17					.word xt_cr
>35b8	16 18					.word xt_x28literalx29
>35ba	c0 35					.word l_218
>35bc	19 2d					.word xt_x28branchx29
>35be	cd 35					.word l_219
.35c0					l_218:
>35c0	0c 59 6f 75 20 65 6e 74			.ptext "You entered:"
>35c8	65 72 65 64 3a
.35cd					l_219:
>35cd	35 33					.word xt_count
>35cf	55 33					.word xt_type
>35d1	7f 32					.word xt_here
>35d3	35 33					.word xt_count
>35d5	55 33					.word xt_type
>35d7	08 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.35d9					endcode:

;******  Return to file: forth.asm


;******  End of listing
