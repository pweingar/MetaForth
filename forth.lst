
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Tue Jan 10 22:27:57 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000						pstack = $0000          ; Location of the "bottom" of the parameter stack
=$1000						USERAREA = $1000        ; Area for user variables
=9						CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa		cc 0a				vnmi:       .word <>h_nmi
>fffc		00 b0				vreset:     .word <>boot
>fffe		cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000						MMU_MEM_CTRL = $0000
=$0001						MMU_IO_CTRL = $0001
=$00						MMU_IO_PAGE_0 = $00
=$01						MMU_IO_PAGE_1 = $01
=$02						MMU_IO_PAGE_TEXT = $02
=$03						MMU_IO_PAGE_COLOR = $03
=$d000						VKY_MST_CTRL_0 = $d000
=$01						VKY_MST_TEXT = $01
=$02						VKY_MST_OVLY = $02
=$04						VKY_MST_GRAPHICS = $04
=$08						VKY_MST_BITMAP = $08
=$10						VKY_MST_TILE = $10
=$20						VKY_MST_SPRITE = $20
=$40						VKY_MST_GAMMA = $40
=$d001						VKY_MST_CTRL_1 = $d001
=$01						VKY_MST_RES_400 = $01
=$02						VKY_MST_DBL_X = $02
=$04						VKY_MST_DBL_Y = $04
=$08						VKY_MST_SLEEP = $08
=$10						VKY_MST_OVLY_TRANS = $10
=$d004						VKY_BRD_CTRL = $d004
=$d005						VKY_BRD_BLUE = $d005
=$d006						VKY_BRD_GREEN = $d006
=$d007						VKY_BRD_RED = $d007
=$d008						VKY_BRD_SIZE_X = $d008
=$d009						VKY_BRD_SIZE_Y = $d009
=$d010						VKY_CURS_CTRL = $d010
=$01						VKY_CURS_ENABLE = $01
=$08						VKY_CURS_FLASH_1S = $08
=$0a						VKY_CURS_FLASH_0_5S = $0a
=$0c						VKY_CURS_FLASH_0_25S = $0c
=$0d						VKY_CURS_FLASH_0_125S = $0d
=$d012						VKY_CURS_CHAR = $d012
=$d014						VKY_CURS_X = $d014
=$d016						VKY_CURS_Y = $d016
=$c000						VKY_TEXT_MATRIX = $c000
=$d800						VKY_TEXT_FG_LUT = $d800
=$d840						VKY_TEXT_BG_LUT = $d840
=$c000						VKY_TEXT_FONT = $c000
=$d66c						INT_MASK_0 = $D66C
=$d660						INT_PEND_0 = $D660
=$d66d						INT_MASK_1 = $D66D
=$d661						INT_PEND_1 = $D661
=$04						INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8						CHAR_BS = 8                         ; Backspace
=12						CHAR_FF = 12                        ; Form feed character
=13						CHAR_NL = 13                        ; Newline character
>0020						shell_start .word ?                 ; Address for the recognized shell program
>0022						cur_line    .word ?                 ; Address of the current line on the text screen
>0024						src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026						dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200						curs_color  .byte ?                 ; Current color for printing
>0201						curs_x      .byte ?                 ; Current column for the text cursor
>0202						curs_y      .byte ?                 ; Current row for the text cursor
>0203						old_y       .byte ?                 ; Previous cursor row
>0204						curs_width  .byte ?                 ; Width of the screen in text columns
>0205						curs_height .byte ?                 ; Height of the screen in text columns
.b000		4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003		4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006		4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009		4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c		4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f		4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012		4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015		4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018		4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800		a9 e9		lda #$e9	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802		a0 15		ldy #$15	            ldy #>start
.0804		20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807		4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a						isetshell:
.080a		84 21		sty $21		            sty shell_start+1
.080c		85 20		sta $20		            sta shell_start
.080e		60		rts		            rts
.080f						iwarm:
.080f		78		sei		            sei                     ; Disable IRQs
.0810		d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811		a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813		9a		txs		            txs
.0814		a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816		85 01		sta $01		            sta MMU_IO_CTRL
.0818		20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b		20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e		20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821		6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824						inittext:
.0824		a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826		8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829		9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c		a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e		8d 04 02	sta $0204	            sta curs_width
.0831		a9 3c		lda #$3c	            lda #60
.0833		8d 05 02	sta $0205	            sta curs_height
.0836		a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838		8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b		a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d		8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840		a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842		8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845		a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847		8d 00 02	sta $0200	            sta curs_color
.084a		a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c		8d 03 02	sta $0203	            sta old_y
.084f		20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852		20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855		20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858		60		rts		            rts
.0859						initint:
.0859		a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b		8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e		a9 ff		lda #$ff	            lda #$ff
.0860		8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863		8d 60 d6	sta $d660	            sta INT_PEND_0
.0866		8d 61 d6	sta $d661	            sta INT_PEND_1
.0869		58		cli		            cli
.086a		60		rts		            rts
=$7f						CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b						initfont:
.086b		48		pha		            pha
.086c		da		phx		            phx
.086d		5a		phy		            phy
.086e		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870		48		pha		            pha
.0871		a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873		85 01		sta $01		            sta MMU_IO_CTRL
.0875		a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877		85 24		sta $24		            sta src_ptr
.0879		a9 0a		lda #$0a	            lda #>bios_font
.087b		85 25		sta $25		            sta src_ptr+1
.087d		a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f		85 26		sta $26		            sta dst_ptr
.0881		a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883		85 27		sta $27		            sta dst_ptr+1
.0885		a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887		a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889		b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b		91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d		c8		iny		            iny                     ; Move to the next byte
.088e		d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890		e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892		e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894		ca		dex		            dex                     ; Count down the pages moved
.0895		d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897		68		pla		            pla
.0898		85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a		7a		ply		            ply
.089b		fa		plx		            plx
.089c		68		pla		            pla
.089d		60		rts		            rts
=$f4						DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e						initlut:
.089e		48		pha		            pha
.089f		5a		phy		            phy
.08a0		a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2		48		pha		            pha
.08a3		a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5		85 01		sta $01		            sta MMU_IO_CTRL
.08a7		a0 00		ldy #$00	            ldy #0
.08a9		b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac		99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af		99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2		c8		iny		            iny
.08b3		c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5		d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7		68		pla		            pla
.08b8		85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba		7a		ply		            ply
.08bb		68		pla		            pla
.08bc		60		rts		            rts
>08bd		00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1		00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5		00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9		00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd		80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1		80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5		80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9		8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd		80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1		00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5		00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9		00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed		ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1		ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5		ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9		ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd						consclr:
.08fd		48		pha		            pha
.08fe		da		phx		            phx
.08ff		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901		85 22		sta $22		            sta cur_line
.0903		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905		85 23		sta $23		            sta cur_line+1
.0907		a0 00		ldy #$00	            ldy #0
.0909		20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c		c8		iny		            iny                     ; Move to the next line
.090d		cc 05 02	cpy $0205	            cpy curs_height
.0910		f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912		18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913		a5 22		lda $22		            lda cur_line
.0915		6d 04 02	adc $0204	            adc curs_width
.0918		85 22		sta $22		            sta cur_line
.091a		a5 23		lda $23		            lda cur_line+1
.091c		69 00		adc #$00	            adc #0
.091e		85 23		sta $23		            sta cur_line+1
.0920		80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922		9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925		9c 02 02	stz $0202	            stz curs_y
.0928		20 2e 09	jsr $092e	            jsr cursset
.092b		fa		plx		            plx
.092c		68		pla		            pla
.092d		60		rts		            rts
.092e						cursset:
.092e		48		pha		            pha
.092f		5a		phy		            phy
.0930		ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933		cd 04 02	cmp $0204	            cmp curs_width
.0936		90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938		9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b		ee 02 02	inc $0202	            inc curs_y
.093e						chk_row:
.093e		ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941		cd 05 02	cmp $0205	            cmp curs_height
.0944		90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946		ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949		3a		dec a		            dec a
.094a		8d 02 02	sta $0202	            sta curs_y
.094d		20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950		ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953		8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956		9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959		ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c		8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f		9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962		ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965		cd 02 02	cmp $0202	            cmp curs_y
.0968		f0 21		beq $098b	            beq done                ; Yes: we are done
.096a		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c		85 22		sta $22		            sta cur_line
.096e		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970		85 23		sta $23		            sta cur_line+1
.0972		ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975		8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978		f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a		18		clc		loop:       clc                     ; Move cur_line to the next line
.097b		a5 22		lda $22		            lda cur_line
.097d		6d 04 02	adc $0204	            adc curs_width
.0980		85 22		sta $22		            sta cur_line
.0982		a5 23		lda $23		            lda cur_line+1
.0984		69 00		adc #$00	            adc #0
.0986		85 23		sta $23		            sta cur_line+1
.0988		88		dey		            dey                     ; Decrement line counter
.0989		d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b		7a		ply		done:       ply
.098c		68		pla		            pla
.098d		60		rts		            rts
.098e						consscroll:
.098e		48		pha		            pha
.098f		da		phx		            phx
.0990		a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992		48		pha		            pha
.0993		a5 22		lda $22		            lda cur_line
.0995		48		pha		            pha
.0996		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998		48		pha		            pha
.0999		a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b		85 26		sta $26		            sta dst_ptr
.099d		a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f		85 27		sta $27		            sta dst_ptr+1
.09a1		18		clc		            clc                     ; src_ptr is the second line
.09a2		a5 26		lda $26		            lda dst_ptr
.09a4		6d 04 02	adc $0204	            adc curs_width
.09a7		85 24		sta $24		            sta src_ptr
.09a9		a5 27		lda $27		            lda dst_ptr+1
.09ab		69 00		adc #$00	            adc #0
.09ad		85 25		sta $25		            sta src_ptr+1
.09af		a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1		a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3		85 01		sta $01		            sta MMU_IO_CTRL
.09b5		a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7		b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9		91 26		sta ($26),y	            sta (dst_ptr),y
.09bb		c8		iny		            iny
.09bc		cc 04 02	cpy $0204	            cpy curs_width
.09bf		d0 f6		bne $09b7	            bne loop1
.09c1		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3		85 01		sta $01		            sta MMU_IO_CTRL
.09c5		a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7		b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9		91 26		sta ($26),y	            sta (dst_ptr),y
.09cb		c8		iny		            iny
.09cc		cc 04 02	cpy $0204	            cpy curs_width
.09cf		d0 f6		bne $09c7	            bne loop2
.09d1		a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3		85 26		sta $26		            sta dst_ptr
.09d5		a5 25		lda $25		            lda src_ptr+1
.09d7		85 27		sta $27		            sta dst_ptr+1
.09d9		18		clc		            clc                     ; Move src_ptr to the next line
.09da		a5 24		lda $24		            lda src_ptr
.09dc		6d 04 02	adc $0204	            adc curs_width
.09df		85 24		sta $24		            sta src_ptr
.09e1		a5 25		lda $25		            lda src_ptr+1
.09e3		69 00		adc #$00	            adc #0
.09e5		85 25		sta $25		            sta src_ptr+1
.09e7		e8		inx		            inx                     ; Move src line number to the next row
.09e8		ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb		d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed		a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef		85 22		sta $22		            sta cur_line
.09f1		a5 27		lda $27		            lda dst_ptr+1
.09f3		85 22		sta $22		            sta cur_line
.09f5		20 04 0a	jsr $0a04	            jsr clrline
.09f8		68		pla		            pla                     ; Restore the original I/O page
.09f9		85 01		sta $01		            sta MMU_IO_CTRL
.09fb		68		pla		            pla                     ; Restore the current line
.09fc		85 22		sta $22		            sta cur_line
.09fe		68		pla		            pla
.09ff		85 23		sta $23		            sta cur_line+1
.0a01		fa		plx		            plx
.0a02		68		pla		            pla
.0a03		60		rts		            rts
.0a04						clrline:
.0a04		48		pha		            pha
.0a05		5a		phy		            phy
.0a06		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08		48		pha		            pha
.0a09		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b		85 01		sta $01		            sta MMU_IO_CTRL
.0a0d		a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f		a9 20		lda #$20	            lda #' '
.0a11		91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13		c8		iny		            iny
.0a14		cc 04 02	cpy $0204	            cpy curs_width
.0a17		d0 f8		bne $0a11	            bne loop1
.0a19		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b		85 01		sta $01		            sta MMU_IO_CTRL
.0a1d		a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f		ad 00 02	lda $0200	            lda curs_color
.0a22		91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24		c8		iny		            iny
.0a25		cc 04 02	cpy $0204	            cpy curs_width
.0a28		d0 f8		bne $0a22	            bne loop2
.0a2a		68		pla		            pla                     ; Restore the original I/O page
.0a2b		85 01		sta $01		            sta MMU_IO_CTRL
.0a2d		7a		ply		            ply
.0a2e		68		pla		            pla
.0a2f		60		rts		            rts
.0a30						iconout:
.0a30		5a		phy		            phy
.0a31		c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33		d0 0b		bne $0a40	            bne not_cr
.0a35		9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38		ee 02 02	inc $0202	            inc curs_y
.0a3b		20 2e 09	jsr $092e	            jsr cursset
.0a3e		80 44		bra $0a84	            bra done
.0a40		c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42		d0 05		bne $0a49	            bne not_ff
.0a44		20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47		80 3b		bra $0a84	            bra done
.0a49		c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b		d0 15		bne $0a62	            bne not_bs
.0a4d		ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50		f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52		3a		dec a		            dec a                   ; No: move it back one
.0a53		8d 01 02	sta $0201	            sta curs_x
.0a56		20 2e 09	jsr $092e	            jsr cursset
.0a59						bs_leftmost:
.0a59		a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60		80 22		bra $0a84	            bra done
.0a62		85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66		48		pha		            pha
.0a67		a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69		85 01		sta $01		            sta MMU_IO_CTRL
.0a6b		a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d		ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70		91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72		a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74		85 01		sta $01		            sta MMU_IO_CTRL
.0a76		ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79		91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b		68		pla		            pla                     ; Restore the I/O page
.0a7c		85 01		sta $01		            sta MMU_IO_CTRL
.0a7e		ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81		20 2e 09	jsr $092e	            jsr cursset
.0a84		7a		ply		done:       ply
.0a85		60		rts		            rts
.0a86						iprintah:
.0a86		da		phx		            phx
.0a87		48		pha		            pha
.0a88		4a		lsr a		            lsr a
.0a89		4a		lsr a		            lsr a
.0a8a		4a		lsr a		            lsr a
.0a8b		4a		lsr a		            lsr a
.0a8c		29 0f		and #$0f	            and #$0f
.0a8e		aa		tax		            tax                     ; Convert it to an index
.0a8f		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95		68		pla		            pla
.0a96		29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98		aa		tax		            tax                     ; Convert it to an index
.0a99		bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c		20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f		fa		plx		            plx
.0aa0		60		rts		            rts
.0aa1						iprintyah:
.0aa1		48		pha		            pha
.0aa2		98		tya		            tya
.0aa3		20 12 b0	jsr $b012	            jsr printah
.0aa6		68		pla		            pla
.0aa7		20 12 b0	jsr $b012	            jsr printah
.0aaa		60		rts		            rts
>0aab		30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3		38 39 41 42 43 44 45 46
.0abb						iprints:
.0abb		48		pha		            pha
.0abc		5a		phy		            phy
.0abd		a0 00		ldy #$00	            ldy #0
.0abf		b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1		f0 06		beq $0ac9	            beq done
.0ac3		20 09 b0	jsr $b009	            jsr conout
.0ac6		c8		iny		            iny
.0ac7		d0 f6		bne $0abf	            bne loop
.0ac9		7a		ply		done:       ply
.0aca		68		pla		            pla
.0acb		60		rts		            rts
.0acc						h_nmi:
.0acc		40		rti		            rti                     ; Just return
.0acd						h_irq:
.0acd		48		pha		            pha
.0ace		a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0		48		pha		            pha
.0ad1		64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3		ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6		89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8		f0 03		beq $0add	            beq done                ; No: we're done
.0ada		20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add						done:
.0add		a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf		8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2		8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5		68		pla		            pla                     ; Restore the IO page settings
.0ae6		85 01		sta $01		            sta MMU_IO_CTRL
.0ae8		68		pla		            pla
.0ae9		40		rti		            rti                     ; Just return
>0aea		00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2		7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02		00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12		38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22		00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32		00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52		30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62		10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72		04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82		48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92		1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2		10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2		10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2		00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2		00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2		00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2		10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02		28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12		60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22		08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32		10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52		00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62		00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72		10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92		7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2		7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2		38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2		00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2		00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2		38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2		10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02		18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12		7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22		38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32		38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42		44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52		44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62		38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72		38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82		38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92		44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2		44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2		44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2		3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2		00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2		00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02		00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12		00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22		00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32		00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42		40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52		00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62		00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72		00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82		00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92		00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2		00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2		00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2		0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2		30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2		7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2		48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02		10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12		20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22		00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32		28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42		28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52		20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62		10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72		00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82		10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92		20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2		20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2		28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2		00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2		44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2		18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2		10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002		10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012		14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022		10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032		00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042		42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052		10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062		00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072		cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082		10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092		10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2		00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2		28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2		00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2		28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2		00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2		10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102		10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112		10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122		28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132		00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142		00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152		00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162		10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172		00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182		28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192		00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2		28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2		10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2		ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2		00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202		00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212		00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222		00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232		38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242		3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252		00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262		38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272		10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282		08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292		10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2		00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2		00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2		1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2		38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2		00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642						KBD_SCAN = $d642
=$d644						KBD_STAT = $d644
=$01						KBD_RDY = $01
=$01						KBD_ST_F0 = $01
=$02						KBD_ST_E0 = $02
=$80						KBD_SHIFT = $80
=$81						KBD_CTRL = $81
=$82						KBD_ALT = $82
=$83						KBD_OS = $83
=$84						KBD_CAP = $84
=$01						KBD_MOD_SHIFT = $01
=$02						KBD_MOD_CTRL = $02
=$04						KBD_MOD_ALT = $04
=$08						KBD_MOD_OS = $08
=$10						KBD_MOD_CAP = $10
=80						KBD_BUFFER_SIZE = 80
>0206						kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207						kbd_mods    .byte ?         ; The current state of the modifier keys
>0208						kbd_buffer  .fill 80        ; Keyboard buffer
>0258						kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea						initkbd:
.12ea		9c 06 02	stz $0206	            stz kbd_state
.12ed		9c 07 02	stz $0207	            stz kbd_mods
.12f0		9c 58 02	stz $0258	            stz kbd_head
.12f3		60		rts		            rts
.12f4						kbd_status:
.12f4		ad 58 02	lda $0258	            lda kbd_head
.12f7		f0 03		beq $12fc	            beq is_empty
.12f9		a9 01		lda #$01	            lda #1
.12fb		60		rts		            rts
.12fc						is_empty:
.12fc		60		rts		            rts
.12fd						kbd_enqueue:
.12fd		da		phx		            phx
.12fe		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301		e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303		b0 07		bcs $130c	            bge done
.1305		9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308		e8		inx		            inx
.1309		8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c						done:
.130c		fa		plx		            plx
.130d		60		rts		            rts
.130e						kbd_dequeue:
.130e		da		phx		            phx
.130f		ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312		f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314		ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317		48		pha		            pha                     ; Save it temporarily to the stack
.1318		a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a						loop:
.131a		bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d		9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320		e8		inx		            inx                     ; Move to the next character
.1321		ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324		d0 f4		bne $131a	            bne loop
.1326		ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329		68		pla		            pla                     ; Get the character back and return
.132a		80 02		bra $132e	            bra done
.132c						is_empty:
.132c		a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e						done:
.132e		fa		plx		            plx
.132f		60		rts		            rts
.1330						handlekbd:
.1330		ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333		29 01		and #$01	            and #KBD_RDY
.1335		d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337		ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a		f0 08		beq $1344	            beq st_0        ; If base state...
.133c		c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e		f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340		9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343						done:
.1343		60		rts		            rts
.1344						st_0:
.1344		ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347		c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349		d0 07		bne $1352	            bne not_f0
.134b		a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d		8d 06 02	sta $0206	            sta kbd_state
.1350		80 f1		bra $1343	            bra done
.1352		c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354		d0 07		bne $135d	            bne not_f0e0
.1356		a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358		8d 06 02	sta $0206	            sta kbd_state
.135b		80 e6		bra $1343	            bra done
.135d						not_f0e0:
.135d		48		pha		            pha
.135e		ad 07 02	lda $0207	            lda kbd_mods
.1361		89 10		bit #$10	            bit #KBD_MOD_CAP
.1363		d0 0b		bne $1370	            bne read_caps
.1365		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367		d0 19		bne $1382	            bne read_shift
.1369		68		pla		            pla
.136a		aa		tax		            tax
.136b		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e		80 17		bra $1387	            bra proc_ascii
.1370						read_caps:
.1370		89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372		d0 07		bne $137b	            bne read_caps_shift
.1374		68		pla		            pla
.1375		aa		tax		            tax
.1376		bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379		80 0c		bra $1387	            bra proc_ascii
.137b						read_caps_shift:
.137b		68		pla		            pla
.137c		aa		tax		            tax
.137d		bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380		80 05		bra $1387	            bra proc_ascii
.1382						read_shift:
.1382		68		pla		            pla
.1383		aa		tax		            tax
.1384		bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387						proc_ascii:
.1387		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389		f0 09		beq $1394	            beq raise_shift
.138b		c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d		f0 0f		beq $139e	            beq toggle_caps
.138f		20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392		80 af		bra $1343	            bra done
.1394						raise_shift:
.1394		ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397		09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399		8d 07 02	sta $0207	            sta kbd_mods
.139c		80 a5		bra $1343	            bra done
.139e						toggle_caps:
.139e		ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1		49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3		8d 07 02	sta $0207	            sta kbd_mods
.13a6		80 9b		bra $1343	            bra done
.13a8						st_f0:
.13a8		ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab		aa		tax		            tax
.13ac		bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af		c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1		d0 08		bne $13bb	            bne exit_f0
.13b3		ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6		29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8		8d 07 02	sta $0207	            sta kbd_mods
.13bb						exit_f0:
.13bb		9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be		80 83		bra $1343	            bra done
>13c0		00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8		00 00 00 00 00 08 60 00
>13d0		00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8		00 00 7a 73 61 77 32 00
>13e0		00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8		00 20 76 66 74 72 35 00
>13f0		00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8		00 00 6d 6a 75 37 38 00
>1400		00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408		00 2e 2f 6c 3b 70 2d 00
>1410		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418		84 80 0d 5d 00 5c 00 00
>1420		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428		00 00 00 00 00 00 00 00
>1430		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438		00 00 00 00 00 00 00 00
>1440		00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448		00 00 00 00 00 08 7e 00
>1450		00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458		00 00 5a 53 41 57 40 00
>1460		00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468		00 20 56 46 54 52 25 00
>1470		00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478		00 00 4d 4a 55 26 2a 00
>1480		00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488		00 3e 3f 4c 3a 50 5f 00
>1490		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498		84 80 0d 7d 00 7c 00 00
>14a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8		00 00 00 00 00 00 00 00
>14b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8		00 00 00 00 00 00 00 00
>14c0		00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8		00 00 00 00 00 08 60 00
>14d0		00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8		00 00 5a 53 41 57 32 00
>14e0		00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8		00 20 56 46 54 52 35 00
>14f0		00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8		00 00 4d 4a 55 37 38 00
>1500		00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508		00 2e 2f 4c 3b 50 2d 00
>1510		00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518		84 80 0d 5d 00 5c 00 00
>1520		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528		00 00 00 00 00 00 00 00
>1530		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538		00 00 00 00 00 00 00 00
>1540		00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548		00 00 00 00 00 08 7e 00
>1550		00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558		00 00 7a 73 61 77 40 00
>1560		00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568		00 20 76 66 74 72 25 00
>1570		00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578		00 00 6d 6a 75 26 2a 00
>1580		00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588		00 3e 3f 6c 3a 70 5f 00
>1590		00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598		84 80 0d 7d 00 7c 00 00
>15a0		00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8		00 00 00 00 00 00 00 00
>15b0		00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8		00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028						ip      .word ?         ; Instruction pointer
>002a						wp      .word ?         ; Word pointer
>002c						up      .word ?         ; User pointer
>002e						donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030						test    .word ?         ; Pointer to the current test name
>0032						tmp     .word ?
>0034						savex   .byte ?
>0035						counter .byte ?         ; A counter used for some code
>0036						sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0		4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8		68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5						init_user:
>15d5		6e 00				        .word $006e     ; Initial PSP (S0)
>15d7		ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9		0a 00				        .word 10        ; Initial BASE
>15db		00 00				        .word 0         ; Initial STATE
>15dd		00 00				        .word 0         ; Initial CONTEXT
>15df		00 00				        .word 0         ; Initial CURRENT
>15e1		00 00				        .word <>endcode ; Initial DP
>15e3		00 00				        .word 0         ; Initial >IN
>15e5		00 00				        .word 0         ; Initial TIB
>15e7		00 00				        .word 0         ; Initial SOURCE-ID
.15e9						init_user_end:
=0						user_s0 = 0
=2						user_r0 = 2
=4						user_base = 4
=6						user_state = 6
=8						user_context = 8
=10						user_current = 10
=12						user_dp = 12
=14						user_in = 14
=16						user_tib = 16
=18						user_source_id = 18
.15e9		a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15eb		9a		txs		        txs
.15ec		a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15ee		a9 01		lda #$01	        lda #<vstart
.15f0		85 28		sta $28		        sta ip
.15f2		a9 16		lda #$16	        lda #>vstart
.15f4		85 29		sta $29		        sta ip+1
.15f6		a9 00		lda #$00	        lda #<USERAREA
.15f8		85 2c		sta $2c		        sta up
.15fa		a9 10		lda #$10	        lda #>USERAREA
.15fc		85 2d		sta $2d		        sta up+1
.15fe		4c 23 16	jmp $1623	        jmp next
>1601		fa 33				vstart  .word xt_cold
>1603		d4 16				        .word xt_halt
.1605		6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.1608		68		pla		i_exit  pla             ; ip := pop()
.1609		85 28		sta $28		        sta ip
.160b		68		pla		        pla
.160c		85 29		sta $29		        sta ip+1
.160e		80 13		bra $1623	        bra next        ; jmp next
.1610		a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1612		48		pha		        pha
.1613		a5 28		lda $28		        lda ip
.1615		48		pha		        pha
.1616		18		clc		        clc             ; ip := wp + 3
.1617		a5 2a		lda $2a		        lda wp
.1619		69 03		adc #$03	        adc #3
.161b		85 28		sta $28		        sta ip
.161d		a5 2b		lda $2b		        lda wp+1
.161f		69 00		adc #$00	        adc #0
.1621		85 29		sta $29		        sta ip+1
.1623		a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1625		b2 28		lda ($28)	        lda (ip)
.1627		85 2a		sta $2a		        sta wp
.1629		b1 28		lda ($28),y	        lda (ip),y
.162b		85 2b		sta $2b		        sta wp+1
.162d		18		clc		        clc             ; ip := ip + 2
.162e		a5 28		lda $28		        lda ip
.1630		69 02		adc #$02	        adc #2
.1632		85 28		sta $28		        sta ip
.1634		a5 29		lda $29		        lda ip+1
.1636		69 00		adc #$00	        adc #0
.1638		85 29		sta $29		        sta ip+1
.163a		6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.163d						w_testname:
>163d		08					.byte $08
>163e		74 65 73 74 6e 61 6d 65			.text 'testname'
>1646		00 00					.word 0
.1648						xt_testname:
.1648		b5 02		lda $02,x		lda pstack+2,x
.164a		85 30		sta $30			sta test
.164c		b5 03		lda $03,x		lda pstack+3,x
.164e		85 31		sta $31			sta test+1
.1650		e8		inx			inx
.1651		e8		inx			inx
.1652		4c 23 16	jmp $1623		jmp next
.1655						w_assertx3d:
>1655		07					.byte $07
>1656		61 73 73 65 72 74 3d			.text 'assert='
>165d		3d 16					.word w_testname
.165f						xt_assertx3d:
.165f		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1661		d5 04		cmp $04,x		cmp pstack+4,x
.1663		d0 0e		bne $1673		bne fail            ; If not, fail
.1665		b5 03		lda $03,x		lda pstack+3,x
.1667		d5 05		cmp $05,x		cmp pstack+5,x
.1669		d0 08		bne $1673		bne fail
.166b		8a		txa			txa                 ; If so, clean up the stack
.166c		18		clc			clc
.166d		69 04		adc #$04		adc #4
.166f		aa		tax			tax
.1670		4c 23 16	jmp $1623		jmp next            ; And continue
.1673							fail:
.1673		a9 b0		lda #$b0		lda #<leadin        ; Print the failure message
.1675		85 24		sta $24			sta src_ptr
.1677		a9 16		lda #$16		lda #>leadin
.1679		85 25		sta $25			sta src_ptr+1
.167b		20 18 b0	jsr $b018		jsr prints
.167e		a5 30		lda $30			lda test            ; Print the name of the test
.1680		85 24		sta $24			sta src_ptr
.1682		a5 31		lda $31			lda test+1
.1684		85 25		sta $25			sta src_ptr+1
.1686		20 18 b0	jsr $b018		jsr prints
.1689		a9 c3		lda #$c3		lda #<actual        ; Print the "Actual" label
.168b		85 24		sta $24			sta src_ptr
.168d		a9 16		lda #$16		lda #>actual
.168f		85 25		sta $25			sta src_ptr+1
.1691		20 18 b0	jsr $b018		jsr prints
.1694		b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.1696		b5 04		lda $04,x		lda pstack+4,x
.1698		20 15 b0	jsr $b015		jsr printyah
.169b		a9 b7		lda #$b7		lda #<expected      ; Print the "Expected" label
.169d		85 24		sta $24			sta src_ptr
.169f		a9 16		lda #$16		lda #>expected
.16a1		85 25		sta $25			sta src_ptr+1
.16a3		20 18 b0	jsr $b018		jsr prints
.16a6		b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16a8		b5 02		lda $02,x		lda pstack+2,x
.16aa		20 15 b0	jsr $b015		jsr printyah
.16ad							lock:
.16ad		ea		nop			nop                 ; Lock up
.16ae		80 fd		bra $16ad		bra lock
.16b0							leadin:
>16b0		46 41 49 4c 3a 20 00			.null "FAIL: "
.16b7							expected:
>16b7		20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16bf		44 3a 20 00
.16c3							actual:
>16c3		20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16cb		20 00
.16cd						w_halt:
>16cd		04					.byte $04
>16ce		68 61 6c 74				.text 'halt'
>16d2		55 16					.word w_assertx3d
.16d4						xt_halt:
.16d4		a9 10		lda #$10		lda #<haltmsg
.16d6		85 24		sta $24			sta src_ptr
.16d8		a9 17		lda #$17		lda #>haltmsg
.16da		85 25		sta $25			sta src_ptr+1
.16dc		20 18 b0	jsr $b018		jsr prints
.16df		a9 23		lda #$23		lda #<stackmsg
.16e1		85 24		sta $24			sta src_ptr
.16e3		a9 17		lda #$17		lda #>stackmsg
.16e5		85 25		sta $25			sta src_ptr+1
.16e7		20 18 b0	jsr $b018		jsr prints
.16ea		8a		txa			txa
.16eb		20 12 b0	jsr $b012		jsr printah
.16ee		a9 2b		lda #$2b		lda #<stackcont
.16f0		85 24		sta $24			sta src_ptr
.16f2		a9 17		lda #$17		lda #>stackcont
.16f4		85 25		sta $25			sta src_ptr+1
.16f6		20 18 b0	jsr $b018		jsr prints
.16f9							loop:
.16f9		e0 6e		cpx #$6e		cpx #$6e
.16fb		f0 10		beq $170d		beq lock
.16fd		b4 03		ldy $03,x		ldy pstack+3,x
.16ff		b5 02		lda $02,x		lda pstack+2,x
.1701		e8		inx			inx
.1702		e8		inx			inx
.1703		20 15 b0	jsr $b015		jsr printyah
.1706		a9 20		lda #$20		lda #' '
.1708		20 09 b0	jsr $b009		jsr conout
.170b		80 ec		bra $16f9		bra loop
.170d							lock:
.170d		ea		nop			nop
.170e		80 fd		bra $170d		bra lock
>1710		0d 53 79 73 74 65 6d 20			haltmsg:    .null 13,"System halted...",13
>1718		68 61 6c 74 65 64 2e 2e 2e 0d 00
>1723		53 74 61 63 6b 20 5b 00			stackmsg:   .null "Stack ["
>172b		5d 20 00				stackcont:  .null "] "
.172e						w_emit:
>172e		04					.byte $04
>172f		65 6d 69 74				.text 'emit'
>1733		cd 16					.word w_halt
.1735						xt_emit:
.1735		b5 02		lda $02,x		lda pstack+2,x
.1737		da		phx			phx
.1738		20 09 b0	jsr $b009		jsr conout
.173b		fa		plx			plx
.173c		e8		inx			inx
.173d		e8		inx			inx
.173e		4c 23 16	jmp $1623		jmp next
.1741						w_keyx3f:
>1741		04					.byte $04
>1742		6b 65 79 3f				.text 'key?'
>1746		2e 17					.word w_emit
.1748						xt_keyx3f:
.1748		20 0c b0	jsr $b00c		jsr constat
.174b		29 01		and #$01		and #1
.174d		f0 06		beq $1755		beq waiting
.174f		74 00		stz $00,x		stz pstack,x
.1751		74 01		stz $01,x		stz pstack+1,x
.1753		80 06		bra $175b		bra done
.1755							waiting:
.1755		a9 ff		lda #$ff		lda #$ff
.1757		95 00		sta $00,x		sta pstack,x
.1759		95 01		sta $01,x		sta pstack+1,x
.175b							done:
.175b		ca		dex			dex
.175c		ca		dex			dex
.175d		4c 23 16	jmp $1623		jmp next
.1760						w_key:
>1760		03					.byte $03
>1761		6b 65 79				.text 'key'
>1764		41 17					.word w_keyx3f
.1766						xt_key:
.1766		da		phx			phx
.1767							wait:
.1767		20 0f b0	jsr $b00f		jsr conin
.176a		c9 00		cmp #$00		cmp #0
.176c		f0 f9		beq $1767		beq wait
.176e		fa		plx			plx
.176f		95 00		sta $00,x		sta pstack,x
.1771		74 01		stz $01,x		stz pstack+1,x
.1773		ca		dex			dex
.1774		ca		dex			dex
.1775		4c 23 16	jmp $1623		jmp next
.1778						w_cr:
>1778		02					.byte $02
>1779		63 72					.text 'cr'
>177b		60 17					.word w_key
.177d						xt_cr:
.177d		da		phx			phx
.177e		a9 0d		lda #$0d		lda #$0d
.1780		20 09 b0	jsr $b009		jsr conout
.1783		fa		plx			plx
.1784		4c 23 16	jmp $1623		jmp next
.1787						w_0:
>1787		01					.byte $01
>1788		30					.text '0'
>1789		78 17					.word w_cr
.178b						xt_0:
.178b		74 01		stz $01,x		stz pstack+1,x
.178d		74 00		stz $00,x		stz pstack,x
.178f		ca		dex			dex
.1790		ca		dex			dex
.1791		4c 23 16	jmp $1623		jmp next
.1794						w_1:
>1794		01					.byte $01
>1795		31					.text '1'
>1796		87 17					.word w_0
.1798						xt_1:
.1798		74 01		stz $01,x		stz pstack+1,x
.179a		a9 01		lda #$01		lda #1
.179c		95 00		sta $00,x		sta pstack,x
.179e		ca		dex			dex
.179f		ca		dex			dex
.17a0		4c 23 16	jmp $1623		jmp next
.17a3						w_2:
>17a3		01					.byte $01
>17a4		32					.text '2'
>17a5		94 17					.word w_1
.17a7						xt_2:
.17a7		74 01		stz $01,x		stz pstack+1,x
.17a9		a9 02		lda #$02		lda #2
.17ab		95 00		sta $00,x		sta pstack,x
.17ad		ca		dex			dex
.17ae		ca		dex			dex
.17af		4c 23 16	jmp $1623		jmp next
.17b2						w_x2d1:
>17b2		02					.byte $02
>17b3		2d 31					.text '-1'
>17b5		a3 17					.word w_2
.17b7						xt_x2d1:
.17b7		a9 ff		lda #$ff		lda #$ff
.17b9		95 01		sta $01,x		sta pstack+1,x
.17bb		95 00		sta $00,x		sta pstack,x
.17bd		ca		dex			dex
.17be		ca		dex			dex
.17bf		4c 23 16	jmp $1623		jmp next
.17c2						w_x2d2:
>17c2		02					.byte $02
>17c3		2d 32					.text '-2'
>17c5		b2 17					.word w_x2d1
.17c7						xt_x2d2:
.17c7		a9 fe		lda #$fe		lda #$fe
.17c9		95 01		sta $01,x		sta pstack+1,x
.17cb		95 00		sta $00,x		sta pstack,x
.17cd		ca		dex			dex
.17ce		ca		dex			dex
.17cf		4c 23 16	jmp $1623		jmp next
.17d2						w_x28literalx29:
>17d2		09					.byte $09
>17d3		28 6c 69 74 65 72 61 6c			.text '(literal)'
>17db		29
>17dc		c2 17					.word w_x2d2
.17de						xt_x28literalx29:
.17de		a0 01		ldy #$01		ldy #1
.17e0		b2 28		lda ($28)		lda (ip)
.17e2		95 00		sta $00,x		sta pstack,x
.17e4		b1 28		lda ($28),y		lda (ip),y
.17e6		95 01		sta $01,x		sta pstack+1,x
.17e8		ca		dex			dex
.17e9		ca		dex			dex
.17ea		18		clc			clc
.17eb		a5 28		lda $28			lda ip
.17ed		69 02		adc #$02		adc #2
.17ef		85 28		sta $28			sta ip
.17f1		a5 29		lda $29			lda ip+1
.17f3		69 00		adc #$00		adc #0
.17f5		85 29		sta $29			sta ip+1
.17f7		4c 23 16	jmp $1623		jmp next
.17fa						w_depth:
>17fa		05					.byte $05
>17fb		64 65 70 74 68				.text 'depth'
>1800		d2 17					.word w_x28literalx29
.1802						xt_depth:
.1802		86 32		stx $32			stx tmp
.1804		38		sec			sec
.1805		a9 6e		lda #$6e		lda #$6e
.1807		e5 32		sbc $32			sbc tmp
.1809		4a		lsr a			lsr a
.180a		74 01		stz $01,x		stz pstack+1,x
.180c		95 00		sta $00,x		sta pstack,x
.180e		ca		dex			dex
.180f		ca		dex			dex
.1810		4c 23 16	jmp $1623		jmp next
.1813						w_unittest:
>1813		08					.byte $08
>1814		75 6e 69 74 74 65 73 74			.text 'unittest'
>181c							.fill 8
>1824		fa 17					.word w_depth
.1826						xt_unittest:
.1826		4c 10 16	jmp $1610		jmp i_enter
>1829		de 17					.word xt_x28literalx29
>182b		31 18					.word l_2
>182d		d2 2d					.word xt_x28branchx29
>182f		3d 18					.word l_3
.1831						l_2:
>1831		64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>1839		3e 20 30 00
.183d						l_3:
>183d		48 16					.word xt_testname
>183f		02 18					.word xt_depth
>1841		8b 17					.word xt_0
>1843		5f 16					.word xt_assertx3d
>1845		de 17					.word xt_x28literalx29
>1847		4d 18					.word l_4
>1849		d2 2d					.word xt_x28branchx29
>184b		5d 18					.word l_5
.184d						l_4:
>184d		30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>1855		2d 2d 3e 20 30 20 31 00
.185d						l_5:
>185d		48 16					.word xt_testname
>185f		8b 17					.word xt_0
>1861		02 18					.word xt_depth
>1863		98 17					.word xt_1
>1865		5f 16					.word xt_assertx3d
>1867		8b 17					.word xt_0
>1869		5f 16					.word xt_assertx3d
>186b		de 17					.word xt_x28literalx29
>186d		73 18					.word l_6
>186f		d2 2d					.word xt_x28branchx29
>1871		8b 18					.word l_7
.1873						l_6:
>1873		31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>187b		70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.188b						l_7:
>188b		48 16					.word xt_testname
>188d		98 17					.word xt_1
>188f		98 17					.word xt_1
>1891		98 17					.word xt_1
>1893		02 18					.word xt_depth
>1895		de 17					.word xt_x28literalx29
>1897		03 00					.word 3
>1899		5f 16					.word xt_assertx3d
>189b		98 17					.word xt_1
>189d		5f 16					.word xt_assertx3d
>189f		98 17					.word xt_1
>18a1		5f 16					.word xt_assertx3d
>18a3		98 17					.word xt_1
>18a5		5f 16					.word xt_assertx3d
>18a7		de 17					.word xt_x28literalx29
>18a9		af 18					.word l_8
>18ab		d2 2d					.word xt_x28branchx29
>18ad		be 18					.word l_9
.18af						l_8:
>18af		31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>18b7		20 2d 2d 3e 20 31 00
.18be						l_9:
>18be		48 16					.word xt_testname
>18c0		98 17					.word xt_1
>18c2		a7 17					.word xt_2
>18c4		0c 28					.word xt_drop
>18c6		98 17					.word xt_1
>18c8		5f 16					.word xt_assertx3d
>18ca		de 17					.word xt_x28literalx29
>18cc		d2 18					.word l_10
>18ce		d2 2d					.word xt_x28branchx29
>18d0		e5 18					.word l_11
.18d2						l_10:
>18d2		31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>18da		6f 70 20 2d 2d 3e 20 31 20 32 00
.18e5						l_11:
>18e5		48 16					.word xt_testname
>18e7		98 17					.word xt_1
>18e9		a7 17					.word xt_2
>18eb		de 17					.word xt_x28literalx29
>18ed		03 00					.word 3
>18ef		0c 28					.word xt_drop
>18f1		a7 17					.word xt_2
>18f3		5f 16					.word xt_assertx3d
>18f5		98 17					.word xt_1
>18f7		5f 16					.word xt_assertx3d
>18f9		de 17					.word xt_x28literalx29
>18fb		01 19					.word l_12
>18fd		d2 2d					.word xt_x28branchx29
>18ff		0f 19					.word l_13
.1901						l_12:
>1901		31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>1909		3e 20 31 20 31 00
.190f						l_13:
>190f		48 16					.word xt_testname
>1911		98 17					.word xt_1
>1913		17 28					.word xt_dup
>1915		98 17					.word xt_1
>1917		5f 16					.word xt_assertx3d
>1919		98 17					.word xt_1
>191b		5f 16					.word xt_assertx3d
>191d		de 17					.word xt_x28literalx29
>191f		25 19					.word l_14
>1921		d2 2d					.word xt_x28branchx29
>1923		37 19					.word l_15
.1925						l_14:
>1925		31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>192d		2d 2d 3e 20 31 20 32 20 32 00
.1937						l_15:
>1937		48 16					.word xt_testname
>1939		98 17					.word xt_1
>193b		a7 17					.word xt_2
>193d		17 28					.word xt_dup
>193f		a7 17					.word xt_2
>1941		5f 16					.word xt_assertx3d
>1943		a7 17					.word xt_2
>1945		5f 16					.word xt_assertx3d
>1947		98 17					.word xt_1
>1949		5f 16					.word xt_assertx3d
>194b		de 17					.word xt_x28literalx29
>194d		53 19					.word l_16
>194f		d2 2d					.word xt_x28branchx29
>1951		68 19					.word l_17
.1953						l_16:
>1953		31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>195b		61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1968						l_17:
>1968		48 16					.word xt_testname
>196a		98 17					.word xt_1
>196c		a7 17					.word xt_2
>196e		de 17					.word xt_x28literalx29
>1970		03 00					.word 3
>1972		2b 28					.word xt_swap
>1974		a7 17					.word xt_2
>1976		5f 16					.word xt_assertx3d
>1978		de 17					.word xt_x28literalx29
>197a		03 00					.word 3
>197c		5f 16					.word xt_assertx3d
>197e		98 17					.word xt_1
>1980		5f 16					.word xt_assertx3d
>1982		de 17					.word xt_x28literalx29
>1984		8a 19					.word l_18
>1986		d2 2d					.word xt_x28branchx29
>1988		9d 19					.word l_19
.198a						l_18:
>198a		31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>1992		20 2d 2d 3e 20 31 20 32 20 31 00
.199d						l_19:
>199d		48 16					.word xt_testname
>199f		98 17					.word xt_1
>19a1		a7 17					.word xt_2
>19a3		45 28					.word xt_over
>19a5		98 17					.word xt_1
>19a7		5f 16					.word xt_assertx3d
>19a9		a7 17					.word xt_2
>19ab		5f 16					.word xt_assertx3d
>19ad		98 17					.word xt_1
>19af		5f 16					.word xt_assertx3d
>19b1		de 17					.word xt_x28literalx29
>19b3		b9 19					.word l_20
>19b5		d2 2d					.word xt_x28branchx29
>19b7		d9 19					.word l_21
.19b9						l_20:
>19b9		35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>19c1		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>19d1		3e 20 35 35 35 35 68 00
.19d9						l_21:
>19d9		48 16					.word xt_testname
>19db		de 17					.word xt_x28literalx29
>19dd		55 55					.word 21845
>19df		de 17					.word xt_x28literalx29
>19e1		04 00					.word 4
>19e3		93 28					.word xt_x21
>19e5		de 17					.word xt_x28literalx29
>19e7		04 00					.word 4
>19e9		b0 28					.word xt_x40
>19eb		de 17					.word xt_x28literalx29
>19ed		55 55					.word 21845
>19ef		5f 16					.word xt_assertx3d
>19f1		de 17					.word xt_x28literalx29
>19f3		f9 19					.word l_22
>19f5		d2 2d					.word xt_x28branchx29
>19f7		19 1a					.word l_23
.19f9						l_22:
>19f9		61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1a01		30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1a11		3e 20 61 61 61 61 68 00
.1a19						l_23:
>1a19		48 16					.word xt_testname
>1a1b		de 17					.word xt_x28literalx29
>1a1d		aa aa					.word 43690
>1a1f		de 17					.word xt_x28literalx29
>1a21		04 00					.word 4
>1a23		93 28					.word xt_x21
>1a25		de 17					.word xt_x28literalx29
>1a27		04 00					.word 4
>1a29		b0 28					.word xt_x40
>1a2b		de 17					.word xt_x28literalx29
>1a2d		aa aa					.word 43690
>1a2f		5f 16					.word xt_assertx3d
>1a31		de 17					.word xt_x28literalx29
>1a33		39 1a					.word l_24
>1a35		d2 2d					.word xt_x28branchx29
>1a37		57 1a					.word l_25
.1a39						l_24:
>1a39		35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1a41		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1a51		3e 20 35 35 68 00
.1a57						l_25:
>1a57		48 16					.word xt_testname
>1a59		de 17					.word xt_x28literalx29
>1a5b		55 00					.word 85
>1a5d		de 17					.word xt_x28literalx29
>1a5f		03 00					.word 3
>1a61		ca 28					.word xt_cx21
>1a63		de 17					.word xt_x28literalx29
>1a65		03 00					.word 3
>1a67		da 28					.word xt_cx40
>1a69		de 17					.word xt_x28literalx29
>1a6b		55 00					.word 85
>1a6d		5f 16					.word xt_assertx3d
>1a6f		de 17					.word xt_x28literalx29
>1a71		77 1a					.word l_26
>1a73		d2 2d					.word xt_x28branchx29
>1a75		95 1a					.word l_27
.1a77						l_26:
>1a77		61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1a7f		68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1a8f		3e 20 61 61 68 00
.1a95						l_27:
>1a95		48 16					.word xt_testname
>1a97		de 17					.word xt_x28literalx29
>1a99		aa 00					.word 170
>1a9b		de 17					.word xt_x28literalx29
>1a9d		03 00					.word 3
>1a9f		ca 28					.word xt_cx21
>1aa1		de 17					.word xt_x28literalx29
>1aa3		03 00					.word 3
>1aa5		da 28					.word xt_cx40
>1aa7		de 17					.word xt_x28literalx29
>1aa9		aa 00					.word 170
>1aab		5f 16					.word xt_assertx3d
>1aad		de 17					.word xt_x28literalx29
>1aaf		b5 1a					.word l_28
>1ab1		d2 2d					.word xt_x28branchx29
>1ab3		c1 1a					.word l_29
.1ab5						l_28:
>1ab5		31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1abd		3e 20 31 00
.1ac1						l_29:
>1ac1		48 16					.word xt_testname
>1ac3		98 17					.word xt_1
>1ac5		8b 17					.word xt_0
>1ac7		3d 2a					.word xt_x2b
>1ac9		98 17					.word xt_1
>1acb		5f 16					.word xt_assertx3d
>1acd		de 17					.word xt_x28literalx29
>1acf		d5 1a					.word l_30
>1ad1		d2 2d					.word xt_x28branchx29
>1ad3		e1 1a					.word l_31
.1ad5						l_30:
>1ad5		31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1add		3e 20 32 00
.1ae1						l_31:
>1ae1		48 16					.word xt_testname
>1ae3		98 17					.word xt_1
>1ae5		98 17					.word xt_1
>1ae7		3d 2a					.word xt_x2b
>1ae9		a7 17					.word xt_2
>1aeb		5f 16					.word xt_assertx3d
>1aed		de 17					.word xt_x28literalx29
>1aef		f5 1a					.word l_32
>1af1		d2 2d					.word xt_x28branchx29
>1af3		03 1b					.word l_33
.1af5						l_32:
>1af5		33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1afd		2d 3e 20 31 33 00
.1b03						l_33:
>1b03		48 16					.word xt_testname
>1b05		de 17					.word xt_x28literalx29
>1b07		03 00					.word 3
>1b09		de 17					.word xt_x28literalx29
>1b0b		0a 00					.word 10
>1b0d		3d 2a					.word xt_x2b
>1b0f		de 17					.word xt_x28literalx29
>1b11		0d 00					.word 13
>1b13		5f 16					.word xt_assertx3d
>1b15		de 17					.word xt_x28literalx29
>1b17		1d 1b					.word l_34
>1b19		d2 2d					.word xt_x28branchx29
>1b1b		2d 1b					.word l_35
.1b1d						l_34:
>1b1d		66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1b25		2b 20 2d 2d 3e 20 34 00
.1b2d						l_35:
>1b2d		48 16					.word xt_testname
>1b2f		de 17					.word xt_x28literalx29
>1b31		ff ff					.word 65535
>1b33		de 17					.word xt_x28literalx29
>1b35		05 00					.word 5
>1b37		3d 2a					.word xt_x2b
>1b39		de 17					.word xt_x28literalx29
>1b3b		04 00					.word 4
>1b3d		5f 16					.word xt_assertx3d
>1b3f		de 17					.word xt_x28literalx29
>1b41		47 1b					.word l_36
>1b43		d2 2d					.word xt_x28branchx29
>1b45		53 1b					.word l_37
.1b47						l_36:
>1b47		34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1b4f		3e 20 31 00
.1b53						l_37:
>1b53		48 16					.word xt_testname
>1b55		de 17					.word xt_x28literalx29
>1b57		04 00					.word 4
>1b59		de 17					.word xt_x28literalx29
>1b5b		03 00					.word 3
>1b5d		53 2a					.word xt_x2d
>1b5f		98 17					.word xt_1
>1b61		5f 16					.word xt_assertx3d
>1b63		de 17					.word xt_x28literalx29
>1b65		6b 1b					.word l_38
>1b67		d2 2d					.word xt_x28branchx29
>1b69		7b 1b					.word l_39
.1b6b						l_38:
>1b6b		33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1b73		3e 20 66 66 66 66 68 00
.1b7b						l_39:
>1b7b		48 16					.word xt_testname
>1b7d		de 17					.word xt_x28literalx29
>1b7f		03 00					.word 3
>1b81		de 17					.word xt_x28literalx29
>1b83		04 00					.word 4
>1b85		53 2a					.word xt_x2d
>1b87		de 17					.word xt_x28literalx29
>1b89		ff ff					.word 65535
>1b8b		5f 16					.word xt_assertx3d
>1b8d		de 17					.word xt_x28literalx29
>1b8f		95 1b					.word l_40
>1b91		d2 2d					.word xt_x28branchx29
>1b93		a2 1b					.word l_41
.1b95						l_40:
>1b95		31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1b9d		2d 3e 20 35 00
.1ba2						l_41:
>1ba2		48 16					.word xt_testname
>1ba4		de 17					.word xt_x28literalx29
>1ba6		0a 00					.word 10
>1ba8		de 17					.word xt_x28literalx29
>1baa		05 00					.word 5
>1bac		53 2a					.word xt_x2d
>1bae		de 17					.word xt_x28literalx29
>1bb0		05 00					.word 5
>1bb2		5f 16					.word xt_assertx3d
>1bb4		de 17					.word xt_x28literalx29
>1bb6		bc 1b					.word l_42
>1bb8		d2 2d					.word xt_x28branchx29
>1bba		cd 1b					.word l_43
.1bbc						l_42:
>1bbc		31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>1bc4		20 2d 2d 3e 20 31 20 30 00
.1bcd						l_43:
>1bcd		48 16					.word xt_testname
>1bcf		98 17					.word xt_1
>1bd1		de 17					.word xt_x28literalx29
>1bd3		03 00					.word 3
>1bd5		df 2a					.word xt_x2fmod
>1bd7		8b 17					.word xt_0
>1bd9		5f 16					.word xt_assertx3d
>1bdb		98 17					.word xt_1
>1bdd		5f 16					.word xt_assertx3d
>1bdf		de 17					.word xt_x28literalx29
>1be1		e7 1b					.word l_44
>1be3		d2 2d					.word xt_x28branchx29
>1be5		f8 1b					.word l_45
.1be7						l_44:
>1be7		32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1bef		20 2d 2d 3e 20 32 20 30 00
.1bf8						l_45:
>1bf8		48 16					.word xt_testname
>1bfa		a7 17					.word xt_2
>1bfc		de 17					.word xt_x28literalx29
>1bfe		03 00					.word 3
>1c00		df 2a					.word xt_x2fmod
>1c02		8b 17					.word xt_0
>1c04		5f 16					.word xt_assertx3d
>1c06		a7 17					.word xt_2
>1c08		5f 16					.word xt_assertx3d
>1c0a		de 17					.word xt_x28literalx29
>1c0c		12 1c					.word l_46
>1c0e		d2 2d					.word xt_x28branchx29
>1c10		23 1c					.word l_47
.1c12						l_46:
>1c12		33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1c1a		20 2d 2d 3e 20 30 20 31 00
.1c23						l_47:
>1c23		48 16					.word xt_testname
>1c25		de 17					.word xt_x28literalx29
>1c27		03 00					.word 3
>1c29		de 17					.word xt_x28literalx29
>1c2b		03 00					.word 3
>1c2d		df 2a					.word xt_x2fmod
>1c2f		98 17					.word xt_1
>1c31		5f 16					.word xt_assertx3d
>1c33		8b 17					.word xt_0
>1c35		5f 16					.word xt_assertx3d
>1c37		de 17					.word xt_x28literalx29
>1c39		3f 1c					.word l_48
>1c3b		d2 2d					.word xt_x28branchx29
>1c3d		50 1c					.word l_49
.1c3f						l_48:
>1c3f		34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>1c47		20 2d 2d 3e 20 31 20 31 00
.1c50						l_49:
>1c50		48 16					.word xt_testname
>1c52		de 17					.word xt_x28literalx29
>1c54		04 00					.word 4
>1c56		de 17					.word xt_x28literalx29
>1c58		03 00					.word 3
>1c5a		df 2a					.word xt_x2fmod
>1c5c		98 17					.word xt_1
>1c5e		5f 16					.word xt_assertx3d
>1c60		98 17					.word xt_1
>1c62		5f 16					.word xt_assertx3d
>1c64		de 17					.word xt_x28literalx29
>1c66		6c 1c					.word l_50
>1c68		d2 2d					.word xt_x28branchx29
>1c6a		7d 1c					.word l_51
.1c6c						l_50:
>1c6c		36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>1c74		20 2d 2d 3e 20 30 20 32 00
.1c7d						l_51:
>1c7d		48 16					.word xt_testname
>1c7f		de 17					.word xt_x28literalx29
>1c81		06 00					.word 6
>1c83		de 17					.word xt_x28literalx29
>1c85		03 00					.word 3
>1c87		df 2a					.word xt_x2fmod
>1c89		a7 17					.word xt_2
>1c8b		5f 16					.word xt_assertx3d
>1c8d		8b 17					.word xt_0
>1c8f		5f 16					.word xt_assertx3d
>1c91		de 17					.word xt_x28literalx29
>1c93		99 1c					.word l_52
>1c95		d2 2d					.word xt_x28branchx29
>1c97		a4 1c					.word l_53
.1c99						l_52:
>1c99		31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1ca1		20 32 00
.1ca4						l_53:
>1ca4		48 16					.word xt_testname
>1ca6		98 17					.word xt_1
>1ca8		5c 2b					.word xt_1x2b
>1caa		a7 17					.word xt_2
>1cac		5f 16					.word xt_assertx3d
>1cae		de 17					.word xt_x28literalx29
>1cb0		b6 1c					.word l_54
>1cb2		d2 2d					.word xt_x28branchx29
>1cb4		c1 1c					.word l_55
.1cb6						l_54:
>1cb6		30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1cbe		20 31 00
.1cc1						l_55:
>1cc1		48 16					.word xt_testname
>1cc3		8b 17					.word xt_0
>1cc5		5c 2b					.word xt_1x2b
>1cc7		98 17					.word xt_1
>1cc9		5f 16					.word xt_assertx3d
>1ccb		de 17					.word xt_x28literalx29
>1ccd		d3 1c					.word l_56
>1ccf		d2 2d					.word xt_x28branchx29
>1cd1		e0 1c					.word l_57
.1cd3						l_56:
>1cd3		32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1cdb		3e 20 32 31 00
.1ce0						l_57:
>1ce0		48 16					.word xt_testname
>1ce2		de 17					.word xt_x28literalx29
>1ce4		14 00					.word 20
>1ce6		5c 2b					.word xt_1x2b
>1ce8		de 17					.word xt_x28literalx29
>1cea		15 00					.word 21
>1cec		5f 16					.word xt_assertx3d
>1cee		de 17					.word xt_x28literalx29
>1cf0		f6 1c					.word l_58
>1cf2		d2 2d					.word xt_x28branchx29
>1cf4		05 1d					.word l_59
.1cf6						l_58:
>1cf6		66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1cfe		20 2d 2d 3e 20 30 00
.1d05						l_59:
>1d05		48 16					.word xt_testname
>1d07		de 17					.word xt_x28literalx29
>1d09		ff ff					.word 65535
>1d0b		5c 2b					.word xt_1x2b
>1d0d		8b 17					.word xt_0
>1d0f		5f 16					.word xt_assertx3d
>1d11		de 17					.word xt_x28literalx29
>1d13		19 1d					.word l_60
>1d15		d2 2d					.word xt_x28branchx29
>1d17		24 1d					.word l_61
.1d19						l_60:
>1d19		31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1d21		20 33 00
.1d24						l_61:
>1d24		48 16					.word xt_testname
>1d26		98 17					.word xt_1
>1d28		6a 2b					.word xt_2x2b
>1d2a		de 17					.word xt_x28literalx29
>1d2c		03 00					.word 3
>1d2e		5f 16					.word xt_assertx3d
>1d30		de 17					.word xt_x28literalx29
>1d32		38 1d					.word l_62
>1d34		d2 2d					.word xt_x28branchx29
>1d36		43 1d					.word l_63
.1d38						l_62:
>1d38		30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1d40		20 32 00
.1d43						l_63:
>1d43		48 16					.word xt_testname
>1d45		8b 17					.word xt_0
>1d47		6a 2b					.word xt_2x2b
>1d49		a7 17					.word xt_2
>1d4b		5f 16					.word xt_assertx3d
>1d4d		de 17					.word xt_x28literalx29
>1d4f		55 1d					.word l_64
>1d51		d2 2d					.word xt_x28branchx29
>1d53		62 1d					.word l_65
.1d55						l_64:
>1d55		32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>1d5d		3e 20 32 32 00
.1d62						l_65:
>1d62		48 16					.word xt_testname
>1d64		de 17					.word xt_x28literalx29
>1d66		14 00					.word 20
>1d68		6a 2b					.word xt_2x2b
>1d6a		de 17					.word xt_x28literalx29
>1d6c		16 00					.word 22
>1d6e		5f 16					.word xt_assertx3d
>1d70		de 17					.word xt_x28literalx29
>1d72		78 1d					.word l_66
>1d74		d2 2d					.word xt_x28branchx29
>1d76		87 1d					.word l_67
.1d78						l_66:
>1d78		66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>1d80		20 2d 2d 3e 20 30 00
.1d87						l_67:
>1d87		48 16					.word xt_testname
>1d89		de 17					.word xt_x28literalx29
>1d8b		fe ff					.word 65534
>1d8d		6a 2b					.word xt_2x2b
>1d8f		8b 17					.word xt_0
>1d91		5f 16					.word xt_assertx3d
>1d93		de 17					.word xt_x28literalx29
>1d95		9b 1d					.word l_68
>1d97		d2 2d					.word xt_x28branchx29
>1d99		a6 1d					.word l_69
.1d9b						l_68:
>1d9b		31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>1da3		20 30 00
.1da6						l_69:
>1da6		48 16					.word xt_testname
>1da8		98 17					.word xt_1
>1daa		7f 2b					.word xt_1x2d
>1dac		8b 17					.word xt_0
>1dae		5f 16					.word xt_assertx3d
>1db0		de 17					.word xt_x28literalx29
>1db2		b8 1d					.word l_70
>1db4		d2 2d					.word xt_x28branchx29
>1db6		c7 1d					.word l_71
.1db8						l_70:
>1db8		30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1dc0		20 66 66 66 66 68 00
.1dc7						l_71:
>1dc7		48 16					.word xt_testname
>1dc9		8b 17					.word xt_0
>1dcb		7f 2b					.word xt_1x2d
>1dcd		de 17					.word xt_x28literalx29
>1dcf		ff ff					.word 65535
>1dd1		5f 16					.word xt_assertx3d
>1dd3		de 17					.word xt_x28literalx29
>1dd5		db 1d					.word l_72
>1dd7		d2 2d					.word xt_x28branchx29
>1dd9		e8 1d					.word l_73
.1ddb						l_72:
>1ddb		32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1de3		3e 20 31 39 00
.1de8						l_73:
>1de8		48 16					.word xt_testname
>1dea		de 17					.word xt_x28literalx29
>1dec		14 00					.word 20
>1dee		7f 2b					.word xt_1x2d
>1df0		de 17					.word xt_x28literalx29
>1df2		13 00					.word 19
>1df4		5f 16					.word xt_assertx3d
>1df6		de 17					.word xt_x28literalx29
>1df8		fe 1d					.word l_74
>1dfa		d2 2d					.word xt_x28branchx29
>1dfc		11 1e					.word l_75
.1dfe						l_74:
>1dfe		66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1e06		20 2d 2d 3e 20 66 66 66 65 68 00
.1e11						l_75:
>1e11		48 16					.word xt_testname
>1e13		de 17					.word xt_x28literalx29
>1e15		ff ff					.word 65535
>1e17		7f 2b					.word xt_1x2d
>1e19		de 17					.word xt_x28literalx29
>1e1b		fe ff					.word 65534
>1e1d		5f 16					.word xt_assertx3d
>1e1f		de 17					.word xt_x28literalx29
>1e21		27 1e					.word l_76
>1e23		d2 2d					.word xt_x28branchx29
>1e25		36 1e					.word l_77
.1e27						l_76:
>1e27		31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1e2f		20 66 66 66 66 68 00
.1e36						l_77:
>1e36		48 16					.word xt_testname
>1e38		98 17					.word xt_1
>1e3a		8f 2b					.word xt_2x2d
>1e3c		de 17					.word xt_x28literalx29
>1e3e		ff ff					.word 65535
>1e40		5f 16					.word xt_assertx3d
>1e42		de 17					.word xt_x28literalx29
>1e44		4a 1e					.word l_78
>1e46		d2 2d					.word xt_x28branchx29
>1e48		59 1e					.word l_79
.1e4a						l_78:
>1e4a		30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1e52		20 66 66 66 65 68 00
.1e59						l_79:
>1e59		48 16					.word xt_testname
>1e5b		8b 17					.word xt_0
>1e5d		8f 2b					.word xt_2x2d
>1e5f		de 17					.word xt_x28literalx29
>1e61		fe ff					.word 65534
>1e63		5f 16					.word xt_assertx3d
>1e65		de 17					.word xt_x28literalx29
>1e67		6d 1e					.word l_80
>1e69		d2 2d					.word xt_x28branchx29
>1e6b		7a 1e					.word l_81
.1e6d						l_80:
>1e6d		32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1e75		3e 20 31 38 00
.1e7a						l_81:
>1e7a		48 16					.word xt_testname
>1e7c		de 17					.word xt_x28literalx29
>1e7e		14 00					.word 20
>1e80		8f 2b					.word xt_2x2d
>1e82		de 17					.word xt_x28literalx29
>1e84		12 00					.word 18
>1e86		5f 16					.word xt_assertx3d
>1e88		de 17					.word xt_x28literalx29
>1e8a		90 1e					.word l_82
>1e8c		d2 2d					.word xt_x28branchx29
>1e8e		a3 1e					.word l_83
.1e90						l_82:
>1e90		66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1e98		20 2d 2d 3e 20 66 66 66 64 68 00
.1ea3						l_83:
>1ea3		48 16					.word xt_testname
>1ea5		de 17					.word xt_x28literalx29
>1ea7		ff ff					.word 65535
>1ea9		8f 2b					.word xt_2x2d
>1eab		de 17					.word xt_x28literalx29
>1ead		fd ff					.word 65533
>1eaf		5f 16					.word xt_assertx3d
>1eb1		de 17					.word xt_x28literalx29
>1eb3		b9 1e					.word l_84
>1eb5		d2 2d					.word xt_x28branchx29
>1eb7		d3 1e					.word l_85
.1eb9						l_84:
>1eb9		30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1ec1		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1ed1		68 00
.1ed3						l_85:
>1ed3		48 16					.word xt_testname
>1ed5		de 17					.word xt_x28literalx29
>1ed7		00 00					.word 0
>1ed9		de 17					.word xt_x28literalx29
>1edb		00 00					.word 0
>1edd		a5 2b					.word xt_and
>1edf		de 17					.word xt_x28literalx29
>1ee1		00 00					.word 0
>1ee3		5f 16					.word xt_assertx3d
>1ee5		de 17					.word xt_x28literalx29
>1ee7		ed 1e					.word l_86
>1ee9		d2 2d					.word xt_x28branchx29
>1eeb		07 1f					.word l_87
.1eed						l_86:
>1eed		30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1ef5		66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f05		68 00
.1f07						l_87:
>1f07		48 16					.word xt_testname
>1f09		de 17					.word xt_x28literalx29
>1f0b		00 00					.word 0
>1f0d		de 17					.word xt_x28literalx29
>1f0f		ff ff					.word 65535
>1f11		a5 2b					.word xt_and
>1f13		de 17					.word xt_x28literalx29
>1f15		00 00					.word 0
>1f17		5f 16					.word xt_assertx3d
>1f19		de 17					.word xt_x28literalx29
>1f1b		21 1f					.word l_88
>1f1d		d2 2d					.word xt_x28branchx29
>1f1f		3b 1f					.word l_89
.1f21						l_88:
>1f21		66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>1f29		30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1f39		68 00
.1f3b						l_89:
>1f3b		48 16					.word xt_testname
>1f3d		de 17					.word xt_x28literalx29
>1f3f		ff ff					.word 65535
>1f41		de 17					.word xt_x28literalx29
>1f43		00 00					.word 0
>1f45		a5 2b					.word xt_and
>1f47		de 17					.word xt_x28literalx29
>1f49		00 00					.word 0
>1f4b		5f 16					.word xt_assertx3d
>1f4d		de 17					.word xt_x28literalx29
>1f4f		55 1f					.word l_90
>1f51		d2 2d					.word xt_x28branchx29
>1f53		6f 1f					.word l_91
.1f55						l_90:
>1f55		66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>1f5d		66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>1f6d		68 00
.1f6f						l_91:
>1f6f		48 16					.word xt_testname
>1f71		de 17					.word xt_x28literalx29
>1f73		ff ff					.word 65535
>1f75		de 17					.word xt_x28literalx29
>1f77		ff ff					.word 65535
>1f79		a5 2b					.word xt_and
>1f7b		de 17					.word xt_x28literalx29
>1f7d		ff ff					.word 65535
>1f7f		5f 16					.word xt_assertx3d
>1f81		de 17					.word xt_x28literalx29
>1f83		89 1f					.word l_92
>1f85		d2 2d					.word xt_x28branchx29
>1f87		a2 1f					.word l_93
.1f89						l_92:
>1f89		30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>1f91		30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>1fa1		00
.1fa2						l_93:
>1fa2		48 16					.word xt_testname
>1fa4		de 17					.word xt_x28literalx29
>1fa6		00 00					.word 0
>1fa8		de 17					.word xt_x28literalx29
>1faa		00 00					.word 0
>1fac		bb 2b					.word xt_or
>1fae		de 17					.word xt_x28literalx29
>1fb0		00 00					.word 0
>1fb2		5f 16					.word xt_assertx3d
>1fb4		de 17					.word xt_x28literalx29
>1fb6		bc 1f					.word l_94
>1fb8		d2 2d					.word xt_x28branchx29
>1fba		d5 1f					.word l_95
.1fbc						l_94:
>1fbc		30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>1fc4		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>1fd4		00
.1fd5						l_95:
>1fd5		48 16					.word xt_testname
>1fd7		de 17					.word xt_x28literalx29
>1fd9		00 00					.word 0
>1fdb		de 17					.word xt_x28literalx29
>1fdd		ff ff					.word 65535
>1fdf		bb 2b					.word xt_or
>1fe1		de 17					.word xt_x28literalx29
>1fe3		ff ff					.word 65535
>1fe5		5f 16					.word xt_assertx3d
>1fe7		de 17					.word xt_x28literalx29
>1fe9		ef 1f					.word l_96
>1feb		d2 2d					.word xt_x28branchx29
>1fed		08 20					.word l_97
.1fef						l_96:
>1fef		66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>1ff7		30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>2007		00
.2008						l_97:
>2008		48 16					.word xt_testname
>200a		de 17					.word xt_x28literalx29
>200c		ff ff					.word 65535
>200e		de 17					.word xt_x28literalx29
>2010		00 00					.word 0
>2012		bb 2b					.word xt_or
>2014		de 17					.word xt_x28literalx29
>2016		ff ff					.word 65535
>2018		5f 16					.word xt_assertx3d
>201a		de 17					.word xt_x28literalx29
>201c		22 20					.word l_98
>201e		d2 2d					.word xt_x28branchx29
>2020		3b 20					.word l_99
.2022						l_98:
>2022		66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>202a		66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>203a		00
.203b						l_99:
>203b		48 16					.word xt_testname
>203d		de 17					.word xt_x28literalx29
>203f		ff ff					.word 65535
>2041		de 17					.word xt_x28literalx29
>2043		ff ff					.word 65535
>2045		bb 2b					.word xt_or
>2047		de 17					.word xt_x28literalx29
>2049		ff ff					.word 65535
>204b		5f 16					.word xt_assertx3d
>204d		de 17					.word xt_x28literalx29
>204f		55 20					.word l_100
>2051		d2 2d					.word xt_x28branchx29
>2053		6f 20					.word l_101
.2055						l_100:
>2055		30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>205d		30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>206d		68 00
.206f						l_101:
>206f		48 16					.word xt_testname
>2071		de 17					.word xt_x28literalx29
>2073		00 00					.word 0
>2075		de 17					.word xt_x28literalx29
>2077		00 00					.word 0
>2079		d2 2b					.word xt_xor
>207b		de 17					.word xt_x28literalx29
>207d		00 00					.word 0
>207f		5f 16					.word xt_assertx3d
>2081		de 17					.word xt_x28literalx29
>2083		89 20					.word l_102
>2085		d2 2d					.word xt_x28branchx29
>2087		a3 20					.word l_103
.2089						l_102:
>2089		30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>2091		66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>20a1		68 00
.20a3						l_103:
>20a3		48 16					.word xt_testname
>20a5		de 17					.word xt_x28literalx29
>20a7		00 00					.word 0
>20a9		de 17					.word xt_x28literalx29
>20ab		ff ff					.word 65535
>20ad		d2 2b					.word xt_xor
>20af		de 17					.word xt_x28literalx29
>20b1		ff ff					.word 65535
>20b3		5f 16					.word xt_assertx3d
>20b5		de 17					.word xt_x28literalx29
>20b7		bd 20					.word l_104
>20b9		d2 2d					.word xt_x28branchx29
>20bb		d7 20					.word l_105
.20bd						l_104:
>20bd		66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>20c5		30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>20d5		68 00
.20d7						l_105:
>20d7		48 16					.word xt_testname
>20d9		de 17					.word xt_x28literalx29
>20db		ff ff					.word 65535
>20dd		de 17					.word xt_x28literalx29
>20df		00 00					.word 0
>20e1		d2 2b					.word xt_xor
>20e3		de 17					.word xt_x28literalx29
>20e5		ff ff					.word 65535
>20e7		5f 16					.word xt_assertx3d
>20e9		de 17					.word xt_x28literalx29
>20eb		f1 20					.word l_106
>20ed		d2 2d					.word xt_x28branchx29
>20ef		0b 21					.word l_107
.20f1						l_106:
>20f1		66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>20f9		66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2109		68 00
.210b						l_107:
>210b		48 16					.word xt_testname
>210d		de 17					.word xt_x28literalx29
>210f		ff ff					.word 65535
>2111		de 17					.word xt_x28literalx29
>2113		ff ff					.word 65535
>2115		d2 2b					.word xt_xor
>2117		de 17					.word xt_x28literalx29
>2119		00 00					.word 0
>211b		5f 16					.word xt_assertx3d
>211d		de 17					.word xt_x28literalx29
>211f		25 21					.word l_108
>2121		d2 2d					.word xt_x28branchx29
>2123		39 21					.word l_109
.2125						l_108:
>2125		30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>212d		74 20 2d 2d 3e 20 66 66 66 66 68 00
.2139						l_109:
>2139		48 16					.word xt_testname
>213b		de 17					.word xt_x28literalx29
>213d		00 00					.word 0
>213f		e9 2b					.word xt_not
>2141		de 17					.word xt_x28literalx29
>2143		ff ff					.word 65535
>2145		5f 16					.word xt_assertx3d
>2147		de 17					.word xt_x28literalx29
>2149		4f 21					.word l_110
>214b		d2 2d					.word xt_x28branchx29
>214d		63 21					.word l_111
.214f						l_110:
>214f		66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>2157		74 20 2d 2d 3e 20 30 30 30 30 68 00
.2163						l_111:
>2163		48 16					.word xt_testname
>2165		de 17					.word xt_x28literalx29
>2167		ff ff					.word 65535
>2169		e9 2b					.word xt_not
>216b		de 17					.word xt_x28literalx29
>216d		00 00					.word 0
>216f		5f 16					.word xt_assertx3d
>2171		de 17					.word xt_x28literalx29
>2173		79 21					.word l_112
>2175		d2 2d					.word xt_x28branchx29
>2177		88 21					.word l_113
.2179						l_112:
>2179		30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>2181		20 30 30 30 30 68 00
.2188						l_113:
>2188		48 16					.word xt_testname
>218a		8b 17					.word xt_0
>218c		fd 2b					.word xt_0x3c
>218e		de 17					.word xt_x28literalx29
>2190		00 00					.word 0
>2192		5f 16					.word xt_assertx3d
>2194		de 17					.word xt_x28literalx29
>2196		9c 21					.word l_114
>2198		d2 2d					.word xt_x28branchx29
>219a		ab 21					.word l_115
.219c						l_114:
>219c		33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>21a4		20 30 30 30 30 68 00
.21ab						l_115:
>21ab		48 16					.word xt_testname
>21ad		de 17					.word xt_x28literalx29
>21af		03 00					.word 3
>21b1		fd 2b					.word xt_0x3c
>21b3		de 17					.word xt_x28literalx29
>21b5		00 00					.word 0
>21b7		5f 16					.word xt_assertx3d
>21b9		de 17					.word xt_x28literalx29
>21bb		c1 21					.word l_116
>21bd		d2 2d					.word xt_x28branchx29
>21bf		d4 21					.word l_117
.21c1						l_116:
>21c1		66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>21c9		20 2d 2d 3e 20 66 66 66 66 68 00
.21d4						l_117:
>21d4		48 16					.word xt_testname
>21d6		de 17					.word xt_x28literalx29
>21d8		ff ff					.word 65535
>21da		fd 2b					.word xt_0x3c
>21dc		de 17					.word xt_x28literalx29
>21de		ff ff					.word 65535
>21e0		5f 16					.word xt_assertx3d
>21e2		de 17					.word xt_x28literalx29
>21e4		ea 21					.word l_118
>21e6		d2 2d					.word xt_x28branchx29
>21e8		f9 21					.word l_119
.21ea						l_118:
>21ea		30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>21f2		20 66 66 66 66 68 00
.21f9						l_119:
>21f9		48 16					.word xt_testname
>21fb		8b 17					.word xt_0
>21fd		16 2c					.word xt_0x3d
>21ff		de 17					.word xt_x28literalx29
>2201		ff ff					.word 65535
>2203		5f 16					.word xt_assertx3d
>2205		de 17					.word xt_x28literalx29
>2207		0d 22					.word l_120
>2209		d2 2d					.word xt_x28branchx29
>220b		1c 22					.word l_121
.220d						l_120:
>220d		33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>2215		20 30 30 30 30 68 00
.221c						l_121:
>221c		48 16					.word xt_testname
>221e		de 17					.word xt_x28literalx29
>2220		03 00					.word 3
>2222		16 2c					.word xt_0x3d
>2224		de 17					.word xt_x28literalx29
>2226		00 00					.word 0
>2228		5f 16					.word xt_assertx3d
>222a		de 17					.word xt_x28literalx29
>222c		32 22					.word l_122
>222e		d2 2d					.word xt_x28branchx29
>2230		45 22					.word l_123
.2232						l_122:
>2232		66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>223a		20 2d 2d 3e 20 30 30 30 30 68 00
.2245						l_123:
>2245		48 16					.word xt_testname
>2247		de 17					.word xt_x28literalx29
>2249		ff ff					.word 65535
>224b		16 2c					.word xt_0x3d
>224d		de 17					.word xt_x28literalx29
>224f		00 00					.word 0
>2251		5f 16					.word xt_assertx3d
>2253		de 17					.word xt_x28literalx29
>2255		5b 22					.word l_124
>2257		d2 2d					.word xt_x28branchx29
>2259		6a 22					.word l_125
.225b						l_124:
>225b		30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>2263		20 30 30 30 30 68 00
.226a						l_125:
>226a		48 16					.word xt_testname
>226c		8b 17					.word xt_0
>226e		33 2c					.word xt_0x3e
>2270		de 17					.word xt_x28literalx29
>2272		00 00					.word 0
>2274		5f 16					.word xt_assertx3d
>2276		de 17					.word xt_x28literalx29
>2278		7e 22					.word l_126
>227a		d2 2d					.word xt_x28branchx29
>227c		8d 22					.word l_127
.227e						l_126:
>227e		33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>2286		20 66 66 66 66 68 00
.228d						l_127:
>228d		48 16					.word xt_testname
>228f		de 17					.word xt_x28literalx29
>2291		03 00					.word 3
>2293		33 2c					.word xt_0x3e
>2295		de 17					.word xt_x28literalx29
>2297		ff ff					.word 65535
>2299		5f 16					.word xt_assertx3d
>229b		de 17					.word xt_x28literalx29
>229d		a3 22					.word l_128
>229f		d2 2d					.word xt_x28branchx29
>22a1		b6 22					.word l_129
.22a3						l_128:
>22a3		66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>22ab		20 2d 2d 3e 20 30 30 30 30 68 00
.22b6						l_129:
>22b6		48 16					.word xt_testname
>22b8		de 17					.word xt_x28literalx29
>22ba		ff ff					.word 65535
>22bc		33 2c					.word xt_0x3e
>22be		de 17					.word xt_x28literalx29
>22c0		00 00					.word 0
>22c2		5f 16					.word xt_assertx3d
>22c4		de 17					.word xt_x28literalx29
>22c6		cc 22					.word l_130
>22c8		d2 2d					.word xt_x28branchx29
>22ca		e3 22					.word l_131
.22cc						l_130:
>22cc		63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>22d4		2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.22e3						l_131:
>22e3		48 16					.word xt_testname
>22e5		9c 2c					.word xt_cells
>22e7		a7 17					.word xt_2
>22e9		53 2a					.word xt_x2d
>22eb		16 2c					.word xt_0x3d
>22ed		de 17					.word xt_x28literalx29
>22ef		ff ff					.word 65535
>22f1		5f 16					.word xt_assertx3d
>22f3		de 17					.word xt_x28literalx29
>22f5		fb 22					.word l_132
>22f7		d2 2d					.word xt_x28branchx29
>22f9		10 23					.word l_133
.22fb						l_132:
>22fb		62 6c 20 33 32 20 2d 20			.null "bl 32 - 0= --> ffffh"
>2303		30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2310						l_133:
>2310		48 16					.word xt_testname
>2312		b4 2c					.word xt_bl
>2314		de 17					.word xt_x28literalx29
>2316		20 00					.word 32
>2318		53 2a					.word xt_x2d
>231a		16 2c					.word xt_0x3d
>231c		de 17					.word xt_x28literalx29
>231e		ff ff					.word 65535
>2320		5f 16					.word xt_assertx3d
>2322		de 17					.word xt_x28literalx29
>2324		2a 23					.word l_134
>2326		d2 2d					.word xt_x28branchx29
>2328		3c 23					.word l_135
.232a						l_134:
>232a		27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>2332		75 74 65 20 2d 2d 3e 20 31 00
.233c						l_135:
>233c		48 16					.word xt_testname
>233e		de 17					.word xt_x28literalx29
>2340		98 17					.word xt_1
>2342		91 2f					.word xt_execute
>2344		98 17					.word xt_1
>2346		5f 16					.word xt_assertx3d
>2348		de 17					.word xt_x28literalx29
>234a		50 23					.word l_136
>234c		d2 2d					.word xt_x28branchx29
>234e		66 23					.word l_137
.2350						l_136:
>2350		31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>2358		65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.2366						l_137:
>2366		48 16					.word xt_testname
>2368		98 17					.word xt_1
>236a		a7 17					.word xt_2
>236c		de 17					.word xt_x28literalx29
>236e		3d 2a					.word xt_x2b
>2370		91 2f					.word xt_execute
>2372		de 17					.word xt_x28literalx29
>2374		03 00					.word 3
>2376		5f 16					.word xt_assertx3d
>2378		de 17					.word xt_x28literalx29
>237a		80 23					.word l_139
>237c		d2 2d					.word xt_x28branchx29
>237e		8d 23					.word l_140
.2380						l_139:
>2380		30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>2388		2d 3e 20 30 00
.238d						l_140:
>238d		48 16					.word xt_testname
>238f		8b 17					.word xt_0
>2391		ec 2f					.word xt_x3fdup
>2393		8b 17					.word xt_0
>2395		5f 16					.word xt_assertx3d
>2397		de 17					.word xt_x28literalx29
>2399		9f 23					.word l_141
>239b		d2 2d					.word xt_x28branchx29
>239d		ae 23					.word l_142
.239f						l_141:
>239f		31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>23a7		2d 3e 20 31 20 31 00
.23ae						l_142:
>23ae		48 16					.word xt_testname
>23b0		98 17					.word xt_1
>23b2		ec 2f					.word xt_x3fdup
>23b4		98 17					.word xt_1
>23b6		5f 16					.word xt_assertx3d
>23b8		98 17					.word xt_1
>23ba		5f 16					.word xt_assertx3d
>23bc		de 17					.word xt_x28literalx29
>23be		c4 23					.word l_143
>23c0		d2 2d					.word xt_x28branchx29
>23c2		d4 23					.word l_144
.23c4						l_143:
>23c4		31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>23cc		3e 20 66 66 66 66 68 00
.23d4						l_144:
>23d4		48 16					.word xt_testname
>23d6		98 17					.word xt_1
>23d8		a7 17					.word xt_2
>23da		0c 30					.word xt_x3c
>23dc		de 17					.word xt_x28literalx29
>23de		ff ff					.word 65535
>23e0		5f 16					.word xt_assertx3d
>23e2		de 17					.word xt_x28literalx29
>23e4		ea 23					.word l_145
>23e6		d2 2d					.word xt_x28branchx29
>23e8		fa 23					.word l_146
.23ea						l_145:
>23ea		32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>23f2		3e 20 30 30 30 30 68 00
.23fa						l_146:
>23fa		48 16					.word xt_testname
>23fc		a7 17					.word xt_2
>23fe		98 17					.word xt_1
>2400		0c 30					.word xt_x3c
>2402		de 17					.word xt_x28literalx29
>2404		00 00					.word 0
>2406		5f 16					.word xt_assertx3d
>2408		de 17					.word xt_x28literalx29
>240a		10 24					.word l_147
>240c		d2 2d					.word xt_x28branchx29
>240e		24 24					.word l_148
.2410						l_147:
>2410		30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>2418		3c 20 2d 2d 3e 20 30 30 30 30 68 00
.2424						l_148:
>2424		48 16					.word xt_testname
>2426		8b 17					.word xt_0
>2428		de 17					.word xt_x28literalx29
>242a		ff ff					.word 65535
>242c		0c 30					.word xt_x3c
>242e		de 17					.word xt_x28literalx29
>2430		00 00					.word 0
>2432		5f 16					.word xt_assertx3d
>2434		de 17					.word xt_x28literalx29
>2436		3c 24					.word l_149
>2438		d2 2d					.word xt_x28branchx29
>243a		50 24					.word l_150
.243c						l_149:
>243c		66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>2444		3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2450						l_150:
>2450		48 16					.word xt_testname
>2452		de 17					.word xt_x28literalx29
>2454		ff ff					.word 65535
>2456		8b 17					.word xt_0
>2458		0c 30					.word xt_x3c
>245a		de 17					.word xt_x28literalx29
>245c		ff ff					.word 65535
>245e		5f 16					.word xt_assertx3d
>2460		de 17					.word xt_x28literalx29
>2462		68 24					.word l_151
>2464		d2 2d					.word xt_x28branchx29
>2466		78 24					.word l_152
.2468						l_151:
>2468		31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2470		3e 20 30 30 30 30 68 00
.2478						l_152:
>2478		48 16					.word xt_testname
>247a		98 17					.word xt_1
>247c		a7 17					.word xt_2
>247e		28 30					.word xt_x3e
>2480		de 17					.word xt_x28literalx29
>2482		00 00					.word 0
>2484		5f 16					.word xt_assertx3d
>2486		de 17					.word xt_x28literalx29
>2488		8e 24					.word l_153
>248a		d2 2d					.word xt_x28branchx29
>248c		9e 24					.word l_154
.248e						l_153:
>248e		32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>2496		3e 20 66 66 66 66 68 00
.249e						l_154:
>249e		48 16					.word xt_testname
>24a0		a7 17					.word xt_2
>24a2		98 17					.word xt_1
>24a4		28 30					.word xt_x3e
>24a6		de 17					.word xt_x28literalx29
>24a8		ff ff					.word 65535
>24aa		5f 16					.word xt_assertx3d
>24ac		de 17					.word xt_x28literalx29
>24ae		b4 24					.word l_155
>24b0		d2 2d					.word xt_x28branchx29
>24b2		c8 24					.word l_156
.24b4						l_155:
>24b4		30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>24bc		3e 20 2d 2d 3e 20 66 66 66 66 68 00
.24c8						l_156:
>24c8		48 16					.word xt_testname
>24ca		8b 17					.word xt_0
>24cc		de 17					.word xt_x28literalx29
>24ce		ff ff					.word 65535
>24d0		28 30					.word xt_x3e
>24d2		de 17					.word xt_x28literalx29
>24d4		ff ff					.word 65535
>24d6		5f 16					.word xt_assertx3d
>24d8		de 17					.word xt_x28literalx29
>24da		e0 24					.word l_157
>24dc		d2 2d					.word xt_x28branchx29
>24de		f4 24					.word l_158
.24e0						l_157:
>24e0		66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>24e8		3e 20 2d 2d 3e 20 30 30 30 30 68 00
.24f4						l_158:
>24f4		48 16					.word xt_testname
>24f6		de 17					.word xt_x28literalx29
>24f8		ff ff					.word 65535
>24fa		8b 17					.word xt_0
>24fc		28 30					.word xt_x3e
>24fe		de 17					.word xt_x28literalx29
>2500		00 00					.word 0
>2502		5f 16					.word xt_assertx3d
>2504		de 17					.word xt_x28literalx29
>2506		0c 25					.word l_159
>2508		d2 2d					.word xt_x28branchx29
>250a		1c 25					.word l_160
.250c						l_159:
>250c		31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>2514		3e 20 30 30 30 30 68 00
.251c						l_160:
>251c		48 16					.word xt_testname
>251e		98 17					.word xt_1
>2520		8b 17					.word xt_0
>2522		44 30					.word xt_x3d
>2524		de 17					.word xt_x28literalx29
>2526		00 00					.word 0
>2528		5f 16					.word xt_assertx3d
>252a		de 17					.word xt_x28literalx29
>252c		32 25					.word l_161
>252e		d2 2d					.word xt_x28branchx29
>2530		42 25					.word l_162
.2532						l_161:
>2532		31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>253a		3e 20 66 66 66 66 68 00
.2542						l_162:
>2542		48 16					.word xt_testname
>2544		98 17					.word xt_1
>2546		98 17					.word xt_1
>2548		44 30					.word xt_x3d
>254a		de 17					.word xt_x28literalx29
>254c		ff ff					.word 65535
>254e		5f 16					.word xt_assertx3d
>2550		de 17					.word xt_x28literalx29
>2552		58 25					.word l_163
>2554		d2 2d					.word xt_x28branchx29
>2556		6c 25					.word l_164
.2558						l_163:
>2558		66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2560		3d 20 2d 2d 3e 20 30 30 30 30 68 00
.256c						l_164:
>256c		48 16					.word xt_testname
>256e		de 17					.word xt_x28literalx29
>2570		ff ff					.word 65535
>2572		8b 17					.word xt_0
>2574		44 30					.word xt_x3d
>2576		de 17					.word xt_x28literalx29
>2578		00 00					.word 0
>257a		5f 16					.word xt_assertx3d
>257c		de 17					.word xt_x28literalx29
>257e		84 25					.word l_165
>2580		d2 2d					.word xt_x28branchx29
>2582		9c 25					.word l_166
.2584						l_165:
>2584		66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>258c		66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.259c						l_166:
>259c		48 16					.word xt_testname
>259e		de 17					.word xt_x28literalx29
>25a0		ff ff					.word 65535
>25a2		de 17					.word xt_x28literalx29
>25a4		ff ff					.word 65535
>25a6		44 30					.word xt_x3d
>25a8		de 17					.word xt_x28literalx29
>25aa		ff ff					.word 65535
>25ac		5f 16					.word xt_assertx3d
>25ae		de 17					.word xt_x28literalx29
>25b0		b6 25					.word l_167
>25b2		d2 2d					.word xt_x28branchx29
>25b4		c6 25					.word l_168
.25b6						l_167:
>25b6		30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>25be		3e 20 66 66 66 66 68 00
.25c6						l_168:
>25c6		48 16					.word xt_testname
>25c8		8b 17					.word xt_0
>25ca		8b 17					.word xt_0
>25cc		44 30					.word xt_x3d
>25ce		de 17					.word xt_x28literalx29
>25d0		ff ff					.word 65535
>25d2		5f 16					.word xt_assertx3d
>25d4		de 17					.word xt_x28literalx29
>25d6		dc 25					.word l_169
>25d8		d2 2d					.word xt_x28branchx29
>25da		e8 25					.word l_170
.25dc						l_169:
>25dc		36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>25e4		3e 20 32 00
.25e8						l_170:
>25e8		48 16					.word xt_testname
>25ea		de 17					.word xt_x28literalx29
>25ec		06 00					.word 6
>25ee		de 17					.word xt_x28literalx29
>25f0		03 00					.word 3
>25f2		60 30					.word xt_x2f
>25f4		a7 17					.word xt_2
>25f6		5f 16					.word xt_assertx3d
>25f8		de 17					.word xt_x28literalx29
>25fa		00 26					.word l_171
>25fc		d2 2d					.word xt_x28branchx29
>25fe		0d 26					.word l_172
.2600						l_171:
>2600		31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>2608		2d 3e 20 33 00
.260d						l_172:
>260d		48 16					.word xt_testname
>260f		de 17					.word xt_x28literalx29
>2611		0a 00					.word 10
>2613		de 17					.word xt_x28literalx29
>2615		03 00					.word 3
>2617		60 30					.word xt_x2f
>2619		de 17					.word xt_x28literalx29
>261b		03 00					.word 3
>261d		5f 16					.word xt_assertx3d
>261f		de 17					.word xt_x28literalx29
>2621		27 26					.word l_173
>2623		d2 2d					.word xt_x28branchx29
>2625		35 26					.word l_174
.2627						l_173:
>2627		36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>262f		2d 2d 3e 20 30 00
.2635						l_174:
>2635		48 16					.word xt_testname
>2637		de 17					.word xt_x28literalx29
>2639		06 00					.word 6
>263b		de 17					.word xt_x28literalx29
>263d		03 00					.word 3
>263f		7e 30					.word xt_mod
>2641		8b 17					.word xt_0
>2643		5f 16					.word xt_assertx3d
>2645		de 17					.word xt_x28literalx29
>2647		4d 26					.word l_175
>2649		d2 2d					.word xt_x28branchx29
>264b		5c 26					.word l_176
.264d						l_175:
>264d		31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>2655		20 2d 2d 3e 20 31 00
.265c						l_176:
>265c		48 16					.word xt_testname
>265e		de 17					.word xt_x28literalx29
>2660		0a 00					.word 10
>2662		de 17					.word xt_x28literalx29
>2664		03 00					.word 3
>2666		7e 30					.word xt_mod
>2668		98 17					.word xt_1
>266a		5f 16					.word xt_assertx3d
>266c		de 17					.word xt_x28literalx29
>266e		74 26					.word l_180
>2670		d2 2d					.word xt_x28branchx29
>2672		82 26					.word l_181
.2674						l_180:
>2674		31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>267c		2d 2d 3e 20 32 00
.2682						l_181:
>2682		48 16					.word xt_testname
>2684		98 17					.word xt_1
>2686		a7 17					.word xt_2
>2688		c0 30					.word xt_max
>268a		a7 17					.word xt_2
>268c		5f 16					.word xt_assertx3d
>268e		de 17					.word xt_x28literalx29
>2690		96 26					.word l_182
>2692		d2 2d					.word xt_x28branchx29
>2694		a4 26					.word l_183
.2696						l_182:
>2696		33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>269e		2d 2d 3e 20 33 00
.26a4						l_183:
>26a4		48 16					.word xt_testname
>26a6		de 17					.word xt_x28literalx29
>26a8		03 00					.word 3
>26aa		8b 17					.word xt_0
>26ac		c0 30					.word xt_max
>26ae		de 17					.word xt_x28literalx29
>26b0		03 00					.word 3
>26b2		5f 16					.word xt_assertx3d
>26b4		de 17					.word xt_x28literalx29
>26b6		bc 26					.word l_184
>26b8		d2 2d					.word xt_x28branchx29
>26ba		d6 26					.word l_185
.26bc						l_184:
>26bc		66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>26c4		66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>26d4		68 00
.26d6						l_185:
>26d6		48 16					.word xt_testname
>26d8		de 17					.word xt_x28literalx29
>26da		fe ff					.word 65534
>26dc		de 17					.word xt_x28literalx29
>26de		ff ff					.word 65535
>26e0		c0 30					.word xt_max
>26e2		de 17					.word xt_x28literalx29
>26e4		ff ff					.word 65535
>26e6		5f 16					.word xt_assertx3d
>26e8		de 17					.word xt_x28literalx29
>26ea		f0 26					.word l_188
>26ec		d2 2d					.word xt_x28branchx29
>26ee		fe 26					.word l_189
.26f0						l_188:
>26f0		31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>26f8		2d 2d 3e 20 31 00
.26fe						l_189:
>26fe		48 16					.word xt_testname
>2700		98 17					.word xt_1
>2702		a7 17					.word xt_2
>2704		ec 30					.word xt_min
>2706		98 17					.word xt_1
>2708		5f 16					.word xt_assertx3d
>270a		de 17					.word xt_x28literalx29
>270c		12 27					.word l_190
>270e		d2 2d					.word xt_x28branchx29
>2710		20 27					.word l_191
.2712						l_190:
>2712		33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>271a		2d 2d 3e 20 30 00
.2720						l_191:
>2720		48 16					.word xt_testname
>2722		de 17					.word xt_x28literalx29
>2724		03 00					.word 3
>2726		8b 17					.word xt_0
>2728		ec 30					.word xt_min
>272a		8b 17					.word xt_0
>272c		5f 16					.word xt_assertx3d
>272e		de 17					.word xt_x28literalx29
>2730		36 27					.word l_192
>2732		d2 2d					.word xt_x28branchx29
>2734		50 27					.word l_193
.2736						l_192:
>2736		66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>273e		66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>274e		68 00
.2750						l_193:
>2750		48 16					.word xt_testname
>2752		de 17					.word xt_x28literalx29
>2754		fe ff					.word 65534
>2756		de 17					.word xt_x28literalx29
>2758		ff ff					.word 65535
>275a		ec 30					.word xt_min
>275c		de 17					.word xt_x28literalx29
>275e		fe ff					.word 65534
>2760		5f 16					.word xt_assertx3d
>2762		de 17					.word xt_x28literalx29
>2764		6a 27					.word l_194
>2766		d2 2d					.word xt_x28branchx29
>2768		7e 27					.word l_195
.276a						l_194:
>276a		31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>2772		74 20 2d 2d 3e 20 32 20 33 20 31 00
.277e						l_195:
>277e		48 16					.word xt_testname
>2780		98 17					.word xt_1
>2782		a7 17					.word xt_2
>2784		de 17					.word xt_x28literalx29
>2786		03 00					.word 3
>2788		18 31					.word xt_rot
>278a		98 17					.word xt_1
>278c		5f 16					.word xt_assertx3d
>278e		de 17					.word xt_x28literalx29
>2790		03 00					.word 3
>2792		5f 16					.word xt_assertx3d
>2794		a7 17					.word xt_2
>2796		5f 16					.word xt_assertx3d
>2798		de 17					.word xt_x28literalx29
>279a		a0 27					.word l_196
>279c		d2 2d					.word xt_x28branchx29
>279e		b5 27					.word l_197
.27a0						l_196:
>27a0		31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>27a8		20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.27b5						l_197:
>27b5		48 16					.word xt_testname
>27b7		98 17					.word xt_1
>27b9		a7 17					.word xt_2
>27bb		38 31					.word xt_2dup
>27bd		a7 17					.word xt_2
>27bf		5f 16					.word xt_assertx3d
>27c1		98 17					.word xt_1
>27c3		5f 16					.word xt_assertx3d
>27c5		a7 17					.word xt_2
>27c7		5f 16					.word xt_assertx3d
>27c9		98 17					.word xt_1
>27cb		5f 16					.word xt_assertx3d
>27cd		de 17					.word xt_x28literalx29
>27cf		d5 27					.word l_198
>27d1		d2 2d					.word xt_x28branchx29
>27d3		eb 27					.word l_199
.27d5						l_198:
>27d5		31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>27dd		32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.27eb						l_199:
>27eb		48 16					.word xt_testname
>27ed		98 17					.word xt_1
>27ef		a7 17					.word xt_2
>27f1		de 17					.word xt_x28literalx29
>27f3		03 00					.word 3
>27f5		de 17					.word xt_x28literalx29
>27f7		04 00					.word 4
>27f9		54 31					.word xt_2drop
>27fb		a7 17					.word xt_2
>27fd		5f 16					.word xt_assertx3d
>27ff		98 17					.word xt_1
>2801		5f 16					.word xt_assertx3d
>2803		08 16					.word i_exit
.2805						w_drop:
>2805		04					.byte $04
>2806		64 72 6f 70				.text 'drop'
>280a		13 18					.word w_unittest
.280c						xt_drop:
.280c		e8		inx			inx
.280d		e8		inx			inx
.280e		4c 23 16	jmp $1623		jmp next
.2811						w_dup:
>2811		03					.byte $03
>2812		64 75 70				.text 'dup'
>2815		05 28					.word w_drop
.2817						xt_dup:
.2817		b5 02		lda $02,x		lda pstack+2,x
.2819		95 00		sta $00,x		sta pstack,x
.281b		b5 03		lda $03,x		lda pstack+3,x
.281d		95 01		sta $01,x		sta pstack+1,x
.281f		ca		dex			dex
.2820		ca		dex			dex
.2821		4c 23 16	jmp $1623		jmp next
.2824						w_swap:
>2824		04					.byte $04
>2825		73 77 61 70				.text 'swap'
>2829		11 28					.word w_dup
.282b						xt_swap:
.282b		b5 02		lda $02,x		lda pstack+2,x
.282d		b4 04		ldy $04,x		ldy pstack+4,x
.282f		94 02		sty $02,x		sty pstack+2,x
.2831		95 04		sta $04,x		sta pstack+4,x
.2833		b5 03		lda $03,x		lda pstack+3,x
.2835		b4 05		ldy $05,x		ldy pstack+5,x
.2837		94 03		sty $03,x		sty pstack+3,x
.2839		95 05		sta $05,x		sta pstack+5,x
.283b		4c 23 16	jmp $1623		jmp next
.283e						w_over:
>283e		04					.byte $04
>283f		6f 76 65 72				.text 'over'
>2843		24 28					.word w_swap
.2845						xt_over:
.2845		b5 04		lda $04,x		lda pstack+4,x
.2847		95 00		sta $00,x		sta pstack,x
.2849		b5 05		lda $05,x		lda pstack+5,x
.284b		95 01		sta $01,x		sta pstack+1,x
.284d		ca		dex			dex
.284e		ca		dex			dex
.284f		4c 23 16	jmp $1623		jmp next
.2852						w_x3er:
>2852		02					.byte $02
>2853		3e 72					.text '>r'
>2855		3e 28					.word w_over
.2857						xt_x3er:
.2857		b5 03		lda $03,x		lda pstack+3,x
.2859		48		pha			pha
.285a		b5 02		lda $02,x		lda pstack+2,x
.285c		48		pha			pha
.285d		e8		inx			inx
.285e		e8		inx			inx
.285f		4c 23 16	jmp $1623		jmp next
.2862						w_rx3e:
>2862		02					.byte $02
>2863		72 3e					.text 'r>'
>2865		52 28					.word w_x3er
.2867						xt_rx3e:
.2867		68		pla			pla
.2868		95 00		sta $00,x		sta pstack,x
.286a		68		pla			pla
.286b		95 01		sta $01,x		sta pstack+1,x
.286d		ca		dex			dex
.286e		ca		dex			dex
.286f		4c 23 16	jmp $1623		jmp next
.2872						w_r:
>2872		01					.byte $01
>2873		72					.text 'r'
>2874		62 28					.word w_rx3e
.2876						xt_r:
.2876		68		pla			pla
.2877		95 00		sta $00,x		sta pstack,x
.2879		68		pla			pla
.287a		95 01		sta $01,x		sta pstack+1,x
.287c		48		pha			pha
.287d		b5 00		lda $00,x		lda pstack,x
.287f		48		pha			pha
.2880		ca		dex			dex
.2881		ca		dex			dex
.2882		4c 23 16	jmp $1623		jmp next
.2885						w_rdrop:
>2885		05					.byte $05
>2886		72 64 72 6f 70				.text 'rdrop'
>288b		72 28					.word w_r
.288d						xt_rdrop:
.288d		68		pla			pla
.288e		68		pla			pla
.288f						w_x21:
>288f		01					.byte $01
>2890		21					.text '!'
>2891		85 28					.word w_rdrop
.2893						xt_x21:
.2893		b5 02		lda $02,x		lda pstack+2,x
.2895		85 32		sta $32			sta tmp
.2897		b5 03		lda $03,x		lda pstack+3,x
.2899		85 33		sta $33			sta tmp+1
.289b		a0 01		ldy #$01		ldy #1
.289d		b5 04		lda $04,x		lda pstack+4,x
.289f		92 32		sta ($32)		sta (tmp)
.28a1		b5 05		lda $05,x		lda pstack+5,x
.28a3		91 32		sta ($32),y		sta (tmp),y
.28a5		e8		inx			inx
.28a6		e8		inx			inx
.28a7		e8		inx			inx
.28a8		e8		inx			inx
.28a9		4c 23 16	jmp $1623		jmp next
.28ac						w_x40:
>28ac		01					.byte $01
>28ad		40					.text '@'
>28ae		8f 28					.word w_x21
.28b0						xt_x40:
.28b0		b5 02		lda $02,x		lda pstack+2,x
.28b2		85 32		sta $32			sta tmp
.28b4		b5 03		lda $03,x		lda pstack+3,x
.28b6		85 33		sta $33			sta tmp+1
.28b8		a0 01		ldy #$01		ldy #1
.28ba		b2 32		lda ($32)		lda (tmp)
.28bc		95 02		sta $02,x		sta pstack+2,x
.28be		b1 32		lda ($32),y		lda (tmp),y
.28c0		95 03		sta $03,x		sta pstack+3,x
.28c2		4c 23 16	jmp $1623		jmp next
.28c5						w_cx21:
>28c5		02					.byte $02
>28c6		63 21					.text 'c!'
>28c8		ac 28					.word w_x40
.28ca						xt_cx21:
.28ca		b5 04		lda $04,x		lda pstack+4,x
.28cc		81 02		sta ($02,x)		sta (pstack+2,x)
.28ce		e8		inx			inx
.28cf		e8		inx			inx
.28d0		e8		inx			inx
.28d1		e8		inx			inx
.28d2		4c 23 16	jmp $1623		jmp next
.28d5						w_cx40:
>28d5		02					.byte $02
>28d6		63 40					.text 'c@'
>28d8		c5 28					.word w_cx21
.28da						xt_cx40:
.28da		a1 02		lda ($02,x)		lda (pstack+2,x)
.28dc		95 02		sta $02,x		sta pstack+2,x
.28de		74 03		stz $03,x		stz pstack+3,x
.28e0		4c 23 16	jmp $1623		jmp next
.28e3						w_fill:
>28e3		04					.byte $04
>28e4		66 69 6c 6c				.text 'fill'
>28e8		d5 28					.word w_cx40
.28ea						xt_fill:
.28ea							loop:
.28ea		b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.28ec		d0 04		bne $28f2		bne do_write
.28ee		b5 04		lda $04,x		lda pstack+4,x
.28f0		f0 19		beq $290b		beq done                ; Yes: we're done...
.28f2							do_write:
.28f2		b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.28f4		81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.28f6		f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.28f8		d0 02		bne $28fc		bne deccount
.28fa		f6 06		inc $06,x		inc pstack+6,x
.28fc							deccount:
.28fc		38		sec			sec                     ; Decrement the count
.28fd		b5 03		lda $03,x		lda pstack+3,x
.28ff		e9 01		sbc #$01		sbc #1
.2901		95 03		sta $03,x		sta pstack+3,x
.2903		b5 04		lda $04,x		lda pstack+4,x
.2905		e9 00		sbc #$00		sbc #0
.2907		95 04		sta $04,x		sta pstack+4,x
.2909		80 df		bra $28ea		bra loop                ; And check again
.290b							done:
.290b		8a		txa			txa                     ; Clean up the parameter stack
.290c		69 06		adc #$06		adc #6
.290e		aa		tax			tax
.290f		4c 23 16	jmp $1623		jmp next
.2912						w_x2bx21:
>2912		02					.byte $02
>2913		2b 21					.text '+!'
>2915		e3 28					.word w_fill
.2917						xt_x2bx21:
.2917		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the low byte
.2919		1a		inc a			inc a
.291a		81 02		sta ($02,x)		sta (pstack+2,x)
.291c		d0 11		bne $292f		bne done                ; If it does not roll over, we're done
.291e		b5 02		lda $02,x		lda pstack+2,x          ; Increment the pointer
.2920		1a		inc a			inc a
.2921		95 02		sta $02,x		sta pstack+2,x
.2923		d0 05		bne $292a		bne inc2
.2925		b5 03		lda $03,x		lda pstack+3,x
.2927		1a		inc a			inc a
.2928		95 03		sta $03,x		sta pstack+3,x
.292a							inc2:
.292a		a1 02		lda ($02,x)		lda (pstack+2,x)        ; Increment the high byte
.292c		1a		inc a			inc a
.292d		81 02		sta ($02,x)		sta (pstack+2,x)
.292f							done:
.292f		e8		inx			inx                     ; Clean up the stack
.2930		e8		inx			inx
.2931		4c 23 16	jmp $1623		jmp next
.2934						w_enclose:
>2934		07					.byte $07
>2935		65 6e 63 6c 6f 73 65			.text 'enclose'
>293c		12 29					.word w_x2bx21
.293e						xt_enclose:
.293e		b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.2940		85 25		sta $25			sta src_ptr+1
.2942		b5 04		lda $04,x		lda pstack+4,x
.2944		85 24		sta $24			sta src_ptr
.2946		b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.2948		85 32		sta $32			sta tmp
.294a		8a		txa			txa
.294b		38		sec			sec
.294c		e9 04		sbc #$04		sbc #4
.294e		aa		tax			tax
.294f		74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.2951		74 06		stz $06,x		stz pstack+6,x
.2953		74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.2955		74 04		stz $04,x		stz pstack+4,x
.2957		74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.2959		74 02		stz $02,x		stz pstack+2,x
.295b		a0 00		ldy #$00		ldy #0
.295d							loop1:
.295d		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.295f		d0 03		bne $2964		bne chk_delim1          ; NUL? No:; check it against the delimiter
.2961							none:
.2961		4c 23 16	jmp $1623		jmp next                ; Yes: we want to return 0s
.2964							chk_delim1:
.2964		c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.2966		f0 13		beq $297b		beq skip2               ; Yes: skip the character
.2968		a5 32		lda $32			lda tmp                 ; Check the delimiter
.296a		c9 20		cmp #$20		cmp #' '                ; Is it BL?
.296c		d0 0b		bne $2979		bne found               ; No: ok, we've found the first character;
.296e		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.2970		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.2972		d0 05		bne $2979		bne found               ; No: we found the first character
.2974		c8		iny			iny                     ; Move to the next character
.2975		f0 ea		beq $2961		beq none                ; If we've rolled over, we found nothing
.2977		80 e4		bra $295d		bra loop1               ; Otherwise: check the next character
.2979							found:
.2979		94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.297b							skip2:
.297b		c8		iny			iny                     ; Go to the next character
.297c		f0 1c		beq $299a		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.297e							loop2:
.297e		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2980		f0 18		beq $299a		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.2982		c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.2984		f0 0c		beq $2992		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.2986		a5 32		lda $32			lda tmp                 ; Get the delimiter
.2988		c9 20		cmp #$20		cmp #' '                ; Is it space?
.298a		d0 ef		bne $297b		bne skip2               ; No: go to the next character
.298c		b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.298e		c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.2990		d0 e9		bne $297b		bne skip2               ; No: go to the next character
.2992							found_delim:
.2992		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.2994		c8		iny			iny
.2995		94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.2997		4c 23 16	jmp $1623		jmp next                ; And we're done
.299a							found_nul:
.299a		94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.299c		94 02		sty $02,x		sty pstack+2,x          ; And to n3
.299e		4c 23 16	jmp $1623		jmp next                ; And we're done
.29a1						w_move:
>29a1		04					.byte $04
>29a2		6d 6f 76 65				.text 'move'
>29a6		34 29					.word w_enclose
.29a8						xt_move:
.29a8		38		sec			sec                     ; Compare addr1 and addr2
.29a9		b5 06		lda $06,x		lda pstack+6,x
.29ab		f5 04		sbc $04,x		sbc pstack+4,x
.29ad		85 32		sta $32			sta tmp
.29af		b5 07		lda $07,x		lda pstack+7,x
.29b1		f5 05		sbc $05,x		sbc pstack+5,x
.29b3		85 33		sta $33			sta tmp+1
.29b5		30 24		bmi $29db		bmi a1less
.29b7		f0 72		beq $2a2b		beq chklo
.29b9							a1greater:
.29b9		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.29bb		d0 50		bne $2a0d		bne docopy1
.29bd		b5 03		lda $03,x		lda pstack+3,x
.29bf		f0 72		beq $2a33		beq done                ; Yes: we're done;
.29c1		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.29c3		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.29c5		f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.29c7		d0 02		bne $29cb		bne inc2
.29c9		f6 07		inc $07,x		inc pstack+7,x
.29cb							inc2:
.29cb		f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.29cd		d0 02		bne $29d1		bne dec_count
.29cf		f6 03		inc $03,x		inc pstack+3,x
.29d1							dec_count:
.29d1		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.29d3		d0 02		bne $29d7		bne l1
.29d5		d6 03		dec $03,x		dec pstack+3,x
.29d7							l1:
.29d7		d6 02		dec $02,x		dec pstack+2,x
.29d9		80 de		bra $29b9		bra a1greater
.29db							a1less:
.29db		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.29dd		d0 02		bne $29e1		bne l2
.29df		d6 05		dec $05,x		dec pstack+5,x
.29e1							l2:
.29e1		d6 04		dec $04,x		dec pstack+4,x
.29e3		18		clc			clc                     ; addr2 := addr2 + u
.29e4		b5 04		lda $04,x		lda pstack+4,x
.29e6		75 02		adc $02,x		adc pstack+2,x
.29e8		95 04		sta $04,x		sta pstack+4,x
.29ea		b5 05		lda $05,x		lda pstack+5,x
.29ec		75 03		adc $03,x		adc pstack+3,x
.29ee		95 05		sta $05,x		sta pstack+5,x
.29f0		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.29f2		d0 02		bne $29f6		bne l3
.29f4		d6 07		dec $07,x		dec pstack+7,x
.29f6							l3:
.29f6		d6 06		dec $06,x		dec pstack+6,x
.29f8		18		clc			clc                     ; addr1 := addr1 + u
.29f9		b5 06		lda $06,x		lda pstack+6,x
.29fb		75 02		adc $02,x		adc pstack+2,x
.29fd		95 06		sta $06,x		sta pstack+6,x
.29ff		b5 07		lda $07,x		lda pstack+7,x
.2a01		75 03		adc $03,x		adc pstack+3,x
.2a03		95 07		sta $07,x		sta pstack+7,x
.2a05							loop2:
.2a05		b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2a07		d0 04		bne $2a0d		bne docopy1
.2a09		b5 03		lda $03,x		lda pstack+3,x
.2a0b		f0 26		beq $2a33		beq done                ; Yes: we're done;
.2a0d							docopy1:
.2a0d		a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2a0f		81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2a11		b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2a13		d0 02		bne $2a17		bne l4
.2a15		d6 07		dec $07,x		dec pstack+7,x
.2a17							l4:
.2a17		d6 06		dec $06,x		dec pstack+6,x
.2a19		b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2a1b		d0 02		bne $2a1f		bne l5
.2a1d		d6 05		dec $05,x		dec pstack+5,x
.2a1f							l5:
.2a1f		d6 04		dec $04,x		dec pstack+4,x
.2a21		b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2a23		d0 02		bne $2a27		bne l6
.2a25		d6 03		dec $03,x		dec pstack+3,x
.2a27							l6:
.2a27		d6 02		dec $02,x		dec pstack+2,x
.2a29		80 da		bra $2a05		bra loop2
.2a2b							chklo:
.2a2b		a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2a2d		30 ac		bmi $29db		bmi a1less
.2a2f		f0 02		beq $2a33		beq done                ; If equal, we don't need to move the data
.2a31		80 86		bra $29b9		bra a1greater
.2a33							done:
.2a33		8a		txa			txa
.2a34		18		clc			clc
.2a35		69 06		adc #$06		adc #6
.2a37		aa		tax			tax
.2a38		60		rts			rts
.2a39						w_x2b:
>2a39		01					.byte $01
>2a3a		2b					.text '+'
>2a3b		a1 29					.word w_move
.2a3d						xt_x2b:
.2a3d		18		clc			clc
.2a3e		b5 04		lda $04,x		lda pstack+4,x
.2a40		75 02		adc $02,x		adc pstack+2,x
.2a42		95 04		sta $04,x		sta pstack+4,x
.2a44		b5 05		lda $05,x		lda pstack+5,x
.2a46		75 03		adc $03,x		adc pstack+3,x
.2a48		95 05		sta $05,x		sta pstack+5,x
.2a4a		e8		inx			inx
.2a4b		e8		inx			inx
.2a4c		4c 23 16	jmp $1623		jmp next
.2a4f						w_x2d:
>2a4f		01					.byte $01
>2a50		2d					.text '-'
>2a51		39 2a					.word w_x2b
.2a53						xt_x2d:
.2a53		38		sec			sec
.2a54		b5 04		lda $04,x		lda pstack+4,x
.2a56		f5 02		sbc $02,x		sbc pstack+2,x
.2a58		95 04		sta $04,x		sta pstack+4,x
.2a5a		b5 05		lda $05,x		lda pstack+5,x
.2a5c		f5 03		sbc $03,x		sbc pstack+3,x
.2a5e		95 05		sta $05,x		sta pstack+5,x
.2a60		e8		inx			inx
.2a61		e8		inx			inx
.2a62		4c 23 16	jmp $1623		jmp next
.2a65						w_x2a:
>2a65		01					.byte $01
>2a66		2a					.text '*'
>2a67		4f 2a					.word w_x2d
.2a69						xt_x2a:
.2a69		64 36		stz $36			stz sign
.2a6b		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2a6d		10 11		bpl $2a80		bpl chk_n2
.2a6f		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2a71		85 36		sta $36			sta sign
.2a73		38		sec			sec             ; Negate n1
.2a74		a9 00		lda #$00		lda #0
.2a76		f5 04		sbc $04,x		sbc pstack+4,x
.2a78		95 04		sta $04,x		sta pstack+4,x
.2a7a		a9 00		lda #$00		lda #0
.2a7c		f5 05		sbc $05,x		sbc pstack+5,x
.2a7e		95 05		sta $05,x		sta pstack+5,x
.2a80							chk_n2:
.2a80		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2a82		10 13		bpl $2a97		bpl init_tmp
.2a84		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2a86		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2a88		85 36		sta $36			sta sign
.2a8a		38		sec			sec             ; Negate n2
.2a8b		a9 00		lda #$00		lda #0
.2a8d		f5 02		sbc $02,x		sbc pstack+2,x
.2a8f		95 02		sta $02,x		sta pstack+2,x
.2a91		a9 00		lda #$00		lda #0
.2a93		f5 03		sbc $03,x		sbc pstack+3,x
.2a95		95 03		sta $03,x		sta pstack+3,x
.2a97							init_tmp:
.2a97		a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2a99		85 34		sta $34			sta tmp+2
.2a9b		a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2a9d							l1:
.2a9d		56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.2a9f		76 02		ror $02,x		ror pstack+2,x
.2aa1		90 0b		bcc $2aae		bcc l2          ; 0 or 1?
.2aa3		a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.2aa4		18		clc			clc
.2aa5		b5 04		lda $04,x		lda pstack+4,x
.2aa7		65 34		adc $34			adc tmp+2
.2aa9		85 34		sta $34			sta tmp+2
.2aab		98		tya			tya
.2aac		75 05		adc $05,x		adc pstack+5,x
.2aae							l2:
.2aae		6a		ror a			ror A
.2aaf		66 34		ror $34			ror tmp+2
.2ab1		66 33		ror $33			ror tmp+1
.2ab3		66 32		ror $32			ror tmp
.2ab5		3a		dec a			dec a
.2ab6		d0 e5		bne $2a9d		bne l1
.2ab8		85 35		sta $35			sta tmp+3
.2aba		a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2abc		95 04		sta $04,x		sta pstack+4,x
.2abe		a5 33		lda $33			lda tmp+1
.2ac0		95 05		sta $05,x		sta pstack+5,x
.2ac2		e8		inx			inx             ; Clean up parameter stack
.2ac3		e8		inx			inx
.2ac4		a5 36		lda $36			lda sign        ; Check the sign
.2ac6		10 0d		bpl $2ad5		bpl done
.2ac8		38		sec			sec             ; If negative, negate result
.2ac9		a9 00		lda #$00		lda #0
.2acb		f5 02		sbc $02,x		sbc pstack+2,x
.2acd		95 02		sta $02,x		sta pstack+2,x
.2acf		a9 00		lda #$00		lda #0
.2ad1		f5 03		sbc $03,x		sbc pstack+3,x
.2ad3		95 03		sta $03,x		sta pstack+3,x
.2ad5							done:
.2ad5		4c 23 16	jmp $1623		jmp next
.2ad8						w_x2fmod:
>2ad8		04					.byte $04
>2ad9		2f 6d 6f 64				.text '/mod'
>2add		65 2a					.word w_x2a
.2adf						xt_x2fmod:
.2adf		64 36		stz $36			stz sign
.2ae1		b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2ae3		10 11		bpl $2af6		bpl chk_n2
.2ae5		a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2ae7		85 36		sta $36			sta sign
.2ae9		38		sec			sec             ; Negate n1
.2aea		a9 00		lda #$00		lda #0
.2aec		f5 04		sbc $04,x		sbc pstack+4,x
.2aee		95 04		sta $04,x		sta pstack+4,x
.2af0		a9 00		lda #$00		lda #0
.2af2		f5 05		sbc $05,x		sbc pstack+5,x
.2af4		95 05		sta $05,x		sta pstack+5,x
.2af6							chk_n2:
.2af6		b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2af8		10 13		bpl $2b0d		bpl init_tmp
.2afa		a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2afc		49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2afe		85 36		sta $36			sta sign
.2b00		38		sec			sec             ; Negate n2
.2b01		a9 00		lda #$00		lda #0
.2b03		f5 02		sbc $02,x		sbc pstack+2,x
.2b05		95 02		sta $02,x		sta pstack+2,x
.2b07		a9 00		lda #$00		lda #0
.2b09		f5 03		sbc $03,x		sbc pstack+3,x
.2b0b		95 03		sta $03,x		sta pstack+3,x
.2b0d							init_tmp:
.2b0d		64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.2b0f		64 33		stz $33			stz tmp+1
.2b11		a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.2b13		85 35		sta $35			sta counter
.2b15							l1:
.2b15		16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.2b17		36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.2b19		26 32		rol $32			rol tmp
.2b1b		26 33		rol $33			rol tmp+1
.2b1d		a5 32		lda $32			lda tmp
.2b1f		38		sec			sec             ; Trial subtraction
.2b20		f5 02		sbc $02,x		sbc pstack+2,x
.2b22		a8		tay			tay
.2b23		b5 33		lda $33,x		lda tmp+1,x
.2b25		f5 03		sbc $03,x		sbc pstack+3,x
.2b27		90 06		bcc $2b2f		bcc l2          ; Did subtraction succeed?
.2b29		85 33		sta $33			sta tmp+1       ; If yes, save it
.2b2b		84 32		sty $32			sty tmp
.2b2d		f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.2b2f							l2:
.2b2f		c6 35		dec $35			dec counter
.2b31		d0 e2		bne $2b15		bne l1
.2b33		b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2b35		95 03		sta $03,x		sta pstack+3,x
.2b37		b5 04		lda $04,x		lda pstack+4,x
.2b39		95 02		sta $02,x		sta pstack+2,x
.2b3b		a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2b3d		95 04		sta $04,x		sta pstack+4,x
.2b3f		a5 33		lda $33			lda tmp+1
.2b41		95 05		sta $05,x		sta pstack+5,x
.2b43		a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2b45		10 0d		bpl $2b54		bpl done
.2b47		38		sec			sec             ; Negate the quotient
.2b48		a9 00		lda #$00		lda #0
.2b4a		f5 02		sbc $02,x		sbc pstack+2,x
.2b4c		95 02		sta $02,x		sta pstack+2,x
.2b4e		a9 00		lda #$00		lda #0
.2b50		f5 03		sbc $03,x		sbc pstack+3,x
.2b52		95 03		sta $03,x		sta pstack+3,x
.2b54							done:
.2b54		4c 23 16	jmp $1623		jmp next
.2b57						w_1x2b:
>2b57		02					.byte $02
>2b58		31 2b					.text '1+'
>2b5a		d8 2a					.word w_x2fmod
.2b5c						xt_1x2b:
.2b5c		f6 02		inc $02,x		inc pstack+2,x
.2b5e		d0 02		bne $2b62		bne skip
.2b60		f6 03		inc $03,x		inc pstack+3,x
.2b62							skip:
.2b62		4c 23 16	jmp $1623		jmp next
.2b65						w_2x2b:
>2b65		02					.byte $02
>2b66		32 2b					.text '2+'
>2b68		57 2b					.word w_1x2b
.2b6a						xt_2x2b:
.2b6a		18		clc			clc
.2b6b		b5 02		lda $02,x		lda pstack+2,x
.2b6d		69 02		adc #$02		adc #2
.2b6f		95 02		sta $02,x		sta pstack+2,x
.2b71		b5 03		lda $03,x		lda pstack+3,x
.2b73		69 00		adc #$00		adc #0
.2b75		95 03		sta $03,x		sta pstack+3,x
.2b77		4c 23 16	jmp $1623		jmp next
.2b7a						w_1x2d:
>2b7a		02					.byte $02
>2b7b		31 2d					.text '1-'
>2b7d		65 2b					.word w_2x2b
.2b7f						xt_1x2d:
.2b7f		b5 02		lda $02,x		lda pstack+2,x
.2b81		d0 02		bne $2b85		bne l1
.2b83		d6 03		dec $03,x		dec pstack+3,x
.2b85							l1:
.2b85		d6 02		dec $02,x		dec pstack+2,x
.2b87		4c 23 16	jmp $1623		jmp next
.2b8a						w_2x2d:
>2b8a		02					.byte $02
>2b8b		32 2d					.text '2-'
>2b8d		7a 2b					.word w_1x2d
.2b8f						xt_2x2d:
.2b8f		38		sec			sec
.2b90		b5 02		lda $02,x		lda pstack+2,x
.2b92		e9 02		sbc #$02		sbc #2
.2b94		95 02		sta $02,x		sta pstack+2,x
.2b96		b5 03		lda $03,x		lda pstack+3,x
.2b98		e9 00		sbc #$00		sbc #0
.2b9a		95 03		sta $03,x		sta pstack+3,x
.2b9c		4c 23 16	jmp $1623		jmp next
.2b9f						w_and:
>2b9f		03					.byte $03
>2ba0		61 6e 64				.text 'and'
>2ba3		8a 2b					.word w_2x2d
.2ba5						xt_and:
.2ba5		b5 02		lda $02,x		lda pstack+2,x
.2ba7		35 04		and $04,x		and pstack+4,x
.2ba9		95 04		sta $04,x		sta pstack+4,x
.2bab		b5 03		lda $03,x		lda pstack+3,x
.2bad		35 05		and $05,x		and pstack+5,x
.2baf		95 05		sta $05,x		sta pstack+5,x
.2bb1		e8		inx			inx
.2bb2		e8		inx			inx
.2bb3		4c 23 16	jmp $1623		jmp next
.2bb6						w_or:
>2bb6		02					.byte $02
>2bb7		6f 72					.text 'or'
>2bb9		9f 2b					.word w_and
.2bbb						xt_or:
.2bbb		b5 02		lda $02,x		lda pstack+2,x
.2bbd		15 04		ora $04,x		ora pstack+4,x
.2bbf		95 04		sta $04,x		sta pstack+4,x
.2bc1		b5 03		lda $03,x		lda pstack+3,x
.2bc3		15 05		ora $05,x		ora pstack+5,x
.2bc5		95 05		sta $05,x		sta pstack+5,x
.2bc7		e8		inx			inx
.2bc8		e8		inx			inx
.2bc9		4c 23 16	jmp $1623		jmp next
.2bcc						w_xor:
>2bcc		03					.byte $03
>2bcd		78 6f 72				.text 'xor'
>2bd0		b6 2b					.word w_or
.2bd2						xt_xor:
.2bd2		b5 02		lda $02,x		lda pstack+2,x
.2bd4		55 04		eor $04,x		eor pstack+4,x
.2bd6		95 04		sta $04,x		sta pstack+4,x
.2bd8		b5 03		lda $03,x		lda pstack+3,x
.2bda		55 05		eor $05,x		eor pstack+5,x
.2bdc		95 05		sta $05,x		sta pstack+5,x
.2bde		e8		inx			inx
.2bdf		e8		inx			inx
.2be0		4c 23 16	jmp $1623		jmp next
.2be3						w_not:
>2be3		03					.byte $03
>2be4		6e 6f 74				.text 'not'
>2be7		cc 2b					.word w_xor
.2be9						xt_not:
.2be9		b5 02		lda $02,x		lda pstack+2,x
.2beb		49 ff		eor #$ff		eor #$ff
.2bed		95 02		sta $02,x		sta pstack+2,x
.2bef		b5 03		lda $03,x		lda pstack+3,x
.2bf1		49 ff		eor #$ff		eor #$ff
.2bf3		95 03		sta $03,x		sta pstack+3,x
.2bf5		4c 23 16	jmp $1623		jmp next
.2bf8						w_0x3c:
>2bf8		02					.byte $02
>2bf9		30 3c					.text '0<'
>2bfb		e3 2b					.word w_not
.2bfd						xt_0x3c:
.2bfd		b5 03		lda $03,x		lda pstack+3,x
.2bff		30 07		bmi $2c08		bmi istrue
.2c01		74 02		stz $02,x		stz pstack+2,x
.2c03		74 03		stz $03,x		stz pstack+3,x
.2c05		4c 23 16	jmp $1623		jmp next
.2c08							istrue:
.2c08		a9 ff		lda #$ff		lda #$ff
.2c0a		95 02		sta $02,x		sta pstack+2,x
.2c0c		95 03		sta $03,x		sta pstack+3,x
.2c0e		4c 23 16	jmp $1623		jmp next
.2c11						w_0x3d:
>2c11		02					.byte $02
>2c12		30 3d					.text '0='
>2c14		f8 2b					.word w_0x3c
.2c16						xt_0x3d:
.2c16		b5 02		lda $02,x		lda pstack+2,x
.2c18		d0 0d		bne $2c27		bne isfalse
.2c1a		b5 03		lda $03,x		lda pstack+3,x
.2c1c		d0 09		bne $2c27		bne isfalse
.2c1e		a9 ff		lda #$ff		lda #$ff
.2c20		95 02		sta $02,x		sta pstack+2,x
.2c22		95 03		sta $03,x		sta pstack+3,x
.2c24		4c 23 16	jmp $1623		jmp next
.2c27							isfalse:
.2c27		74 02		stz $02,x		stz pstack+2,x
.2c29		74 03		stz $03,x		stz pstack+3,x
.2c2b		4c 23 16	jmp $1623		jmp next
.2c2e						w_0x3e:
>2c2e		02					.byte $02
>2c2f		30 3e					.text '0>'
>2c31		11 2c					.word w_0x3d
.2c33						xt_0x3e:
.2c33		b5 03		lda $03,x		lda pstack+3,x
.2c35		30 0f		bmi $2c46		bmi isfalse
.2c37		d0 04		bne $2c3d		bne istrue
.2c39		b5 02		lda $02,x		lda pstack+2,x
.2c3b		f0 09		beq $2c46		beq isfalse
.2c3d							istrue:
.2c3d		a9 ff		lda #$ff		lda #$ff
.2c3f		95 02		sta $02,x		sta pstack+2,x
.2c41		95 03		sta $03,x		sta pstack+3,x
.2c43		4c 23 16	jmp $1623		jmp next
.2c46							isfalse:
.2c46		74 02		stz $02,x		stz pstack+2,x
.2c48		74 03		stz $03,x		stz pstack+3,x
.2c4a		4c 23 16	jmp $1623		jmp next
.2c4d						w_x28variablex29:
>2c4d		0a					.byte $0A
>2c4e		28 76 61 72 69 61 62 6c			.text '(variable)'
>2c56		65 29
>2c58		2e 2c					.word w_0x3e
.2c5a						xt_x28variablex29:
.2c5a		18		clc			clc                     ; push(wp + 3)
.2c5b		a5 2a		lda $2a			lda wp
.2c5d		69 03		adc #$03		adc #3
.2c5f		95 00		sta $00,x		sta pstack,x
.2c61		a5 2b		lda $2b			lda wp+1
.2c63		69 00		adc #$00		adc #0
.2c65		95 01		sta $01,x		sta pstack+1,x
.2c67		ca		dex			dex
.2c68		ca		dex			dex
.2c69		4c 23 16	jmp $1623		jmp next
.2c6c						w_x28constantx29:
>2c6c		0a					.byte $0A
>2c6d		28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2c75		74 29
>2c77		4d 2c					.word w_x28variablex29
.2c79						xt_x28constantx29:
.2c79		a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2c7b		b1 2a		lda ($2a),y		lda (wp),y
.2c7d		95 00		sta $00,x		sta pstack,x
.2c7f		c8		iny			iny
.2c80		b1 2a		lda ($2a),y		lda (wp),y
.2c82		95 01		sta $01,x		sta pstack+1,x
.2c84		ca		dex			dex
.2c85		ca		dex			dex
.2c86		4c 23 16	jmp $1623		jmp next
.2c89						w_cells:
>2c89		05					.byte $05
>2c8a		63 65 6c 6c 73				.text 'cells'
>2c8f							.fill 11
>2c9a		6c 2c					.word w_x28constantx29
.2c9c						xt_cells:
.2c9c		4c 79 2c	jmp $2c79		jmp xt_x28constantx29
>2c9f		02 00					.word 2
.2ca1						w_bl:
>2ca1		02					.byte $02
>2ca2		62 6c					.text 'bl'
>2ca4							.fill 14
>2cb2		89 2c					.word w_cells
.2cb4						xt_bl:
.2cb4		4c 79 2c	jmp $2c79		jmp xt_x28constantx29
>2cb7		20 00					.word 32
.2cb9						w_x28userx29:
>2cb9		06					.byte $06
>2cba		28 75 73 65 72 29			.text '(user)'
>2cc0		a1 2c					.word w_bl
.2cc2						xt_x28userx29:
.2cc2		18		clc			clc                     ; push(up + memory(wp + 3))
.2cc3		a0 03		ldy #$03		ldy #3
.2cc5		a5 2c		lda $2c			lda up
.2cc7		71 2a		adc ($2a),y		adc (wp),y
.2cc9		95 00		sta $00,x		sta pstack,x
.2ccb		c8		iny			iny
.2ccc		a5 2d		lda $2d			lda up+1
.2cce		71 2a		adc ($2a),y		adc (wp),y
.2cd0		95 01		sta $01,x		sta pstack+1,x
.2cd2		ca		dex			dex
.2cd3		ca		dex			dex
.2cd4		4c 23 16	jmp $1623		jmp next
.2cd7						w_s0:
>2cd7		02					.byte $02
>2cd8		73 30					.text 's0'
>2cda							.fill 14
>2ce8		b9 2c					.word w_x28userx29
.2cea						xt_s0:
.2cea		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2ced		00 00					.word 0
.2cef						w_r0:
>2cef		02					.byte $02
>2cf0		72 30					.text 'r0'
>2cf2							.fill 14
>2d00		d7 2c					.word w_s0
.2d02						xt_r0:
.2d02		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d05		01 00					.word 1
.2d07						w_base:
>2d07		04					.byte $04
>2d08		62 61 73 65				.text 'base'
>2d0c							.fill 12
>2d18		ef 2c					.word w_r0
.2d1a						xt_base:
.2d1a		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d1d		02 00					.word 2
.2d1f						w_state:
>2d1f		05					.byte $05
>2d20		73 74 61 74 65				.text 'state'
>2d25							.fill 11
>2d30		07 2d					.word w_base
.2d32						xt_state:
.2d32		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d35		03 00					.word 3
.2d37						w_context:
>2d37		07					.byte $07
>2d38		63 6f 6e 74 65 78 74			.text 'context'
>2d3f							.fill 9
>2d48		1f 2d					.word w_state
.2d4a						xt_context:
.2d4a		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d4d		04 00					.word 4
.2d4f						w_current:
>2d4f		07					.byte $07
>2d50		63 75 72 72 65 6e 74			.text 'current'
>2d57							.fill 9
>2d60		37 2d					.word w_context
.2d62						xt_current:
.2d62		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d65		05 00					.word 5
.2d67						w_dp:
>2d67		02					.byte $02
>2d68		64 70					.text 'dp'
>2d6a							.fill 14
>2d78		4f 2d					.word w_current
.2d7a						xt_dp:
.2d7a		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d7d		06 00					.word 6
.2d7f						w_x3ein:
>2d7f		03					.byte $03
>2d80		3e 69 6e				.text '>in'
>2d83							.fill 13
>2d90		67 2d					.word w_dp
.2d92						xt_x3ein:
.2d92		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2d95		07 00					.word 7
.2d97						w_tib:
>2d97		03					.byte $03
>2d98		74 69 62				.text 'tib'
>2d9b							.fill 13
>2da8		7f 2d					.word w_x3ein
.2daa						xt_tib:
.2daa		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2dad		08 00					.word 8
.2daf						w_sourcex2did:
>2daf		09					.byte $09
>2db0		73 6f 75 72 63 65 2d 69			.text 'source-id'
>2db8		64
>2db9							.fill 7
>2dc0		97 2d					.word w_tib
.2dc2						xt_sourcex2did:
.2dc2		4c c2 2c	jmp $2cc2		jmp xt_x28userx29
>2dc5		09 00					.word 9
.2dc7						w_x28branchx29:
>2dc7		08					.byte $08
>2dc8		28 62 72 61 6e 63 68 29			.text '(branch)'
>2dd0		af 2d					.word w_sourcex2did
.2dd2						xt_x28branchx29:
.2dd2		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2dd4		b2 28		lda ($28)		lda (ip)
.2dd6		85 32		sta $32			sta tmp
.2dd8		b1 28		lda ($28),y		lda (ip),y
.2dda		85 29		sta $29			sta ip+1
.2ddc		a5 32		lda $32			lda tmp
.2dde		85 28		sta $28			sta ip
.2de0		4c 23 16	jmp $1623		jmp next
.2de3						w_x28branch0x29:
>2de3		09					.byte $09
>2de4		28 62 72 61 6e 63 68 30			.text '(branch0)'
>2dec		29
>2ded		c7 2d					.word w_x28branchx29
.2def						xt_x28branch0x29:
.2def		b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2df1		d0 04		bne $2df7		bne nobranch        ; No: skip over the branch address
.2df3		b5 03		lda $03,x		lda pstack+3,x
.2df5		f0 0f		beq $2e06		beq dobranch        ; Yes: take the branch
.2df7							nobranch:
.2df7		18		clc			clc                 ; No: skip over the branch address
.2df8		a5 28		lda $28			lda ip
.2dfa		69 02		adc #$02		adc #2
.2dfc		85 28		sta $28			sta ip
.2dfe		a5 29		lda $29			lda ip+1
.2e00		69 00		adc #$00		adc #0
.2e02		85 29		sta $29			sta ip+1
.2e04		80 0e		bra $2e14		bra done
.2e06							dobranch:
.2e06		a0 01		ldy #$01		ldy #1              ; ip := branch address
.2e08		b2 28		lda ($28)		lda (ip)
.2e0a		85 32		sta $32			sta tmp
.2e0c		b1 28		lda ($28),y		lda (ip),y
.2e0e		85 29		sta $29			sta ip+1
.2e10		a5 32		lda $32			lda tmp
.2e12		85 28		sta $28			sta ip
.2e14							done:
.2e14		e8		inx			inx                 ; clean up the parameter stack
.2e15		e8		inx			inx
.2e16		4c 23 16	jmp $1623		jmp next
.2e19						w_x28dox29:
>2e19		04					.byte $04
>2e1a		28 64 6f 29				.text '(do)'
>2e1e		e3 2d					.word w_x28branch0x29
.2e20						xt_x28dox29:
.2e20		b5 03		lda $03,x		lda pstack+3,x
.2e22		48		pha			pha
.2e23		b5 02		lda $02,x		lda pstack+2,x
.2e25		48		pha			pha
.2e26		b5 05		lda $05,x		lda pstack+5,x
.2e28		48		pha			pha
.2e29		b5 04		lda $04,x		lda pstack+4,x
.2e2b		48		pha			pha
.2e2c		18		clc			clc
.2e2d		8a		txa			txa
.2e2e		69 04		adc #$04		adc #4
.2e30		aa		tax			tax
.2e31		4c 23 16	jmp $1623		jmp next
.2e34						w_x3ei:
>2e34		02					.byte $02
>2e35		3e 69					.text '>i'
>2e37		19 2e					.word w_x28dox29
.2e39						xt_x3ei:
>0101							limit       .word ?
>0103							current     .word ?
.2e39		b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.2e3b		85 33		sta $33			sta tmp+1
.2e3d		b5 02		lda $02,x		lda pstack+2,x
.2e3f		85 32		sta $32			sta tmp
.2e41		ca		dex			dex
.2e42		ca		dex			dex
.2e43		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e45		ba		tsx			tsx
.2e46		a5 33		lda $33			lda tmp+1           ; current := tmp = n
.2e48		9d 04 01	sta $0104,x		sta current+1
.2e4b		a5 32		lda $32			lda tmp
.2e4d		9d 03 01	sta $0103,x		sta current
.2e50		a6 34		ldx $34			ldx savex
.2e52		4c 23 16	jmp $1623		jmp next
.2e55						w_leave:
>2e55		05					.byte $05
>2e56		6c 65 61 76 65				.text 'leave'
>2e5b		34 2e					.word w_x3ei
.2e5d						xt_leave:
>0101							limit       .word ?
>0103							current     .word ?
.2e5d		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e5f		ba		tsx			tsx
.2e60		bd 04 01	lda $0104,x		lda current+1       ; limit := current
.2e63		9d 02 01	sta $0102,x		sta limit+1
.2e66		bd 03 01	lda $0103,x		lda current
.2e69		9d 01 01	sta $0101,x		sta limit
.2e6c		a6 34		ldx $34			ldx savex
.2e6e		4c 23 16	jmp $1623		jmp next
.2e71						w_x28loopx29:
>2e71		06					.byte $06
>2e72		28 6c 6f 6f 70 29			.text '(loop)'
>2e78		55 2e					.word w_leave
.2e7a						xt_x28loopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2e7a		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2e7c		ba		tsx			tsx
.2e7d		fe 03 01	inc $0103,x		inc current         ; Increment current
.2e80		d0 03		bne $2e85		bne chk_current
.2e82		fe 04 01	inc $0104,x		inc current+1
.2e85							chk_current:
.2e85		38		sec			sec
.2e86		bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2e89		fd 02 01	sbc $0102,x		sbc limit+1
.2e8c		50 02		bvc $2e90		bvc label1          ; the equality comparison is in the Z flag here
.2e8e		49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2e90							label1:
.2e90		30 23		bmi $2eb5		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2e92		50 02		bvc $2e96		bvc label2          ; the Z flag was affected only if V is 1
.2e94		49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2e96							label2:
.2e96		d0 08		bne $2ea0		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2e98		bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2e9b		fd 01 01	sbc $0101,x		sbc limit
.2e9e		90 15		bcc $2eb5		bcc dobranch        ; if current < limit then current < limit
.2ea0							nobranch:
.2ea0		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2ea1		18		clc			clc
.2ea2		69 04		adc #$04		adc #4
.2ea4		aa		tax			tax
.2ea5		9a		txs			txs
.2ea6		18		clc			clc                 ; And skip over the branch address
.2ea7		a5 28		lda $28			lda ip
.2ea9		69 02		adc #$02		adc #2
.2eab		85 28		sta $28			sta ip
.2ead		a5 29		lda $29			lda ip+1
.2eaf		69 00		adc #$00		adc #0
.2eb1		85 29		sta $29			sta ip+1
.2eb3		80 0e		bra $2ec3		bra done
.2eb5							dobranch:
.2eb5		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2eb7		b2 28		lda ($28)		lda (ip)
.2eb9		85 32		sta $32			sta tmp
.2ebb		b1 28		lda ($28),y		lda (ip),y
.2ebd		85 29		sta $29			sta ip+1
.2ebf		a5 32		lda $32			lda tmp
.2ec1		85 28		sta $28			sta ip
.2ec3							done:
.2ec3		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2ec5		4c 23 16	jmp $1623		jmp next
.2ec8						w_x28x2bloopx29:
>2ec8		07					.byte $07
>2ec9		28 2b 6c 6f 6f 70 29			.text '(+loop)'
>2ed0		71 2e					.word w_x28loopx29
.2ed2						xt_x28x2bloopx29:
>0101							limit       .word ?
>0103							current     .word ?
.2ed2		b5 03		lda $03,x		lda pstack+3,x
.2ed4		85 33		sta $33			sta tmp+1
.2ed6		b5 02		lda $02,x		lda pstack+2,x
.2ed8		85 32		sta $32			sta tmp
.2eda		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2edc		ba		tsx			tsx
.2edd		18		clc			clc                 ; Increment current by n
.2ede		bd 03 01	lda $0103,x		lda current
.2ee1		65 32		adc $32			adc tmp
.2ee3		9d 03 01	sta $0103,x		sta current
.2ee6		bd 04 01	lda $0104,x		lda current+1
.2ee9		65 33		adc $33			adc tmp+1
.2eeb		9d 04 01	sta $0104,x		sta current+1
.2eee		e6 34		inc $34			inc savex           ; Remove n from the stack
.2ef0		e6 34		inc $34			inc savex
.2ef2							chk_current:
.2ef2		38		sec			sec
.2ef3		bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.2ef6		fd 02 01	sbc $0102,x		sbc limit+1
.2ef9		50 02		bvc $2efd		bvc label1          ; the equality comparison is in the Z flag here
.2efb		49 80		eor #$80		eor #$80            ; the Z flag is affected here
.2efd							label1:
.2efd		30 23		bmi $2f22		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.2eff		50 02		bvc $2f03		bvc label2          ; the Z flag was affected only if V is 1
.2f01		49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.2f03							label2:
.2f03		d0 08		bne $2f0d		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.2f05		bd 03 01	lda $0103,x		lda current         ; compare low bytes
.2f08		fd 01 01	sbc $0101,x		sbc limit
.2f0b		90 15		bcc $2f22		bcc dobranch        ; if current < limit then current < limit
.2f0d							nobranch:
.2f0d		8a		txa			txa                 ; Yes: Remove the context from the return stack
.2f0e		18		clc			clc
.2f0f		69 04		adc #$04		adc #4
.2f11		aa		tax			tax
.2f12		9a		txs			txs
.2f13		18		clc			clc                 ; And skip over the branch address
.2f14		a5 28		lda $28			lda ip
.2f16		69 02		adc #$02		adc #2
.2f18		85 28		sta $28			sta ip
.2f1a		a5 29		lda $29			lda ip+1
.2f1c		69 00		adc #$00		adc #0
.2f1e		85 29		sta $29			sta ip+1
.2f20		80 0e		bra $2f30		bra done
.2f22							dobranch:
.2f22		a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.2f24		b2 28		lda ($28)		lda (ip)
.2f26		85 32		sta $32			sta tmp
.2f28		b1 28		lda ($28),y		lda (ip),y
.2f2a		85 29		sta $29			sta ip+1
.2f2c		a5 32		lda $32			lda tmp
.2f2e		85 28		sta $28			sta ip
.2f30							done:
.2f30		a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.2f32		4c 23 16	jmp $1623		jmp next
.2f35						w_i:
>2f35		01					.byte $01
>2f36		69					.text 'i'
>2f37		c8 2e					.word w_x28x2bloopx29
.2f39						xt_i:
>0101							limit       .word ?
>0103							current     .word ?
.2f39		86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.2f3b		ba		tsx			tsx
.2f3c		bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.2f3f		bd 03 01	lda $0103,x		lda current
.2f42		a6 34		ldx $34			ldx savex           ; Restore the PSP
.2f44		94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.2f46		95 00		sta $00,x		sta pstack,x
.2f48		ca		dex			dex
.2f49		ca		dex			dex
.2f4a		4c 23 16	jmp $1623		jmp next
.2f4d						w_x28ofx29:
>2f4d		04					.byte $04
>2f4e		28 6f 66 29				.text '(of)'
>2f52		35 2f					.word w_i
.2f54						xt_x28ofx29:
.2f54		b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.2f56		d5 04		cmp $04,x		cmp pstack+4,x
.2f58		d0 1a		bne $2f74		bne not_eq
.2f5a		b5 03		lda $03,x		lda pstack+3,x
.2f5c		d5 05		cmp $05,x		cmp pstack+5,x
.2f5e		d0 14		bne $2f74		bne not_eq
.2f60		e8		inx			inx
.2f61		e8		inx			inx
.2f62		e8		inx			inx
.2f63		e8		inx			inx
.2f64		18		clc			clc                 ; Skip over the branch target
.2f65		a5 28		lda $28			lda ip
.2f67		69 02		adc #$02		adc #2
.2f69		85 28		sta $28			sta ip
.2f6b		a5 29		lda $29			lda ip+1
.2f6d		69 00		adc #$00		adc #0
.2f6f		85 29		sta $29			sta ip+1
.2f71		4c 23 16	jmp $1623		jmp next
.2f74							not_eq:
.2f74		e8		inx			inx                 ; Remove n2 from stack
.2f75		e8		inx			inx
.2f76		a0 01		ldy #$01		ldy #1              ; Take the branch target
.2f78		b2 28		lda ($28)		lda (ip)
.2f7a		85 32		sta $32			sta tmp
.2f7c		b1 28		lda ($28),y		lda (ip),y
.2f7e		85 29		sta $29			sta ip+1
.2f80		a5 32		lda $32			lda tmp
.2f82		85 28		sta $28			sta ip
.2f84		4c 23 16	jmp $1623		jmp next
.2f87						w_execute:
>2f87		07					.byte $07
>2f88		65 78 65 63 75 74 65			.text 'execute'
>2f8f		4d 2f					.word w_x28ofx29
.2f91						xt_execute:
.2f91		b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.2f93		85 2a		sta $2a			sta wp
.2f95		b5 03		lda $03,x		lda pstack+3,x
.2f97		85 2b		sta $2b			sta wp+1
.2f99		e8		inx			inx                 ; Clean up stack
.2f9a		e8		inx			inx
.2f9b		6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.2f9e						w_x28vocabularyx29:
>2f9e		0c					.byte $0C
>2f9f		28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>2fa7		61 72 79 29
>2fab		87 2f					.word w_execute
.2fad						xt_x28vocabularyx29:
.2fad		18		clc			clc                 ; tmp := up + user_context
.2fae		a5 2c		lda $2c			lda up
.2fb0		69 08		adc #$08		adc #user_context
.2fb2		85 32		sta $32			sta tmp
.2fb4		a5 2d		lda $2d			lda up+1
.2fb6		69 00		adc #$00		adc #0
.2fb8		85 33		sta $33			sta tmp+1
.2fba		a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.2fbc		18		clc			clc
.2fbd		a5 2a		lda $2a			lda wp
.2fbf		69 03		adc #$03		adc #3
.2fc1		92 32		sta ($32)		sta (tmp)
.2fc3		a5 2b		lda $2b			lda wp+1
.2fc5		69 00		adc #$00		adc #0
.2fc7		91 32		sta ($32),y		sta (tmp),y
.2fc9		4c 23 16	jmp $1623		jmp next
.2fcc						w_forth:
>2fcc		05					.byte $05
>2fcd		66 6f 72 74 68				.text 'forth'
>2fd2		9e 2f					.word w_x28vocabularyx29
.2fd4						xt_forth:
.2fd4		4c ad 2f	jmp $2fad		jmp xt_x28vocabularyx29
>2fd7		e7 33					.word <>w_cold
.2fd9						w_x3fdup:
>2fd9		04					.byte $04
>2fda		3f 64 75 70				.text '?dup'
>2fde							.fill 12
>2fea		cc 2f					.word w_forth
.2fec						xt_x3fdup:
.2fec		4c 10 16	jmp $1610		jmp i_enter
>2fef		17 28					.word xt_dup
>2ff1		ef 2d					.word xt_x28branch0x29
>2ff3		f7 2f					.word l_138
>2ff5		17 28					.word xt_dup
.2ff7						l_138:
>2ff7		08 16					.word i_exit
.2ff9						w_x3c:
>2ff9		01					.byte $01
>2ffa		3c					.text '<'
>2ffb							.fill 15
>300a		d9 2f					.word w_x3fdup
.300c						xt_x3c:
.300c		4c 10 16	jmp $1610		jmp i_enter
>300f		53 2a					.word xt_x2d
>3011		fd 2b					.word xt_0x3c
>3013		08 16					.word i_exit
.3015						w_x3e:
>3015		01					.byte $01
>3016		3e					.text '>'
>3017							.fill 15
>3026		f9 2f					.word w_x3c
.3028						xt_x3e:
.3028		4c 10 16	jmp $1610		jmp i_enter
>302b		53 2a					.word xt_x2d
>302d		33 2c					.word xt_0x3e
>302f		08 16					.word i_exit
.3031						w_x3d:
>3031		01					.byte $01
>3032		3d					.text '='
>3033							.fill 15
>3042		15 30					.word w_x3e
.3044						xt_x3d:
.3044		4c 10 16	jmp $1610		jmp i_enter
>3047		53 2a					.word xt_x2d
>3049		16 2c					.word xt_0x3d
>304b		08 16					.word i_exit
.304d						w_x2f:
>304d		01					.byte $01
>304e		2f					.text '/'
>304f							.fill 15
>305e		31 30					.word w_x3d
.3060						xt_x2f:
.3060		4c 10 16	jmp $1610		jmp i_enter
>3063		df 2a					.word xt_x2fmod
>3065		2b 28					.word xt_swap
>3067		0c 28					.word xt_drop
>3069		08 16					.word i_exit
.306b						w_mod:
>306b		03					.byte $03
>306c		6d 6f 64				.text 'mod'
>306f							.fill 13
>307c		4d 30					.word w_x2f
.307e						xt_mod:
.307e		4c 10 16	jmp $1610		jmp i_enter
>3081		df 2a					.word xt_x2fmod
>3083		0c 28					.word xt_drop
>3085		08 16					.word i_exit
.3087						w_abs:
>3087		03					.byte $03
>3088		61 62 73				.text 'abs'
>308b							.fill 13
>3098		6b 30					.word w_mod
.309a						xt_abs:
.309a		4c 10 16	jmp $1610		jmp i_enter
>309d		17 28					.word xt_dup
>309f		fd 2b					.word xt_0x3c
>30a1		ef 2d					.word xt_x28branch0x29
>30a3		ab 30					.word l_177
>30a5		8b 17					.word xt_0
>30a7		2b 28					.word xt_swap
>30a9		53 2a					.word xt_x2d
.30ab						l_177:
>30ab		08 16					.word i_exit
.30ad						w_max:
>30ad		03					.byte $03
>30ae		6d 61 78				.text 'max'
>30b1							.fill 13
>30be		87 30					.word w_abs
.30c0						xt_max:
.30c0		4c 10 16	jmp $1610		jmp i_enter
>30c3		45 28					.word xt_over
>30c5		45 28					.word xt_over
>30c7		0c 30					.word xt_x3c
>30c9		ef 2d					.word xt_x28branch0x29
>30cb		d5 30					.word l_178
>30cd		45 28					.word xt_over
>30cf		0c 28					.word xt_drop
>30d1		d2 2d					.word xt_x28branchx29
>30d3		d7 30					.word l_179
.30d5						l_178:
>30d5		0c 28					.word xt_drop
.30d7						l_179:
>30d7		08 16					.word i_exit
.30d9						w_min:
>30d9		03					.byte $03
>30da		6d 69 6e				.text 'min'
>30dd							.fill 13
>30ea		ad 30					.word w_max
.30ec						xt_min:
.30ec		4c 10 16	jmp $1610		jmp i_enter
>30ef		45 28					.word xt_over
>30f1		45 28					.word xt_over
>30f3		28 30					.word xt_x3e
>30f5		ef 2d					.word xt_x28branch0x29
>30f7		01 31					.word l_186
>30f9		45 28					.word xt_over
>30fb		0c 28					.word xt_drop
>30fd		d2 2d					.word xt_x28branchx29
>30ff		03 31					.word l_187
.3101						l_186:
>3101		0c 28					.word xt_drop
.3103						l_187:
>3103		08 16					.word i_exit
.3105						w_rot:
>3105		03					.byte $03
>3106		72 6f 74				.text 'rot'
>3109							.fill 13
>3116		d9 30					.word w_min
.3118						xt_rot:
.3118		4c 10 16	jmp $1610		jmp i_enter
>311b		57 28					.word xt_x3er
>311d		2b 28					.word xt_swap
>311f		67 28					.word xt_rx3e
>3121		2b 28					.word xt_swap
>3123		08 16					.word i_exit
.3125						w_2dup:
>3125		04					.byte $04
>3126		32 64 75 70				.text '2dup'
>312a							.fill 12
>3136		05 31					.word w_rot
.3138						xt_2dup:
.3138		4c 10 16	jmp $1610		jmp i_enter
>313b		45 28					.word xt_over
>313d		45 28					.word xt_over
>313f		08 16					.word i_exit
.3141						w_2drop:
>3141		05					.byte $05
>3142		32 64 72 6f 70				.text '2drop'
>3147							.fill 11
>3152		25 31					.word w_2dup
.3154						xt_2drop:
.3154		4c 10 16	jmp $1610		jmp i_enter
>3157		0c 28					.word xt_drop
>3159		0c 28					.word xt_drop
>315b		08 16					.word i_exit
.315d						w_lfa:
>315d		03					.byte $03
>315e		6c 66 61				.text 'lfa'
>3161							.fill 13
>316e		41 31					.word w_2drop
.3170						xt_lfa:
.3170		4c 10 16	jmp $1610		jmp i_enter
>3173		de 17					.word xt_x28literalx29
>3175		05 00					.word 5
>3177		53 2a					.word xt_x2d
>3179		08 16					.word i_exit
.317b						w_cfa:
>317b		03					.byte $03
>317c		63 66 61				.text 'cfa'
>317f							.fill 13
>318c		5d 31					.word w_lfa
.318e						xt_cfa:
.318e		4c 10 16	jmp $1610		jmp i_enter
>3191		de 17					.word xt_x28literalx29
>3193		03 00					.word 3
>3195		53 2a					.word xt_x2d
>3197		08 16					.word i_exit
.3199						w_nfa:
>3199		03					.byte $03
>319a		6e 66 61				.text 'nfa'
>319d							.fill 13
>31aa		7b 31					.word w_cfa
.31ac						xt_nfa:
.31ac		4c 10 16	jmp $1610		jmp i_enter
>31af		de 17					.word xt_x28literalx29
>31b1		16 00					.word 22
>31b3		53 2a					.word xt_x2d
>31b5		08 16					.word i_exit
.31b7						w_pfa:
>31b7		03					.byte $03
>31b8		70 66 61				.text 'pfa'
>31bb							.fill 13
>31c8		99 31					.word w_nfa
.31ca						xt_pfa:
.31ca		4c 10 16	jmp $1610		jmp i_enter
>31cd		de 17					.word xt_x28literalx29
>31cf		16 00					.word 22
>31d1		3d 2a					.word xt_x2b
>31d3		08 16					.word i_exit
.31d5						w_here:
>31d5		04					.byte $04
>31d6		68 65 72 65				.text 'here'
>31da							.fill 12
>31e6		b7 31					.word w_pfa
.31e8						xt_here:
.31e8		4c 10 16	jmp $1610		jmp i_enter
>31eb		7a 2d					.word xt_dp
>31ed		b0 28					.word xt_x40
>31ef		08 16					.word i_exit
.31f1						w_allot:
>31f1		05					.byte $05
>31f2		61 6c 6c 6f 74				.text 'allot'
>31f7							.fill 11
>3202		d5 31					.word w_here
.3204						xt_allot:
.3204		4c 10 16	jmp $1610		jmp i_enter
>3207		7a 2d					.word xt_dp
>3209		17 29					.word xt_x2bx21
>320b		08 16					.word i_exit
.320d						w_x2c:
>320d		01					.byte $01
>320e		2c					.text ','
>320f							.fill 15
>321e		f1 31					.word w_allot
.3220						xt_x2c:
.3220		4c 10 16	jmp $1610		jmp i_enter
>3223		e8 31					.word xt_here
>3225		93 28					.word xt_x21
>3227		a7 17					.word xt_2
>3229		04 32					.word xt_allot
>322b		08 16					.word i_exit
.322d						w_cx2c:
>322d		02					.byte $02
>322e		63 2c					.text 'c,'
>3230							.fill 14
>323e		0d 32					.word w_x2c
.3240						xt_cx2c:
.3240		4c 10 16	jmp $1610		jmp i_enter
>3243		e8 31					.word xt_here
>3245		ca 28					.word xt_cx21
>3247		98 17					.word xt_1
>3249		04 32					.word xt_allot
>324b		08 16					.word i_exit
.324d						w_definitions:
>324d		0b					.byte $0B
>324e		64 65 66 69 6e 69 74 69			.text 'definitions'
>3256		6f 6e 73
>3259							.fill 5
>325e		2d 32					.word w_cx2c
.3260						xt_definitions:
.3260		4c 10 16	jmp $1610		jmp i_enter
>3263		4a 2d					.word xt_context
>3265		b0 28					.word xt_x40
>3267		62 2d					.word xt_current
>3269		93 28					.word xt_x21
>326b		08 16					.word i_exit
.326d						w_latest:
>326d		06					.byte $06
>326e		6c 61 74 65 73 74			.text 'latest'
>3274							.fill 10
>327e		4d 32					.word w_definitions
.3280						xt_latest:
.3280		4c 10 16	jmp $1610		jmp i_enter
>3283		62 2d					.word xt_current
>3285		b0 28					.word xt_x40
>3287		b0 28					.word xt_x40
>3289		08 16					.word i_exit
.328b						w_count:
>328b		05					.byte $05
>328c		63 6f 75 6e 74				.text 'count'
>3291							.fill 11
>329c		6d 32					.word w_latest
.329e						xt_count:
.329e		4c 10 16	jmp $1610		jmp i_enter
>32a1		17 28					.word xt_dup
>32a3		5c 2b					.word xt_1x2b
>32a5		2b 28					.word xt_swap
>32a7		da 28					.word xt_cx40
>32a9		08 16					.word i_exit
.32ab						w_type:
>32ab		04					.byte $04
>32ac		74 79 70 65				.text 'type'
>32b0							.fill 12
>32bc		8b 32					.word w_count
.32be						xt_type:
.32be		4c 10 16	jmp $1610		jmp i_enter
>32c1		ec 2f					.word xt_x3fdup
>32c3		ef 2d					.word xt_x28branch0x29
>32c5		e9 32					.word l_200
>32c7		45 28					.word xt_over
>32c9		3d 2a					.word xt_x2b
>32cb		2b 28					.word xt_swap
>32cd		20 2e					.word xt_x28dox29
.32cf						l_201:
>32cf		39 2f					.word xt_i
>32d1		da 28					.word xt_cx40
>32d3		ec 2f					.word xt_x3fdup
>32d5		ef 2d					.word xt_x28branch0x29
>32d7		df 32					.word l_203
>32d9		35 17					.word xt_emit
>32db		d2 2d					.word xt_x28branchx29
>32dd		e1 32					.word l_204
.32df						l_203:
>32df		5d 2e					.word xt_leave
.32e1						l_204:
>32e1		7a 2e					.word xt_x28loopx29
>32e3		cf 32					.word l_201
.32e5						l_202:
>32e5		d2 2d					.word xt_x28branchx29
>32e7		eb 32					.word l_205
.32e9						l_200:
>32e9		0c 28					.word xt_drop
.32eb						l_205:
>32eb		08 16					.word i_exit
.32ed						w_space:
>32ed		05					.byte $05
>32ee		73 70 61 63 65				.text 'space'
>32f3							.fill 11
>32fe		ab 32					.word w_type
.3300						xt_space:
.3300		4c 10 16	jmp $1610		jmp i_enter
>3303		de 17					.word xt_x28literalx29
>3305		20 00					.word 32
>3307		35 17					.word xt_emit
>3309		08 16					.word i_exit
.330b						w_spaces:
>330b		06					.byte $06
>330c		73 70 61 63 65 73			.text 'spaces'
>3312							.fill 10
>331c		ed 32					.word w_space
.331e						xt_spaces:
.331e		4c 10 16	jmp $1610		jmp i_enter
>3321		8b 17					.word xt_0
>3323		20 2e					.word xt_x28dox29
.3325						l_206:
>3325		00 33					.word xt_space
>3327		7a 2e					.word xt_x28loopx29
>3329		25 33					.word l_206
.332b						l_207:
>332b		08 16					.word i_exit
.332d						w_expect:
>332d		06					.byte $06
>332e		65 78 70 65 63 74			.text 'expect'
>3334							.fill 10
>333e		0b 33					.word w_spaces
.3340						xt_expect:
.3340		4c 10 16	jmp $1610		jmp i_enter
>3343		45 28					.word xt_over
>3345		3d 2a					.word xt_x2b
>3347		2b 28					.word xt_swap
>3349		20 2e					.word xt_x28dox29
.334b						l_208:
>334b		66 17					.word xt_key
>334d		de 17					.word xt_x28literalx29
>334f		08 00					.word 8
>3351		54 2f					.word xt_x28ofx29
>3353		59 33					.word l_211
>3355		d2 2d					.word xt_x28branchx29
>3357		77 33					.word l_210
.3359						l_211:
>3359		de 17					.word xt_x28literalx29
>335b		0d 00					.word 13
>335d		54 2f					.word xt_x28ofx29
>335f		67 33					.word l_212
>3361		5d 2e					.word xt_leave
>3363		d2 2d					.word xt_x28branchx29
>3365		77 33					.word l_210
.3367						l_212:
>3367		17 28					.word xt_dup
>3369		39 2f					.word xt_i
>336b		ca 28					.word xt_cx21
>336d		8b 17					.word xt_0
>336f		39 2f					.word xt_i
>3371		5c 2b					.word xt_1x2b
>3373		ca 28					.word xt_cx21
>3375		35 17					.word xt_emit
.3377						xt_drop:
.3377						l_210:
>3377		7a 2e					.word xt_x28loopx29
>3379		4b 33					.word l_208
.337b						l_209:
>337b		08 16					.word i_exit
.337d						w_initrandom:
>337d		0a					.byte $0A
>337e		69 6e 69 74 72 61 6e 64			.text 'initrandom'
>3386		6f 6d
>3388							.fill 6
>338e		2d 33					.word w_expect
.3390						xt_initrandom:
.3390		4c 10 16	jmp $1610		jmp i_enter
>3393		98 17					.word xt_1
>3395		de 17					.word xt_x28literalx29
>3397		a6 d6					.word 54950
>3399		ca 28					.word xt_cx21
>339b		08 16					.word i_exit
.339d						w_random:
>339d		06					.byte $06
>339e		72 61 6e 64 6f 6d			.text 'random'
>33a4							.fill 10
>33ae		7d 33					.word w_initrandom
.33b0						xt_random:
.33b0		4c 10 16	jmp $1610		jmp i_enter
>33b3		de 17					.word xt_x28literalx29
>33b5		a4 d6					.word 54948
>33b7		b0 28					.word xt_x40
>33b9		08 16					.word i_exit
.33bb						w_maze:
>33bb		04					.byte $04
>33bc		6d 61 7a 65				.text 'maze'
>33c0							.fill 12
>33cc		9d 33					.word w_random
.33ce						xt_maze:
.33ce		4c 10 16	jmp $1610		jmp i_enter
>33d1		90 33					.word xt_initrandom
.33d3						l_213:
>33d3		b0 33					.word xt_random
>33d5		98 17					.word xt_1
>33d7		a5 2b					.word xt_and
>33d9		de 17					.word xt_x28literalx29
>33db		cd 00					.word 205
>33dd		3d 2a					.word xt_x2b
>33df		35 17					.word xt_emit
>33e1		d2 2d					.word xt_x28branchx29
>33e3		d3 33					.word l_213
.33e5						l_214:
>33e5		08 16					.word i_exit
.33e7						w_cold:
>33e7		04					.byte $04
>33e8		63 6f 6c 64				.text 'cold'
>33ec							.fill 12
>33f8		bb 33					.word w_maze
.33fa						xt_cold:
.33fa		4c 10 16	jmp $1610		jmp i_enter
>33fd		de 17					.word xt_x28literalx29
>33ff		05 34					.word l_215
>3401		d2 2d					.word xt_x28branchx29
>3403		24 34					.word l_216
.3405						l_215:
>3405		1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>340d		20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>341d		30 2e 30 30 2e 30 30
.3424						l_216:
>3424		9e 32					.word xt_count
>3426		be 32					.word xt_type
>3428		7d 17					.word xt_cr
>342a		de 17					.word xt_x28literalx29
>342c		00 50					.word 20480
>342e		de 17					.word xt_x28literalx29
>3430		50 00					.word 80
>3432		40 33					.word xt_expect
>3434		7d 17					.word xt_cr
>3436		de 17					.word xt_x28literalx29
>3438		3e 34					.word l_217
>343a		d2 2d					.word xt_x28branchx29
>343c		47 34					.word l_218
.343e						l_217:
>343e		08 74 79 70 65 64 2e 2e			.ptext "typed..."
>3446		2e
.3447						l_218:
>3447		9e 32					.word xt_count
>3449		be 32					.word xt_type
>344b		7d 17					.word xt_cr
>344d		de 17					.word xt_x28literalx29
>344f		00 50					.word 20480
>3451		de 17					.word xt_x28literalx29
>3453		50 00					.word 80
>3455		be 32					.word xt_type
>3457		08 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.010000	0000					endcode:

;******  Return to file: forth.asm


;******  End of listing
