
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --mw65c02 --intel-hex -o forth.hex --list=forth.lst forth.asm
; Sun Jan 15 18:44:12 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: forth.asm


;******  Processing file: mf_pre_65c02.asm

=$0000					pstack = $0000          ; Location of the "bottom" of the parameter stack
=$a000					USERAREA = $a000        ; Area for user variables
=9					CHAR_TAB = 9

;******  Processing file: bios65.asm


;******  Processing file: sections.asm


;******  Return to file: bios65.asm


;******  Processing file: bios_vec.asm

>fffa	cc 0a				vnmi:       .word <>h_nmi
>fffc	00 b0				vreset:     .word <>boot
>fffe	cd 0a				virq:       .word <>h_irq

;******  Return to file: bios65.asm


;******  Processing file: io_f256.asm

=$0000					MMU_MEM_CTRL = $0000
=$0001					MMU_IO_CTRL = $0001
=$00					MMU_IO_PAGE_0 = $00
=$01					MMU_IO_PAGE_1 = $01
=$02					MMU_IO_PAGE_TEXT = $02
=$03					MMU_IO_PAGE_COLOR = $03
=$d000					VKY_MST_CTRL_0 = $d000
=$01					VKY_MST_TEXT = $01
=$02					VKY_MST_OVLY = $02
=$04					VKY_MST_GRAPHICS = $04
=$08					VKY_MST_BITMAP = $08
=$10					VKY_MST_TILE = $10
=$20					VKY_MST_SPRITE = $20
=$40					VKY_MST_GAMMA = $40
=$d001					VKY_MST_CTRL_1 = $d001
=$01					VKY_MST_RES_400 = $01
=$02					VKY_MST_DBL_X = $02
=$04					VKY_MST_DBL_Y = $04
=$08					VKY_MST_SLEEP = $08
=$10					VKY_MST_OVLY_TRANS = $10
=$d004					VKY_BRD_CTRL = $d004
=$d005					VKY_BRD_BLUE = $d005
=$d006					VKY_BRD_GREEN = $d006
=$d007					VKY_BRD_RED = $d007
=$d008					VKY_BRD_SIZE_X = $d008
=$d009					VKY_BRD_SIZE_Y = $d009
=$d010					VKY_CURS_CTRL = $d010
=$01					VKY_CURS_ENABLE = $01
=$08					VKY_CURS_FLASH_1S = $08
=$0a					VKY_CURS_FLASH_0_5S = $0a
=$0c					VKY_CURS_FLASH_0_25S = $0c
=$0d					VKY_CURS_FLASH_0_125S = $0d
=$d012					VKY_CURS_CHAR = $d012
=$d014					VKY_CURS_X = $d014
=$d016					VKY_CURS_Y = $d016
=$c000					VKY_TEXT_MATRIX = $c000
=$d800					VKY_TEXT_FG_LUT = $d800
=$d840					VKY_TEXT_BG_LUT = $d840
=$c000					VKY_TEXT_FONT = $c000
=$d66c					INT_MASK_0 = $D66C
=$d660					INT_PEND_0 = $D660
=$d66d					INT_MASK_1 = $D66D
=$d661					INT_PEND_1 = $D661
=$04					INT_PS2_KBD = $04

;******  Return to file: bios65.asm

=8					CHAR_BS = 8                         ; Backspace
=12					CHAR_FF = 12                        ; Form feed character
=13					CHAR_NL = 13                        ; Newline character
>0020					shell_start .word ?                 ; Address for the recognized shell program
>0022					cur_line    .word ?                 ; Address of the current line on the text screen
>0024					src_ptr     .word ?                 ; General pointer for the source of something in memory
>0026					dst_ptr     .word ?                 ; General pointer for the destination of something in memory
>0200					curs_color  .byte ?                 ; Current color for printing
>0201					curs_x      .byte ?                 ; Current column for the text cursor
>0202					curs_y      .byte ?                 ; Current row for the text cursor
>0203					old_y       .byte ?                 ; Previous cursor row
>0204					curs_width  .byte ?                 ; Width of the screen in text columns
>0205					curs_height .byte ?                 ; Height of the screen in text columns
.b000	4c 00 08	jmp $0800	boot        jmp iboot               ; Boot from power up or reset
.b003	4c 0a 08	jmp $080a	setshell    jmp isetshell           ; Set the address for the shell to Y:A
.b006	4c 0f 08	jmp $080f	warm        jmp iwarm               ; Re-initialize BIOS variables and start main code
.b009	4c 30 0a	jmp $0a30	conout      jmp iconout             ; Print a character in A to the screen
.b00c	4c f4 12	jmp $12f4	constat     jmp kbd_status          ; Return the status of the console
.b00f	4c 0e 13	jmp $130e	conin       jmp kbd_dequeue         ; Return any pending key in A (0 if none)
.b012	4c 86 0a	jmp $0a86	printah     jmp iprintah            ; Print the hexadecimal number in A
.b015	4c a1 0a	jmp $0aa1	printyah    jmp iprintyah           ; Print the 16-bit hexadecimal number in Y:A
.b018	4c bb 0a	jmp $0abb	prints      jmp iprints             ; Print the ASCIIZ string indicated by src_ptr
.0800	a9 e9		lda #$e9	iboot:      lda #<start             ; At the moment, the shell will always be whatever is defined at START
.0802	a0 15		ldy #$15	            ldy #>start
.0804	20 03 b0	jsr $b003	            jsr setshell            ; Set the address of the shell
.0807	4c 06 b0	jmp $b006	            jmp warm                ; Initialize system
.080a					isetshell:
.080a	84 21		sty $21		            sty shell_start+1
.080c	85 20		sta $20		            sta shell_start
.080e	60		rts		            rts
.080f					iwarm:
.080f	78		sei		            sei                     ; Disable IRQs
.0810	d8		cld		            cld                     ; Make sure we're not in decimal mode
.0811	a2 ff		ldx #$ff	            ldx #$ff                ; Initialize the stack
.0813	9a		txs		            txs
.0814	a9 00		lda #$00	            lda #MMU_IO_PAGE_0      ; Make sure we're on I/O page #0
.0816	85 01		sta $01		            sta MMU_IO_CTRL
.0818	20 ea 12	jsr $12ea	            jsr initkbd             ; Initialize the keyboard code
.081b	20 59 08	jsr $0859	            jsr initint             ; Initialize the interrupt system
.081e	20 24 08	jsr $0824	            jsr inittext            ; Initialize the text screen
.0821	6c 20 00	jmp ($0020)	            jmp (shell_start)       ; Transfer control to installed shell
.0824					inittext:
.0824	a9 01		lda #$01	            lda #VKY_MST_TEXT       ; Turn on text mode
.0826	8d 00 d0	sta $d000	            sta VKY_MST_CTRL_0
.0829	9c 01 d0	stz $d001	            stz VKY_MST_CTRL_1      ; Set to 80x60 resolution
.082c	a9 50		lda #$50	            lda #80                 ; Set BIOS variables to 80x60
.082e	8d 04 02	sta $0204	            sta curs_width
.0831	a9 3c		lda #$3c	            lda #60
.0833	8d 05 02	sta $0205	            sta curs_height
.0836	a9 00		lda #$00	            lda #0                  ; Turn off the border
.0838	8d 04 d0	sta $d004	            sta VKY_BRD_CTRL
.083b	a9 01		lda #$01	            lda #VKY_CURS_ENABLE    ; Turn on the cursor with no flashing
.083d	8d 10 d0	sta $d010	            sta VKY_CURS_CTRL
.0840	a9 7f		lda #$7f	            lda #CURS_CHAR          ; Set the cursor character (will be defined with the font)
.0842	8d 12 d0	sta $d012	            sta VKY_CURS_CHAR
.0845	a9 f4		lda #$f4	            lda #DEF_COLOR          ; Set the default color (will be defined with the LUT)
.0847	8d 00 02	sta $0200	            sta curs_color
.084a	a9 ff		lda #$ff	            lda #$ff                ; Set old_y to something silly
.084c	8d 03 02	sta $0203	            sta old_y
.084f	20 9e 08	jsr $089e	            jsr initlut             ; Initialize the text color lookup tables
.0852	20 6b 08	jsr $086b	            jsr initfont            ; Initialize the text font
.0855	20 fd 08	jsr $08fd	            jsr consclr             ; Clear the text screen and home the cursor
.0858	60		rts		            rts
.0859					initint:
.0859	a9 fb		lda #$fb	            lda #~INT_PS2_KBD
.085b	8d 6c d6	sta $d66c	            sta INT_MASK_0
.085e	a9 ff		lda #$ff	            lda #$ff
.0860	8d 6d d6	sta $d66d	            sta INT_MASK_1
.0863	8d 60 d6	sta $d660	            sta INT_PEND_0
.0866	8d 61 d6	sta $d661	            sta INT_PEND_1
.0869	58		cli		            cli
.086a	60		rts		            rts
=$7f					CURS_CHAR = $7f                     ; Define the character to use for the text cursor (font dependent)
.086b					initfont:
.086b	48		pha		            pha
.086c	da		phx		            phx
.086d	5a		phy		            phy
.086e	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0870	48		pha		            pha
.0871	a9 01		lda #$01	            lda #MMU_IO_PAGE_1      ; Set to I/O page 1 (font memory)
.0873	85 01		sta $01		            sta MMU_IO_CTRL
.0875	a9 ea		lda #$ea	            lda #<bios_font         ; src_ptr points to the font we want
.0877	85 24		sta $24		            sta src_ptr
.0879	a9 0a		lda #$0a	            lda #>bios_font
.087b	85 25		sta $25		            sta src_ptr+1
.087d	a9 00		lda #$00	            lda #<VKY_TEXT_FONT     ; dst_ptr is the font memory in I/O page 1
.087f	85 26		sta $26		            sta dst_ptr
.0881	a9 c0		lda #$c0	            lda #>VKY_TEXT_FONT
.0883	85 27		sta $27		            sta dst_ptr+1
.0885	a2 08		ldx #$08	            ldx #8                  ; Load the number of pages we need to copy
.0887	a0 00		ldy #$00	            ldy #0                  ; Start at the beginning of the page
.0889	b1 24		lda ($24),y	loop:       lda (src_ptr),y         ; Read a byte from the font
.088b	91 26		sta ($26),y	            sta (dst_ptr),y         ; And copy it to the font memory
.088d	c8		iny		            iny                     ; Move to the next byte
.088e	d0 f9		bne $0889	            bne loop                ; Keep copying the entire page
.0890	e6 25		inc $25		            inc src_ptr+1           ; Move the source to the next source page
.0892	e6 27		inc $27		            inc dst_ptr+1           ; Move the destination to the next destination page
.0894	ca		dex		            dex                     ; Count down the pages moved
.0895	d0 f2		bne $0889	            bne loop                ; And keep copying until 0
.0897	68		pla		            pla
.0898	85 01		sta $01		            sta MMU_IO_CTRL         ; Restore the I/O page
.089a	7a		ply		            ply
.089b	fa		plx		            plx
.089c	68		pla		            pla
.089d	60		rts		            rts
=$f4					DEF_COLOR = $f4                     ; Define the default color (CLUT dependent)
.089e					initlut:
.089e	48		pha		            pha
.089f	5a		phy		            phy
.08a0	a5 01		lda $01		            lda MMU_IO_CTRL             ; Save the current I/O page
.08a2	48		pha		            pha
.08a3	a9 00		lda #$00	            lda #MMU_IO_PAGE_0          ; Make sure we're on I/O page #0
.08a5	85 01		sta $01		            sta MMU_IO_CTRL
.08a7	a0 00		ldy #$00	            ldy #0
.08a9	b9 bd 08	lda $08bd,y	loop:       lda text_lut,y              ; Get a color component
.08ac	99 00 d8	sta $d800,y	            sta VKY_TEXT_FG_LUT,y       ; Write it to the text foreground CLUT
.08af	99 40 d8	sta $d840,y	            sta VKY_TEXT_BG_LUT,y       ; And then to the text background CLUT
.08b2	c8		iny		            iny
.08b3	c0 40		cpy #$40	            cpy #4*16                   ; Have we copied all 16 colors (4 components)
.08b5	d0 f2		bne $08a9	            bne loop                    ; No: copy the next one
.08b7	68		pla		            pla
.08b8	85 01		sta $01		            sta MMU_IO_CTRL             ; Restore the current I/O page
.08ba	7a		ply		            ply
.08bb	68		pla		            pla
.08bc	60		rts		            rts
>08bd	00 00 00 00			text_lut:   .byte $00, $00, $00, $00    ; Black
>08c1	00 00 80 00			            .byte $00, $00, $80, $00    ; Red
>08c5	00 80 00 00			            .byte $00, $80, $00, $00    ; Green
>08c9	00 80 80 00			            .byte $00, $80, $80, $00    ; Yellow
>08cd	80 00 00 00			            .byte $80, $00, $00, $00    ; Blue
>08d1	80 00 80 00			            .byte $80, $00, $80, $00    ; Magenta
>08d5	80 80 00 00			            .byte $80, $80, $00, $00    ; Cyan
>08d9	8c 8c 8c 00			            .byte $8c, $8c, $8c, $00    ; White
>08dd	80 80 80 00			            .byte $80, $80, $80, $00    ; Bright Black
>08e1	00 00 ff 00			            .byte $00, $00, $ff, $00    ; Bright Red
>08e5	00 ff 00 00			            .byte $00, $ff, $00, $00    ; Bright Green
>08e9	00 ff ff 00			            .byte $00, $ff, $ff, $00    ; Bright Yellow
>08ed	ff 00 00 00			            .byte $ff, $00, $00, $00    ; Bright Blue
>08f1	ff 00 ff 00			            .byte $ff, $00, $ff, $00    ; Bright Magenta
>08f5	ff ff 00 00			            .byte $ff, $ff, $00, $00    ; Bright Cyan
>08f9	ff ff ff 00			            .byte $ff, $ff, $ff, $00    ; Bright White
.08fd					consclr:
.08fd	48		pha		            pha
.08fe	da		phx		            phx
.08ff	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Move the current line to the first line
.0901	85 22		sta $22		            sta cur_line
.0903	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0905	85 23		sta $23		            sta cur_line+1
.0907	a0 00		ldy #$00	            ldy #0
.0909	20 04 0a	jsr $0a04	loop:       jsr clrline             ; Clear the current line
.090c	c8		iny		            iny                     ; Move to the next line
.090d	cc 05 02	cpy $0205	            cpy curs_height
.0910	f0 10		beq $0922	            beq home                ; If we've done the last line, home the cursor
.0912	18		clc		            clc                     ; Advance cur_line to the next line in the matrix
.0913	a5 22		lda $22		            lda cur_line
.0915	6d 04 02	adc $0204	            adc curs_width
.0918	85 22		sta $22		            sta cur_line
.091a	a5 23		lda $23		            lda cur_line+1
.091c	69 00		adc #$00	            adc #0
.091e	85 23		sta $23		            sta cur_line+1
.0920	80 e7		bra $0909	            bra loop                ; And go back to clear it too
.0922	9c 01 02	stz $0201	home:       stz curs_x              ; Set the cursor to (0, 0)
.0925	9c 02 02	stz $0202	            stz curs_y
.0928	20 2e 09	jsr $092e	            jsr cursset
.092b	fa		plx		            plx
.092c	68		pla		            pla
.092d	60		rts		            rts
.092e					cursset:
.092e	48		pha		            pha
.092f	5a		phy		            phy
.0930	ad 01 02	lda $0201	            lda curs_x              ; Where is the cursor column pointing
.0933	cd 04 02	cmp $0204	            cmp curs_width
.0936	90 06		bcc $093e	            blt chk_row             ; If on screen, let's check the row
.0938	9c 01 02	stz $0201	            stz curs_x              ; If not on screen, move it to the left and down
.093b	ee 02 02	inc $0202	            inc curs_y
.093e					chk_row:
.093e	ad 02 02	lda $0202	            lda curs_y              ; Where is the cursor row pointing
.0941	cd 05 02	cmp $0205	            cmp curs_height
.0944	90 0a		bcc $0950	            blt set_hw              ; If on screen, set the hardware registers
.0946	ad 05 02	lda $0205	            lda curs_height         ; Otherwise: Move the last visible row
.0949	3a		dec a		            dec a
.094a	8d 02 02	sta $0202	            sta curs_y
.094d	20 8e 09	jsr $098e	            jsr consscroll          ; And we need to scroll the screen
.0950	ad 01 02	lda $0201	set_hw:     lda curs_x              ; Set the hardware cursor column
.0953	8d 14 d0	sta $d014	            sta VKY_CURS_X
.0956	9c 15 d0	stz $d015	            stz VKY_CURS_X+1
.0959	ad 02 02	lda $0202	            lda curs_y              ; Set the hardware cursor row
.095c	8d 16 d0	sta $d016	            sta VKY_CURS_Y
.095f	9c 17 d0	stz $d017	            stz VKY_CURS_Y+1
.0962	ad 03 02	lda $0203	            lda old_y               ; Is old_y == curs_y
.0965	cd 02 02	cmp $0202	            cmp curs_y
.0968	f0 21		beq $098b	            beq done                ; Yes: we are done
.096a	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Start on the first line
.096c	85 22		sta $22		            sta cur_line
.096e	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.0970	85 23		sta $23		            sta cur_line+1
.0972	ac 02 02	ldy $0202	            ldy curs_y              ; Get the desired row
.0975	8c 03 02	sty $0203	            sty old_y               ; And mark that it will be our old row from now on
.0978	f0 11		beq $098b	            beq done                ; If it's zero, we are done
.097a	18		clc		loop:       clc                     ; Move cur_line to the next line
.097b	a5 22		lda $22		            lda cur_line
.097d	6d 04 02	adc $0204	            adc curs_width
.0980	85 22		sta $22		            sta cur_line
.0982	a5 23		lda $23		            lda cur_line+1
.0984	69 00		adc #$00	            adc #0
.0986	85 23		sta $23		            sta cur_line+1
.0988	88		dey		            dey                     ; Decrement line counter
.0989	d0 ef		bne $097a	            bne loop                ; If not zero, keep moving down a line
.098b	7a		ply		done:       ply
.098c	68		pla		            pla
.098d	60		rts		            rts
.098e					consscroll:
.098e	48		pha		            pha
.098f	da		phx		            phx
.0990	a5 23		lda $23		            lda cur_line+1          ; Save the current line
.0992	48		pha		            pha
.0993	a5 22		lda $22		            lda cur_line
.0995	48		pha		            pha
.0996	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0998	48		pha		            pha
.0999	a9 00		lda #$00	            lda #<VKY_TEXT_MATRIX   ; Destination pointer is the first line
.099b	85 26		sta $26		            sta dst_ptr
.099d	a9 c0		lda #$c0	            lda #>VKY_TEXT_MATRIX
.099f	85 27		sta $27		            sta dst_ptr+1
.09a1	18		clc		            clc                     ; src_ptr is the second line
.09a2	a5 26		lda $26		            lda dst_ptr
.09a4	6d 04 02	adc $0204	            adc curs_width
.09a7	85 24		sta $24		            sta src_ptr
.09a9	a5 27		lda $27		            lda dst_ptr+1
.09ab	69 00		adc #$00	            adc #0
.09ad	85 25		sta $25		            sta src_ptr+1
.09af	a2 01		ldx #$01	            ldx #1                  ; X will be our source row number
.09b1	a9 02		lda #$02	copy_text:  lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.09b3	85 01		sta $01		            sta MMU_IO_CTRL
.09b5	a0 00		ldy #$00	            ldy #0                  ; Copy a text line from src to dst
.09b7	b1 24		lda ($24),y	loop1:      lda (src_ptr),y
.09b9	91 26		sta ($26),y	            sta (dst_ptr),y
.09bb	c8		iny		            iny
.09bc	cc 04 02	cpy $0204	            cpy curs_width
.09bf	d0 f6		bne $09b7	            bne loop1
.09c1	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.09c3	85 01		sta $01		            sta MMU_IO_CTRL
.09c5	a0 00		ldy #$00	            ldy #0                  ; Copy a color line from src to dst
.09c7	b1 24		lda ($24),y	loop2:      lda (src_ptr),y
.09c9	91 26		sta ($26),y	            sta (dst_ptr),y
.09cb	c8		iny		            iny
.09cc	cc 04 02	cpy $0204	            cpy curs_width
.09cf	d0 f6		bne $09c7	            bne loop2
.09d1	a5 24		lda $24		            lda src_ptr             ; Move dst_ptr to the next line
.09d3	85 26		sta $26		            sta dst_ptr
.09d5	a5 25		lda $25		            lda src_ptr+1
.09d7	85 27		sta $27		            sta dst_ptr+1
.09d9	18		clc		            clc                     ; Move src_ptr to the next line
.09da	a5 24		lda $24		            lda src_ptr
.09dc	6d 04 02	adc $0204	            adc curs_width
.09df	85 24		sta $24		            sta src_ptr
.09e1	a5 25		lda $25		            lda src_ptr+1
.09e3	69 00		adc #$00	            adc #0
.09e5	85 25		sta $25		            sta src_ptr+1
.09e7	e8		inx		            inx                     ; Move src line number to the next row
.09e8	ec 05 02	cpx $0205	            cpx curs_height         ; Have we copied the last row?
.09eb	d0 c4		bne $09b1	            bne copy_text           ; No: copy the line
.09ed	a5 26		lda $26		            lda dst_ptr             ; Clear the destination line
.09ef	85 22		sta $22		            sta cur_line
.09f1	a5 27		lda $27		            lda dst_ptr+1
.09f3	85 22		sta $22		            sta cur_line
.09f5	20 04 0a	jsr $0a04	            jsr clrline
.09f8	68		pla		            pla                     ; Restore the original I/O page
.09f9	85 01		sta $01		            sta MMU_IO_CTRL
.09fb	68		pla		            pla                     ; Restore the current line
.09fc	85 22		sta $22		            sta cur_line
.09fe	68		pla		            pla
.09ff	85 23		sta $23		            sta cur_line+1
.0a01	fa		plx		            plx
.0a02	68		pla		            pla
.0a03	60		rts		            rts
.0a04					clrline:
.0a04	48		pha		            pha
.0a05	5a		phy		            phy
.0a06	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a08	48		pha		            pha
.0a09	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a0b	85 01		sta $01		            sta MMU_IO_CTRL
.0a0d	a0 00		ldy #$00	            ldy #0                  ; Fill the text matrix line with blanks
.0a0f	a9 20		lda #$20	            lda #' '
.0a11	91 22		sta ($22),y	loop1:      sta (cur_line),y
.0a13	c8		iny		            iny
.0a14	cc 04 02	cpy $0204	            cpy curs_width
.0a17	d0 f8		bne $0a11	            bne loop1
.0a19	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the text color page
.0a1b	85 01		sta $01		            sta MMU_IO_CTRL
.0a1d	a0 00		ldy #$00	            ldy #0                  ; Fill the color matrix line with the current color
.0a1f	ad 00 02	lda $0200	            lda curs_color
.0a22	91 22		sta ($22),y	loop2:      sta (cur_line),y
.0a24	c8		iny		            iny
.0a25	cc 04 02	cpy $0204	            cpy curs_width
.0a28	d0 f8		bne $0a22	            bne loop2
.0a2a	68		pla		            pla                     ; Restore the original I/O page
.0a2b	85 01		sta $01		            sta MMU_IO_CTRL
.0a2d	7a		ply		            ply
.0a2e	68		pla		            pla
.0a2f	60		rts		            rts
.0a30					iconout:
.0a30	5a		phy		            phy
.0a31	c9 0d		cmp #$0d	            cmp #CHAR_NL            ; Is it a carriage return?
.0a33	d0 0b		bne $0a40	            bne not_cr
.0a35	9c 01 02	stz $0201	            stz curs_x              ; Yes: Do a carriage return
.0a38	ee 02 02	inc $0202	            inc curs_y
.0a3b	20 2e 09	jsr $092e	            jsr cursset
.0a3e	80 44		bra $0a84	            bra done
.0a40	c9 0c		cmp #$0c	not_cr:     cmp #CHAR_FF            ; Is it a FF character?
.0a42	d0 05		bne $0a49	            bne not_ff
.0a44	20 fd 08	jsr $08fd	            jsr consclr             ; Yes: clear the screen
.0a47	80 3b		bra $0a84	            bra done
.0a49	c9 08		cmp #$08	not_ff:     cmp #CHAR_BS            ; Is it a backspace character?
.0a4b	d0 15		bne $0a62	            bne not_bs
.0a4d	ad 01 02	lda $0201	            lda curs_x              ; Yes: move the cursor back
.0a50	f0 07		beq $0a59	            beq bs_leftmost         ; Is it already on column 0?
.0a52	3a		dec a		            dec a                   ; No: move it back one
.0a53	8d 01 02	sta $0201	            sta curs_x
.0a56	20 2e 09	jsr $092e	            jsr cursset
.0a59					bs_leftmost:
.0a59	a9 20		lda #$20	            lda #' '                ; Clear the current character
.0a5b	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a5e	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a60	80 22		bra $0a84	            bra done
.0a62	85 32		sta $32		not_bs:     sta tmp                 ; Otherwise: save A in preparation for printing
.0a64	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current I/O page
.0a66	48		pha		            pha
.0a67	a9 02		lda #$02	            lda #MMU_IO_PAGE_TEXT   ; Move to the text page
.0a69	85 01		sta $01		            sta MMU_IO_CTRL
.0a6b	a5 32		lda $32		            lda tmp                 ; Get A back
.0a6d	ac 01 02	ldy $0201	            ldy curs_x              ; Get the index to the cursor
.0a70	91 22		sta ($22),y	            sta (cur_line),y        ; Write the character to the screen
.0a72	a9 03		lda #$03	            lda #MMU_IO_PAGE_COLOR  ; Move to the color page
.0a74	85 01		sta $01		            sta MMU_IO_CTRL
.0a76	ad 00 02	lda $0200	            lda curs_color          ; Get the current color
.0a79	91 22		sta ($22),y	            sta (cur_line),y        ; And set it on the screen
.0a7b	68		pla		            pla                     ; Restore the I/O page
.0a7c	85 01		sta $01		            sta MMU_IO_CTRL
.0a7e	ee 01 02	inc $0201	            inc curs_x              ; Move to the next column
.0a81	20 2e 09	jsr $092e	            jsr cursset
.0a84	7a		ply		done:       ply
.0a85	60		rts		            rts
.0a86					iprintah:
.0a86	da		phx		            phx
.0a87	48		pha		            pha
.0a88	4a		lsr a		            lsr a
.0a89	4a		lsr a		            lsr a
.0a8a	4a		lsr a		            lsr a
.0a8b	4a		lsr a		            lsr a
.0a8c	29 0f		and #$0f	            and #$0f
.0a8e	aa		tax		            tax                     ; Convert it to an index
.0a8f	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a92	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a95	68		pla		            pla
.0a96	29 0f		and #$0f	            and #$0f                ; Isolate the low nibble
.0a98	aa		tax		            tax                     ; Convert it to an index
.0a99	bd ab 0a	lda $0aab,x	            lda hex_digits,x        ; Lookup the hex digit for that nibble
.0a9c	20 09 b0	jsr $b009	            jsr conout              ; And print it
.0a9f	fa		plx		            plx
.0aa0	60		rts		            rts
.0aa1					iprintyah:
.0aa1	48		pha		            pha
.0aa2	98		tya		            tya
.0aa3	20 12 b0	jsr $b012	            jsr printah
.0aa6	68		pla		            pla
.0aa7	20 12 b0	jsr $b012	            jsr printah
.0aaa	60		rts		            rts
>0aab	30 31 32 33 34 35 36 37		hex_digits: .text "0123456789ABCDEF"
>0ab3	38 39 41 42 43 44 45 46
.0abb					iprints:
.0abb	48		pha		            pha
.0abc	5a		phy		            phy
.0abd	a0 00		ldy #$00	            ldy #0
.0abf	b1 24		lda ($24),y	loop:       lda (src_ptr),y
.0ac1	f0 06		beq $0ac9	            beq done
.0ac3	20 09 b0	jsr $b009	            jsr conout
.0ac6	c8		iny		            iny
.0ac7	d0 f6		bne $0abf	            bne loop
.0ac9	7a		ply		done:       ply
.0aca	68		pla		            pla
.0acb	60		rts		            rts
.0acc					h_nmi:
.0acc	40		rti		            rti                     ; Just return
.0acd					h_irq:
.0acd	48		pha		            pha
.0ace	a5 01		lda $01		            lda MMU_IO_CTRL         ; Save the current IO page settings
.0ad0	48		pha		            pha
.0ad1	64 00		stz $00		            stz MMU_IO_PAGE_0       ; Go to I/O page 0
.0ad3	ad 60 d6	lda $d660	            lda INT_PEND_0          ; Check group 0 pending
.0ad6	89 04		bit #$04	            bit #INT_PS2_KBD        ; Is it the keyboard?
.0ad8	f0 03		beq $0add	            beq done                ; No: we're done
.0ada	20 30 13	jsr $1330	            jsr handlekbd           ; Handle a keyboard interrupt
.0add					done:
.0add	a9 ff		lda #$ff	            lda #$ff                ; Clear all pending interrupts
.0adf	8d 60 d6	sta $d660	            sta INT_PEND_0
.0ae2	8d 61 d6	sta $d661	            sta INT_PEND_1
.0ae5	68		pla		            pla                     ; Restore the IO page settings
.0ae6	85 01		sta $01		            sta MMU_IO_CTRL
.0ae8	68		pla		            pla
.0ae9	40		rti		            rti                     ; Just return
>0aea	00 00 00 00 00 00 00 00		bios_font:  .binary "bin/MSX_CP437_8x8.bin"
>0af2	7e 81 a5 81 bd 99 81 7e 7e ff db ff ff c3 e7 7e
>0b02	00 6c fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>0b12	38 38 fe fe 54 10 7c 00 10 38 7c fe fe 38 7c 00
>0b22	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff
>0b32	00 18 24 42 42 24 18 00 ff e7 db bd bd db e7 ff
>0b42	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>0b52	30 28 24 24 28 20 e0 c0 3c 24 3c 24 24 e4 dc 18
>0b62	10 54 28 c6 28 54 10 00 20 30 38 3c 38 30 20 00
>0b72	04 0c 1c 3c 1c 0c 04 00 10 38 7c 10 10 7c 38 10
>0b82	48 48 48 48 48 00 48 00 3e 4a 4a 3a 0a 0a 0a 00
>0b92	1c 20 18 24 24 18 04 38 00 00 00 00 00 7e 7e 00
>0ba2	10 38 7c 10 7c 38 10 ff 10 38 54 10 10 10 10 10
>0bb2	10 10 10 10 10 54 38 10 00 20 40 ff 40 20 00 00
>0bc2	00 04 02 ff 02 04 00 00 00 00 40 40 7c 00 00 00
>0bd2	00 24 42 ff 42 24 00 00 00 10 38 7c fe 00 00 00
>0be2	00 fe 7c 38 10 00 00 00 00 00 00 00 00 00 00 00
>0bf2	10 10 10 10 10 00 10 00 28 28 28 00 00 00 00 00
>0c02	28 28 7c 28 7c 28 28 00 10 3c 50 38 14 78 10 00
>0c12	60 64 08 10 20 4c 0c 00 20 50 50 20 54 48 34 00
>0c22	08 10 20 00 00 00 00 00 10 20 40 40 40 20 10 00
>0c32	10 08 04 04 04 08 10 00 10 54 38 10 38 54 10 00
>0c42	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>0c52	00 00 00 7c 00 00 00 00 00 00 00 00 00 18 18 00
>0c62	00 00 04 08 10 20 40 00 38 44 44 54 44 44 38 00
>0c72	10 30 50 10 10 10 7c 00 38 44 04 08 30 40 7c 00
>0c82	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>0c92	7c 40 70 08 04 08 70 00 18 20 40 78 44 44 38 00
>0ca2	7c 44 08 10 10 10 10 00 38 44 44 38 44 44 38 00
>0cb2	38 44 44 3c 04 08 30 00 00 00 10 00 00 10 00 00
>0cc2	00 00 10 00 00 10 20 00 0c 18 30 60 30 18 0c 00
>0cd2	00 00 7c 00 00 7c 00 00 60 30 18 0c 18 30 60 00
>0ce2	38 44 04 08 10 00 10 00 38 44 04 34 54 54 38 00
>0cf2	10 28 44 44 7c 44 44 00 78 24 24 38 24 24 78 00
>0d02	18 24 40 40 40 24 18 00 70 28 24 24 24 28 70 00
>0d12	7c 40 40 78 40 40 7c 00 7c 40 40 78 40 40 40 00
>0d22	38 44 40 5c 44 44 38 00 44 44 44 7c 44 44 44 00
>0d32	38 10 10 10 10 10 38 00 1c 08 08 08 48 48 30 00
>0d42	44 48 50 60 50 48 44 00 40 40 40 40 40 40 7c 00
>0d52	44 6c 54 54 44 44 44 00 44 44 64 54 4c 44 44 00
>0d62	38 44 44 44 44 44 38 00 78 44 44 78 40 40 40 00
>0d72	38 44 44 44 54 48 34 00 78 44 44 78 50 48 44 00
>0d82	38 44 40 38 04 44 38 00 7c 10 10 10 10 10 10 00
>0d92	44 44 44 44 44 44 38 00 44 44 44 44 44 28 10 00
>0da2	44 44 44 54 54 6c 44 00 44 44 28 10 28 44 44 00
>0db2	44 44 44 38 10 10 10 00 7c 04 08 10 20 40 7c 00
>0dc2	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 00 00
>0dd2	3c 04 04 04 04 04 3c 00 10 28 44 00 00 00 00 00
>0de2	00 00 00 00 00 00 7c 00 20 10 08 00 00 00 00 00
>0df2	00 00 38 04 3c 44 3c 00 40 40 58 64 44 64 58 00
>0e02	00 00 38 44 40 44 38 00 04 04 34 4c 44 4c 34 00
>0e12	00 00 38 44 7c 40 38 00 18 24 20 78 20 20 20 00
>0e22	00 00 38 44 44 3c 04 38 40 40 78 44 44 44 44 00
>0e32	00 10 00 30 10 10 38 00 00 08 00 18 08 08 48 30
>0e42	40 40 48 50 60 50 48 00 30 10 10 10 10 10 38 00
>0e52	00 00 68 54 54 54 54 00 00 00 58 64 44 44 44 00
>0e62	00 00 38 44 44 44 38 00 00 00 58 64 64 58 40 40
>0e72	00 00 34 4c 4c 34 04 04 00 00 58 64 40 40 40 00
>0e82	00 00 3c 40 38 04 78 00 20 20 78 20 20 24 18 00
>0e92	00 00 48 48 48 48 34 00 00 00 44 44 44 28 10 00
>0ea2	00 00 44 44 54 54 28 00 00 00 44 28 10 28 44 00
>0eb2	00 00 44 44 4c 34 04 38 00 00 7c 08 10 20 7c 00
>0ec2	0c 10 10 20 10 10 0c 00 10 10 10 00 10 10 10 00
>0ed2	30 08 08 04 08 08 30 00 20 54 08 00 00 00 00 00
>0ee2	7c 7c 7c 7c 7c 7c 7c 00 18 24 40 40 24 18 08 30
>0ef2	48 00 48 48 48 48 34 00 08 10 38 44 7c 40 38 00
>0f02	10 28 38 04 3c 44 3c 00 28 00 38 04 3c 44 3c 00
>0f12	20 10 38 04 3c 44 3c 00 38 28 38 04 3c 44 3c 00
>0f22	00 38 44 40 44 38 10 30 10 28 38 44 7c 40 38 00
>0f32	28 00 38 44 7c 40 38 00 20 10 38 44 7c 40 38 00
>0f42	28 00 00 30 10 10 38 00 10 28 00 30 10 10 38 00
>0f52	20 10 00 30 10 10 38 00 28 00 10 28 44 7c 44 00
>0f62	10 28 10 28 44 7c 44 00 08 10 7c 40 78 40 7c 00
>0f72	00 00 6e 10 7c 90 6e 00 3e 50 90 fc 90 90 9e 00
>0f82	10 28 38 44 44 44 38 00 28 00 38 44 44 44 38 00
>0f92	20 10 38 44 44 44 38 00 10 28 00 48 48 48 34 00
>0fa2	20 10 00 48 48 48 34 00 28 00 44 44 4c 34 04 38
>0fb2	28 38 44 44 44 44 38 00 28 00 44 44 44 44 38 00
>0fc2	00 10 38 54 50 54 38 10 18 24 20 78 20 22 7c 00
>0fd2	44 44 28 7c 10 7c 10 00 38 44 f0 40 f0 44 38 00
>0fe2	18 24 20 70 20 20 20 c0 08 10 38 04 3c 44 3c 00
>0ff2	10 20 00 30 10 10 38 00 08 10 38 44 44 44 38 00
>1002	10 20 00 48 48 48 34 00 28 50 00 58 64 44 44 00
>1012	14 28 44 64 54 4c 44 00 30 08 38 48 38 00 00 00
>1022	10 28 10 00 00 00 00 00 10 00 10 20 40 44 38 00
>1032	00 00 00 7c 40 40 00 00 00 00 00 7c 04 04 00 00
>1042	42 44 4e 52 2e 48 8e 00 42 44 4a 5a 2e 42 82 00
>1052	10 00 10 10 10 10 10 00 00 12 24 48 24 12 00 00
>1062	00 90 48 24 48 90 00 00 88 22 88 22 88 22 88 22
>1072	cc 33 cc 33 cc 33 cc 33 ee bb ee bb ee bb ee bb
>1082	10 10 10 10 10 10 10 10 10 10 10 f0 10 10 10 10
>1092	10 10 f0 10 f0 10 10 10 28 28 28 e8 28 28 28 28
>10a2	00 00 00 f8 28 28 28 28 00 00 f0 10 f0 10 10 10
>10b2	28 28 e8 08 e8 28 28 28 28 28 28 28 28 28 28 28
>10c2	00 00 f8 08 e8 28 28 28 28 28 e8 08 f8 00 00 00
>10d2	28 28 28 f8 00 00 00 00 10 10 f0 10 f0 00 00 00
>10e2	00 00 00 f0 10 10 10 10 10 10 10 1f 00 00 00 00
>10f2	10 10 10 ff 00 00 00 00 00 00 00 ff 10 10 10 10
>1102	10 10 10 1f 10 10 10 10 00 00 00 ff 00 00 00 00
>1112	10 10 10 ff 10 10 10 10 10 10 1f 10 1f 10 10 10
>1122	28 28 28 2f 28 28 28 28 28 28 2f 20 3f 00 00 00
>1132	00 00 3f 20 2f 28 28 28 28 28 ef 00 ff 00 00 00
>1142	00 00 ff 00 ef 28 28 28 28 28 2f 20 2f 28 28 28
>1152	00 00 ff 00 ff 00 00 00 28 28 ef 00 ef 28 28 28
>1162	10 10 ff 00 ff 00 00 00 28 28 28 ff 00 00 00 00
>1172	00 00 ff 00 ff 10 10 10 00 00 00 ff 28 28 28 28
>1182	28 28 28 3f 00 00 00 00 10 10 1f 10 1f 00 00 00
>1192	00 00 1f 10 1f 10 10 10 00 00 00 3f 28 28 28 28
>11a2	28 28 28 ff 28 28 28 28 10 10 ff 10 ff 10 10 10
>11b2	10 10 10 f0 00 00 00 00 00 00 00 1f 10 10 10 10
>11c2	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>11d2	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>11e2	ff ff ff ff 00 00 00 00 00 00 34 48 48 48 34 00
>11f2	00 00 38 44 78 44 78 40 7c 40 40 40 40 40 40 00
>1202	00 00 7e 24 24 24 24 00 7c 40 20 10 20 40 7c 00
>1212	00 00 3e 44 44 44 38 00 00 00 48 48 48 48 70 80
>1222	00 00 34 58 10 10 10 00 7c 10 28 44 28 10 7c 00
>1232	38 44 44 7c 44 44 38 00 38 44 44 44 28 28 6c 00
>1242	3c 20 18 44 44 44 38 00 00 00 6c 92 92 6c 00 00
>1252	00 24 4a 52 22 5c 40 00 00 00 3c 40 38 40 3c 00
>1262	38 44 44 44 44 44 44 00 00 7c 00 7c 00 7c 00 00
>1272	10 10 7c 10 10 7c 00 00 20 10 08 10 20 00 38 00
>1282	08 10 20 10 08 00 38 00 0c 12 10 10 10 10 10 10
>1292	10 10 10 10 10 10 90 60 00 10 00 7c 00 10 00 00
>12a2	00 20 54 08 20 54 08 00 00 10 28 10 00 00 00 00
>12b2	00 00 00 18 18 00 00 00 00 00 00 10 00 00 00 00
>12c2	1e 10 10 10 10 90 50 20 00 38 24 24 24 00 00 00
>12d2	38 04 1c 20 3c 00 00 00 00 00 3c 3c 3c 3c 00 00
>12e2	00 00 00 00 00 00 00 00

;******  Processing file: keyboard.asm

=$d642					KBD_SCAN = $d642
=$d644					KBD_STAT = $d644
=$01					KBD_RDY = $01
=$01					KBD_ST_F0 = $01
=$02					KBD_ST_E0 = $02
=$80					KBD_SHIFT = $80
=$81					KBD_CTRL = $81
=$82					KBD_ALT = $82
=$83					KBD_OS = $83
=$84					KBD_CAP = $84
=$01					KBD_MOD_SHIFT = $01
=$02					KBD_MOD_CTRL = $02
=$04					KBD_MOD_ALT = $04
=$08					KBD_MOD_OS = $08
=$10					KBD_MOD_CAP = $10
=80					KBD_BUFFER_SIZE = 80
>0206					kbd_state   .byte ?         ; The current state of the scan code interpreter
>0207					kbd_mods    .byte ?         ; The current state of the modifier keys
>0208					kbd_buffer  .fill 80        ; Keyboard buffer
>0258					kbd_head    .byte ?         ; Index to write to in the keyboard buffer
.12ea					initkbd:
.12ea	9c 06 02	stz $0206	            stz kbd_state
.12ed	9c 07 02	stz $0207	            stz kbd_mods
.12f0	9c 58 02	stz $0258	            stz kbd_head
.12f3	60		rts		            rts
.12f4					kbd_status:
.12f4	ad 58 02	lda $0258	            lda kbd_head
.12f7	f0 03		beq $12fc	            beq is_empty
.12f9	a9 01		lda #$01	            lda #1
.12fb	60		rts		            rts
.12fc					is_empty:
.12fc	60		rts		            rts
.12fd					kbd_enqueue:
.12fd	da		phx		            phx
.12fe	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not full
.1301	e0 50		cpx #$50	            cpx #KBD_BUFFER_SIZE
.1303	b0 07		bcs $130c	            bge done
.1305	9d 08 02	sta $0208,x	            sta kbd_buffer,x        ; Save the character to the end of the buffer
.1308	e8		inx		            inx
.1309	8e 58 02	stx $0258	            stx kbd_head            ; Update the index
.130c					done:
.130c	fa		plx		            plx
.130d	60		rts		            rts
.130e					kbd_dequeue:
.130e	da		phx		            phx
.130f	ae 58 02	ldx $0258	            ldx kbd_head            ; Make sure the buffer is not empty
.1312	f0 18		beq $132c	            beq is_empty            ; If so, return 0
.1314	ad 08 02	lda $0208	            lda kbd_buffer          ; Get the character
.1317	48		pha		            pha                     ; Save it temporarily to the stack
.1318	a2 00		ldx #$00	            ldx #0                  ; Remove a character from the buffer
.131a					loop:
.131a	bd 09 02	lda $0209,x	            lda kbd_buffer+1,x      ; Copy a character down
.131d	9d 08 02	sta $0208,x	            sta kbd_buffer,x
.1320	e8		inx		            inx                     ; Move to the next character
.1321	ec 58 02	cpx $0258	            cpx kbd_head            ; Until we've copied all saved characters
.1324	d0 f4		bne $131a	            bne loop
.1326	ce 58 02	dec $0258	            dec kbd_head            ; Decrement the index
.1329	68		pla		            pla                     ; Get the character back and return
.132a	80 02		bra $132e	            bra done
.132c					is_empty:
.132c	a9 00		lda #$00	            lda #0                  ; Return 0 if buffer is empty
.132e					done:
.132e	fa		plx		            plx
.132f	60		rts		            rts
.1330					handlekbd:
.1330	ad 44 d6	lda $d644	            lda KBD_STAT    ; Check to see if the key is ready
.1333	29 01		and #$01	            and #KBD_RDY
.1335	d0 0c		bne $1343	            bne done        ; No: skip the keyboard
.1337	ad 06 02	lda $0206	            lda kbd_state   ; Get state of the interpreter
.133a	f0 08		beq $1344	            beq st_0        ; If base state...
.133c	c9 01		cmp #$01	            cmp #KBD_ST_F0  ; Have we seen an F0?
.133e	f0 68		beq $13a8	            beq st_f0       ; Yes process the F0 codes
.1340	9c 06 02	stz $0206	            stz kbd_state   ; Something is wrong... reset the state machine
.1343					done:
.1343	60		rts		            rts
.1344					st_0:
.1344	ad 42 d6	lda $d642	            lda KBD_SCAN    ; Get the scan code
.1347	c9 f0		cmp #$f0	            cmp #$f0        ; Is it a release code
.1349	d0 07		bne $1352	            bne not_f0
.134b	a9 01		lda #$01	            lda #KBD_ST_F0  ; Yes: go to state KBD_ST_F0
.134d	8d 06 02	sta $0206	            sta kbd_state
.1350	80 f1		bra $1343	            bra done
.1352	c9 e0		cmp #$e0	not_f0:     cmp #$e0        ; Is it E0?
.1354	d0 07		bne $135d	            bne not_f0e0
.1356	a9 02		lda #$02	            lda #KBD_ST_E0  ; Yes: go to state KBD_ST_E0
.1358	8d 06 02	sta $0206	            sta kbd_state
.135b	80 e6		bra $1343	            bra done
.135d					not_f0e0:
.135d	48		pha		            pha
.135e	ad 07 02	lda $0207	            lda kbd_mods
.1361	89 10		bit #$10	            bit #KBD_MOD_CAP
.1363	d0 0b		bne $1370	            bne read_caps
.1365	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1367	d0 19		bne $1382	            bne read_shift
.1369	68		pla		            pla
.136a	aa		tax		            tax
.136b	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x
.136e	80 17		bra $1387	            bra proc_ascii
.1370					read_caps:
.1370	89 01		bit #$01	            bit #KBD_MOD_SHIFT
.1372	d0 07		bne $137b	            bne read_caps_shift
.1374	68		pla		            pla
.1375	aa		tax		            tax
.1376	bd c0 14	lda $14c0,x	            lda kbd_sc_cap,x
.1379	80 0c		bra $1387	            bra proc_ascii
.137b					read_caps_shift:
.137b	68		pla		            pla
.137c	aa		tax		            tax
.137d	bd 40 15	lda $1540,x	            lda kbd_sc_cs,x
.1380	80 05		bra $1387	            bra proc_ascii
.1382					read_shift:
.1382	68		pla		            pla
.1383	aa		tax		            tax
.1384	bd 40 14	lda $1440,x	            lda kbd_sc_sh,x
.1387					proc_ascii:
.1387	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.1389	f0 09		beq $1394	            beq raise_shift
.138b	c9 84		cmp #$84	            cmp #KBD_CAP            ; If it's a capslock
.138d	f0 0f		beq $139e	            beq toggle_caps
.138f	20 fd 12	jsr $12fd	            jsr kbd_enqueue         ; Enqueue the character
.1392	80 af		bra $1343	            bra done
.1394					raise_shift:
.1394	ad 07 02	lda $0207	            lda kbd_mods            ; Turn on the SHIFT modifier
.1397	09 01		ora #$01	            ora #KBD_MOD_SHIFT
.1399	8d 07 02	sta $0207	            sta kbd_mods
.139c	80 a5		bra $1343	            bra done
.139e					toggle_caps:
.139e	ad 07 02	lda $0207	            lda kbd_mods            ; Toggle CAPS modifier
.13a1	49 10		eor #$10	            eor #KBD_MOD_CAP
.13a3	8d 07 02	sta $0207	            sta kbd_mods
.13a6	80 9b		bra $1343	            bra done
.13a8					st_f0:
.13a8	ad 42 d6	lda $d642	            lda KBD_SCAN            ; Get the scan code
.13ab	aa		tax		            tax
.13ac	bd c0 13	lda $13c0,x	            lda kbd_sc_00,x         ; Get the base key for it
.13af	c9 80		cmp #$80	            cmp #KBD_SHIFT          ; If shift...
.13b1	d0 08		bne $13bb	            bne exit_f0
.13b3	ad 07 02	lda $0207	            lda kbd_mods            ; Drop the SHIFT modifier
.13b6	29 fe		and #$fe	            and #~KBD_MOD_SHIFT
.13b8	8d 07 02	sta $0207	            sta kbd_mods
.13bb					exit_f0:
.13bb	9c 06 02	stz $0206	            stz kbd_state   ; Go back to state 0
.13be	80 83		bra $1343	            bra done
>13c0	00 00 00 00 00 00 00 00		kbd_sc_00:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>13c8	00 00 00 00 00 08 60 00
>13d0	00 00 80 00 00 71 31 00		            .byte $00, $00, $80, $00, $00, 'q', '1', $00, $00, $00, 'z', 's', 'a', 'w', '2', $00    ; $10 - $1F
>13d8	00 00 7a 73 61 77 32 00
>13e0	00 63 78 64 65 34 33 00		            .byte $00, 'c', 'x', 'd', 'e', '4', '3', $00, $00, ' ', 'v', 'f', 't', 'r', '5', $00    ; $20 - $2F
>13e8	00 20 76 66 74 72 35 00
>13f0	00 6e 62 68 67 79 36 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '6', $00, $00, $00, 'm', 'j', 'u', '7', '8', $00    ; $30 - $3F
>13f8	00 00 6d 6a 75 37 38 00
>1400	00 2c 6b 69 6f 30 39 00		            .byte $00, ',', 'k', 'i', 'o', '0', '9', $00, $00, '.', '/', 'l', ';', 'p', '-', $00    ; $40 - $4F
>1408	00 2e 2f 6c 3b 70 2d 00
>1410	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1418	84 80 0d 5d 00 5c 00 00
>1420	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1428	00 00 00 00 00 00 00 00
>1430	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1438	00 00 00 00 00 00 00 00
>1440	00 00 00 00 00 00 00 00		kbd_sc_sh:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1448	00 00 00 00 00 08 7e 00
>1450	00 00 80 00 00 51 21 00		            .byte $00, $00, $80, $00, $00, 'Q', '!', $00, $00, $00, 'Z', 'S', 'A', 'W', '@', $00    ; $10 - $1F
>1458	00 00 5a 53 41 57 40 00
>1460	00 43 58 44 45 24 23 00		            .byte $00, 'C', 'X', 'D', 'E', '$', '#', $00, $00, ' ', 'V', 'F', 'T', 'R', '%', $00    ; $20 - $2F
>1468	00 20 56 46 54 52 25 00
>1470	00 4e 42 48 47 59 5e 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '^', $00, $00, $00, 'M', 'J', 'U', '&', '*', $00    ; $30 - $3F
>1478	00 00 4d 4a 55 26 2a 00
>1480	00 3c 4b 49 4f 29 28 00		            .byte $00, '<', 'K', 'I', 'O', ')', '(', $00, $00, '>', '?', 'L', ':', 'P', '_', $00    ; $40 - $4F
>1488	00 3e 3f 4c 3a 50 5f 00
>1490	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1498	84 80 0d 7d 00 7c 00 00
>14a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>14a8	00 00 00 00 00 00 00 00
>14b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>14b8	00 00 00 00 00 00 00 00
>14c0	00 00 00 00 00 00 00 00		kbd_sc_cap: .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '`', $00    ; $00 - $0F
>14c8	00 00 00 00 00 08 60 00
>14d0	00 00 80 00 00 51 31 00		            .byte $00, $00, $80, $00, $00, 'Q', '1', $00, $00, $00, 'Z', 'S', 'A', 'W', '2', $00    ; $10 - $1F
>14d8	00 00 5a 53 41 57 32 00
>14e0	00 43 58 44 45 34 33 00		            .byte $00, 'C', 'X', 'D', 'E', '4', '3', $00, $00, ' ', 'V', 'F', 'T', 'R', '5', $00    ; $20 - $2F
>14e8	00 20 56 46 54 52 35 00
>14f0	00 4e 42 48 47 59 36 00		            .byte $00, 'N', 'B', 'H', 'G', 'Y', '6', $00, $00, $00, 'M', 'J', 'U', '7', '8', $00    ; $30 - $3F
>14f8	00 00 4d 4a 55 37 38 00
>1500	00 2c 4b 49 4f 30 39 00		            .byte $00, ',', 'K', 'I', 'O', '0', '9', $00, $00, '.', '/', 'L', ';', 'P', '-', $00    ; $40 - $4F
>1508	00 2e 2f 4c 3b 50 2d 00
>1510	00 00 27 00 5b 3d 00 00		            .byte $00, $00, $27, $00, '[', '=', $00, $00, $84, $80, $0d, ']', $00, '\', $00, $00    ; $50 - $5F
>1518	84 80 0d 5d 00 5c 00 00
>1520	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>1528	00 00 00 00 00 00 00 00
>1530	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>1538	00 00 00 00 00 00 00 00
>1540	00 00 00 00 00 00 00 00		kbd_sc_cs:  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, '~', $00    ; $00 - $0F
>1548	00 00 00 00 00 08 7e 00
>1550	00 00 80 00 00 71 21 00		            .byte $00, $00, $80, $00, $00, 'q', '!', $00, $00, $00, 'z', 's', 'a', 'w', '@', $00    ; $10 - $1F
>1558	00 00 7a 73 61 77 40 00
>1560	00 63 78 64 65 24 23 00		            .byte $00, 'c', 'x', 'd', 'e', '$', '#', $00, $00, ' ', 'v', 'f', 't', 'r', '%', $00    ; $20 - $2F
>1568	00 20 76 66 74 72 25 00
>1570	00 6e 62 68 67 79 5e 00		            .byte $00, 'n', 'b', 'h', 'g', 'y', '^', $00, $00, $00, 'm', 'j', 'u', '&', '*', $00    ; $30 - $3F
>1578	00 00 6d 6a 75 26 2a 00
>1580	00 3c 6b 69 6f 30 28 00		            .byte $00, '<', 'k', 'i', 'o', '0', '(', $00, $00, '>', '?', 'l', ':', 'p', '_', $00    ; $40 - $4F
>1588	00 3e 3f 6c 3a 70 5f 00
>1590	00 00 22 00 7b 2b 00 00		            .byte $00, $00, '"', $00, '{', '+', $00, $00, $84, $80, $0d, '}', $00, '|', $00, $00    ; $50 - $5F
>1598	84 80 0d 7d 00 7c 00 00
>15a0	00 00 00 00 00 00 08 00		            .byte $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $6F
>15a8	00 00 00 00 00 00 00 00
>15b0	00 00 00 00 00 00 00 00		            .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $7F
>15b8	00 00 00 00 00 00 00 00

;******  Return to file: bios65.asm


;******  Return to file: mf_pre_65c02.asm

>0028					ip      .word ?         ; Instruction pointer
>002a					wp      .word ?         ; Word pointer
>002c					up      .word ?         ; User pointer
>002e					donep   .word ?         ; Pointer to the code to take over when the interpreter quits
>0030					test    .word ?         ; Pointer to the current test name
>0032					tmp     .word ?
>0034					savex   .byte ?
>0035					counter .byte ?         ; A counter used for some code
>0036					sign    .byte ?         ; A scratch byte to keep track of the sign of a number
>15c0	4d 65 74 61 46 6f 72 74		welcome .null "MetaForth v00.00.00",13
>15c8	68 20 76 30 30 2e 30 30 2e 30 30 0d 00
.15d5					init_user:
>15d5	6e 00				        .word $006e     ; Initial PSP (S0)
>15d7	ff 00				        .word $00ff     ; Initial RSP (R0)
>15d9	0a 00				        .word 10        ; Initial BASE
>15db	00 00				        .word 0         ; Initial STATE
>15dd	00 00				        .word 0         ; Initial CONTEXT
>15df	00 00				        .word 0         ; Initial CURRENT
>15e1	e3 39				        .word <>endcode ; Initial DP
>15e3	00 00				        .word 0         ; Initial >IN
>15e5	00 bf				        .word $bf00     ; Initial TIB
>15e7	00 00				        .word 0         ; Initial SOURCE-ID
.15e9					init_user_end:
=0					user_s0 = 0
=2					user_r0 = 2
=4					user_base = 4
=6					user_state = 6
=8					user_context = 8
=10					user_current = 10
=12					user_dp = 12
=14					user_in = 14
=16					user_tib = 16
=18					user_source_id = 18
.15e9	a2 ff		ldx #$ff	start   ldx #$ff        ; Initialize the RSP
.15eb	9a		txs		        txs
.15ec	a2 6e		ldx #$6e	        ldx #$6e        ; Initialize the PSP
.15ee	a9 01		lda #$01	        lda #<vstart
.15f0	85 28		sta $28		        sta ip
.15f2	a9 16		lda #$16	        lda #>vstart
.15f4	85 29		sta $29		        sta ip+1
.15f6	a9 00		lda #$00	        lda #<USERAREA
.15f8	85 2c		sta $2c		        sta up
.15fa	a9 a0		lda #$a0	        lda #>USERAREA
.15fc	85 2d		sta $2d		        sta up+1
.15fe	4c 23 16	jmp $1623	        jmp next
>1601	03 39				vstart  .word xt_cold
>1603	f1 16				        .word xt_halt
.1605	6c 2e 00	jmp ($002e)	done    jmp (donep)     ; Quit the interpreter by going to the code at donep
.1608	68		pla		i_exit  pla             ; ip := pop()
.1609	85 28		sta $28		        sta ip
.160b	68		pla		        pla
.160c	85 29		sta $29		        sta ip+1
.160e	80 13		bra $1623	        bra next        ; jmp next
.1610	a5 29		lda $29		i_enter lda ip+1        ; push(ip)
.1612	48		pha		        pha
.1613	a5 28		lda $28		        lda ip
.1615	48		pha		        pha
.1616	18		clc		        clc             ; ip := wp + 3
.1617	a5 2a		lda $2a		        lda wp
.1619	69 03		adc #$03	        adc #3
.161b	85 28		sta $28		        sta ip
.161d	a5 2b		lda $2b		        lda wp+1
.161f	69 00		adc #$00	        adc #0
.1621	85 29		sta $29		        sta ip+1
.1623	a0 01		ldy #$01	next    ldy #1          ; wp := (ip)
.1625	b2 28		lda ($28)	        lda (ip)
.1627	85 2a		sta $2a		        sta wp
.1629	b1 28		lda ($28),y	        lda (ip),y
.162b	85 2b		sta $2b		        sta wp+1
.162d	18		clc		        clc             ; ip := ip + 2
.162e	a5 28		lda $28		        lda ip
.1630	69 02		adc #$02	        adc #2
.1632	85 28		sta $28		        sta ip
.1634	a5 29		lda $29		        lda ip+1
.1636	69 00		adc #$00	        adc #0
.1638	85 29		sta $29		        sta ip+1
.163a	6c 2a 00	jmp ($002a)	        jmp (wp)        ; jmp (wp)

;******  Return to file: forth.asm

.163d					w_testname:
>163d	08					.byte $08
>163e	74 65 73 74 6e 61 6d 65			.text 'testname'
>1646						.fill 8
>164e	00 00					.word 0
.1650					xt_testname:
.1650	b5 02		lda $02,x		lda pstack+2,x
.1652	85 30		sta $30			sta test
.1654	b5 03		lda $03,x		lda pstack+3,x
.1656	85 31		sta $31			sta test+1
.1658	e8		inx			inx
.1659	e8		inx			inx
.165a	4c 23 16	jmp $1623		jmp next
.165d					w_assertx3d:
>165d	07					.byte $07
>165e	61 73 73 65 72 74 3d			.text 'assert='
>1665						.fill 9
>166e	3d 16					.word w_testname
.1670					xt_assertx3d:
.1670	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if x1 and x2 are equal
.1672	d5 04		cmp $04,x		cmp pstack+4,x
.1674	d0 0e		bne $1684		bne fail            ; If not, fail
.1676	b5 03		lda $03,x		lda pstack+3,x
.1678	d5 05		cmp $05,x		cmp pstack+5,x
.167a	d0 08		bne $1684		bne fail
.167c	8a		txa			txa                 ; If so, clean up the stack
.167d	18		clc			clc
.167e	69 04		adc #$04		adc #4
.1680	aa		tax			tax
.1681	4c 23 16	jmp $1623		jmp next            ; And continue
.1684						fail:
.1684	a9 c1		lda #$c1		lda #<leadin        ; Print the failure message
.1686	85 24		sta $24			sta src_ptr
.1688	a9 16		lda #$16		lda #>leadin
.168a	85 25		sta $25			sta src_ptr+1
.168c	20 18 b0	jsr $b018		jsr prints
.168f	a5 30		lda $30			lda test            ; Print the name of the test
.1691	85 24		sta $24			sta src_ptr
.1693	a5 31		lda $31			lda test+1
.1695	85 25		sta $25			sta src_ptr+1
.1697	20 18 b0	jsr $b018		jsr prints
.169a	a9 d4		lda #$d4		lda #<actual        ; Print the "Actual" label
.169c	85 24		sta $24			sta src_ptr
.169e	a9 16		lda #$16		lda #>actual
.16a0	85 25		sta $25			sta src_ptr+1
.16a2	20 18 b0	jsr $b018		jsr prints
.16a5	b4 05		ldy $05,x		ldy pstack+5,x      ; Print the actual value computed
.16a7	b5 04		lda $04,x		lda pstack+4,x
.16a9	20 15 b0	jsr $b015		jsr printyah
.16ac	a9 c8		lda #$c8		lda #<expected      ; Print the "Expected" label
.16ae	85 24		sta $24			sta src_ptr
.16b0	a9 16		lda #$16		lda #>expected
.16b2	85 25		sta $25			sta src_ptr+1
.16b4	20 18 b0	jsr $b018		jsr prints
.16b7	b4 03		ldy $03,x		ldy pstack+3,x      ; Print the expected value
.16b9	b5 02		lda $02,x		lda pstack+2,x
.16bb	20 15 b0	jsr $b015		jsr printyah
.16be						lock:
.16be	ea		nop			nop                 ; Lock up
.16bf	80 fd		bra $16be		bra lock
.16c1						leadin:
>16c1	46 41 49 4c 3a 20 00			.null "FAIL: "
.16c8						expected:
>16c8	20 45 58 50 45 43 54 45			.null " EXPECTED: "
>16d0	44 3a 20 00
.16d4						actual:
>16d4	20 41 43 54 55 41 4c 3a			.null " ACTUAL: "
>16dc	20 00
.16de					w_halt:
>16de	04					.byte $04
>16df	68 61 6c 74				.text 'halt'
>16e3						.fill 12
>16ef	5d 16					.word w_assertx3d
.16f1					xt_halt:
.16f1	a9 55		lda #$55		lda #<registers         ; Print register banner
.16f3	85 24		sta $24			sta src_ptr
.16f5	a9 17		lda #$17		lda #>registers
.16f7	85 25		sta $25			sta src_ptr+1
.16f9	20 18 b0	jsr $b018		jsr prints
.16fc	a4 29		ldy $29			ldy ip+1                ; Print the IP
.16fe	a5 28		lda $28			lda ip
.1700	20 15 b0	jsr $b015		jsr printyah
.1703	a9 20		lda #$20		lda #' '
.1705	20 09 b0	jsr $b009		jsr conout
.1708	a4 2b		ldy $2b			ldy wp+1                ; Print the WP
.170a	a5 2a		lda $2a			lda wp
.170c	20 15 b0	jsr $b015		jsr printyah
.170f	a9 20		lda #$20		lda #' '
.1711	20 09 b0	jsr $b009		jsr conout
.1714	86 34		stx $34			stx savex               ; Print the return stack pointer
.1716	a0 01		ldy #$01		ldy #$01
.1718	ba		tsx			tsx
.1719	8a		txa			txa
.171a	20 15 b0	jsr $b015		jsr printyah
.171d	a6 34		ldx $34			ldx savex
.171f	a9 20		lda #$20		lda #' '
.1721	20 09 b0	jsr $b009		jsr conout
.1724	a0 00		ldy #$00		ldy #0                  ; Print the parameter stack pointer
.1726	8a		txa			txa
.1727	20 15 b0	jsr $b015		jsr printyah
.172a	a9 0d		lda #$0d		lda #13
.172c	20 09 b0	jsr $b009		jsr conout
.172f	e0 6e		cpx #$6e		cpx #$6e                ; Check to see if there is anything on the parameter stack
.1731	b0 1f		bcs $1752		bge lock
.1733	a9 17		lda #$17		lda #>stackmsg          ; Yes: print the stack message and the stack contents
.1735	85 25		sta $25			sta src_ptr+1
.1737	a9 70		lda #$70		lda #<stackmsg
.1739	85 24		sta $24			sta src_ptr
.173b	20 18 b0	jsr $b018		jsr prints
.173e						loop:
.173e	e0 6e		cpx #$6e		cpx #$6e
.1740	b0 10		bcs $1752		bge lock
.1742	b4 03		ldy $03,x		ldy pstack+3,x
.1744	b5 02		lda $02,x		lda pstack+2,x
.1746	e8		inx			inx
.1747	e8		inx			inx
.1748	20 15 b0	jsr $b015		jsr printyah
.174b	a9 20		lda #$20		lda #' '
.174d	20 09 b0	jsr $b009		jsr conout
.1750	80 ec		bra $173e		bra loop
.1752						lock:
.1752						wait:
.1752	ea		nop			nop
.1753	80 fd		bra $1752		bra wait
>1755	0d 0d 7c 20 20 20 49 50			registers:  .text 13,13,"|   IP   WP  RSP  PSP",13
>175d	20 20 20 57 50 20 20 52 53 50 20 20 50 53 50 0d
>176d	7c 20 00				.null "| "
>1770	0d 50 61 72 61 6d 65 74			stackmsg:   .null 13,"Parameter Stack:",13
>1778	65 72 20 53 74 61 63 6b 3a 0d 00
.1783					w_emit:
>1783	04					.byte $04
>1784	65 6d 69 74				.text 'emit'
>1788						.fill 12
>1794	de 16					.word w_halt
.1796					xt_emit:
.1796	b5 02		lda $02,x		lda pstack+2,x
.1798	da		phx			phx
.1799	20 09 b0	jsr $b009		jsr conout
.179c	fa		plx			plx
.179d	e8		inx			inx
.179e	e8		inx			inx
.179f	4c 23 16	jmp $1623		jmp next
.17a2					w_keyx3f:
>17a2	04					.byte $04
>17a3	6b 65 79 3f				.text 'key?'
>17a7						.fill 12
>17b3	83 17					.word w_emit
.17b5					xt_keyx3f:
.17b5	20 0c b0	jsr $b00c		jsr constat
.17b8	29 01		and #$01		and #1
.17ba	f0 06		beq $17c2		beq waiting
.17bc	74 00		stz $00,x		stz pstack,x
.17be	74 01		stz $01,x		stz pstack+1,x
.17c0	80 06		bra $17c8		bra done
.17c2						waiting:
.17c2	a9 ff		lda #$ff		lda #$ff
.17c4	95 00		sta $00,x		sta pstack,x
.17c6	95 01		sta $01,x		sta pstack+1,x
.17c8						done:
.17c8	ca		dex			dex
.17c9	ca		dex			dex
.17ca	4c 23 16	jmp $1623		jmp next
.17cd					w_key:
>17cd	03					.byte $03
>17ce	6b 65 79				.text 'key'
>17d1						.fill 13
>17de	a2 17					.word w_keyx3f
.17e0					xt_key:
.17e0	da		phx			phx
.17e1						wait:
.17e1	20 0f b0	jsr $b00f		jsr conin
.17e4	c9 00		cmp #$00		cmp #0
.17e6	f0 f9		beq $17e1		beq wait
.17e8	fa		plx			plx
.17e9	95 00		sta $00,x		sta pstack,x
.17eb	74 01		stz $01,x		stz pstack+1,x
.17ed	ca		dex			dex
.17ee	ca		dex			dex
.17ef	4c 23 16	jmp $1623		jmp next
.17f2					w_cr:
>17f2	02					.byte $02
>17f3	63 72					.text 'cr'
>17f5						.fill 14
>1803	cd 17					.word w_key
.1805					xt_cr:
.1805	da		phx			phx
.1806	a9 0d		lda #$0d		lda #$0d
.1808	20 09 b0	jsr $b009		jsr conout
.180b	fa		plx			plx
.180c	4c 23 16	jmp $1623		jmp next
.180f					w_0:
>180f	01					.byte $01
>1810	30					.text '0'
>1811						.fill 15
>1820	f2 17					.word w_cr
.1822					xt_0:
.1822	74 01		stz $01,x		stz pstack+1,x
.1824	74 00		stz $00,x		stz pstack,x
.1826	ca		dex			dex
.1827	ca		dex			dex
.1828	4c 23 16	jmp $1623		jmp next
.182b					w_1:
>182b	01					.byte $01
>182c	31					.text '1'
>182d						.fill 15
>183c	0f 18					.word w_0
.183e					xt_1:
.183e	74 01		stz $01,x		stz pstack+1,x
.1840	a9 01		lda #$01		lda #1
.1842	95 00		sta $00,x		sta pstack,x
.1844	ca		dex			dex
.1845	ca		dex			dex
.1846	4c 23 16	jmp $1623		jmp next
.1849					w_2:
>1849	01					.byte $01
>184a	32					.text '2'
>184b						.fill 15
>185a	2b 18					.word w_1
.185c					xt_2:
.185c	74 01		stz $01,x		stz pstack+1,x
.185e	a9 02		lda #$02		lda #2
.1860	95 00		sta $00,x		sta pstack,x
.1862	ca		dex			dex
.1863	ca		dex			dex
.1864	4c 23 16	jmp $1623		jmp next
.1867					w_x2d1:
>1867	02					.byte $02
>1868	2d 31					.text '-1'
>186a						.fill 14
>1878	49 18					.word w_2
.187a					xt_x2d1:
.187a	a9 ff		lda #$ff		lda #$ff
.187c	95 01		sta $01,x		sta pstack+1,x
.187e	95 00		sta $00,x		sta pstack,x
.1880	ca		dex			dex
.1881	ca		dex			dex
.1882	4c 23 16	jmp $1623		jmp next
.1885					w_x2d2:
>1885	02					.byte $02
>1886	2d 32					.text '-2'
>1888						.fill 14
>1896	67 18					.word w_x2d1
.1898					xt_x2d2:
.1898	a9 fe		lda #$fe		lda #$fe
.189a	95 01		sta $01,x		sta pstack+1,x
.189c	95 00		sta $00,x		sta pstack,x
.189e	ca		dex			dex
.189f	ca		dex			dex
.18a0	4c 23 16	jmp $1623		jmp next
.18a3					w_x28literalx29:
>18a3	09					.byte $09
>18a4	28 6c 69 74 65 72 61 6c			.text '(literal)'
>18ac	29
>18ad						.fill 7
>18b4	85 18					.word w_x2d2
.18b6					xt_x28literalx29:
.18b6	a0 01		ldy #$01		ldy #1
.18b8	b2 28		lda ($28)		lda (ip)
.18ba	95 00		sta $00,x		sta pstack,x
.18bc	b1 28		lda ($28),y		lda (ip),y
.18be	95 01		sta $01,x		sta pstack+1,x
.18c0	ca		dex			dex
.18c1	ca		dex			dex
.18c2	18		clc			clc
.18c3	a5 28		lda $28			lda ip
.18c5	69 02		adc #$02		adc #2
.18c7	85 28		sta $28			sta ip
.18c9	a5 29		lda $29			lda ip+1
.18cb	69 00		adc #$00		adc #0
.18cd	85 29		sta $29			sta ip+1
.18cf	4c 23 16	jmp $1623		jmp next
.18d2					w_depth:
>18d2	05					.byte $05
>18d3	64 65 70 74 68				.text 'depth'
>18d8						.fill 11
>18e3	a3 18					.word w_x28literalx29
.18e5					xt_depth:
.18e5	86 32		stx $32			stx tmp
.18e7	38		sec			sec
.18e8	a9 6e		lda #$6e		lda #$6e
.18ea	e5 32		sbc $32			sbc tmp
.18ec	4a		lsr a			lsr a
.18ed	74 01		stz $01,x		stz pstack+1,x
.18ef	95 00		sta $00,x		sta pstack,x
.18f1	ca		dex			dex
.18f2	ca		dex			dex
.18f3	4c 23 16	jmp $1623		jmp next
.18f6					w_unittest:
>18f6	08					.byte $08
>18f7	75 6e 69 74 74 65 73 74			.text 'unittest'
>18ff						.fill 8
>1907	d2 18					.word w_depth
.1909					xt_unittest:
.1909	4c 10 16	jmp $1610		jmp i_enter
>190c	b6 18					.word xt_x28literalx29
>190e	14 19					.word l_2
>1910	8d 2f					.word xt_x28branchx29
>1912	20 19					.word l_3
.1914					l_2:
>1914	64 65 70 74 68 20 2d 2d			.null "depth --> 0"
>191c	3e 20 30 00
.1920					l_3:
>1920	50 16					.word xt_testname
>1922	e5 18					.word xt_depth
>1924	22 18					.word xt_0
>1926	70 16					.word xt_assertx3d
>1928	b6 18					.word xt_x28literalx29
>192a	30 19					.word l_4
>192c	8d 2f					.word xt_x28branchx29
>192e	40 19					.word l_5
.1930					l_4:
>1930	30 20 64 65 70 74 68 20			.null "0 depth --> 0 1"
>1938	2d 2d 3e 20 30 20 31 00
.1940					l_5:
>1940	50 16					.word xt_testname
>1942	22 18					.word xt_0
>1944	e5 18					.word xt_depth
>1946	3e 18					.word xt_1
>1948	70 16					.word xt_assertx3d
>194a	22 18					.word xt_0
>194c	70 16					.word xt_assertx3d
>194e	b6 18					.word xt_x28literalx29
>1950	56 19					.word l_6
>1952	8d 2f					.word xt_x28branchx29
>1954	6e 19					.word l_7
.1956					l_6:
>1956	31 20 31 20 31 20 64 65			.null "1 1 1 depth --> 1 1 1 3"
>195e	70 74 68 20 2d 2d 3e 20 31 20 31 20 31 20 33 00
.196e					l_7:
>196e	50 16					.word xt_testname
>1970	3e 18					.word xt_1
>1972	3e 18					.word xt_1
>1974	3e 18					.word xt_1
>1976	e5 18					.word xt_depth
>1978	b6 18					.word xt_x28literalx29
>197a	03 00					.word 3
>197c	70 16					.word xt_assertx3d
>197e	3e 18					.word xt_1
>1980	70 16					.word xt_assertx3d
>1982	3e 18					.word xt_1
>1984	70 16					.word xt_assertx3d
>1986	3e 18					.word xt_1
>1988	70 16					.word xt_assertx3d
>198a	b6 18					.word xt_x28literalx29
>198c	92 19					.word l_8
>198e	8d 2f					.word xt_x28branchx29
>1990	a1 19					.word l_9
.1992					l_8:
>1992	31 20 32 20 64 72 6f 70			.null "1 2 drop --> 1"
>199a	20 2d 2d 3e 20 31 00
.19a1					l_9:
>19a1	50 16					.word xt_testname
>19a3	3e 18					.word xt_1
>19a5	5c 18					.word xt_2
>19a7	cc 28					.word xt_drop
>19a9	3e 18					.word xt_1
>19ab	70 16					.word xt_assertx3d
>19ad	b6 18					.word xt_x28literalx29
>19af	b5 19					.word l_10
>19b1	8d 2f					.word xt_x28branchx29
>19b3	c8 19					.word l_11
.19b5					l_10:
>19b5	31 20 32 20 33 20 64 72			.null "1 2 3 drop --> 1 2"
>19bd	6f 70 20 2d 2d 3e 20 31 20 32 00
.19c8					l_11:
>19c8	50 16					.word xt_testname
>19ca	3e 18					.word xt_1
>19cc	5c 18					.word xt_2
>19ce	b6 18					.word xt_x28literalx29
>19d0	03 00					.word 3
>19d2	cc 28					.word xt_drop
>19d4	5c 18					.word xt_2
>19d6	70 16					.word xt_assertx3d
>19d8	3e 18					.word xt_1
>19da	70 16					.word xt_assertx3d
>19dc	b6 18					.word xt_x28literalx29
>19de	e4 19					.word l_12
>19e0	8d 2f					.word xt_x28branchx29
>19e2	f2 19					.word l_13
.19e4					l_12:
>19e4	31 20 64 75 70 20 2d 2d			.null "1 dup --> 1 1"
>19ec	3e 20 31 20 31 00
.19f2					l_13:
>19f2	50 16					.word xt_testname
>19f4	3e 18					.word xt_1
>19f6	e4 28					.word xt_dup
>19f8	3e 18					.word xt_1
>19fa	70 16					.word xt_assertx3d
>19fc	3e 18					.word xt_1
>19fe	70 16					.word xt_assertx3d
>1a00	b6 18					.word xt_x28literalx29
>1a02	08 1a					.word l_14
>1a04	8d 2f					.word xt_x28branchx29
>1a06	1a 1a					.word l_15
.1a08					l_14:
>1a08	31 20 32 20 64 75 70 20			.null "1 2 dup --> 1 2 2"
>1a10	2d 2d 3e 20 31 20 32 20 32 00
.1a1a					l_15:
>1a1a	50 16					.word xt_testname
>1a1c	3e 18					.word xt_1
>1a1e	5c 18					.word xt_2
>1a20	e4 28					.word xt_dup
>1a22	5c 18					.word xt_2
>1a24	70 16					.word xt_assertx3d
>1a26	5c 18					.word xt_2
>1a28	70 16					.word xt_assertx3d
>1a2a	3e 18					.word xt_1
>1a2c	70 16					.word xt_assertx3d
>1a2e	b6 18					.word xt_x28literalx29
>1a30	36 1a					.word l_16
>1a32	8d 2f					.word xt_x28branchx29
>1a34	4b 1a					.word l_17
.1a36					l_16:
>1a36	31 20 32 20 33 20 73 77			.null "1 2 3 swap --> 1 3 2"
>1a3e	61 70 20 2d 2d 3e 20 31 20 33 20 32 00
.1a4b					l_17:
>1a4b	50 16					.word xt_testname
>1a4d	3e 18					.word xt_1
>1a4f	5c 18					.word xt_2
>1a51	b6 18					.word xt_x28literalx29
>1a53	03 00					.word 3
>1a55	04 29					.word xt_swap
>1a57	5c 18					.word xt_2
>1a59	70 16					.word xt_assertx3d
>1a5b	b6 18					.word xt_x28literalx29
>1a5d	03 00					.word 3
>1a5f	70 16					.word xt_assertx3d
>1a61	3e 18					.word xt_1
>1a63	70 16					.word xt_assertx3d
>1a65	b6 18					.word xt_x28literalx29
>1a67	6d 1a					.word l_18
>1a69	8d 2f					.word xt_x28branchx29
>1a6b	80 1a					.word l_19
.1a6d					l_18:
>1a6d	31 20 32 20 6f 76 65 72			.null "1 2 over --> 1 2 1"
>1a75	20 2d 2d 3e 20 31 20 32 20 31 00
.1a80					l_19:
>1a80	50 16					.word xt_testname
>1a82	3e 18					.word xt_1
>1a84	5c 18					.word xt_2
>1a86	2a 29					.word xt_over
>1a88	3e 18					.word xt_1
>1a8a	70 16					.word xt_assertx3d
>1a8c	5c 18					.word xt_2
>1a8e	70 16					.word xt_assertx3d
>1a90	3e 18					.word xt_1
>1a92	70 16					.word xt_assertx3d
>1a94	b6 18					.word xt_x28literalx29
>1a96	9c 1a					.word l_20
>1a98	8d 2f					.word xt_x28branchx29
>1a9a	bc 1a					.word l_21
.1a9c					l_20:
>1a9c	35 35 35 35 68 20 30 30			.null "5555h 0004h ! 0004h @ --> 5555h"
>1aa4	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1ab4	3e 20 35 35 35 35 68 00
.1abc					l_21:
>1abc	50 16					.word xt_testname
>1abe	b6 18					.word xt_x28literalx29
>1ac0	55 55					.word 21845
>1ac2	b6 18					.word xt_x28literalx29
>1ac4	04 00					.word 4
>1ac6	bd 29					.word xt_x21
>1ac8	b6 18					.word xt_x28literalx29
>1aca	04 00					.word 4
>1acc	e9 29					.word xt_x40
>1ace	b6 18					.word xt_x28literalx29
>1ad0	55 55					.word 21845
>1ad2	70 16					.word xt_assertx3d
>1ad4	b6 18					.word xt_x28literalx29
>1ad6	dc 1a					.word l_22
>1ad8	8d 2f					.word xt_x28branchx29
>1ada	fc 1a					.word l_23
.1adc					l_22:
>1adc	61 61 61 61 68 20 30 30			.null "aaaah 0004h ! 0004h @ --> aaaah"
>1ae4	30 34 68 20 21 20 30 30 30 34 68 20 40 20 2d 2d
>1af4	3e 20 61 61 61 61 68 00
.1afc					l_23:
>1afc	50 16					.word xt_testname
>1afe	b6 18					.word xt_x28literalx29
>1b00	aa aa					.word 43690
>1b02	b6 18					.word xt_x28literalx29
>1b04	04 00					.word 4
>1b06	bd 29					.word xt_x21
>1b08	b6 18					.word xt_x28literalx29
>1b0a	04 00					.word 4
>1b0c	e9 29					.word xt_x40
>1b0e	b6 18					.word xt_x28literalx29
>1b10	aa aa					.word 43690
>1b12	70 16					.word xt_assertx3d
>1b14	b6 18					.word xt_x28literalx29
>1b16	1c 1b					.word l_24
>1b18	8d 2f					.word xt_x28branchx29
>1b1a	3a 1b					.word l_25
.1b1c					l_24:
>1b1c	35 35 68 20 30 30 30 33			.null "55h 0003h c! 0003h c@ --> 55h"
>1b24	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1b34	3e 20 35 35 68 00
.1b3a					l_25:
>1b3a	50 16					.word xt_testname
>1b3c	b6 18					.word xt_x28literalx29
>1b3e	55 00					.word 85
>1b40	b6 18					.word xt_x28literalx29
>1b42	03 00					.word 3
>1b44	11 2a					.word xt_cx21
>1b46	b6 18					.word xt_x28literalx29
>1b48	03 00					.word 3
>1b4a	2f 2a					.word xt_cx40
>1b4c	b6 18					.word xt_x28literalx29
>1b4e	55 00					.word 85
>1b50	70 16					.word xt_assertx3d
>1b52	b6 18					.word xt_x28literalx29
>1b54	5a 1b					.word l_26
>1b56	8d 2f					.word xt_x28branchx29
>1b58	78 1b					.word l_27
.1b5a					l_26:
>1b5a	61 61 68 20 30 30 30 33			.null "aah 0003h c! 0003h c@ --> aah"
>1b62	68 20 63 21 20 30 30 30 33 68 20 63 40 20 2d 2d
>1b72	3e 20 61 61 68 00
.1b78					l_27:
>1b78	50 16					.word xt_testname
>1b7a	b6 18					.word xt_x28literalx29
>1b7c	aa 00					.word 170
>1b7e	b6 18					.word xt_x28literalx29
>1b80	03 00					.word 3
>1b82	11 2a					.word xt_cx21
>1b84	b6 18					.word xt_x28literalx29
>1b86	03 00					.word 3
>1b88	2f 2a					.word xt_cx40
>1b8a	b6 18					.word xt_x28literalx29
>1b8c	aa 00					.word 170
>1b8e	70 16					.word xt_assertx3d
>1b90	b6 18					.word xt_x28literalx29
>1b92	98 1b					.word l_28
>1b94	8d 2f					.word xt_x28branchx29
>1b96	a4 1b					.word l_29
.1b98					l_28:
>1b98	31 20 30 20 2b 20 2d 2d			.null "1 0 + --> 1"
>1ba0	3e 20 31 00
.1ba4					l_29:
>1ba4	50 16					.word xt_testname
>1ba6	3e 18					.word xt_1
>1ba8	22 18					.word xt_0
>1baa	21 2c					.word xt_x2b
>1bac	3e 18					.word xt_1
>1bae	70 16					.word xt_assertx3d
>1bb0	b6 18					.word xt_x28literalx29
>1bb2	b8 1b					.word l_30
>1bb4	8d 2f					.word xt_x28branchx29
>1bb6	c4 1b					.word l_31
.1bb8					l_30:
>1bb8	31 20 31 20 2b 20 2d 2d			.null "1 1 + --> 2"
>1bc0	3e 20 32 00
.1bc4					l_31:
>1bc4	50 16					.word xt_testname
>1bc6	3e 18					.word xt_1
>1bc8	3e 18					.word xt_1
>1bca	21 2c					.word xt_x2b
>1bcc	5c 18					.word xt_2
>1bce	70 16					.word xt_assertx3d
>1bd0	b6 18					.word xt_x28literalx29
>1bd2	d8 1b					.word l_32
>1bd4	8d 2f					.word xt_x28branchx29
>1bd6	e6 1b					.word l_33
.1bd8					l_32:
>1bd8	33 20 31 30 20 2b 20 2d			.null "3 10 + --> 13"
>1be0	2d 3e 20 31 33 00
.1be6					l_33:
>1be6	50 16					.word xt_testname
>1be8	b6 18					.word xt_x28literalx29
>1bea	03 00					.word 3
>1bec	b6 18					.word xt_x28literalx29
>1bee	0a 00					.word 10
>1bf0	21 2c					.word xt_x2b
>1bf2	b6 18					.word xt_x28literalx29
>1bf4	0d 00					.word 13
>1bf6	70 16					.word xt_assertx3d
>1bf8	b6 18					.word xt_x28literalx29
>1bfa	00 1c					.word l_34
>1bfc	8d 2f					.word xt_x28branchx29
>1bfe	10 1c					.word l_35
.1c00					l_34:
>1c00	66 66 66 66 68 20 35 20			.null "ffffh 5 + --> 4"
>1c08	2b 20 2d 2d 3e 20 34 00
.1c10					l_35:
>1c10	50 16					.word xt_testname
>1c12	b6 18					.word xt_x28literalx29
>1c14	ff ff					.word 65535
>1c16	b6 18					.word xt_x28literalx29
>1c18	05 00					.word 5
>1c1a	21 2c					.word xt_x2b
>1c1c	b6 18					.word xt_x28literalx29
>1c1e	04 00					.word 4
>1c20	70 16					.word xt_assertx3d
>1c22	b6 18					.word xt_x28literalx29
>1c24	2a 1c					.word l_36
>1c26	8d 2f					.word xt_x28branchx29
>1c28	36 1c					.word l_37
.1c2a					l_36:
>1c2a	34 20 33 20 2d 20 2d 2d			.null "4 3 - --> 1"
>1c32	3e 20 31 00
.1c36					l_37:
>1c36	50 16					.word xt_testname
>1c38	b6 18					.word xt_x28literalx29
>1c3a	04 00					.word 4
>1c3c	b6 18					.word xt_x28literalx29
>1c3e	03 00					.word 3
>1c40	46 2c					.word xt_x2d
>1c42	3e 18					.word xt_1
>1c44	70 16					.word xt_assertx3d
>1c46	b6 18					.word xt_x28literalx29
>1c48	4e 1c					.word l_38
>1c4a	8d 2f					.word xt_x28branchx29
>1c4c	5e 1c					.word l_39
.1c4e					l_38:
>1c4e	33 20 34 20 2d 20 2d 2d			.null "3 4 - --> ffffh"
>1c56	3e 20 66 66 66 66 68 00
.1c5e					l_39:
>1c5e	50 16					.word xt_testname
>1c60	b6 18					.word xt_x28literalx29
>1c62	03 00					.word 3
>1c64	b6 18					.word xt_x28literalx29
>1c66	04 00					.word 4
>1c68	46 2c					.word xt_x2d
>1c6a	b6 18					.word xt_x28literalx29
>1c6c	ff ff					.word 65535
>1c6e	70 16					.word xt_assertx3d
>1c70	b6 18					.word xt_x28literalx29
>1c72	78 1c					.word l_40
>1c74	8d 2f					.word xt_x28branchx29
>1c76	85 1c					.word l_41
.1c78					l_40:
>1c78	31 30 20 35 20 2d 20 2d			.null "10 5 - --> 5"
>1c80	2d 3e 20 35 00
.1c85					l_41:
>1c85	50 16					.word xt_testname
>1c87	b6 18					.word xt_x28literalx29
>1c89	0a 00					.word 10
>1c8b	b6 18					.word xt_x28literalx29
>1c8d	05 00					.word 5
>1c8f	46 2c					.word xt_x2d
>1c91	b6 18					.word xt_x28literalx29
>1c93	05 00					.word 5
>1c95	70 16					.word xt_assertx3d
>1c97	b6 18					.word xt_x28literalx29
>1c99	9f 1c					.word l_42
>1c9b	8d 2f					.word xt_x28branchx29
>1c9d	b0 1c					.word l_43
.1c9f					l_42:
>1c9f	31 20 33 20 2f 6d 6f 64			.null "1 3 /mod --> 1 0"
>1ca7	20 2d 2d 3e 20 31 20 30 00
.1cb0					l_43:
>1cb0	50 16					.word xt_testname
>1cb2	3e 18					.word xt_1
>1cb4	b6 18					.word xt_x28literalx29
>1cb6	03 00					.word 3
>1cb8	ed 2c					.word xt_x2fmod
>1cba	22 18					.word xt_0
>1cbc	70 16					.word xt_assertx3d
>1cbe	3e 18					.word xt_1
>1cc0	70 16					.word xt_assertx3d
>1cc2	b6 18					.word xt_x28literalx29
>1cc4	ca 1c					.word l_44
>1cc6	8d 2f					.word xt_x28branchx29
>1cc8	db 1c					.word l_45
.1cca					l_44:
>1cca	32 20 33 20 2f 6d 6f 64			.null "2 3 /mod --> 2 0"
>1cd2	20 2d 2d 3e 20 32 20 30 00
.1cdb					l_45:
>1cdb	50 16					.word xt_testname
>1cdd	5c 18					.word xt_2
>1cdf	b6 18					.word xt_x28literalx29
>1ce1	03 00					.word 3
>1ce3	ed 2c					.word xt_x2fmod
>1ce5	22 18					.word xt_0
>1ce7	70 16					.word xt_assertx3d
>1ce9	5c 18					.word xt_2
>1ceb	70 16					.word xt_assertx3d
>1ced	b6 18					.word xt_x28literalx29
>1cef	f5 1c					.word l_46
>1cf1	8d 2f					.word xt_x28branchx29
>1cf3	06 1d					.word l_47
.1cf5					l_46:
>1cf5	33 20 33 20 2f 6d 6f 64			.null "3 3 /mod --> 0 1"
>1cfd	20 2d 2d 3e 20 30 20 31 00
.1d06					l_47:
>1d06	50 16					.word xt_testname
>1d08	b6 18					.word xt_x28literalx29
>1d0a	03 00					.word 3
>1d0c	b6 18					.word xt_x28literalx29
>1d0e	03 00					.word 3
>1d10	ed 2c					.word xt_x2fmod
>1d12	3e 18					.word xt_1
>1d14	70 16					.word xt_assertx3d
>1d16	22 18					.word xt_0
>1d18	70 16					.word xt_assertx3d
>1d1a	b6 18					.word xt_x28literalx29
>1d1c	22 1d					.word l_48
>1d1e	8d 2f					.word xt_x28branchx29
>1d20	33 1d					.word l_49
.1d22					l_48:
>1d22	34 20 33 20 2f 6d 6f 64			.null "4 3 /mod --> 1 1"
>1d2a	20 2d 2d 3e 20 31 20 31 00
.1d33					l_49:
>1d33	50 16					.word xt_testname
>1d35	b6 18					.word xt_x28literalx29
>1d37	04 00					.word 4
>1d39	b6 18					.word xt_x28literalx29
>1d3b	03 00					.word 3
>1d3d	ed 2c					.word xt_x2fmod
>1d3f	3e 18					.word xt_1
>1d41	70 16					.word xt_assertx3d
>1d43	3e 18					.word xt_1
>1d45	70 16					.word xt_assertx3d
>1d47	b6 18					.word xt_x28literalx29
>1d49	4f 1d					.word l_50
>1d4b	8d 2f					.word xt_x28branchx29
>1d4d	60 1d					.word l_51
.1d4f					l_50:
>1d4f	36 20 33 20 2f 6d 6f 64			.null "6 3 /mod --> 0 2"
>1d57	20 2d 2d 3e 20 30 20 32 00
.1d60					l_51:
>1d60	50 16					.word xt_testname
>1d62	b6 18					.word xt_x28literalx29
>1d64	06 00					.word 6
>1d66	b6 18					.word xt_x28literalx29
>1d68	03 00					.word 3
>1d6a	ed 2c					.word xt_x2fmod
>1d6c	5c 18					.word xt_2
>1d6e	70 16					.word xt_assertx3d
>1d70	22 18					.word xt_0
>1d72	70 16					.word xt_assertx3d
>1d74	b6 18					.word xt_x28literalx29
>1d76	7c 1d					.word l_52
>1d78	8d 2f					.word xt_x28branchx29
>1d7a	87 1d					.word l_53
.1d7c					l_52:
>1d7c	31 20 31 2b 20 2d 2d 3e			.null "1 1+ --> 2"
>1d84	20 32 00
.1d87					l_53:
>1d87	50 16					.word xt_testname
>1d89	3e 18					.word xt_1
>1d8b	78 2d					.word xt_1x2b
>1d8d	5c 18					.word xt_2
>1d8f	70 16					.word xt_assertx3d
>1d91	b6 18					.word xt_x28literalx29
>1d93	99 1d					.word l_54
>1d95	8d 2f					.word xt_x28branchx29
>1d97	a4 1d					.word l_55
.1d99					l_54:
>1d99	30 20 31 2b 20 2d 2d 3e			.null "0 1+ --> 1"
>1da1	20 31 00
.1da4					l_55:
>1da4	50 16					.word xt_testname
>1da6	22 18					.word xt_0
>1da8	78 2d					.word xt_1x2b
>1daa	3e 18					.word xt_1
>1dac	70 16					.word xt_assertx3d
>1dae	b6 18					.word xt_x28literalx29
>1db0	b6 1d					.word l_56
>1db2	8d 2f					.word xt_x28branchx29
>1db4	c3 1d					.word l_57
.1db6					l_56:
>1db6	32 30 20 31 2b 20 2d 2d			.null "20 1+ --> 21"
>1dbe	3e 20 32 31 00
.1dc3					l_57:
>1dc3	50 16					.word xt_testname
>1dc5	b6 18					.word xt_x28literalx29
>1dc7	14 00					.word 20
>1dc9	78 2d					.word xt_1x2b
>1dcb	b6 18					.word xt_x28literalx29
>1dcd	15 00					.word 21
>1dcf	70 16					.word xt_assertx3d
>1dd1	b6 18					.word xt_x28literalx29
>1dd3	d9 1d					.word l_58
>1dd5	8d 2f					.word xt_x28branchx29
>1dd7	e8 1d					.word l_59
.1dd9					l_58:
>1dd9	66 66 66 66 68 20 31 2b			.null "ffffh 1+ --> 0"
>1de1	20 2d 2d 3e 20 30 00
.1de8					l_59:
>1de8	50 16					.word xt_testname
>1dea	b6 18					.word xt_x28literalx29
>1dec	ff ff					.word 65535
>1dee	78 2d					.word xt_1x2b
>1df0	22 18					.word xt_0
>1df2	70 16					.word xt_assertx3d
>1df4	b6 18					.word xt_x28literalx29
>1df6	fc 1d					.word l_60
>1df8	8d 2f					.word xt_x28branchx29
>1dfa	07 1e					.word l_61
.1dfc					l_60:
>1dfc	31 20 32 2b 20 2d 2d 3e			.null "1 2+ --> 3"
>1e04	20 33 00
.1e07					l_61:
>1e07	50 16					.word xt_testname
>1e09	3e 18					.word xt_1
>1e0b	94 2d					.word xt_2x2b
>1e0d	b6 18					.word xt_x28literalx29
>1e0f	03 00					.word 3
>1e11	70 16					.word xt_assertx3d
>1e13	b6 18					.word xt_x28literalx29
>1e15	1b 1e					.word l_62
>1e17	8d 2f					.word xt_x28branchx29
>1e19	26 1e					.word l_63
.1e1b					l_62:
>1e1b	30 20 32 2b 20 2d 2d 3e			.null "0 2+ --> 2"
>1e23	20 32 00
.1e26					l_63:
>1e26	50 16					.word xt_testname
>1e28	22 18					.word xt_0
>1e2a	94 2d					.word xt_2x2b
>1e2c	5c 18					.word xt_2
>1e2e	70 16					.word xt_assertx3d
>1e30	b6 18					.word xt_x28literalx29
>1e32	38 1e					.word l_64
>1e34	8d 2f					.word xt_x28branchx29
>1e36	45 1e					.word l_65
.1e38					l_64:
>1e38	32 30 20 32 2b 20 2d 2d			.null "20 2+ --> 22"
>1e40	3e 20 32 32 00
.1e45					l_65:
>1e45	50 16					.word xt_testname
>1e47	b6 18					.word xt_x28literalx29
>1e49	14 00					.word 20
>1e4b	94 2d					.word xt_2x2b
>1e4d	b6 18					.word xt_x28literalx29
>1e4f	16 00					.word 22
>1e51	70 16					.word xt_assertx3d
>1e53	b6 18					.word xt_x28literalx29
>1e55	5b 1e					.word l_66
>1e57	8d 2f					.word xt_x28branchx29
>1e59	6a 1e					.word l_67
.1e5b					l_66:
>1e5b	66 66 66 65 68 20 32 2b			.null "fffeh 2+ --> 0"
>1e63	20 2d 2d 3e 20 30 00
.1e6a					l_67:
>1e6a	50 16					.word xt_testname
>1e6c	b6 18					.word xt_x28literalx29
>1e6e	fe ff					.word 65534
>1e70	94 2d					.word xt_2x2b
>1e72	22 18					.word xt_0
>1e74	70 16					.word xt_assertx3d
>1e76	b6 18					.word xt_x28literalx29
>1e78	7e 1e					.word l_68
>1e7a	8d 2f					.word xt_x28branchx29
>1e7c	89 1e					.word l_69
.1e7e					l_68:
>1e7e	31 20 31 2d 20 2d 2d 3e			.null "1 1- --> 0"
>1e86	20 30 00
.1e89					l_69:
>1e89	50 16					.word xt_testname
>1e8b	3e 18					.word xt_1
>1e8d	b7 2d					.word xt_1x2d
>1e8f	22 18					.word xt_0
>1e91	70 16					.word xt_assertx3d
>1e93	b6 18					.word xt_x28literalx29
>1e95	9b 1e					.word l_70
>1e97	8d 2f					.word xt_x28branchx29
>1e99	aa 1e					.word l_71
.1e9b					l_70:
>1e9b	30 20 31 2d 20 2d 2d 3e			.null "0 1- --> ffffh"
>1ea3	20 66 66 66 66 68 00
.1eaa					l_71:
>1eaa	50 16					.word xt_testname
>1eac	22 18					.word xt_0
>1eae	b7 2d					.word xt_1x2d
>1eb0	b6 18					.word xt_x28literalx29
>1eb2	ff ff					.word 65535
>1eb4	70 16					.word xt_assertx3d
>1eb6	b6 18					.word xt_x28literalx29
>1eb8	be 1e					.word l_72
>1eba	8d 2f					.word xt_x28branchx29
>1ebc	cb 1e					.word l_73
.1ebe					l_72:
>1ebe	32 30 20 31 2d 20 2d 2d			.null "20 1- --> 19"
>1ec6	3e 20 31 39 00
.1ecb					l_73:
>1ecb	50 16					.word xt_testname
>1ecd	b6 18					.word xt_x28literalx29
>1ecf	14 00					.word 20
>1ed1	b7 2d					.word xt_1x2d
>1ed3	b6 18					.word xt_x28literalx29
>1ed5	13 00					.word 19
>1ed7	70 16					.word xt_assertx3d
>1ed9	b6 18					.word xt_x28literalx29
>1edb	e1 1e					.word l_74
>1edd	8d 2f					.word xt_x28branchx29
>1edf	f4 1e					.word l_75
.1ee1					l_74:
>1ee1	66 66 66 66 68 20 31 2d			.null "ffffh 1- --> fffeh"
>1ee9	20 2d 2d 3e 20 66 66 66 65 68 00
.1ef4					l_75:
>1ef4	50 16					.word xt_testname
>1ef6	b6 18					.word xt_x28literalx29
>1ef8	ff ff					.word 65535
>1efa	b7 2d					.word xt_1x2d
>1efc	b6 18					.word xt_x28literalx29
>1efe	fe ff					.word 65534
>1f00	70 16					.word xt_assertx3d
>1f02	b6 18					.word xt_x28literalx29
>1f04	0a 1f					.word l_76
>1f06	8d 2f					.word xt_x28branchx29
>1f08	19 1f					.word l_77
.1f0a					l_76:
>1f0a	31 20 32 2d 20 2d 2d 3e			.null "1 2- --> ffffh"
>1f12	20 66 66 66 66 68 00
.1f19					l_77:
>1f19	50 16					.word xt_testname
>1f1b	3e 18					.word xt_1
>1f1d	d5 2d					.word xt_2x2d
>1f1f	b6 18					.word xt_x28literalx29
>1f21	ff ff					.word 65535
>1f23	70 16					.word xt_assertx3d
>1f25	b6 18					.word xt_x28literalx29
>1f27	2d 1f					.word l_78
>1f29	8d 2f					.word xt_x28branchx29
>1f2b	3c 1f					.word l_79
.1f2d					l_78:
>1f2d	30 20 32 2d 20 2d 2d 3e			.null "0 2- --> fffeh"
>1f35	20 66 66 66 65 68 00
.1f3c					l_79:
>1f3c	50 16					.word xt_testname
>1f3e	22 18					.word xt_0
>1f40	d5 2d					.word xt_2x2d
>1f42	b6 18					.word xt_x28literalx29
>1f44	fe ff					.word 65534
>1f46	70 16					.word xt_assertx3d
>1f48	b6 18					.word xt_x28literalx29
>1f4a	50 1f					.word l_80
>1f4c	8d 2f					.word xt_x28branchx29
>1f4e	5d 1f					.word l_81
.1f50					l_80:
>1f50	32 30 20 32 2d 20 2d 2d			.null "20 2- --> 18"
>1f58	3e 20 31 38 00
.1f5d					l_81:
>1f5d	50 16					.word xt_testname
>1f5f	b6 18					.word xt_x28literalx29
>1f61	14 00					.word 20
>1f63	d5 2d					.word xt_2x2d
>1f65	b6 18					.word xt_x28literalx29
>1f67	12 00					.word 18
>1f69	70 16					.word xt_assertx3d
>1f6b	b6 18					.word xt_x28literalx29
>1f6d	73 1f					.word l_82
>1f6f	8d 2f					.word xt_x28branchx29
>1f71	86 1f					.word l_83
.1f73					l_82:
>1f73	66 66 66 66 68 20 32 2d			.null "ffffh 2- --> fffdh"
>1f7b	20 2d 2d 3e 20 66 66 66 64 68 00
.1f86					l_83:
>1f86	50 16					.word xt_testname
>1f88	b6 18					.word xt_x28literalx29
>1f8a	ff ff					.word 65535
>1f8c	d5 2d					.word xt_2x2d
>1f8e	b6 18					.word xt_x28literalx29
>1f90	fd ff					.word 65533
>1f92	70 16					.word xt_assertx3d
>1f94	b6 18					.word xt_x28literalx29
>1f96	9c 1f					.word l_84
>1f98	8d 2f					.word xt_x28branchx29
>1f9a	b6 1f					.word l_85
.1f9c					l_84:
>1f9c	30 30 30 30 68 20 30 30			.null "0000h 0000h and --> 0000h"
>1fa4	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1fb4	68 00
.1fb6					l_85:
>1fb6	50 16					.word xt_testname
>1fb8	b6 18					.word xt_x28literalx29
>1fba	00 00					.word 0
>1fbc	b6 18					.word xt_x28literalx29
>1fbe	00 00					.word 0
>1fc0	f8 2d					.word xt_and
>1fc2	b6 18					.word xt_x28literalx29
>1fc4	00 00					.word 0
>1fc6	70 16					.word xt_assertx3d
>1fc8	b6 18					.word xt_x28literalx29
>1fca	d0 1f					.word l_86
>1fcc	8d 2f					.word xt_x28branchx29
>1fce	ea 1f					.word l_87
.1fd0					l_86:
>1fd0	30 30 30 30 68 20 66 66			.null "0000h ffffh and --> 0000h"
>1fd8	66 66 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>1fe8	68 00
.1fea					l_87:
>1fea	50 16					.word xt_testname
>1fec	b6 18					.word xt_x28literalx29
>1fee	00 00					.word 0
>1ff0	b6 18					.word xt_x28literalx29
>1ff2	ff ff					.word 65535
>1ff4	f8 2d					.word xt_and
>1ff6	b6 18					.word xt_x28literalx29
>1ff8	00 00					.word 0
>1ffa	70 16					.word xt_assertx3d
>1ffc	b6 18					.word xt_x28literalx29
>1ffe	04 20					.word l_88
>2000	8d 2f					.word xt_x28branchx29
>2002	1e 20					.word l_89
.2004					l_88:
>2004	66 66 66 66 68 20 30 30			.null "ffffh 0000h and --> 0000h"
>200c	30 30 68 20 61 6e 64 20 2d 2d 3e 20 30 30 30 30
>201c	68 00
.201e					l_89:
>201e	50 16					.word xt_testname
>2020	b6 18					.word xt_x28literalx29
>2022	ff ff					.word 65535
>2024	b6 18					.word xt_x28literalx29
>2026	00 00					.word 0
>2028	f8 2d					.word xt_and
>202a	b6 18					.word xt_x28literalx29
>202c	00 00					.word 0
>202e	70 16					.word xt_assertx3d
>2030	b6 18					.word xt_x28literalx29
>2032	38 20					.word l_90
>2034	8d 2f					.word xt_x28branchx29
>2036	52 20					.word l_91
.2038					l_90:
>2038	66 66 66 66 68 20 66 66			.null "ffffh ffffh and --> ffffh"
>2040	66 66 68 20 61 6e 64 20 2d 2d 3e 20 66 66 66 66
>2050	68 00
.2052					l_91:
>2052	50 16					.word xt_testname
>2054	b6 18					.word xt_x28literalx29
>2056	ff ff					.word 65535
>2058	b6 18					.word xt_x28literalx29
>205a	ff ff					.word 65535
>205c	f8 2d					.word xt_and
>205e	b6 18					.word xt_x28literalx29
>2060	ff ff					.word 65535
>2062	70 16					.word xt_assertx3d
>2064	b6 18					.word xt_x28literalx29
>2066	6c 20					.word l_92
>2068	8d 2f					.word xt_x28branchx29
>206a	85 20					.word l_93
.206c					l_92:
>206c	30 30 30 30 68 20 30 30			.null "0000h 0000h or --> 0000h"
>2074	30 30 68 20 6f 72 20 2d 2d 3e 20 30 30 30 30 68
>2084	00
.2085					l_93:
>2085	50 16					.word xt_testname
>2087	b6 18					.word xt_x28literalx29
>2089	00 00					.word 0
>208b	b6 18					.word xt_x28literalx29
>208d	00 00					.word 0
>208f	1c 2e					.word xt_or
>2091	b6 18					.word xt_x28literalx29
>2093	00 00					.word 0
>2095	70 16					.word xt_assertx3d
>2097	b6 18					.word xt_x28literalx29
>2099	9f 20					.word l_94
>209b	8d 2f					.word xt_x28branchx29
>209d	b8 20					.word l_95
.209f					l_94:
>209f	30 30 30 30 68 20 66 66			.null "0000h ffffh or --> ffffh"
>20a7	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>20b7	00
.20b8					l_95:
>20b8	50 16					.word xt_testname
>20ba	b6 18					.word xt_x28literalx29
>20bc	00 00					.word 0
>20be	b6 18					.word xt_x28literalx29
>20c0	ff ff					.word 65535
>20c2	1c 2e					.word xt_or
>20c4	b6 18					.word xt_x28literalx29
>20c6	ff ff					.word 65535
>20c8	70 16					.word xt_assertx3d
>20ca	b6 18					.word xt_x28literalx29
>20cc	d2 20					.word l_96
>20ce	8d 2f					.word xt_x28branchx29
>20d0	eb 20					.word l_97
.20d2					l_96:
>20d2	66 66 66 66 68 20 30 30			.null "ffffh 0000h or --> ffffh"
>20da	30 30 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>20ea	00
.20eb					l_97:
>20eb	50 16					.word xt_testname
>20ed	b6 18					.word xt_x28literalx29
>20ef	ff ff					.word 65535
>20f1	b6 18					.word xt_x28literalx29
>20f3	00 00					.word 0
>20f5	1c 2e					.word xt_or
>20f7	b6 18					.word xt_x28literalx29
>20f9	ff ff					.word 65535
>20fb	70 16					.word xt_assertx3d
>20fd	b6 18					.word xt_x28literalx29
>20ff	05 21					.word l_98
>2101	8d 2f					.word xt_x28branchx29
>2103	1e 21					.word l_99
.2105					l_98:
>2105	66 66 66 66 68 20 66 66			.null "ffffh ffffh or --> ffffh"
>210d	66 66 68 20 6f 72 20 2d 2d 3e 20 66 66 66 66 68
>211d	00
.211e					l_99:
>211e	50 16					.word xt_testname
>2120	b6 18					.word xt_x28literalx29
>2122	ff ff					.word 65535
>2124	b6 18					.word xt_x28literalx29
>2126	ff ff					.word 65535
>2128	1c 2e					.word xt_or
>212a	b6 18					.word xt_x28literalx29
>212c	ff ff					.word 65535
>212e	70 16					.word xt_assertx3d
>2130	b6 18					.word xt_x28literalx29
>2132	38 21					.word l_100
>2134	8d 2f					.word xt_x28branchx29
>2136	52 21					.word l_101
.2138					l_100:
>2138	30 30 30 30 68 20 30 30			.null "0000h 0000h xor --> 0000h"
>2140	30 30 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>2150	68 00
.2152					l_101:
>2152	50 16					.word xt_testname
>2154	b6 18					.word xt_x28literalx29
>2156	00 00					.word 0
>2158	b6 18					.word xt_x28literalx29
>215a	00 00					.word 0
>215c	40 2e					.word xt_xor
>215e	b6 18					.word xt_x28literalx29
>2160	00 00					.word 0
>2162	70 16					.word xt_assertx3d
>2164	b6 18					.word xt_x28literalx29
>2166	6c 21					.word l_102
>2168	8d 2f					.word xt_x28branchx29
>216a	86 21					.word l_103
.216c					l_102:
>216c	30 30 30 30 68 20 66 66			.null "0000h ffffh xor --> ffffh"
>2174	66 66 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>2184	68 00
.2186					l_103:
>2186	50 16					.word xt_testname
>2188	b6 18					.word xt_x28literalx29
>218a	00 00					.word 0
>218c	b6 18					.word xt_x28literalx29
>218e	ff ff					.word 65535
>2190	40 2e					.word xt_xor
>2192	b6 18					.word xt_x28literalx29
>2194	ff ff					.word 65535
>2196	70 16					.word xt_assertx3d
>2198	b6 18					.word xt_x28literalx29
>219a	a0 21					.word l_104
>219c	8d 2f					.word xt_x28branchx29
>219e	ba 21					.word l_105
.21a0					l_104:
>21a0	66 66 66 66 68 20 30 30			.null "ffffh 0000h xor --> ffffh"
>21a8	30 30 68 20 78 6f 72 20 2d 2d 3e 20 66 66 66 66
>21b8	68 00
.21ba					l_105:
>21ba	50 16					.word xt_testname
>21bc	b6 18					.word xt_x28literalx29
>21be	ff ff					.word 65535
>21c0	b6 18					.word xt_x28literalx29
>21c2	00 00					.word 0
>21c4	40 2e					.word xt_xor
>21c6	b6 18					.word xt_x28literalx29
>21c8	ff ff					.word 65535
>21ca	70 16					.word xt_assertx3d
>21cc	b6 18					.word xt_x28literalx29
>21ce	d4 21					.word l_106
>21d0	8d 2f					.word xt_x28branchx29
>21d2	ee 21					.word l_107
.21d4					l_106:
>21d4	66 66 66 66 68 20 66 66			.null "ffffh ffffh xor --> 0000h"
>21dc	66 66 68 20 78 6f 72 20 2d 2d 3e 20 30 30 30 30
>21ec	68 00
.21ee					l_107:
>21ee	50 16					.word xt_testname
>21f0	b6 18					.word xt_x28literalx29
>21f2	ff ff					.word 65535
>21f4	b6 18					.word xt_x28literalx29
>21f6	ff ff					.word 65535
>21f8	40 2e					.word xt_xor
>21fa	b6 18					.word xt_x28literalx29
>21fc	00 00					.word 0
>21fe	70 16					.word xt_assertx3d
>2200	b6 18					.word xt_x28literalx29
>2202	08 22					.word l_108
>2204	8d 2f					.word xt_x28branchx29
>2206	1c 22					.word l_109
.2208					l_108:
>2208	30 30 30 30 68 20 6e 6f			.null "0000h not --> ffffh"
>2210	74 20 2d 2d 3e 20 66 66 66 66 68 00
.221c					l_109:
>221c	50 16					.word xt_testname
>221e	b6 18					.word xt_x28literalx29
>2220	00 00					.word 0
>2222	64 2e					.word xt_not
>2224	b6 18					.word xt_x28literalx29
>2226	ff ff					.word 65535
>2228	70 16					.word xt_assertx3d
>222a	b6 18					.word xt_x28literalx29
>222c	32 22					.word l_110
>222e	8d 2f					.word xt_x28branchx29
>2230	46 22					.word l_111
.2232					l_110:
>2232	66 66 66 66 68 20 6e 6f			.null "ffffh not --> 0000h"
>223a	74 20 2d 2d 3e 20 30 30 30 30 68 00
.2246					l_111:
>2246	50 16					.word xt_testname
>2248	b6 18					.word xt_x28literalx29
>224a	ff ff					.word 65535
>224c	64 2e					.word xt_not
>224e	b6 18					.word xt_x28literalx29
>2250	00 00					.word 0
>2252	70 16					.word xt_assertx3d
>2254	b6 18					.word xt_x28literalx29
>2256	5c 22					.word l_112
>2258	8d 2f					.word xt_x28branchx29
>225a	6b 22					.word l_113
.225c					l_112:
>225c	30 20 30 3c 20 2d 2d 3e			.null "0 0< --> 0000h"
>2264	20 30 30 30 30 68 00
.226b					l_113:
>226b	50 16					.word xt_testname
>226d	22 18					.word xt_0
>226f	86 2e					.word xt_0x3c
>2271	b6 18					.word xt_x28literalx29
>2273	00 00					.word 0
>2275	70 16					.word xt_assertx3d
>2277	b6 18					.word xt_x28literalx29
>2279	7f 22					.word l_114
>227b	8d 2f					.word xt_x28branchx29
>227d	8e 22					.word l_115
.227f					l_114:
>227f	33 20 30 3c 20 2d 2d 3e			.null "3 0< --> 0000h"
>2287	20 30 30 30 30 68 00
.228e					l_115:
>228e	50 16					.word xt_testname
>2290	b6 18					.word xt_x28literalx29
>2292	03 00					.word 3
>2294	86 2e					.word xt_0x3c
>2296	b6 18					.word xt_x28literalx29
>2298	00 00					.word 0
>229a	70 16					.word xt_assertx3d
>229c	b6 18					.word xt_x28literalx29
>229e	a4 22					.word l_116
>22a0	8d 2f					.word xt_x28branchx29
>22a2	b7 22					.word l_117
.22a4					l_116:
>22a4	66 66 66 66 68 20 30 3c			.null "ffffh 0< --> ffffh"
>22ac	20 2d 2d 3e 20 66 66 66 66 68 00
.22b7					l_117:
>22b7	50 16					.word xt_testname
>22b9	b6 18					.word xt_x28literalx29
>22bb	ff ff					.word 65535
>22bd	86 2e					.word xt_0x3c
>22bf	b6 18					.word xt_x28literalx29
>22c1	ff ff					.word 65535
>22c3	70 16					.word xt_assertx3d
>22c5	b6 18					.word xt_x28literalx29
>22c7	cd 22					.word l_118
>22c9	8d 2f					.word xt_x28branchx29
>22cb	dc 22					.word l_119
.22cd					l_118:
>22cd	30 20 30 3d 20 2d 2d 3e			.null "0 0= --> ffffh"
>22d5	20 66 66 66 66 68 00
.22dc					l_119:
>22dc	50 16					.word xt_testname
>22de	22 18					.word xt_0
>22e0	ad 2e					.word xt_0x3d
>22e2	b6 18					.word xt_x28literalx29
>22e4	ff ff					.word 65535
>22e6	70 16					.word xt_assertx3d
>22e8	b6 18					.word xt_x28literalx29
>22ea	f0 22					.word l_120
>22ec	8d 2f					.word xt_x28branchx29
>22ee	ff 22					.word l_121
.22f0					l_120:
>22f0	33 20 30 3d 20 2d 2d 3e			.null "3 0= --> 0000h"
>22f8	20 30 30 30 30 68 00
.22ff					l_121:
>22ff	50 16					.word xt_testname
>2301	b6 18					.word xt_x28literalx29
>2303	03 00					.word 3
>2305	ad 2e					.word xt_0x3d
>2307	b6 18					.word xt_x28literalx29
>2309	00 00					.word 0
>230b	70 16					.word xt_assertx3d
>230d	b6 18					.word xt_x28literalx29
>230f	15 23					.word l_122
>2311	8d 2f					.word xt_x28branchx29
>2313	28 23					.word l_123
.2315					l_122:
>2315	66 66 66 66 68 20 30 3d			.null "ffffh 0= --> 0000h"
>231d	20 2d 2d 3e 20 30 30 30 30 68 00
.2328					l_123:
>2328	50 16					.word xt_testname
>232a	b6 18					.word xt_x28literalx29
>232c	ff ff					.word 65535
>232e	ad 2e					.word xt_0x3d
>2330	b6 18					.word xt_x28literalx29
>2332	00 00					.word 0
>2334	70 16					.word xt_assertx3d
>2336	b6 18					.word xt_x28literalx29
>2338	3e 23					.word l_124
>233a	8d 2f					.word xt_x28branchx29
>233c	4d 23					.word l_125
.233e					l_124:
>233e	30 20 30 3e 20 2d 2d 3e			.null "0 0> --> 0000h"
>2346	20 30 30 30 30 68 00
.234d					l_125:
>234d	50 16					.word xt_testname
>234f	22 18					.word xt_0
>2351	d8 2e					.word xt_0x3e
>2353	b6 18					.word xt_x28literalx29
>2355	00 00					.word 0
>2357	70 16					.word xt_assertx3d
>2359	b6 18					.word xt_x28literalx29
>235b	61 23					.word l_126
>235d	8d 2f					.word xt_x28branchx29
>235f	70 23					.word l_127
.2361					l_126:
>2361	33 20 30 3e 20 2d 2d 3e			.null "3 0> --> ffffh"
>2369	20 66 66 66 66 68 00
.2370					l_127:
>2370	50 16					.word xt_testname
>2372	b6 18					.word xt_x28literalx29
>2374	03 00					.word 3
>2376	d8 2e					.word xt_0x3e
>2378	b6 18					.word xt_x28literalx29
>237a	ff ff					.word 65535
>237c	70 16					.word xt_assertx3d
>237e	b6 18					.word xt_x28literalx29
>2380	86 23					.word l_128
>2382	8d 2f					.word xt_x28branchx29
>2384	99 23					.word l_129
.2386					l_128:
>2386	66 66 66 66 68 20 30 3e			.null "ffffh 0> --> 0000h"
>238e	20 2d 2d 3e 20 30 30 30 30 68 00
.2399					l_129:
>2399	50 16					.word xt_testname
>239b	b6 18					.word xt_x28literalx29
>239d	ff ff					.word 65535
>239f	d8 2e					.word xt_0x3e
>23a1	b6 18					.word xt_x28literalx29
>23a3	00 00					.word 0
>23a5	70 16					.word xt_assertx3d
>23a7	b6 18					.word xt_x28literalx29
>23a9	af 23					.word l_130
>23ab	8d 2f					.word xt_x28branchx29
>23ad	c6 23					.word l_131
.23af					l_130:
>23af	63 65 6c 6c 73 20 32 20			.null "cells 2 - 0= --> ffffh"
>23b7	2d 20 30 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.23c6					l_131:
>23c6	50 16					.word xt_testname
>23c8	4d 2f					.word xt_cells
>23ca	5c 18					.word xt_2
>23cc	46 2c					.word xt_x2d
>23ce	ad 2e					.word xt_0x3d
>23d0	b6 18					.word xt_x28literalx29
>23d2	ff ff					.word 65535
>23d4	70 16					.word xt_assertx3d
>23d6	b6 18					.word xt_x28literalx29
>23d8	de 23					.word l_132
>23da	8d 2f					.word xt_x28branchx29
>23dc	f0 23					.word l_133
.23de					l_132:
>23de	27 20 31 20 65 78 65 63			.null "' 1 execute --> 1"
>23e6	75 74 65 20 2d 2d 3e 20 31 00
.23f0					l_133:
>23f0	50 16					.word xt_testname
>23f2	b6 18					.word xt_x28literalx29
>23f4	3e 18					.word xt_1
>23f6	af 31					.word xt_execute
>23f8	3e 18					.word xt_1
>23fa	70 16					.word xt_assertx3d
>23fc	b6 18					.word xt_x28literalx29
>23fe	04 24					.word l_134
>2400	8d 2f					.word xt_x28branchx29
>2402	1a 24					.word l_135
.2404					l_134:
>2404	31 20 32 20 27 20 2b 20			.null "1 2 ' + execute --> 3"
>240c	65 78 65 63 75 74 65 20 2d 2d 3e 20 33 00
.241a					l_135:
>241a	50 16					.word xt_testname
>241c	3e 18					.word xt_1
>241e	5c 18					.word xt_2
>2420	b6 18					.word xt_x28literalx29
>2422	21 2c					.word xt_x2b
>2424	af 31					.word xt_execute
>2426	b6 18					.word xt_x28literalx29
>2428	03 00					.word 3
>242a	70 16					.word xt_assertx3d
>242c	b6 18					.word xt_x28literalx29
>242e	34 24					.word l_137
>2430	8d 2f					.word xt_x28branchx29
>2432	41 24					.word l_138
.2434					l_137:
>2434	30 20 3f 64 75 70 20 2d			.null "0 ?dup --> 0"
>243c	2d 3e 20 30 00
.2441					l_138:
>2441	50 16					.word xt_testname
>2443	22 18					.word xt_0
>2445	eb 33					.word xt_x3fdup
>2447	22 18					.word xt_0
>2449	70 16					.word xt_assertx3d
>244b	b6 18					.word xt_x28literalx29
>244d	53 24					.word l_139
>244f	8d 2f					.word xt_x28branchx29
>2451	62 24					.word l_140
.2453					l_139:
>2453	31 20 3f 64 75 70 20 2d			.null "1 ?dup --> 1 1"
>245b	2d 3e 20 31 20 31 00
.2462					l_140:
>2462	50 16					.word xt_testname
>2464	3e 18					.word xt_1
>2466	eb 33					.word xt_x3fdup
>2468	3e 18					.word xt_1
>246a	70 16					.word xt_assertx3d
>246c	3e 18					.word xt_1
>246e	70 16					.word xt_assertx3d
>2470	b6 18					.word xt_x28literalx29
>2472	78 24					.word l_141
>2474	8d 2f					.word xt_x28branchx29
>2476	88 24					.word l_142
.2478					l_141:
>2478	31 20 32 20 3c 20 2d 2d			.null "1 2 < --> ffffh"
>2480	3e 20 66 66 66 66 68 00
.2488					l_142:
>2488	50 16					.word xt_testname
>248a	3e 18					.word xt_1
>248c	5c 18					.word xt_2
>248e	0b 34					.word xt_x3c
>2490	b6 18					.word xt_x28literalx29
>2492	ff ff					.word 65535
>2494	70 16					.word xt_assertx3d
>2496	b6 18					.word xt_x28literalx29
>2498	9e 24					.word l_143
>249a	8d 2f					.word xt_x28branchx29
>249c	ae 24					.word l_144
.249e					l_143:
>249e	32 20 31 20 3c 20 2d 2d			.null "2 1 < --> 0000h"
>24a6	3e 20 30 30 30 30 68 00
.24ae					l_144:
>24ae	50 16					.word xt_testname
>24b0	5c 18					.word xt_2
>24b2	3e 18					.word xt_1
>24b4	0b 34					.word xt_x3c
>24b6	b6 18					.word xt_x28literalx29
>24b8	00 00					.word 0
>24ba	70 16					.word xt_assertx3d
>24bc	b6 18					.word xt_x28literalx29
>24be	c4 24					.word l_145
>24c0	8d 2f					.word xt_x28branchx29
>24c2	d8 24					.word l_146
.24c4					l_145:
>24c4	30 20 66 66 66 66 68 20			.null "0 ffffh < --> 0000h"
>24cc	3c 20 2d 2d 3e 20 30 30 30 30 68 00
.24d8					l_146:
>24d8	50 16					.word xt_testname
>24da	22 18					.word xt_0
>24dc	b6 18					.word xt_x28literalx29
>24de	ff ff					.word 65535
>24e0	0b 34					.word xt_x3c
>24e2	b6 18					.word xt_x28literalx29
>24e4	00 00					.word 0
>24e6	70 16					.word xt_assertx3d
>24e8	b6 18					.word xt_x28literalx29
>24ea	f0 24					.word l_147
>24ec	8d 2f					.word xt_x28branchx29
>24ee	04 25					.word l_148
.24f0					l_147:
>24f0	66 66 66 66 68 20 30 20			.null "ffffh 0 < --> ffffh"
>24f8	3c 20 2d 2d 3e 20 66 66 66 66 68 00
.2504					l_148:
>2504	50 16					.word xt_testname
>2506	b6 18					.word xt_x28literalx29
>2508	ff ff					.word 65535
>250a	22 18					.word xt_0
>250c	0b 34					.word xt_x3c
>250e	b6 18					.word xt_x28literalx29
>2510	ff ff					.word 65535
>2512	70 16					.word xt_assertx3d
>2514	b6 18					.word xt_x28literalx29
>2516	1c 25					.word l_149
>2518	8d 2f					.word xt_x28branchx29
>251a	2c 25					.word l_150
.251c					l_149:
>251c	31 20 32 20 3e 20 2d 2d			.null "1 2 > --> 0000h"
>2524	3e 20 30 30 30 30 68 00
.252c					l_150:
>252c	50 16					.word xt_testname
>252e	3e 18					.word xt_1
>2530	5c 18					.word xt_2
>2532	27 34					.word xt_x3e
>2534	b6 18					.word xt_x28literalx29
>2536	00 00					.word 0
>2538	70 16					.word xt_assertx3d
>253a	b6 18					.word xt_x28literalx29
>253c	42 25					.word l_151
>253e	8d 2f					.word xt_x28branchx29
>2540	52 25					.word l_152
.2542					l_151:
>2542	32 20 31 20 3e 20 2d 2d			.null "2 1 > --> ffffh"
>254a	3e 20 66 66 66 66 68 00
.2552					l_152:
>2552	50 16					.word xt_testname
>2554	5c 18					.word xt_2
>2556	3e 18					.word xt_1
>2558	27 34					.word xt_x3e
>255a	b6 18					.word xt_x28literalx29
>255c	ff ff					.word 65535
>255e	70 16					.word xt_assertx3d
>2560	b6 18					.word xt_x28literalx29
>2562	68 25					.word l_153
>2564	8d 2f					.word xt_x28branchx29
>2566	7c 25					.word l_154
.2568					l_153:
>2568	30 20 66 66 66 66 68 20			.null "0 ffffh > --> ffffh"
>2570	3e 20 2d 2d 3e 20 66 66 66 66 68 00
.257c					l_154:
>257c	50 16					.word xt_testname
>257e	22 18					.word xt_0
>2580	b6 18					.word xt_x28literalx29
>2582	ff ff					.word 65535
>2584	27 34					.word xt_x3e
>2586	b6 18					.word xt_x28literalx29
>2588	ff ff					.word 65535
>258a	70 16					.word xt_assertx3d
>258c	b6 18					.word xt_x28literalx29
>258e	94 25					.word l_155
>2590	8d 2f					.word xt_x28branchx29
>2592	a8 25					.word l_156
.2594					l_155:
>2594	66 66 66 66 68 20 30 20			.null "ffffh 0 > --> 0000h"
>259c	3e 20 2d 2d 3e 20 30 30 30 30 68 00
.25a8					l_156:
>25a8	50 16					.word xt_testname
>25aa	b6 18					.word xt_x28literalx29
>25ac	ff ff					.word 65535
>25ae	22 18					.word xt_0
>25b0	27 34					.word xt_x3e
>25b2	b6 18					.word xt_x28literalx29
>25b4	00 00					.word 0
>25b6	70 16					.word xt_assertx3d
>25b8	b6 18					.word xt_x28literalx29
>25ba	c0 25					.word l_157
>25bc	8d 2f					.word xt_x28branchx29
>25be	d0 25					.word l_158
.25c0					l_157:
>25c0	31 20 30 20 3d 20 2d 2d			.null "1 0 = --> 0000h"
>25c8	3e 20 30 30 30 30 68 00
.25d0					l_158:
>25d0	50 16					.word xt_testname
>25d2	3e 18					.word xt_1
>25d4	22 18					.word xt_0
>25d6	43 34					.word xt_x3d
>25d8	b6 18					.word xt_x28literalx29
>25da	00 00					.word 0
>25dc	70 16					.word xt_assertx3d
>25de	b6 18					.word xt_x28literalx29
>25e0	e6 25					.word l_159
>25e2	8d 2f					.word xt_x28branchx29
>25e4	f6 25					.word l_160
.25e6					l_159:
>25e6	31 20 31 20 3d 20 2d 2d			.null "1 1 = --> ffffh"
>25ee	3e 20 66 66 66 66 68 00
.25f6					l_160:
>25f6	50 16					.word xt_testname
>25f8	3e 18					.word xt_1
>25fa	3e 18					.word xt_1
>25fc	43 34					.word xt_x3d
>25fe	b6 18					.word xt_x28literalx29
>2600	ff ff					.word 65535
>2602	70 16					.word xt_assertx3d
>2604	b6 18					.word xt_x28literalx29
>2606	0c 26					.word l_161
>2608	8d 2f					.word xt_x28branchx29
>260a	20 26					.word l_162
.260c					l_161:
>260c	66 66 66 66 68 20 30 20			.null "ffffh 0 = --> 0000h"
>2614	3d 20 2d 2d 3e 20 30 30 30 30 68 00
.2620					l_162:
>2620	50 16					.word xt_testname
>2622	b6 18					.word xt_x28literalx29
>2624	ff ff					.word 65535
>2626	22 18					.word xt_0
>2628	43 34					.word xt_x3d
>262a	b6 18					.word xt_x28literalx29
>262c	00 00					.word 0
>262e	70 16					.word xt_assertx3d
>2630	b6 18					.word xt_x28literalx29
>2632	38 26					.word l_163
>2634	8d 2f					.word xt_x28branchx29
>2636	50 26					.word l_164
.2638					l_163:
>2638	66 66 66 66 68 20 66 66			.null "ffffh ffffh = --> ffffh"
>2640	66 66 68 20 3d 20 2d 2d 3e 20 66 66 66 66 68 00
.2650					l_164:
>2650	50 16					.word xt_testname
>2652	b6 18					.word xt_x28literalx29
>2654	ff ff					.word 65535
>2656	b6 18					.word xt_x28literalx29
>2658	ff ff					.word 65535
>265a	43 34					.word xt_x3d
>265c	b6 18					.word xt_x28literalx29
>265e	ff ff					.word 65535
>2660	70 16					.word xt_assertx3d
>2662	b6 18					.word xt_x28literalx29
>2664	6a 26					.word l_165
>2666	8d 2f					.word xt_x28branchx29
>2668	7a 26					.word l_166
.266a					l_165:
>266a	30 20 30 20 3d 20 2d 2d			.null "0 0 = --> ffffh"
>2672	3e 20 66 66 66 66 68 00
.267a					l_166:
>267a	50 16					.word xt_testname
>267c	22 18					.word xt_0
>267e	22 18					.word xt_0
>2680	43 34					.word xt_x3d
>2682	b6 18					.word xt_x28literalx29
>2684	ff ff					.word 65535
>2686	70 16					.word xt_assertx3d
>2688	b6 18					.word xt_x28literalx29
>268a	90 26					.word l_167
>268c	8d 2f					.word xt_x28branchx29
>268e	9c 26					.word l_168
.2690					l_167:
>2690	36 20 33 20 2f 20 2d 2d			.null "6 3 / --> 2"
>2698	3e 20 32 00
.269c					l_168:
>269c	50 16					.word xt_testname
>269e	b6 18					.word xt_x28literalx29
>26a0	06 00					.word 6
>26a2	b6 18					.word xt_x28literalx29
>26a4	03 00					.word 3
>26a6	5f 34					.word xt_x2f
>26a8	5c 18					.word xt_2
>26aa	70 16					.word xt_assertx3d
>26ac	b6 18					.word xt_x28literalx29
>26ae	b4 26					.word l_169
>26b0	8d 2f					.word xt_x28branchx29
>26b2	c1 26					.word l_170
.26b4					l_169:
>26b4	31 30 20 33 20 2f 20 2d			.null "10 3 / --> 3"
>26bc	2d 3e 20 33 00
.26c1					l_170:
>26c1	50 16					.word xt_testname
>26c3	b6 18					.word xt_x28literalx29
>26c5	0a 00					.word 10
>26c7	b6 18					.word xt_x28literalx29
>26c9	03 00					.word 3
>26cb	5f 34					.word xt_x2f
>26cd	b6 18					.word xt_x28literalx29
>26cf	03 00					.word 3
>26d1	70 16					.word xt_assertx3d
>26d3	b6 18					.word xt_x28literalx29
>26d5	db 26					.word l_171
>26d7	8d 2f					.word xt_x28branchx29
>26d9	e9 26					.word l_172
.26db					l_171:
>26db	36 20 33 20 6d 6f 64 20			.null "6 3 mod --> 0"
>26e3	2d 2d 3e 20 30 00
.26e9					l_172:
>26e9	50 16					.word xt_testname
>26eb	b6 18					.word xt_x28literalx29
>26ed	06 00					.word 6
>26ef	b6 18					.word xt_x28literalx29
>26f1	03 00					.word 3
>26f3	7d 34					.word xt_mod
>26f5	22 18					.word xt_0
>26f7	70 16					.word xt_assertx3d
>26f9	b6 18					.word xt_x28literalx29
>26fb	01 27					.word l_173
>26fd	8d 2f					.word xt_x28branchx29
>26ff	10 27					.word l_174
.2701					l_173:
>2701	31 30 20 33 20 6d 6f 64			.null "10 3 mod --> 1"
>2709	20 2d 2d 3e 20 31 00
.2710					l_174:
>2710	50 16					.word xt_testname
>2712	b6 18					.word xt_x28literalx29
>2714	0a 00					.word 10
>2716	b6 18					.word xt_x28literalx29
>2718	03 00					.word 3
>271a	7d 34					.word xt_mod
>271c	3e 18					.word xt_1
>271e	70 16					.word xt_assertx3d
>2720	b6 18					.word xt_x28literalx29
>2722	28 27					.word l_178
>2724	8d 2f					.word xt_x28branchx29
>2726	36 27					.word l_179
.2728					l_178:
>2728	31 20 32 20 6d 61 78 20			.null "1 2 max --> 2"
>2730	2d 2d 3e 20 32 00
.2736					l_179:
>2736	50 16					.word xt_testname
>2738	3e 18					.word xt_1
>273a	5c 18					.word xt_2
>273c	bf 34					.word xt_max
>273e	5c 18					.word xt_2
>2740	70 16					.word xt_assertx3d
>2742	b6 18					.word xt_x28literalx29
>2744	4a 27					.word l_180
>2746	8d 2f					.word xt_x28branchx29
>2748	58 27					.word l_181
.274a					l_180:
>274a	33 20 30 20 6d 61 78 20			.null "3 0 max --> 3"
>2752	2d 2d 3e 20 33 00
.2758					l_181:
>2758	50 16					.word xt_testname
>275a	b6 18					.word xt_x28literalx29
>275c	03 00					.word 3
>275e	22 18					.word xt_0
>2760	bf 34					.word xt_max
>2762	b6 18					.word xt_x28literalx29
>2764	03 00					.word 3
>2766	70 16					.word xt_assertx3d
>2768	b6 18					.word xt_x28literalx29
>276a	70 27					.word l_182
>276c	8d 2f					.word xt_x28branchx29
>276e	8a 27					.word l_183
.2770					l_182:
>2770	66 66 66 65 68 20 66 66			.null "fffeh ffffh max --> ffffh"
>2778	66 66 68 20 6d 61 78 20 2d 2d 3e 20 66 66 66 66
>2788	68 00
.278a					l_183:
>278a	50 16					.word xt_testname
>278c	b6 18					.word xt_x28literalx29
>278e	fe ff					.word 65534
>2790	b6 18					.word xt_x28literalx29
>2792	ff ff					.word 65535
>2794	bf 34					.word xt_max
>2796	b6 18					.word xt_x28literalx29
>2798	ff ff					.word 65535
>279a	70 16					.word xt_assertx3d
>279c	b6 18					.word xt_x28literalx29
>279e	a4 27					.word l_186
>27a0	8d 2f					.word xt_x28branchx29
>27a2	b2 27					.word l_187
.27a4					l_186:
>27a4	31 20 32 20 6d 69 6e 20			.null "1 2 min --> 1"
>27ac	2d 2d 3e 20 31 00
.27b2					l_187:
>27b2	50 16					.word xt_testname
>27b4	3e 18					.word xt_1
>27b6	5c 18					.word xt_2
>27b8	eb 34					.word xt_min
>27ba	3e 18					.word xt_1
>27bc	70 16					.word xt_assertx3d
>27be	b6 18					.word xt_x28literalx29
>27c0	c6 27					.word l_188
>27c2	8d 2f					.word xt_x28branchx29
>27c4	d4 27					.word l_189
.27c6					l_188:
>27c6	33 20 30 20 6d 69 6e 20			.null "3 0 min --> 0"
>27ce	2d 2d 3e 20 30 00
.27d4					l_189:
>27d4	50 16					.word xt_testname
>27d6	b6 18					.word xt_x28literalx29
>27d8	03 00					.word 3
>27da	22 18					.word xt_0
>27dc	eb 34					.word xt_min
>27de	22 18					.word xt_0
>27e0	70 16					.word xt_assertx3d
>27e2	b6 18					.word xt_x28literalx29
>27e4	ea 27					.word l_190
>27e6	8d 2f					.word xt_x28branchx29
>27e8	04 28					.word l_191
.27ea					l_190:
>27ea	66 66 66 65 68 20 66 66			.null "fffeh ffffh min --> fffeh"
>27f2	66 66 68 20 6d 69 6e 20 2d 2d 3e 20 66 66 66 65
>2802	68 00
.2804					l_191:
>2804	50 16					.word xt_testname
>2806	b6 18					.word xt_x28literalx29
>2808	fe ff					.word 65534
>280a	b6 18					.word xt_x28literalx29
>280c	ff ff					.word 65535
>280e	eb 34					.word xt_min
>2810	b6 18					.word xt_x28literalx29
>2812	fe ff					.word 65534
>2814	70 16					.word xt_assertx3d
>2816	b6 18					.word xt_x28literalx29
>2818	1e 28					.word l_192
>281a	8d 2f					.word xt_x28branchx29
>281c	32 28					.word l_193
.281e					l_192:
>281e	31 20 32 20 33 20 72 6f			.null "1 2 3 rot --> 2 3 1"
>2826	74 20 2d 2d 3e 20 32 20 33 20 31 00
.2832					l_193:
>2832	50 16					.word xt_testname
>2834	3e 18					.word xt_1
>2836	5c 18					.word xt_2
>2838	b6 18					.word xt_x28literalx29
>283a	03 00					.word 3
>283c	17 35					.word xt_rot
>283e	3e 18					.word xt_1
>2840	70 16					.word xt_assertx3d
>2842	b6 18					.word xt_x28literalx29
>2844	03 00					.word 3
>2846	70 16					.word xt_assertx3d
>2848	5c 18					.word xt_2
>284a	70 16					.word xt_assertx3d
>284c	b6 18					.word xt_x28literalx29
>284e	54 28					.word l_194
>2850	8d 2f					.word xt_x28branchx29
>2852	69 28					.word l_195
.2854					l_194:
>2854	31 20 32 20 32 64 75 70			.null "1 2 2dup --> 1 2 1 2"
>285c	20 2d 2d 3e 20 31 20 32 20 31 20 32 00
.2869					l_195:
>2869	50 16					.word xt_testname
>286b	3e 18					.word xt_1
>286d	5c 18					.word xt_2
>286f	37 35					.word xt_2dup
>2871	5c 18					.word xt_2
>2873	70 16					.word xt_assertx3d
>2875	3e 18					.word xt_1
>2877	70 16					.word xt_assertx3d
>2879	5c 18					.word xt_2
>287b	70 16					.word xt_assertx3d
>287d	3e 18					.word xt_1
>287f	70 16					.word xt_assertx3d
>2881	b6 18					.word xt_x28literalx29
>2883	89 28					.word l_196
>2885	8d 2f					.word xt_x28branchx29
>2887	9f 28					.word l_197
.2889					l_196:
>2889	31 20 32 20 33 20 34 20			.null "1 2 3 4 2drop --> 1 2"
>2891	32 64 72 6f 70 20 2d 2d 3e 20 31 20 32 00
.289f					l_197:
>289f	50 16					.word xt_testname
>28a1	3e 18					.word xt_1
>28a3	5c 18					.word xt_2
>28a5	b6 18					.word xt_x28literalx29
>28a7	03 00					.word 3
>28a9	b6 18					.word xt_x28literalx29
>28ab	04 00					.word 4
>28ad	53 35					.word xt_2drop
>28af	5c 18					.word xt_2
>28b1	70 16					.word xt_assertx3d
>28b3	3e 18					.word xt_1
>28b5	70 16					.word xt_assertx3d
>28b7	08 16					.word i_exit
.28b9					w_drop:
>28b9	04					.byte $04
>28ba	64 72 6f 70				.text 'drop'
>28be						.fill 12
>28ca	f6 18					.word w_unittest
.28cc					xt_drop:
.28cc	e8		inx			inx
.28cd	e8		inx			inx
.28ce	4c 23 16	jmp $1623		jmp next
.28d1					w_dup:
>28d1	03					.byte $03
>28d2	64 75 70				.text 'dup'
>28d5						.fill 13
>28e2	b9 28					.word w_drop
.28e4					xt_dup:
.28e4	b5 02		lda $02,x		lda pstack+2,x
.28e6	95 00		sta $00,x		sta pstack,x
.28e8	b5 03		lda $03,x		lda pstack+3,x
.28ea	95 01		sta $01,x		sta pstack+1,x
.28ec	ca		dex			dex
.28ed	ca		dex			dex
.28ee	4c 23 16	jmp $1623		jmp next
.28f1					w_swap:
>28f1	04					.byte $04
>28f2	73 77 61 70				.text 'swap'
>28f6						.fill 12
>2902	d1 28					.word w_dup
.2904					xt_swap:
.2904	b5 02		lda $02,x		lda pstack+2,x
.2906	b4 04		ldy $04,x		ldy pstack+4,x
.2908	94 02		sty $02,x		sty pstack+2,x
.290a	95 04		sta $04,x		sta pstack+4,x
.290c	b5 03		lda $03,x		lda pstack+3,x
.290e	b4 05		ldy $05,x		ldy pstack+5,x
.2910	94 03		sty $03,x		sty pstack+3,x
.2912	95 05		sta $05,x		sta pstack+5,x
.2914	4c 23 16	jmp $1623		jmp next
.2917					w_over:
>2917	04					.byte $04
>2918	6f 76 65 72				.text 'over'
>291c						.fill 12
>2928	f1 28					.word w_swap
.292a					xt_over:
.292a	b5 04		lda $04,x		lda pstack+4,x
.292c	95 00		sta $00,x		sta pstack,x
.292e	b5 05		lda $05,x		lda pstack+5,x
.2930	95 01		sta $01,x		sta pstack+1,x
.2932	ca		dex			dex
.2933	ca		dex			dex
.2934	4c 23 16	jmp $1623		jmp next
.2937					w_x3er:
>2937	02					.byte $02
>2938	3e 72					.text '>r'
>293a						.fill 14
>2948	17 29					.word w_over
.294a					xt_x3er:
.294a	b5 03		lda $03,x		lda pstack+3,x
.294c	48		pha			pha
.294d	b5 02		lda $02,x		lda pstack+2,x
.294f	48		pha			pha
.2950	e8		inx			inx
.2951	e8		inx			inx
.2952	4c 23 16	jmp $1623		jmp next
.2955					w_rx3e:
>2955	02					.byte $02
>2956	72 3e					.text 'r>'
>2958						.fill 14
>2966	37 29					.word w_x3er
.2968					xt_rx3e:
.2968	68		pla			pla
.2969	95 00		sta $00,x		sta pstack,x
.296b	68		pla			pla
.296c	95 01		sta $01,x		sta pstack+1,x
.296e	ca		dex			dex
.296f	ca		dex			dex
.2970	4c 23 16	jmp $1623		jmp next
.2973					w_r:
>2973	01					.byte $01
>2974	72					.text 'r'
>2975						.fill 15
>2984	55 29					.word w_rx3e
.2986					xt_r:
.2986	68		pla			pla
.2987	95 00		sta $00,x		sta pstack,x
.2989	68		pla			pla
.298a	95 01		sta $01,x		sta pstack+1,x
.298c	48		pha			pha
.298d	b5 00		lda $00,x		lda pstack,x
.298f	48		pha			pha
.2990	ca		dex			dex
.2991	ca		dex			dex
.2992	4c 23 16	jmp $1623		jmp next
.2995					w_rdrop:
>2995	05					.byte $05
>2996	72 64 72 6f 70				.text 'rdrop'
>299b						.fill 11
>29a6	73 29					.word w_r
.29a8					xt_rdrop:
.29a8	68		pla			pla
.29a9	68		pla			pla
.29aa					w_x21:
>29aa	01					.byte $01
>29ab	21					.text '!'
>29ac						.fill 15
>29bb	95 29					.word w_rdrop
.29bd					xt_x21:
.29bd	b5 02		lda $02,x		lda pstack+2,x
.29bf	85 32		sta $32			sta tmp
.29c1	b5 03		lda $03,x		lda pstack+3,x
.29c3	85 33		sta $33			sta tmp+1
.29c5	a0 01		ldy #$01		ldy #1
.29c7	b5 04		lda $04,x		lda pstack+4,x
.29c9	92 32		sta ($32)		sta (tmp)
.29cb	b5 05		lda $05,x		lda pstack+5,x
.29cd	91 32		sta ($32),y		sta (tmp),y
.29cf	e8		inx			inx
.29d0	e8		inx			inx
.29d1	e8		inx			inx
.29d2	e8		inx			inx
.29d3	4c 23 16	jmp $1623		jmp next
.29d6					w_x40:
>29d6	01					.byte $01
>29d7	40					.text '@'
>29d8						.fill 15
>29e7	aa 29					.word w_x21
.29e9					xt_x40:
.29e9	b5 02		lda $02,x		lda pstack+2,x
.29eb	85 32		sta $32			sta tmp
.29ed	b5 03		lda $03,x		lda pstack+3,x
.29ef	85 33		sta $33			sta tmp+1
.29f1	a0 01		ldy #$01		ldy #1
.29f3	b2 32		lda ($32)		lda (tmp)
.29f5	95 02		sta $02,x		sta pstack+2,x
.29f7	b1 32		lda ($32),y		lda (tmp),y
.29f9	95 03		sta $03,x		sta pstack+3,x
.29fb	4c 23 16	jmp $1623		jmp next
.29fe					w_cx21:
>29fe	02					.byte $02
>29ff	63 21					.text 'c!'
>2a01						.fill 14
>2a0f	d6 29					.word w_x40
.2a11					xt_cx21:
.2a11	b5 04		lda $04,x		lda pstack+4,x
.2a13	81 02		sta ($02,x)		sta (pstack+2,x)
.2a15	e8		inx			inx
.2a16	e8		inx			inx
.2a17	e8		inx			inx
.2a18	e8		inx			inx
.2a19	4c 23 16	jmp $1623		jmp next
.2a1c					w_cx40:
>2a1c	02					.byte $02
>2a1d	63 40					.text 'c@'
>2a1f						.fill 14
>2a2d	fe 29					.word w_cx21
.2a2f					xt_cx40:
.2a2f	a1 02		lda ($02,x)		lda (pstack+2,x)
.2a31	95 02		sta $02,x		sta pstack+2,x
.2a33	74 03		stz $03,x		stz pstack+3,x
.2a35	4c 23 16	jmp $1623		jmp next
.2a38					w_fill:
>2a38	04					.byte $04
>2a39	66 69 6c 6c				.text 'fill'
>2a3d						.fill 12
>2a49	1c 2a					.word w_cx40
.2a4b					xt_fill:
.2a4b						loop:
.2a4b	b5 03		lda $03,x		lda pstack+3,x          ; Check to see if the count is 0
.2a4d	d0 04		bne $2a53		bne do_write
.2a4f	b5 04		lda $04,x		lda pstack+4,x
.2a51	f0 19		beq $2a6c		beq done                ; Yes: we're done...
.2a53						do_write:
.2a53	b5 01		lda $01,x		lda pstack+1,x          ; No:; get the byte to use for the fill
.2a55	81 05		sta ($05,x)		sta (pstack+5,x)        ; And store it in the indicated location
.2a57	f6 05		inc $05,x		inc pstack+5,x          ; Increment the address
.2a59	d0 02		bne $2a5d		bne deccount
.2a5b	f6 06		inc $06,x		inc pstack+6,x
.2a5d						deccount:
.2a5d	38		sec			sec                     ; Decrement the count
.2a5e	b5 03		lda $03,x		lda pstack+3,x
.2a60	e9 01		sbc #$01		sbc #1
.2a62	95 03		sta $03,x		sta pstack+3,x
.2a64	b5 04		lda $04,x		lda pstack+4,x
.2a66	e9 00		sbc #$00		sbc #0
.2a68	95 04		sta $04,x		sta pstack+4,x
.2a6a	80 df		bra $2a4b		bra loop                ; And check again
.2a6c						done:
.2a6c	8a		txa			txa                     ; Clean up the parameter stack
.2a6d	69 06		adc #$06		adc #6
.2a6f	aa		tax			tax
.2a70	4c 23 16	jmp $1623		jmp next
.2a73					w_x2bx21:
>2a73	02					.byte $02
>2a74	2b 21					.text '+!'
>2a76						.fill 14
>2a84	38 2a					.word w_fill
.2a86					xt_x2bx21:
.2a86	b5 03		lda $03,x		lda pstack+3,x
.2a88	85 33		sta $33			sta tmp+1
.2a8a	b5 02		lda $02,x		lda pstack+2,x
.2a8c	85 32		sta $32			sta tmp
.2a8e	18		clc			clc
.2a8f	a0 01		ldy #$01		ldy #1
.2a91	b2 32		lda ($32)		lda (tmp)
.2a93	75 04		adc $04,x		adc pstack+4,x
.2a95	92 32		sta ($32)		sta (tmp)
.2a97	b1 32		lda ($32),y		lda (tmp),y
.2a99	75 05		adc $05,x		adc pstack+5,x
.2a9b	91 32		sta ($32),y		sta (tmp),y
.2a9d						done:
.2a9d	e8		inx			inx                     ; Clean up the stack
.2a9e	e8		inx			inx
.2a9f	e8		inx			inx
.2aa0	e8		inx			inx
.2aa1	4c 23 16	jmp $1623		jmp next
.2aa4					w_enclose:
>2aa4	07					.byte $07
>2aa5	65 6e 63 6c 6f 73 65			.text 'enclose'
>2aac						.fill 9
>2ab5	73 2a					.word w_x2bx21
.2ab7					xt_enclose:
.2ab7	b5 05		lda $05,x		lda pstack+5,x          ; Copy the address
.2ab9	85 25		sta $25			sta src_ptr+1
.2abb	b5 04		lda $04,x		lda pstack+4,x
.2abd	85 24		sta $24			sta src_ptr
.2abf	b5 02		lda $02,x		lda pstack+2,x          ; tmp := c
.2ac1	85 32		sta $32			sta tmp
.2ac3	8a		txa			txa
.2ac4	38		sec			sec
.2ac5	e9 04		sbc #$04		sbc #4
.2ac7	aa		tax			tax
.2ac8	74 07		stz $07,x		stz pstack+7,x          ; n1 ... offset to first character
.2aca	74 06		stz $06,x		stz pstack+6,x
.2acc	74 05		stz $05,x		stz pstack+5,x          ; n2 ... offset to first delimiter
.2ace	74 04		stz $04,x		stz pstack+4,x
.2ad0	74 03		stz $03,x		stz pstack+3,x          ; n3 ... n2 + 1 or n2
.2ad2	74 02		stz $02,x		stz pstack+2,x
.2ad4	a0 00		ldy #$00		ldy #0
.2ad6						loop1:
.2ad6	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2ad8	d0 03		bne $2add		bne chk_delim1          ; NUL? No:; check it against the delimiter
.2ada						none:
.2ada	4c 23 16	jmp $1623		jmp next                ; Yes: we want to return 0s
.2add						chk_delim1:
.2add	c5 32		cmp $32			cmp tmp                 ; Is it the delimiter?
.2adf	f0 13		beq $2af4		beq skip2               ; Yes: skip the character
.2ae1	a5 32		lda $32			lda tmp                 ; Check the delimiter
.2ae3	c9 20		cmp #$20		cmp #' '                ; Is it BL?
.2ae5	d0 0b		bne $2af2		bne found               ; No: ok, we've found the first character;
.2ae7	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character back
.2ae9	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a TAB?
.2aeb	d0 05		bne $2af2		bne found               ; No: we found the first character
.2aed	c8		iny			iny                     ; Move to the next character
.2aee	f0 ea		beq $2ada		beq none                ; If we've rolled over, we found nothing
.2af0	80 e4		bra $2ad6		bra loop1               ; Otherwise: check the next character
.2af2						found:
.2af2	94 06		sty $06,x		sty pstack+6,x          ; Save the offset to it in n1
.2af4						skip2:
.2af4	c8		iny			iny                     ; Go to the next character
.2af5	f0 1c		beq $2b13		beq found_nul           ; If it rolls over, we've reached the end (NUL)
.2af7						loop2:
.2af7	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character
.2af9	f0 18		beq $2b13		beq found_nul           ; If it is NUL, we've reached the end (NUL)
.2afb	c5 32		cmp $32			cmp tmp                 ; Check it against the delimiter
.2afd	f0 0c		beq $2b0b		beq found_delim         ; If it's the delimiter, we've reached the end (with delimiter)
.2aff	a5 32		lda $32			lda tmp                 ; Get the delimiter
.2b01	c9 20		cmp #$20		cmp #' '                ; Is it space?
.2b03	d0 ef		bne $2af4		bne skip2               ; No: go to the next character
.2b05	b1 24		lda ($24),y		lda (src_ptr),y         ; Get the character again
.2b07	c9 09		cmp #$09		cmp #CHAR_TAB           ; Is it a tab?
.2b09	d0 e9		bne $2af4		bne skip2               ; No: go to the next character
.2b0b						found_delim:
.2b0b	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.2b0d	c8		iny			iny
.2b0e	94 02		sty $02,x		sty pstack+2,x          ; And the offset +1 to n3
.2b10	4c 23 16	jmp $1623		jmp next                ; And we're done
.2b13						found_nul:
.2b13	94 04		sty $04,x		sty pstack+4,x          ; Save the offset of the delimiter in n2
.2b15	94 02		sty $02,x		sty pstack+2,x          ; And to n3
.2b17	4c 23 16	jmp $1623		jmp next                ; And we're done
.2b1a					w_cmove:
>2b1a	05					.byte $05
>2b1b	63 6d 6f 76 65				.text 'cmove'
>2b20						.fill 11
>2b2b	a4 2a					.word w_enclose
.2b2d					xt_cmove:
.2b2d	b5 03		lda $03,x		lda pstack+3,x          ; Pull count off the stack
.2b2f	85 33		sta $33			sta tmp+1
.2b31	b5 02		lda $02,x		lda pstack+2,x
.2b33	85 32		sta $32			sta tmp
.2b35	b5 05		lda $05,x		lda pstack+5,x          ; Pull the dst_ptr
.2b37	85 27		sta $27			sta dst_ptr+1
.2b39	b5 04		lda $04,x		lda pstack+4,x
.2b3b	85 26		sta $26			sta dst_ptr
.2b3d	b5 07		lda $07,x		lda pstack+7,x          ; Pull the src_ptr
.2b3f	85 25		sta $25			sta src_ptr+1
.2b41	b5 06		lda $06,x		lda pstack+6,x
.2b43	85 24		sta $24			sta src_ptr
.2b45	8a		txa			txa                     ; Clean up the stack
.2b46	18		clc			clc
.2b47	69 06		adc #$06		adc #6
.2b49	85 34		sta $34			sta savex               ; And save it for later restoration
.2b4b	a2 00		ldx #$00		ldx #0                  ; We'll use X for the high byte of the count
.2b4d	a0 00		ldy #$00		ldy #0                  ; and Y for the low byte of the count
.2b4f						loop:
.2b4f	e4 33		cpx $33			cpx tmp+1               ; is tmp == X:Y?
.2b51	d0 04		bne $2b57		bne copy
.2b53	c4 32		cpy $32			cpy tmp
.2b55	f0 0e		beq $2b65		beq done                ; Yes: we're done
.2b57						copy:
.2b57	b1 24		lda ($24),y		lda (src_ptr),y         ; Copy the byte
.2b59	91 26		sta ($26),y		sta (dst_ptr),y
.2b5b	c8		iny			iny                     ; Move to the next byte
.2b5c	d0 f1		bne $2b4f		bne loop                ; Repeat for 256 bytes
.2b5e	e8		inx			inx                     ; Move to the next block of 256
.2b5f	e6 25		inc $25			inc src_ptr+1
.2b61	e6 27		inc $27			inc dst_ptr+1
.2b63	80 ea		bra $2b4f		bra loop                ; And continue the loop
.2b65						done:
.2b65	a6 34		ldx $34			ldx savex
.2b67	4c 23 16	jmp $1623		jmp next
.2b6a					w_move:
>2b6a	04					.byte $04
>2b6b	6d 6f 76 65				.text 'move'
>2b6f						.fill 12
>2b7b	1a 2b					.word w_cmove
.2b7d					xt_move:
.2b7d	38		sec			sec                     ; Compare addr1 and addr2
.2b7e	b5 06		lda $06,x		lda pstack+6,x
.2b80	f5 04		sbc $04,x		sbc pstack+4,x
.2b82	85 32		sta $32			sta tmp
.2b84	b5 07		lda $07,x		lda pstack+7,x
.2b86	f5 05		sbc $05,x		sbc pstack+5,x
.2b88	85 33		sta $33			sta tmp+1
.2b8a	30 24		bmi $2bb0		bmi a1less
.2b8c	f0 72		beq $2c00		beq chklo
.2b8e						a1greater:
.2b8e	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2b90	d0 50		bne $2be2		bne docopy1
.2b92	b5 03		lda $03,x		lda pstack+3,x
.2b94	f0 72		beq $2c08		beq done                ; Yes: we're done;
.2b96	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2b98	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2b9a	f6 06		inc $06,x		inc pstack+6,x          ; addr1 := addr1 + 1
.2b9c	d0 02		bne $2ba0		bne inc2
.2b9e	f6 07		inc $07,x		inc pstack+7,x
.2ba0						inc2:
.2ba0	f6 04		inc $04,x		inc pstack+4,x          ; addr2 := addr2 + 1
.2ba2	d0 02		bne $2ba6		bne dec_count
.2ba4	f6 03		inc $03,x		inc pstack+3,x
.2ba6						dec_count:
.2ba6	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2ba8	d0 02		bne $2bac		bne l1
.2baa	d6 03		dec $03,x		dec pstack+3,x
.2bac						l1:
.2bac	d6 02		dec $02,x		dec pstack+2,x
.2bae	80 de		bra $2b8e		bra a1greater
.2bb0						a1less:
.2bb0	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2bb2	d0 02		bne $2bb6		bne l2
.2bb4	d6 05		dec $05,x		dec pstack+5,x
.2bb6						l2:
.2bb6	d6 04		dec $04,x		dec pstack+4,x
.2bb8	18		clc			clc                     ; addr2 := addr2 + u
.2bb9	b5 04		lda $04,x		lda pstack+4,x
.2bbb	75 02		adc $02,x		adc pstack+2,x
.2bbd	95 04		sta $04,x		sta pstack+4,x
.2bbf	b5 05		lda $05,x		lda pstack+5,x
.2bc1	75 03		adc $03,x		adc pstack+3,x
.2bc3	95 05		sta $05,x		sta pstack+5,x
.2bc5	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2bc7	d0 02		bne $2bcb		bne l3
.2bc9	d6 07		dec $07,x		dec pstack+7,x
.2bcb						l3:
.2bcb	d6 06		dec $06,x		dec pstack+6,x
.2bcd	18		clc			clc                     ; addr1 := addr1 + u
.2bce	b5 06		lda $06,x		lda pstack+6,x
.2bd0	75 02		adc $02,x		adc pstack+2,x
.2bd2	95 06		sta $06,x		sta pstack+6,x
.2bd4	b5 07		lda $07,x		lda pstack+7,x
.2bd6	75 03		adc $03,x		adc pstack+3,x
.2bd8	95 07		sta $07,x		sta pstack+7,x
.2bda						loop2:
.2bda	b5 02		lda $02,x		lda pstack+2,x          ; Is u = 0?
.2bdc	d0 04		bne $2be2		bne docopy1
.2bde	b5 03		lda $03,x		lda pstack+3,x
.2be0	f0 26		beq $2c08		beq done                ; Yes: we're done;
.2be2						docopy1:
.2be2	a1 06		lda ($06,x)		lda (pstack+6,x)        ; Get the source byte
.2be4	81 04		sta ($04,x)		sta (pstack+4,x)        ; Write it to the destination
.2be6	b5 06		lda $06,x		lda pstack+6,x          ; Decrement addr1
.2be8	d0 02		bne $2bec		bne l4
.2bea	d6 07		dec $07,x		dec pstack+7,x
.2bec						l4:
.2bec	d6 06		dec $06,x		dec pstack+6,x
.2bee	b5 04		lda $04,x		lda pstack+4,x          ; Decrement addr2
.2bf0	d0 02		bne $2bf4		bne l5
.2bf2	d6 05		dec $05,x		dec pstack+5,x
.2bf4						l5:
.2bf4	d6 04		dec $04,x		dec pstack+4,x
.2bf6	b5 02		lda $02,x		lda pstack+2,x          ; Decrement counter
.2bf8	d0 02		bne $2bfc		bne l6
.2bfa	d6 03		dec $03,x		dec pstack+3,x
.2bfc						l6:
.2bfc	d6 02		dec $02,x		dec pstack+2,x
.2bfe	80 da		bra $2bda		bra loop2
.2c00						chklo:
.2c00	a5 32		lda $32			lda tmp                 ; High bytes are equal: check the low byte
.2c02	30 ac		bmi $2bb0		bmi a1less
.2c04	f0 02		beq $2c08		beq done                ; If equal, we don't need to move the data
.2c06	80 86		bra $2b8e		bra a1greater
.2c08						done:
.2c08	8a		txa			txa
.2c09	18		clc			clc
.2c0a	69 06		adc #$06		adc #6
.2c0c	aa		tax			tax
.2c0d	60		rts			rts
.2c0e					w_x2b:
>2c0e	01					.byte $01
>2c0f	2b					.text '+'
>2c10						.fill 15
>2c1f	6a 2b					.word w_move
.2c21					xt_x2b:
.2c21	18		clc			clc
.2c22	b5 04		lda $04,x		lda pstack+4,x
.2c24	75 02		adc $02,x		adc pstack+2,x
.2c26	95 04		sta $04,x		sta pstack+4,x
.2c28	b5 05		lda $05,x		lda pstack+5,x
.2c2a	75 03		adc $03,x		adc pstack+3,x
.2c2c	95 05		sta $05,x		sta pstack+5,x
.2c2e	e8		inx			inx
.2c2f	e8		inx			inx
.2c30	4c 23 16	jmp $1623		jmp next
.2c33					w_x2d:
>2c33	01					.byte $01
>2c34	2d					.text '-'
>2c35						.fill 15
>2c44	0e 2c					.word w_x2b
.2c46					xt_x2d:
.2c46	38		sec			sec
.2c47	b5 04		lda $04,x		lda pstack+4,x
.2c49	f5 02		sbc $02,x		sbc pstack+2,x
.2c4b	95 04		sta $04,x		sta pstack+4,x
.2c4d	b5 05		lda $05,x		lda pstack+5,x
.2c4f	f5 03		sbc $03,x		sbc pstack+3,x
.2c51	95 05		sta $05,x		sta pstack+5,x
.2c53	e8		inx			inx
.2c54	e8		inx			inx
.2c55	4c 23 16	jmp $1623		jmp next
.2c58					w_x2a:
>2c58	01					.byte $01
>2c59	2a					.text '*'
>2c5a						.fill 15
>2c69	33 2c					.word w_x2d
.2c6b					xt_x2a:
.2c6b	64 36		stz $36			stz sign
.2c6d	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2c6f	10 11		bpl $2c82		bpl chk_n2
.2c71	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2c73	85 36		sta $36			sta sign
.2c75	38		sec			sec             ; Negate n1
.2c76	a9 00		lda #$00		lda #0
.2c78	f5 04		sbc $04,x		sbc pstack+4,x
.2c7a	95 04		sta $04,x		sta pstack+4,x
.2c7c	a9 00		lda #$00		lda #0
.2c7e	f5 05		sbc $05,x		sbc pstack+5,x
.2c80	95 05		sta $05,x		sta pstack+5,x
.2c82						chk_n2:
.2c82	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2c84	10 13		bpl $2c99		bpl init_tmp
.2c86	a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2c88	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2c8a	85 36		sta $36			sta sign
.2c8c	38		sec			sec             ; Negate n2
.2c8d	a9 00		lda #$00		lda #0
.2c8f	f5 02		sbc $02,x		sbc pstack+2,x
.2c91	95 02		sta $02,x		sta pstack+2,x
.2c93	a9 00		lda #$00		lda #0
.2c95	f5 03		sbc $03,x		sbc pstack+3,x
.2c97	95 03		sta $03,x		sta pstack+3,x
.2c99						init_tmp:
.2c99	a9 00		lda #$00		lda #0          ; Initialize RESULT to 0
.2c9b	85 34		sta $34			sta tmp+2
.2c9d	a2 10		ldx #$10		ldx #16         ; There are 16 bits in n2
.2c9f						l1:
.2c9f	56 03		lsr $03,x		lsr pstack+3,x  ; Get low bit of n2
.2ca1	76 02		ror $02,x		ror pstack+2,x
.2ca3	90 0b		bcc $2cb0		bcc l2          ; 0 or 1?
.2ca5	a8		tay			tay             ; If 1, add n1 (hi byte of tmp is in A)
.2ca6	18		clc			clc
.2ca7	b5 04		lda $04,x		lda pstack+4,x
.2ca9	65 34		adc $34			adc tmp+2
.2cab	85 34		sta $34			sta tmp+2
.2cad	98		tya			tya
.2cae	75 05		adc $05,x		adc pstack+5,x
.2cb0						l2:
.2cb0	6a		ror a			ror A
.2cb1	66 34		ror $34			ror tmp+2
.2cb3	66 33		ror $33			ror tmp+1
.2cb5	66 32		ror $32			ror tmp
.2cb7	3a		dec a			dec a
.2cb8	d0 e5		bne $2c9f		bne l1
.2cba	85 35		sta $35			sta tmp+3
.2cbc	a5 32		lda $32			lda tmp         ; Save result to parameter stack
.2cbe	95 04		sta $04,x		sta pstack+4,x
.2cc0	a5 33		lda $33			lda tmp+1
.2cc2	95 05		sta $05,x		sta pstack+5,x
.2cc4	e8		inx			inx             ; Clean up parameter stack
.2cc5	e8		inx			inx
.2cc6	a5 36		lda $36			lda sign        ; Check the sign
.2cc8	10 0d		bpl $2cd7		bpl done
.2cca	38		sec			sec             ; If negative, negate result
.2ccb	a9 00		lda #$00		lda #0
.2ccd	f5 02		sbc $02,x		sbc pstack+2,x
.2ccf	95 02		sta $02,x		sta pstack+2,x
.2cd1	a9 00		lda #$00		lda #0
.2cd3	f5 03		sbc $03,x		sbc pstack+3,x
.2cd5	95 03		sta $03,x		sta pstack+3,x
.2cd7						done:
.2cd7	4c 23 16	jmp $1623		jmp next
.2cda					w_x2fmod:
>2cda	04					.byte $04
>2cdb	2f 6d 6f 64				.text '/mod'
>2cdf						.fill 12
>2ceb	58 2c					.word w_x2a
.2ced					xt_x2fmod:
.2ced	64 36		stz $36			stz sign
.2cef	b5 05		lda $05,x		lda pstack+5,x  ; Check to see if n1 is negative
.2cf1	10 11		bpl $2d04		bpl chk_n2
.2cf3	a9 80		lda #$80		lda #$80        ; Yes: record the sign
.2cf5	85 36		sta $36			sta sign
.2cf7	38		sec			sec             ; Negate n1
.2cf8	a9 00		lda #$00		lda #0
.2cfa	f5 04		sbc $04,x		sbc pstack+4,x
.2cfc	95 04		sta $04,x		sta pstack+4,x
.2cfe	a9 00		lda #$00		lda #0
.2d00	f5 05		sbc $05,x		sbc pstack+5,x
.2d02	95 05		sta $05,x		sta pstack+5,x
.2d04						chk_n2:
.2d04	b5 03		lda $03,x		lda pstack+3,x  ; Check to see if n2 is negative
.2d06	10 13		bpl $2d1b		bpl init_tmp
.2d08	a5 36		lda $36			lda sign        ; Flip the sign bit, if so
.2d0a	49 80		eor #$80		eor #$80        ; And set the bit for the remainder
.2d0c	85 36		sta $36			sta sign
.2d0e	38		sec			sec             ; Negate n2
.2d0f	a9 00		lda #$00		lda #0
.2d11	f5 02		sbc $02,x		sbc pstack+2,x
.2d13	95 02		sta $02,x		sta pstack+2,x
.2d15	a9 00		lda #$00		lda #0
.2d17	f5 03		sbc $03,x		sbc pstack+3,x
.2d19	95 03		sta $03,x		sta pstack+3,x
.2d1b						init_tmp:
.2d1b	64 32		stz $32			stz tmp         ; Initialize tmp (remainder) to 0
.2d1d	64 33		stz $33			stz tmp+1
.2d1f	a9 10		lda #$10		lda #16         ; There are 16 bits in NUM1
.2d21	85 35		sta $35			sta counter
.2d23						l1:
.2d23	16 04		asl $04,x		asl pstack+4,x  ; Shift hi bit of NUM1 into REM
.2d25	36 05		rol $05,x		rol pstack+5,x  ; (vacating the lo bit, which will be used for the quotient)
.2d27	26 32		rol $32			rol tmp
.2d29	26 33		rol $33			rol tmp+1
.2d2b	a5 32		lda $32			lda tmp
.2d2d	38		sec			sec             ; Trial subtraction
.2d2e	f5 02		sbc $02,x		sbc pstack+2,x
.2d30	a8		tay			tay
.2d31	b5 33		lda $33,x		lda tmp+1,x
.2d33	f5 03		sbc $03,x		sbc pstack+3,x
.2d35	90 06		bcc $2d3d		bcc l2          ; Did subtraction succeed?
.2d37	85 33		sta $33			sta tmp+1       ; If yes, save it
.2d39	84 32		sty $32			sty tmp
.2d3b	f6 04		inc $04,x		inc pstack+4,x  ; and record a 1 in the quotient
.2d3d						l2:
.2d3d	c6 35		dec $35			dec counter
.2d3f	d0 e2		bne $2d23		bne l1
.2d41	b5 05		lda $05,x		lda pstack+5,x  ; Set the quotient
.2d43	95 03		sta $03,x		sta pstack+3,x
.2d45	b5 04		lda $04,x		lda pstack+4,x
.2d47	95 02		sta $02,x		sta pstack+2,x
.2d49	a5 32		lda $32			lda tmp         ; Save the remainder to the stack
.2d4b	95 04		sta $04,x		sta pstack+4,x
.2d4d	a5 33		lda $33			lda tmp+1
.2d4f	95 05		sta $05,x		sta pstack+5,x
.2d51	a5 36		lda $36			lda sign        ; Check to see if the sign should be negative
.2d53	10 0d		bpl $2d62		bpl done
.2d55	38		sec			sec             ; Negate the quotient
.2d56	a9 00		lda #$00		lda #0
.2d58	f5 02		sbc $02,x		sbc pstack+2,x
.2d5a	95 02		sta $02,x		sta pstack+2,x
.2d5c	a9 00		lda #$00		lda #0
.2d5e	f5 03		sbc $03,x		sbc pstack+3,x
.2d60	95 03		sta $03,x		sta pstack+3,x
.2d62						done:
.2d62	4c 23 16	jmp $1623		jmp next
.2d65					w_1x2b:
>2d65	02					.byte $02
>2d66	31 2b					.text '1+'
>2d68						.fill 14
>2d76	da 2c					.word w_x2fmod
.2d78					xt_1x2b:
.2d78	f6 02		inc $02,x		inc pstack+2,x
.2d7a	d0 02		bne $2d7e		bne skip
.2d7c	f6 03		inc $03,x		inc pstack+3,x
.2d7e						skip:
.2d7e	4c 23 16	jmp $1623		jmp next
.2d81					w_2x2b:
>2d81	02					.byte $02
>2d82	32 2b					.text '2+'
>2d84						.fill 14
>2d92	65 2d					.word w_1x2b
.2d94					xt_2x2b:
.2d94	18		clc			clc
.2d95	b5 02		lda $02,x		lda pstack+2,x
.2d97	69 02		adc #$02		adc #2
.2d99	95 02		sta $02,x		sta pstack+2,x
.2d9b	b5 03		lda $03,x		lda pstack+3,x
.2d9d	69 00		adc #$00		adc #0
.2d9f	95 03		sta $03,x		sta pstack+3,x
.2da1	4c 23 16	jmp $1623		jmp next
.2da4					w_1x2d:
>2da4	02					.byte $02
>2da5	31 2d					.text '1-'
>2da7						.fill 14
>2db5	81 2d					.word w_2x2b
.2db7					xt_1x2d:
.2db7	b5 02		lda $02,x		lda pstack+2,x
.2db9	d0 02		bne $2dbd		bne l1
.2dbb	d6 03		dec $03,x		dec pstack+3,x
.2dbd						l1:
.2dbd	d6 02		dec $02,x		dec pstack+2,x
.2dbf	4c 23 16	jmp $1623		jmp next
.2dc2					w_2x2d:
>2dc2	02					.byte $02
>2dc3	32 2d					.text '2-'
>2dc5						.fill 14
>2dd3	a4 2d					.word w_1x2d
.2dd5					xt_2x2d:
.2dd5	38		sec			sec
.2dd6	b5 02		lda $02,x		lda pstack+2,x
.2dd8	e9 02		sbc #$02		sbc #2
.2dda	95 02		sta $02,x		sta pstack+2,x
.2ddc	b5 03		lda $03,x		lda pstack+3,x
.2dde	e9 00		sbc #$00		sbc #0
.2de0	95 03		sta $03,x		sta pstack+3,x
.2de2	4c 23 16	jmp $1623		jmp next
.2de5					w_and:
>2de5	03					.byte $03
>2de6	61 6e 64				.text 'and'
>2de9						.fill 13
>2df6	c2 2d					.word w_2x2d
.2df8					xt_and:
.2df8	b5 02		lda $02,x		lda pstack+2,x
.2dfa	35 04		and $04,x		and pstack+4,x
.2dfc	95 04		sta $04,x		sta pstack+4,x
.2dfe	b5 03		lda $03,x		lda pstack+3,x
.2e00	35 05		and $05,x		and pstack+5,x
.2e02	95 05		sta $05,x		sta pstack+5,x
.2e04	e8		inx			inx
.2e05	e8		inx			inx
.2e06	4c 23 16	jmp $1623		jmp next
.2e09					w_or:
>2e09	02					.byte $02
>2e0a	6f 72					.text 'or'
>2e0c						.fill 14
>2e1a	e5 2d					.word w_and
.2e1c					xt_or:
.2e1c	b5 02		lda $02,x		lda pstack+2,x
.2e1e	15 04		ora $04,x		ora pstack+4,x
.2e20	95 04		sta $04,x		sta pstack+4,x
.2e22	b5 03		lda $03,x		lda pstack+3,x
.2e24	15 05		ora $05,x		ora pstack+5,x
.2e26	95 05		sta $05,x		sta pstack+5,x
.2e28	e8		inx			inx
.2e29	e8		inx			inx
.2e2a	4c 23 16	jmp $1623		jmp next
.2e2d					w_xor:
>2e2d	03					.byte $03
>2e2e	78 6f 72				.text 'xor'
>2e31						.fill 13
>2e3e	09 2e					.word w_or
.2e40					xt_xor:
.2e40	b5 02		lda $02,x		lda pstack+2,x
.2e42	55 04		eor $04,x		eor pstack+4,x
.2e44	95 04		sta $04,x		sta pstack+4,x
.2e46	b5 03		lda $03,x		lda pstack+3,x
.2e48	55 05		eor $05,x		eor pstack+5,x
.2e4a	95 05		sta $05,x		sta pstack+5,x
.2e4c	e8		inx			inx
.2e4d	e8		inx			inx
.2e4e	4c 23 16	jmp $1623		jmp next
.2e51					w_not:
>2e51	03					.byte $03
>2e52	6e 6f 74				.text 'not'
>2e55						.fill 13
>2e62	2d 2e					.word w_xor
.2e64					xt_not:
.2e64	b5 02		lda $02,x		lda pstack+2,x
.2e66	49 ff		eor #$ff		eor #$ff
.2e68	95 02		sta $02,x		sta pstack+2,x
.2e6a	b5 03		lda $03,x		lda pstack+3,x
.2e6c	49 ff		eor #$ff		eor #$ff
.2e6e	95 03		sta $03,x		sta pstack+3,x
.2e70	4c 23 16	jmp $1623		jmp next
.2e73					w_0x3c:
>2e73	02					.byte $02
>2e74	30 3c					.text '0<'
>2e76						.fill 14
>2e84	51 2e					.word w_not
.2e86					xt_0x3c:
.2e86	b5 03		lda $03,x		lda pstack+3,x
.2e88	30 07		bmi $2e91		bmi istrue
.2e8a	74 02		stz $02,x		stz pstack+2,x
.2e8c	74 03		stz $03,x		stz pstack+3,x
.2e8e	4c 23 16	jmp $1623		jmp next
.2e91						istrue:
.2e91	a9 ff		lda #$ff		lda #$ff
.2e93	95 02		sta $02,x		sta pstack+2,x
.2e95	95 03		sta $03,x		sta pstack+3,x
.2e97	4c 23 16	jmp $1623		jmp next
.2e9a					w_0x3d:
>2e9a	02					.byte $02
>2e9b	30 3d					.text '0='
>2e9d						.fill 14
>2eab	73 2e					.word w_0x3c
.2ead					xt_0x3d:
.2ead	b5 02		lda $02,x		lda pstack+2,x
.2eaf	d0 0d		bne $2ebe		bne isfalse
.2eb1	b5 03		lda $03,x		lda pstack+3,x
.2eb3	d0 09		bne $2ebe		bne isfalse
.2eb5	a9 ff		lda #$ff		lda #$ff
.2eb7	95 02		sta $02,x		sta pstack+2,x
.2eb9	95 03		sta $03,x		sta pstack+3,x
.2ebb	4c 23 16	jmp $1623		jmp next
.2ebe						isfalse:
.2ebe	74 02		stz $02,x		stz pstack+2,x
.2ec0	74 03		stz $03,x		stz pstack+3,x
.2ec2	4c 23 16	jmp $1623		jmp next
.2ec5					w_0x3e:
>2ec5	02					.byte $02
>2ec6	30 3e					.text '0>'
>2ec8						.fill 14
>2ed6	9a 2e					.word w_0x3d
.2ed8					xt_0x3e:
.2ed8	b5 03		lda $03,x		lda pstack+3,x
.2eda	30 0f		bmi $2eeb		bmi isfalse
.2edc	d0 04		bne $2ee2		bne istrue
.2ede	b5 02		lda $02,x		lda pstack+2,x
.2ee0	f0 09		beq $2eeb		beq isfalse
.2ee2						istrue:
.2ee2	a9 ff		lda #$ff		lda #$ff
.2ee4	95 02		sta $02,x		sta pstack+2,x
.2ee6	95 03		sta $03,x		sta pstack+3,x
.2ee8	4c 23 16	jmp $1623		jmp next
.2eeb						isfalse:
.2eeb	74 02		stz $02,x		stz pstack+2,x
.2eed	74 03		stz $03,x		stz pstack+3,x
.2eef	4c 23 16	jmp $1623		jmp next
.2ef2					w_x28variablex29:
>2ef2	0a					.byte $0A
>2ef3	28 76 61 72 69 61 62 6c			.text '(variable)'
>2efb	65 29
>2efd						.fill 6
>2f03	c5 2e					.word w_0x3e
.2f05					xt_x28variablex29:
.2f05	18		clc			clc                     ; push(wp + 3)
.2f06	a5 2a		lda $2a			lda wp
.2f08	69 03		adc #$03		adc #3
.2f0a	95 00		sta $00,x		sta pstack,x
.2f0c	a5 2b		lda $2b			lda wp+1
.2f0e	69 00		adc #$00		adc #0
.2f10	95 01		sta $01,x		sta pstack+1,x
.2f12	ca		dex			dex
.2f13	ca		dex			dex
.2f14	4c 23 16	jmp $1623		jmp next
.2f17					w_x28constantx29:
>2f17	0a					.byte $0A
>2f18	28 63 6f 6e 73 74 61 6e			.text '(constant)'
>2f20	74 29
>2f22						.fill 6
>2f28	f2 2e					.word w_x28variablex29
.2f2a					xt_x28constantx29:
.2f2a	a0 03		ldy #$03		ldy #3                  ; push(memory(wp + 3))
.2f2c	b1 2a		lda ($2a),y		lda (wp),y
.2f2e	95 00		sta $00,x		sta pstack,x
.2f30	c8		iny			iny
.2f31	b1 2a		lda ($2a),y		lda (wp),y
.2f33	95 01		sta $01,x		sta pstack+1,x
.2f35	ca		dex			dex
.2f36	ca		dex			dex
.2f37	4c 23 16	jmp $1623		jmp next
.2f3a					w_cells:
>2f3a	05					.byte $05
>2f3b	63 65 6c 6c 73				.text 'cells'
>2f40						.fill 11
>2f4b	17 2f					.word w_x28constantx29
.2f4d					xt_cells:
.2f4d	4c 2a 2f	jmp $2f2a		jmp xt_x28constantx29
>2f50	02 00					.word 2
.2f52					w_x28userx29:
>2f52	06					.byte $06
>2f53	28 75 73 65 72 29			.text '(user)'
>2f59						.fill 10
>2f63	3a 2f					.word w_cells
.2f65					xt_x28userx29:
.2f65	18		clc			clc                     ; push(up + memory(wp + 3))
.2f66	a0 03		ldy #$03		ldy #3
.2f68	a5 2c		lda $2c			lda up
.2f6a	71 2a		adc ($2a),y		adc (wp),y
.2f6c	95 00		sta $00,x		sta pstack,x
.2f6e	c8		iny			iny
.2f6f	a5 2d		lda $2d			lda up+1
.2f71	71 2a		adc ($2a),y		adc (wp),y
.2f73	95 01		sta $01,x		sta pstack+1,x
.2f75	ca		dex			dex
.2f76	ca		dex			dex
.2f77	4c 23 16	jmp $1623		jmp next
.2f7a					w_x28branchx29:
>2f7a	08					.byte $08
>2f7b	28 62 72 61 6e 63 68 29			.text '(branch)'
>2f83						.fill 8
>2f8b	52 2f					.word w_x28userx29
.2f8d					xt_x28branchx29:
.2f8d	a0 01		ldy #$01		ldy #1              ; ip := branch address
.2f8f	b2 28		lda ($28)		lda (ip)
.2f91	85 32		sta $32			sta tmp
.2f93	b1 28		lda ($28),y		lda (ip),y
.2f95	85 29		sta $29			sta ip+1
.2f97	a5 32		lda $32			lda tmp
.2f99	85 28		sta $28			sta ip
.2f9b	4c 23 16	jmp $1623		jmp next
.2f9e					w_x28branch0x29:
>2f9e	09					.byte $09
>2f9f	28 62 72 61 6e 63 68 30			.text '(branch0)'
>2fa7	29
>2fa8						.fill 7
>2faf	7a 2f					.word w_x28branchx29
.2fb1					xt_x28branch0x29:
.2fb1	b5 02		lda $02,x		lda pstack+2,x      ; Check to see if TOS is 0
.2fb3	d0 04		bne $2fb9		bne nobranch        ; No: skip over the branch address
.2fb5	b5 03		lda $03,x		lda pstack+3,x
.2fb7	f0 0f		beq $2fc8		beq dobranch        ; Yes: take the branch
.2fb9						nobranch:
.2fb9	18		clc			clc                 ; No: skip over the branch address
.2fba	a5 28		lda $28			lda ip
.2fbc	69 02		adc #$02		adc #2
.2fbe	85 28		sta $28			sta ip
.2fc0	a5 29		lda $29			lda ip+1
.2fc2	69 00		adc #$00		adc #0
.2fc4	85 29		sta $29			sta ip+1
.2fc6	80 0e		bra $2fd6		bra done
.2fc8						dobranch:
.2fc8	a0 01		ldy #$01		ldy #1              ; ip := branch address
.2fca	b2 28		lda ($28)		lda (ip)
.2fcc	85 32		sta $32			sta tmp
.2fce	b1 28		lda ($28),y		lda (ip),y
.2fd0	85 29		sta $29			sta ip+1
.2fd2	a5 32		lda $32			lda tmp
.2fd4	85 28		sta $28			sta ip
.2fd6						done:
.2fd6	e8		inx			inx                 ; clean up the parameter stack
.2fd7	e8		inx			inx
.2fd8	4c 23 16	jmp $1623		jmp next
.2fdb					w_x28dox29:
>2fdb	04					.byte $04
>2fdc	28 64 6f 29				.text '(do)'
>2fe0						.fill 12
>2fec	9e 2f					.word w_x28branch0x29
.2fee					xt_x28dox29:
.2fee	b5 03		lda $03,x		lda pstack+3,x
.2ff0	48		pha			pha
.2ff1	b5 02		lda $02,x		lda pstack+2,x
.2ff3	48		pha			pha
.2ff4	b5 05		lda $05,x		lda pstack+5,x
.2ff6	48		pha			pha
.2ff7	b5 04		lda $04,x		lda pstack+4,x
.2ff9	48		pha			pha
.2ffa	18		clc			clc
.2ffb	8a		txa			txa
.2ffc	69 04		adc #$04		adc #4
.2ffe	aa		tax			tax
.2fff	4c 23 16	jmp $1623		jmp next
.3002					w_x3ei:
>3002	02					.byte $02
>3003	3e 69					.text '>i'
>3005						.fill 14
>3013	db 2f					.word w_x28dox29
.3015					xt_x3ei:
>0101						limit       .word ?
>0103						current     .word ?
.3015	b5 03		lda $03,x		lda pstack+3,x      ; tmp := n
.3017	85 33		sta $33			sta tmp+1
.3019	b5 02		lda $02,x		lda pstack+2,x
.301b	85 32		sta $32			sta tmp
.301d	e8		inx			inx
.301e	e8		inx			inx
.301f	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.3021	ba		tsx			tsx
.3022	a5 33		lda $33			lda tmp+1           ; current := tmp = n
.3024	9d 04 01	sta $0104,x		sta current+1
.3027	a5 32		lda $32			lda tmp
.3029	9d 03 01	sta $0103,x		sta current
.302c	a6 34		ldx $34			ldx savex
.302e	4c 23 16	jmp $1623		jmp next
.3031					w_leave:
>3031	05					.byte $05
>3032	6c 65 61 76 65				.text 'leave'
>3037						.fill 11
>3042	02 30					.word w_x3ei
.3044					xt_leave:
>0101						limit       .word ?
>0103						current     .word ?
.3044	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.3046	ba		tsx			tsx
.3047	bd 04 01	lda $0104,x		lda current+1       ; limit := current
.304a	9d 02 01	sta $0102,x		sta limit+1
.304d	bd 03 01	lda $0103,x		lda current
.3050	9d 01 01	sta $0101,x		sta limit
.3053	a6 34		ldx $34			ldx savex
.3055	4c 23 16	jmp $1623		jmp next
.3058					w_x28loopx29:
>3058	06					.byte $06
>3059	28 6c 6f 6f 70 29			.text '(loop)'
>305f						.fill 10
>3069	31 30					.word w_leave
.306b					xt_x28loopx29:
>0101						limit       .word ?
>0103						current     .word ?
.306b	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.306d	ba		tsx			tsx
.306e	fe 03 01	inc $0103,x		inc current         ; Increment current
.3071	d0 03		bne $3076		bne chk_current
.3073	fe 04 01	inc $0104,x		inc current+1
.3076						chk_current:
.3076	38		sec			sec
.3077	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.307a	fd 02 01	sbc $0102,x		sbc limit+1
.307d	50 02		bvc $3081		bvc label1          ; the equality comparison is in the Z flag here
.307f	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.3081						label1:
.3081	30 23		bmi $30a6		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.3083	50 02		bvc $3087		bvc label2          ; the Z flag was affected only if V is 1
.3085	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.3087						label2:
.3087	d0 08		bne $3091		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.3089	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.308c	fd 01 01	sbc $0101,x		sbc limit
.308f	90 15		bcc $30a6		bcc dobranch        ; if current < limit then current < limit
.3091						nobranch:
.3091	8a		txa			txa                 ; Yes: Remove the context from the return stack
.3092	18		clc			clc
.3093	69 04		adc #$04		adc #4
.3095	aa		tax			tax
.3096	9a		txs			txs
.3097	18		clc			clc                 ; And skip over the branch address
.3098	a5 28		lda $28			lda ip
.309a	69 02		adc #$02		adc #2
.309c	85 28		sta $28			sta ip
.309e	a5 29		lda $29			lda ip+1
.30a0	69 00		adc #$00		adc #0
.30a2	85 29		sta $29			sta ip+1
.30a4	80 0e		bra $30b4		bra done
.30a6						dobranch:
.30a6	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.30a8	b2 28		lda ($28)		lda (ip)
.30aa	85 32		sta $32			sta tmp
.30ac	b1 28		lda ($28),y		lda (ip),y
.30ae	85 29		sta $29			sta ip+1
.30b0	a5 32		lda $32			lda tmp
.30b2	85 28		sta $28			sta ip
.30b4						done:
.30b4	a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.30b6	4c 23 16	jmp $1623		jmp next
.30b9					w_x28x2bloopx29:
>30b9	07					.byte $07
>30ba	28 2b 6c 6f 6f 70 29			.text '(+loop)'
>30c1						.fill 9
>30ca	58 30					.word w_x28loopx29
.30cc					xt_x28x2bloopx29:
>0101						limit       .word ?
>0103						current     .word ?
.30cc	b4 03		ldy $03,x		ldy pstack+3,x
.30ce	85 33		sta $33			sta tmp+1
.30d0	b5 02		lda $02,x		lda pstack+2,x
.30d2	85 32		sta $32			sta tmp
.30d4	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.30d6	ba		tsx			tsx
.30d7	18		clc			clc                 ; Increment current by n
.30d8	bd 03 01	lda $0103,x		lda current
.30db	65 32		adc $32			adc tmp
.30dd	9d 03 01	sta $0103,x		sta current
.30e0	bd 04 01	lda $0104,x		lda current+1
.30e3	65 33		adc $33			adc tmp+1
.30e5	9d 04 01	sta $0104,x		sta current+1
.30e8	e6 34		inc $34			inc savex           ; Remove n from the stack
.30ea	e6 34		inc $34			inc savex
.30ec						chk_current:
.30ec	38		sec			sec
.30ed	bd 04 01	lda $0104,x		lda current+1       ; compare high bytes
.30f0	fd 02 01	sbc $0102,x		sbc limit+1
.30f3	50 02		bvc $30f7		bvc label1          ; the equality comparison is in the Z flag here
.30f5	49 80		eor #$80		eor #$80            ; the Z flag is affected here
.30f7						label1:
.30f7	30 23		bmi $311c		bmi dobranch        ; if current+1 < limit+1 then NUM1 < limit
.30f9	50 02		bvc $30fd		bvc label2          ; the Z flag was affected only if V is 1
.30fb	49 80		eor #$80		eor #$80            ; restore the Z flag to the value it had after SBC NUM2H
.30fd						label2:
.30fd	d0 08		bne $3107		bne nobranch        ; if current+1 <> limit+1 then current > limit (so current >= limit)
.30ff	bd 03 01	lda $0103,x		lda current         ; compare low bytes
.3102	fd 01 01	sbc $0101,x		sbc limit
.3105	90 15		bcc $311c		bcc dobranch        ; if current < limit then current < limit
.3107						nobranch:
.3107	8a		txa			txa                 ; Yes: Remove the context from the return stack
.3108	18		clc			clc
.3109	69 04		adc #$04		adc #4
.310b	aa		tax			tax
.310c	9a		txs			txs
.310d	18		clc			clc                 ; And skip over the branch address
.310e	a5 28		lda $28			lda ip
.3110	69 02		adc #$02		adc #2
.3112	85 28		sta $28			sta ip
.3114	a5 29		lda $29			lda ip+1
.3116	69 00		adc #$00		adc #0
.3118	85 29		sta $29			sta ip+1
.311a	80 0e		bra $312a		bra done
.311c						dobranch:
.311c	a0 01		ldy #$01		ldy #1              ; No: ip := branch address
.311e	b2 28		lda ($28)		lda (ip)
.3120	85 32		sta $32			sta tmp
.3122	b1 28		lda ($28),y		lda (ip),y
.3124	85 29		sta $29			sta ip+1
.3126	a5 32		lda $32			lda tmp
.3128	85 28		sta $28			sta ip
.312a						done:
.312a	a6 34		ldx $34			ldx savex           ; Restore the parameter stack pointer
.312c	4c 23 16	jmp $1623		jmp next
.312f					w_i:
>312f	01					.byte $01
>3130	69					.text 'i'
>3131						.fill 15
>3140	b9 30					.word w_x28x2bloopx29
.3142					xt_i:
>0101						limit       .word ?
>0103						current     .word ?
.3142	86 34		stx $34			stx savex           ; Point X to the return stack temporarily
.3144	ba		tsx			tsx
.3145	bc 04 01	ldy $0104,x		ldy current+1       ; Get the value of current
.3148	bd 03 01	lda $0103,x		lda current
.314b	a6 34		ldx $34			ldx savex           ; Restore the PSP
.314d	94 01		sty $01,x		sty pstack+1,x      ; Save the value of current to the stack
.314f	95 00		sta $00,x		sta pstack,x
.3151	ca		dex			dex
.3152	ca		dex			dex
.3153	4c 23 16	jmp $1623		jmp next
.3156					w_x28ofx29:
>3156	04					.byte $04
>3157	28 6f 66 29				.text '(of)'
>315b						.fill 12
>3167	2f 31					.word w_i
.3169					xt_x28ofx29:
.3169	b5 02		lda $02,x		lda pstack+2,x      ; Does n1 == n2?
.316b	d5 04		cmp $04,x		cmp pstack+4,x
.316d	d0 1a		bne $3189		bne not_eq
.316f	b5 03		lda $03,x		lda pstack+3,x
.3171	d5 05		cmp $05,x		cmp pstack+5,x
.3173	d0 14		bne $3189		bne not_eq
.3175	e8		inx			inx
.3176	e8		inx			inx
.3177	e8		inx			inx
.3178	e8		inx			inx
.3179	18		clc			clc                 ; Skip over the branch target
.317a	a5 28		lda $28			lda ip
.317c	69 02		adc #$02		adc #2
.317e	85 28		sta $28			sta ip
.3180	a5 29		lda $29			lda ip+1
.3182	69 00		adc #$00		adc #0
.3184	85 29		sta $29			sta ip+1
.3186	4c 23 16	jmp $1623		jmp next
.3189						not_eq:
.3189	e8		inx			inx                 ; Remove n2 from stack
.318a	e8		inx			inx
.318b	a0 01		ldy #$01		ldy #1              ; Take the branch target
.318d	b2 28		lda ($28)		lda (ip)
.318f	85 32		sta $32			sta tmp
.3191	b1 28		lda ($28),y		lda (ip),y
.3193	85 29		sta $29			sta ip+1
.3195	a5 32		lda $32			lda tmp
.3197	85 28		sta $28			sta ip
.3199	4c 23 16	jmp $1623		jmp next
.319c					w_execute:
>319c	07					.byte $07
>319d	65 78 65 63 75 74 65			.text 'execute'
>31a4						.fill 9
>31ad	56 31					.word w_x28ofx29
.31af					xt_execute:
.31af	b5 02		lda $02,x		lda pstack+2,x      ; wp := xt
.31b1	85 2a		sta $2a			sta wp
.31b3	b5 03		lda $03,x		lda pstack+3,x
.31b5	85 2b		sta $2b			sta wp+1
.31b7	e8		inx			inx                 ; Clean up stack
.31b8	e8		inx			inx
.31b9	6c 2a 00	jmp ($002a)		jmp (wp)            ; jmp xt
.31bc					w_x28vocabularyx29:
>31bc	0c					.byte $0C
>31bd	28 76 6f 63 61 62 75 6c			.text '(vocabulary)'
>31c5	61 72 79 29
>31c9						.fill 4
>31cd	9c 31					.word w_execute
.31cf					xt_x28vocabularyx29:
.31cf	18		clc			clc                 ; tmp := up + user_context
.31d0	a5 2c		lda $2c			lda up
.31d2	69 08		adc #$08		adc #user_context
.31d4	85 32		sta $32			sta tmp
.31d6	a5 2d		lda $2d			lda up+1
.31d8	69 00		adc #$00		adc #0
.31da	85 33		sta $33			sta tmp+1
.31dc	a0 01		ldy #$01		ldy #1              ; (tmp) := wp + 3
.31de	18		clc			clc
.31df	a5 2a		lda $2a			lda wp
.31e1	69 03		adc #$03		adc #3
.31e3	92 32		sta ($32)		sta (tmp)
.31e5	a5 2b		lda $2b			lda wp+1
.31e7	69 00		adc #$00		adc #0
.31e9	91 32		sta ($32),y		sta (tmp),y
.31eb	4c 23 16	jmp $1623		jmp next
.31ee					w_forth:
>31ee	05					.byte $05
>31ef	66 6f 72 74 68				.text 'forth'
>31f4						.fill 11
>31ff	bc 31					.word w_x28vocabularyx29
.3201					xt_forth:
.3201	4c cf 31	jmp $31cf		jmp xt_x28vocabularyx29
>3204	f0 38					.word <>w_cold
.3206					w_x28findx29:
>3206	06					.byte $06
>3207	28 66 69 6e 64 29			.text '(find)'
>320d						.fill 10
>3217	ee 31					.word w_forth
.3219					xt_x28findx29:
.3219	b5 03		lda $03,x		lda pstack+3,x          ; src_ptr = dictionary name
.321b	85 25		sta $25			sta src_ptr+1
.321d	b5 02		lda $02,x		lda pstack+2,x
.321f	85 24		sta $24			sta src_ptr
.3221	b5 05		lda $05,x		lda pstack+5,x          ; dst_ptr = word to find
.3223	85 27		sta $27			sta dst_ptr+1
.3225	b5 04		lda $04,x		lda pstack+4,x
.3227	85 26		sta $26			sta dst_ptr
.3229						loop:
.3229	a5 24		lda $24			lda src_ptr             ; Check to see if src_ptr = NULL
.322b	d0 0d		bne $323a		bne not_eod
.322d	a5 25		lda $25			lda src_ptr+1
.322f	d0 09		bne $323a		bne not_eod
.3231	e8		inx			inx                     ; Clean up the stack
.3232	e8		inx			inx
.3233	74 03		stz $03,x		stz pstack+3,x          ; And return 0
.3235	74 02		stz $02,x		stz pstack+2,x
.3237	4c 23 16	jmp $1623		jmp next
.323a						not_eod:
.323a	b2 24		lda ($24)		lda (src_ptr)           ; Get the size of the word in the dictionary
.323c	29 3f		and #$3f		and #$3f                ; Filter out the flags
.323e	d2 26		cmp ($26)		cmp (dst_ptr)           ; Check it against the word to search
.3240	f0 1b		beq $325d		beq chk_chars           ; If they match, check the characters
.3242						next_word:
.3242	18		clc			clc                     ; Move src_ptr to the link field
.3243	a5 24		lda $24			lda src_ptr
.3245	69 11		adc #$11		adc #17
.3247	85 24		sta $24			sta src_ptr
.3249	a5 25		lda $25			lda src_ptr+1
.324b	69 00		adc #$00		adc #0
.324d	85 25		sta $25			sta src_ptr+1
.324f	a0 01		ldy #$01		ldy #1                  ; Follow the link to the next word in the dictionary
.3251	b2 24		lda ($24)		lda (src_ptr)
.3253	48		pha			pha
.3254	b1 24		lda ($24),y		lda (src_ptr),y
.3256	85 25		sta $25			sta src_ptr+1
.3258	68		pla			pla
.3259	85 24		sta $24			sta src_ptr
.325b	80 cc		bra $3229		bra loop                ; And check that word
.325d						chk_chars:
.325d	a8		tay			tay                     ; y := index of last character in word
.325e	88		dey			dey
.325f						char_loop:
.325f	b1 24		lda ($24),y		lda (src_ptr),y         ; Check the yth character
.3261	d1 26		cmp ($26),y		cmp (dst_ptr),y
.3263	d0 dd		bne $3242		bne next_word           ; If they are not equal, go to the next word in the dictionary
.3265	88		dey			dey                     ; Move to the previous character in the words
.3266	c0 ff		cpy #$ff		cpy #$ff                ; Did we just check the first character?
.3268	d0 f5		bne $325f		bne char_loop           ; No: check this one
.326a	ca		dex			dex                     ; Make room for all the return values
.326b	ca		dex			dex
.326c	a9 01		lda #$01		lda #1                  ; 1 at top of stack
.326e	74 03		stz $03,x		stz pstack+3,x
.3270	95 02		sta $02,x		sta pstack+2,x
.3272	b2 26		lda ($26)		lda (dst_ptr)           ; Then the length of the word
.3274	74 05		stz $05,x		stz pstack+5,x
.3276	95 04		sta $04,x		sta pstack+4,x
.3278	18		clc			clc                     ; Then the pfa pointer
.3279	a5 24		lda $24			lda src_ptr
.327b	69 16		adc #$16		adc #17+5               ; Skip size, name, link, and code cfa
.327d	95 06		sta $06,x		sta pstack+6,x
.327f	a5 25		lda $25			lda src_ptr+1
.3281	69 00		adc #$00		adc #0
.3283	95 07		sta $07,x		sta pstack+7,x
.3285	4c 23 16	jmp $1623		jmp next
.3288					w_bs:
>3288	02					.byte $02
>3289	62 73					.text 'bs'
>328b						.fill 14
>3299	06 32					.word w_x28findx29
.329b					xt_bs:
.329b	4c 2a 2f	jmp $2f2a		jmp xt_x28constantx29
>329e	08 00					.word 8
.32a0					w_nl:
>32a0	02					.byte $02
>32a1	6e 6c					.text 'nl'
>32a3						.fill 14
>32b1	88 32					.word w_bs
.32b3					xt_nl:
.32b3	4c 2a 2f	jmp $2f2a		jmp xt_x28constantx29
>32b6	0d 00					.word 13
.32b8					w_bl:
>32b8	02					.byte $02
>32b9	62 6c					.text 'bl'
>32bb						.fill 14
>32c9	a0 32					.word w_nl
.32cb					xt_bl:
.32cb	4c 2a 2f	jmp $2f2a		jmp xt_x28constantx29
>32ce	20 00					.word 32
.32d0					w_s0:
>32d0	02					.byte $02
>32d1	73 30					.text 's0'
>32d3						.fill 14
>32e1	b8 32					.word w_bl
.32e3					xt_s0:
.32e3	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>32e6	00 00					.word 0
.32e8					w_r0:
>32e8	02					.byte $02
>32e9	72 30					.text 'r0'
>32eb						.fill 14
>32f9	d0 32					.word w_s0
.32fb					xt_r0:
.32fb	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>32fe	02 00					.word 2
.3300					w_base:
>3300	04					.byte $04
>3301	62 61 73 65				.text 'base'
>3305						.fill 12
>3311	e8 32					.word w_r0
.3313					xt_base:
.3313	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>3316	04 00					.word 4
.3318					w_state:
>3318	05					.byte $05
>3319	73 74 61 74 65				.text 'state'
>331e						.fill 11
>3329	00 33					.word w_base
.332b					xt_state:
.332b	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>332e	06 00					.word 6
.3330					w_context:
>3330	07					.byte $07
>3331	63 6f 6e 74 65 78 74			.text 'context'
>3338						.fill 9
>3341	18 33					.word w_state
.3343					xt_context:
.3343	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>3346	08 00					.word 8
.3348					w_current:
>3348	07					.byte $07
>3349	63 75 72 72 65 6e 74			.text 'current'
>3350						.fill 9
>3359	30 33					.word w_context
.335b					xt_current:
.335b	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>335e	0a 00					.word 10
.3360					w_dp:
>3360	02					.byte $02
>3361	64 70					.text 'dp'
>3363						.fill 14
>3371	48 33					.word w_current
.3373					xt_dp:
.3373	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>3376	0c 00					.word 12
.3378					w_x3ein:
>3378	03					.byte $03
>3379	3e 69 6e				.text '>in'
>337c						.fill 13
>3389	60 33					.word w_dp
.338b					xt_x3ein:
.338b	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>338e	0e 00					.word 14
.3390					w_tib:
>3390	03					.byte $03
>3391	74 69 62				.text 'tib'
>3394						.fill 13
>33a1	78 33					.word w_x3ein
.33a3					xt_tib:
.33a3	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>33a6	10 00					.word 16
.33a8					w_sourcex2did:
>33a8	09					.byte $09
>33a9	73 6f 75 72 63 65 2d 69			.text 'source-id'
>33b1	64
>33b2						.fill 7
>33b9	90 33					.word w_tib
.33bb					xt_sourcex2did:
.33bb	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>33be	12 00					.word 18
.33c0					w_blk:
>33c0	03					.byte $03
>33c1	62 6c 6b				.text 'blk'
>33c4						.fill 13
>33d1	a8 33					.word w_sourcex2did
.33d3					xt_blk:
.33d3	4c 65 2f	jmp $2f65		jmp xt_x28userx29
>33d6	14 00					.word 20
.33d8					w_x3fdup:
>33d8	04					.byte $04
>33d9	3f 64 75 70				.text '?dup'
>33dd						.fill 12
>33e9	c0 33					.word w_blk
.33eb					xt_x3fdup:
.33eb	4c 10 16	jmp $1610		jmp i_enter
>33ee	e4 28					.word xt_dup
>33f0	b1 2f					.word xt_x28branch0x29
>33f2	f6 33					.word l_136
>33f4	e4 28					.word xt_dup
.33f6					l_136:
>33f6	08 16					.word i_exit
.33f8					w_x3c:
>33f8	01					.byte $01
>33f9	3c					.text '<'
>33fa						.fill 15
>3409	d8 33					.word w_x3fdup
.340b					xt_x3c:
.340b	4c 10 16	jmp $1610		jmp i_enter
>340e	46 2c					.word xt_x2d
>3410	86 2e					.word xt_0x3c
>3412	08 16					.word i_exit
.3414					w_x3e:
>3414	01					.byte $01
>3415	3e					.text '>'
>3416						.fill 15
>3425	f8 33					.word w_x3c
.3427					xt_x3e:
.3427	4c 10 16	jmp $1610		jmp i_enter
>342a	46 2c					.word xt_x2d
>342c	d8 2e					.word xt_0x3e
>342e	08 16					.word i_exit
.3430					w_x3d:
>3430	01					.byte $01
>3431	3d					.text '='
>3432						.fill 15
>3441	14 34					.word w_x3e
.3443					xt_x3d:
.3443	4c 10 16	jmp $1610		jmp i_enter
>3446	46 2c					.word xt_x2d
>3448	ad 2e					.word xt_0x3d
>344a	08 16					.word i_exit
.344c					w_x2f:
>344c	01					.byte $01
>344d	2f					.text '/'
>344e						.fill 15
>345d	30 34					.word w_x3d
.345f					xt_x2f:
.345f	4c 10 16	jmp $1610		jmp i_enter
>3462	ed 2c					.word xt_x2fmod
>3464	04 29					.word xt_swap
>3466	cc 28					.word xt_drop
>3468	08 16					.word i_exit
.346a					w_mod:
>346a	03					.byte $03
>346b	6d 6f 64				.text 'mod'
>346e						.fill 13
>347b	4c 34					.word w_x2f
.347d					xt_mod:
.347d	4c 10 16	jmp $1610		jmp i_enter
>3480	ed 2c					.word xt_x2fmod
>3482	cc 28					.word xt_drop
>3484	08 16					.word i_exit
.3486					w_abs:
>3486	03					.byte $03
>3487	61 62 73				.text 'abs'
>348a						.fill 13
>3497	6a 34					.word w_mod
.3499					xt_abs:
.3499	4c 10 16	jmp $1610		jmp i_enter
>349c	e4 28					.word xt_dup
>349e	86 2e					.word xt_0x3c
>34a0	b1 2f					.word xt_x28branch0x29
>34a2	aa 34					.word l_175
>34a4	22 18					.word xt_0
>34a6	04 29					.word xt_swap
>34a8	46 2c					.word xt_x2d
.34aa					l_175:
>34aa	08 16					.word i_exit
.34ac					w_max:
>34ac	03					.byte $03
>34ad	6d 61 78				.text 'max'
>34b0						.fill 13
>34bd	86 34					.word w_abs
.34bf					xt_max:
.34bf	4c 10 16	jmp $1610		jmp i_enter
>34c2	2a 29					.word xt_over
>34c4	2a 29					.word xt_over
>34c6	0b 34					.word xt_x3c
>34c8	b1 2f					.word xt_x28branch0x29
>34ca	d4 34					.word l_176
>34cc	2a 29					.word xt_over
>34ce	cc 28					.word xt_drop
>34d0	8d 2f					.word xt_x28branchx29
>34d2	d6 34					.word l_177
.34d4					l_176:
>34d4	cc 28					.word xt_drop
.34d6					l_177:
>34d6	08 16					.word i_exit
.34d8					w_min:
>34d8	03					.byte $03
>34d9	6d 69 6e				.text 'min'
>34dc						.fill 13
>34e9	ac 34					.word w_max
.34eb					xt_min:
.34eb	4c 10 16	jmp $1610		jmp i_enter
>34ee	2a 29					.word xt_over
>34f0	2a 29					.word xt_over
>34f2	27 34					.word xt_x3e
>34f4	b1 2f					.word xt_x28branch0x29
>34f6	00 35					.word l_184
>34f8	2a 29					.word xt_over
>34fa	cc 28					.word xt_drop
>34fc	8d 2f					.word xt_x28branchx29
>34fe	02 35					.word l_185
.3500					l_184:
>3500	cc 28					.word xt_drop
.3502					l_185:
>3502	08 16					.word i_exit
.3504					w_rot:
>3504	03					.byte $03
>3505	72 6f 74				.text 'rot'
>3508						.fill 13
>3515	d8 34					.word w_min
.3517					xt_rot:
.3517	4c 10 16	jmp $1610		jmp i_enter
>351a	4a 29					.word xt_x3er
>351c	04 29					.word xt_swap
>351e	68 29					.word xt_rx3e
>3520	04 29					.word xt_swap
>3522	08 16					.word i_exit
.3524					w_2dup:
>3524	04					.byte $04
>3525	32 64 75 70				.text '2dup'
>3529						.fill 12
>3535	04 35					.word w_rot
.3537					xt_2dup:
.3537	4c 10 16	jmp $1610		jmp i_enter
>353a	2a 29					.word xt_over
>353c	2a 29					.word xt_over
>353e	08 16					.word i_exit
.3540					w_2drop:
>3540	05					.byte $05
>3541	32 64 72 6f 70				.text '2drop'
>3546						.fill 11
>3551	24 35					.word w_2dup
.3553					xt_2drop:
.3553	4c 10 16	jmp $1610		jmp i_enter
>3556	cc 28					.word xt_drop
>3558	cc 28					.word xt_drop
>355a	08 16					.word i_exit
.355c					w_lfa:
>355c	03					.byte $03
>355d	6c 66 61				.text 'lfa'
>3560						.fill 13
>356d	40 35					.word w_2drop
.356f					xt_lfa:
.356f	4c 10 16	jmp $1610		jmp i_enter
>3572	b6 18					.word xt_x28literalx29
>3574	05 00					.word 5
>3576	46 2c					.word xt_x2d
>3578	08 16					.word i_exit
.357a					w_cfa:
>357a	03					.byte $03
>357b	63 66 61				.text 'cfa'
>357e						.fill 13
>358b	5c 35					.word w_lfa
.358d					xt_cfa:
.358d	4c 10 16	jmp $1610		jmp i_enter
>3590	b6 18					.word xt_x28literalx29
>3592	03 00					.word 3
>3594	46 2c					.word xt_x2d
>3596	08 16					.word i_exit
.3598					w_nfa:
>3598	03					.byte $03
>3599	6e 66 61				.text 'nfa'
>359c						.fill 13
>35a9	7a 35					.word w_cfa
.35ab					xt_nfa:
.35ab	4c 10 16	jmp $1610		jmp i_enter
>35ae	b6 18					.word xt_x28literalx29
>35b0	16 00					.word 22
>35b2	46 2c					.word xt_x2d
>35b4	08 16					.word i_exit
.35b6					w_pfa:
>35b6	03					.byte $03
>35b7	70 66 61				.text 'pfa'
>35ba						.fill 13
>35c7	98 35					.word w_nfa
.35c9					xt_pfa:
.35c9	4c 10 16	jmp $1610		jmp i_enter
>35cc	b6 18					.word xt_x28literalx29
>35ce	16 00					.word 22
>35d0	21 2c					.word xt_x2b
>35d2	08 16					.word i_exit
.35d4					w_here:
>35d4	04					.byte $04
>35d5	68 65 72 65				.text 'here'
>35d9						.fill 12
>35e5	b6 35					.word w_pfa
.35e7					xt_here:
.35e7	4c 10 16	jmp $1610		jmp i_enter
>35ea	73 33					.word xt_dp
>35ec	e9 29					.word xt_x40
>35ee	08 16					.word i_exit
.35f0					w_allot:
>35f0	05					.byte $05
>35f1	61 6c 6c 6f 74				.text 'allot'
>35f6						.fill 11
>3601	d4 35					.word w_here
.3603					xt_allot:
.3603	4c 10 16	jmp $1610		jmp i_enter
>3606	73 33					.word xt_dp
>3608	86 2a					.word xt_x2bx21
>360a	08 16					.word i_exit
.360c					w_x2c:
>360c	01					.byte $01
>360d	2c					.text ','
>360e						.fill 15
>361d	f0 35					.word w_allot
.361f					xt_x2c:
.361f	4c 10 16	jmp $1610		jmp i_enter
>3622	e7 35					.word xt_here
>3624	bd 29					.word xt_x21
>3626	5c 18					.word xt_2
>3628	03 36					.word xt_allot
>362a	08 16					.word i_exit
.362c					w_cx2c:
>362c	02					.byte $02
>362d	63 2c					.text 'c,'
>362f						.fill 14
>363d	0c 36					.word w_x2c
.363f					xt_cx2c:
.363f	4c 10 16	jmp $1610		jmp i_enter
>3642	e7 35					.word xt_here
>3644	11 2a					.word xt_cx21
>3646	3e 18					.word xt_1
>3648	03 36					.word xt_allot
>364a	08 16					.word i_exit
.364c					w_definitions:
>364c	0b					.byte $0B
>364d	64 65 66 69 6e 69 74 69			.text 'definitions'
>3655	6f 6e 73
>3658						.fill 5
>365d	2c 36					.word w_cx2c
.365f					xt_definitions:
.365f	4c 10 16	jmp $1610		jmp i_enter
>3662	43 33					.word xt_context
>3664	e9 29					.word xt_x40
>3666	5b 33					.word xt_current
>3668	bd 29					.word xt_x21
>366a	08 16					.word i_exit
.366c					w_latest:
>366c	06					.byte $06
>366d	6c 61 74 65 73 74			.text 'latest'
>3673						.fill 10
>367d	4c 36					.word w_definitions
.367f					xt_latest:
.367f	4c 10 16	jmp $1610		jmp i_enter
>3682	5b 33					.word xt_current
>3684	e9 29					.word xt_x40
>3686	e9 29					.word xt_x40
>3688	08 16					.word i_exit
.368a					w_count:
>368a	05					.byte $05
>368b	63 6f 75 6e 74				.text 'count'
>3690						.fill 11
>369b	6c 36					.word w_latest
.369d					xt_count:
.369d	4c 10 16	jmp $1610		jmp i_enter
>36a0	e4 28					.word xt_dup
>36a2	78 2d					.word xt_1x2b
>36a4	04 29					.word xt_swap
>36a6	2f 2a					.word xt_cx40
>36a8	08 16					.word i_exit
.36aa					w_type:
>36aa	04					.byte $04
>36ab	74 79 70 65				.text 'type'
>36af						.fill 12
>36bb	8a 36					.word w_count
.36bd					xt_type:
.36bd	4c 10 16	jmp $1610		jmp i_enter
>36c0	eb 33					.word xt_x3fdup
>36c2	b1 2f					.word xt_x28branch0x29
>36c4	e8 36					.word l_198
>36c6	2a 29					.word xt_over
>36c8	21 2c					.word xt_x2b
>36ca	04 29					.word xt_swap
>36cc	ee 2f					.word xt_x28dox29
.36ce					l_199:
>36ce	42 31					.word xt_i
>36d0	2f 2a					.word xt_cx40
>36d2	eb 33					.word xt_x3fdup
>36d4	b1 2f					.word xt_x28branch0x29
>36d6	de 36					.word l_201
>36d8	96 17					.word xt_emit
>36da	8d 2f					.word xt_x28branchx29
>36dc	e0 36					.word l_202
.36de					l_201:
>36de	44 30					.word xt_leave
.36e0					l_202:
>36e0	6b 30					.word xt_x28loopx29
>36e2	ce 36					.word l_199
.36e4					l_200:
>36e4	8d 2f					.word xt_x28branchx29
>36e6	ea 36					.word l_203
.36e8					l_198:
>36e8	cc 28					.word xt_drop
.36ea					l_203:
>36ea	08 16					.word i_exit
.36ec					w_space:
>36ec	05					.byte $05
>36ed	73 70 61 63 65				.text 'space'
>36f2						.fill 11
>36fd	aa 36					.word w_type
.36ff					xt_space:
.36ff	4c 10 16	jmp $1610		jmp i_enter
>3702	b6 18					.word xt_x28literalx29
>3704	20 00					.word 32
>3706	96 17					.word xt_emit
>3708	08 16					.word i_exit
.370a					w_spaces:
>370a	06					.byte $06
>370b	73 70 61 63 65 73			.text 'spaces'
>3711						.fill 10
>371b	ec 36					.word w_space
.371d					xt_spaces:
.371d	4c 10 16	jmp $1610		jmp i_enter
>3720	22 18					.word xt_0
>3722	ee 2f					.word xt_x28dox29
.3724					l_204:
>3724	ff 36					.word xt_space
>3726	6b 30					.word xt_x28loopx29
>3728	24 37					.word l_204
.372a					l_205:
>372a	08 16					.word i_exit
.372c					w_expect:
>372c	06					.byte $06
>372d	65 78 70 65 63 74			.text 'expect'
>3733						.fill 10
>373d	0a 37					.word w_spaces
.373f					xt_expect:
.373f	4c 10 16	jmp $1610		jmp i_enter
>3742	2a 29					.word xt_over
>3744	21 2c					.word xt_x2b
>3746	2a 29					.word xt_over
>3748	ee 2f					.word xt_x28dox29
.374a					l_206:
>374a	e0 17					.word xt_key
>374c	9b 32					.word xt_bs
>374e	69 31					.word xt_x28ofx29
>3750	7c 37					.word l_209
>3752	e4 28					.word xt_dup
>3754	42 31					.word xt_i
>3756	43 34					.word xt_x3d
>3758	64 2e					.word xt_not
>375a	b1 2f					.word xt_x28branch0x29
>375c	78 37					.word l_210
>375e	9b 32					.word xt_bs
>3760	96 17					.word xt_emit
>3762	cb 32					.word xt_bl
>3764	96 17					.word xt_emit
>3766	9b 32					.word xt_bs
>3768	96 17					.word xt_emit
>376a	22 18					.word xt_0
>376c	42 31					.word xt_i
>376e	b7 2d					.word xt_1x2d
>3770	11 2a					.word xt_cx21
>3772	42 31					.word xt_i
>3774	d5 2d					.word xt_2x2d
>3776	15 30					.word xt_x3ei
.3778					l_210:
>3778	8d 2f					.word xt_x28branchx29
>377a	a2 37					.word l_208
.377c					l_209:
>377c	b3 32					.word xt_nl
>377e	69 31					.word xt_x28ofx29
>3780	8e 37					.word l_211
>3782	22 18					.word xt_0
>3784	42 31					.word xt_i
>3786	11 2a					.word xt_cx21
>3788	44 30					.word xt_leave
>378a	8d 2f					.word xt_x28branchx29
>378c	a2 37					.word l_208
.378e					l_211:
>378e	e4 28					.word xt_dup
>3790	e4 28					.word xt_dup
>3792	42 31					.word xt_i
>3794	11 2a					.word xt_cx21
>3796	22 18					.word xt_0
>3798	42 31					.word xt_i
>379a	78 2d					.word xt_1x2b
>379c	11 2a					.word xt_cx21
>379e	96 17					.word xt_emit
>37a0	cc 28					.word xt_drop
.37a2					l_208:
>37a2	6b 30					.word xt_x28loopx29
>37a4	4a 37					.word l_206
.37a6					l_207:
>37a6	cc 28					.word xt_drop
>37a8	08 16					.word i_exit
.37aa					w_query:
>37aa	05					.byte $05
>37ab	71 75 65 72 79				.text 'query'
>37b0						.fill 11
>37bb	2c 37					.word w_expect
.37bd					xt_query:
.37bd	4c 10 16	jmp $1610		jmp i_enter
>37c0	a3 33					.word xt_tib
>37c2	e9 29					.word xt_x40
>37c4	b6 18					.word xt_x28literalx29
>37c6	50 00					.word 80
>37c8	3f 37					.word xt_expect
>37ca	22 18					.word xt_0
>37cc	8b 33					.word xt_x3ein
>37ce	bd 29					.word xt_x21
>37d0	08 16					.word i_exit
.37d2					w_erase:
>37d2	05					.byte $05
>37d3	65 72 61 73 65				.text 'erase'
>37d8						.fill 11
>37e3	aa 37					.word w_query
.37e5					xt_erase:
.37e5	4c 10 16	jmp $1610		jmp i_enter
>37e8	22 18					.word xt_0
>37ea	4b 2a					.word xt_fill
>37ec	08 16					.word i_exit
.37ee					w_blanks:
>37ee	06					.byte $06
>37ef	62 6c 61 6e 6b 73			.text 'blanks'
>37f5						.fill 10
>37ff	d2 37					.word w_erase
.3801					xt_blanks:
.3801	4c 10 16	jmp $1610		jmp i_enter
>3804	cb 32					.word xt_bl
>3806	4b 2a					.word xt_fill
>3808	08 16					.word i_exit
.380a					w_word:
>380a	04					.byte $04
>380b	77 6f 72 64				.text 'word'
>380f						.fill 12
>381b	ee 37					.word w_blanks
.381d					xt_word:
.381d	4c 10 16	jmp $1610		jmp i_enter
>3820	a3 33					.word xt_tib
>3822	e9 29					.word xt_x40
>3824	8b 33					.word xt_x3ein
>3826	e9 29					.word xt_x40
>3828	21 2c					.word xt_x2b
>382a	04 29					.word xt_swap
>382c	b7 2a					.word xt_enclose
>382e	22 18					.word xt_0
>3830	e7 35					.word xt_here
>3832	bd 29					.word xt_x21
>3834	8b 33					.word xt_x3ein
>3836	86 2a					.word xt_x2bx21
>3838	2a 29					.word xt_over
>383a	46 2c					.word xt_x2d
>383c	4a 29					.word xt_x3er
>383e	86 29					.word xt_r
>3840	e7 35					.word xt_here
>3842	11 2a					.word xt_cx21
>3844	21 2c					.word xt_x2b
>3846	e7 35					.word xt_here
>3848	78 2d					.word xt_1x2b
>384a	68 29					.word xt_rx3e
>384c	2d 2b					.word xt_cmove
>384e	08 16					.word i_exit
.3850					w_x2dfind:
>3850	05					.byte $05
>3851	2d 66 69 6e 64				.text '-find'
>3856						.fill 11
>3861	0a 38					.word w_word
.3863					xt_x2dfind:
.3863	4c 10 16	jmp $1610		jmp i_enter
>3866	cb 32					.word xt_bl
>3868	1d 38					.word xt_word
>386a	e7 35					.word xt_here
>386c	43 33					.word xt_context
>386e	e9 29					.word xt_x40
>3870	e9 29					.word xt_x40
>3872	19 32					.word xt_x28findx29
>3874	e4 28					.word xt_dup
>3876	ad 2e					.word xt_0x3d
>3878	b1 2f					.word xt_x28branch0x29
>387a	84 38					.word l_212
>387c	cc 28					.word xt_drop
>387e	e7 35					.word xt_here
>3880	7f 36					.word xt_latest
>3882	19 32					.word xt_x28findx29
.3884					l_212:
>3884	08 16					.word i_exit
.3886					w_initrandom:
>3886	0a					.byte $0A
>3887	69 6e 69 74 72 61 6e 64			.text 'initrandom'
>388f	6f 6d
>3891						.fill 6
>3897	50 38					.word w_x2dfind
.3899					xt_initrandom:
.3899	4c 10 16	jmp $1610		jmp i_enter
>389c	3e 18					.word xt_1
>389e	b6 18					.word xt_x28literalx29
>38a0	a6 d6					.word 54950
>38a2	11 2a					.word xt_cx21
>38a4	08 16					.word i_exit
.38a6					w_random:
>38a6	06					.byte $06
>38a7	72 61 6e 64 6f 6d			.text 'random'
>38ad						.fill 10
>38b7	86 38					.word w_initrandom
.38b9					xt_random:
.38b9	4c 10 16	jmp $1610		jmp i_enter
>38bc	b6 18					.word xt_x28literalx29
>38be	a4 d6					.word 54948
>38c0	e9 29					.word xt_x40
>38c2	08 16					.word i_exit
.38c4					w_maze:
>38c4	04					.byte $04
>38c5	6d 61 7a 65				.text 'maze'
>38c9						.fill 12
>38d5	a6 38					.word w_random
.38d7					xt_maze:
.38d7	4c 10 16	jmp $1610		jmp i_enter
>38da	99 38					.word xt_initrandom
.38dc					l_213:
>38dc	b9 38					.word xt_random
>38de	3e 18					.word xt_1
>38e0	f8 2d					.word xt_and
>38e2	b6 18					.word xt_x28literalx29
>38e4	cd 00					.word 205
>38e6	21 2c					.word xt_x2b
>38e8	96 17					.word xt_emit
>38ea	8d 2f					.word xt_x28branchx29
>38ec	dc 38					.word l_213
.38ee					l_214:
>38ee	08 16					.word i_exit
.38f0					w_cold:
>38f0	04					.byte $04
>38f1	63 6f 6c 64				.text 'cold'
>38f5						.fill 12
>3901	c4 38					.word w_maze
.3903					xt_cold:
.3903	4c 10 16	jmp $1610		jmp i_enter
>3906	01 32					.word xt_forth
>3908	5f 36					.word xt_definitions
>390a	22 18					.word xt_0
>390c	d3 33					.word xt_blk
>390e	bd 29					.word xt_x21
>3910	b6 18					.word xt_x28literalx29
>3912	00 40					.word 16384
>3914	73 33					.word xt_dp
>3916	bd 29					.word xt_x21
>3918	b6 18					.word xt_x28literalx29
>391a	00 bf					.word 48896
>391c	a3 33					.word xt_tib
>391e	bd 29					.word xt_x21
>3920	b6 18					.word xt_x28literalx29
>3922	28 39					.word l_215
>3924	8d 2f					.word xt_x28branchx29
>3926	47 39					.word l_216
.3928					l_215:
>3928	1e 57 65 6c 63 6f 6d 65			.ptext "Welcome to MetaForth v00.00.00"
>3930	20 74 6f 20 4d 65 74 61 46 6f 72 74 68 20 76 30
>3940	30 2e 30 30 2e 30 30
.3947					l_216:
>3947	9d 36					.word xt_count
>3949	bd 36					.word xt_type
>394b	05 18					.word xt_cr
>394d	22 18					.word xt_0
>394f	e7 35					.word xt_here
>3951	bd 29					.word xt_x21
.3953					l_217:
>3953	e7 35					.word xt_here
>3955	e9 29					.word xt_x40
>3957	ad 2e					.word xt_0x3d
>3959	b1 2f					.word xt_x28branch0x29
>395b	72 39					.word l_219
>395d	05 18					.word xt_cr
>395f	b6 18					.word xt_x28literalx29
>3961	67 39					.word l_220
>3963	8d 2f					.word xt_x28branchx29
>3965	6a 39					.word l_221
.3967					l_220:
>3967	02 6f 6b				.ptext "ok"
.396a					l_221:
>396a	9d 36					.word xt_count
>396c	bd 36					.word xt_type
>396e	05 18					.word xt_cr
>3970	bd 37					.word xt_query
.3972					l_219:
>3972	63 38					.word xt_x2dfind
>3974	e4 28					.word xt_dup
>3976	ad 2e					.word xt_0x3d
>3978	b1 2f					.word xt_x28branch0x29
>397a	b8 39					.word l_222
>397c	cc 28					.word xt_drop
>397e	e7 35					.word xt_here
>3980	e9 29					.word xt_x40
>3982	ad 2e					.word xt_0x3d
>3984	64 2e					.word xt_not
>3986	b1 2f					.word xt_x28branch0x29
>3988	b4 39					.word l_223
>398a	05 18					.word xt_cr
>398c	b6 18					.word xt_x28literalx29
>398e	94 39					.word l_224
>3990	8d 2f					.word xt_x28branchx29
>3992	a4 39					.word l_225
.3994					l_224:
>3994	0f 57 6f 72 64 20 6e 6f			.ptext "Word not found:"
>399c	74 20 66 6f 75 6e 64 3a
.39a4					l_225:
>39a4	9d 36					.word xt_count
>39a6	bd 36					.word xt_type
>39a8	cb 32					.word xt_bl
>39aa	96 17					.word xt_emit
>39ac	e7 35					.word xt_here
>39ae	9d 36					.word xt_count
>39b0	bd 36					.word xt_type
>39b2	05 18					.word xt_cr
.39b4					l_223:
>39b4	8d 2f					.word xt_x28branchx29
>39b6	dd 39					.word l_226
.39b8					l_222:
>39b8	cc 28					.word xt_drop
>39ba	cc 28					.word xt_drop
>39bc	05 18					.word xt_cr
>39be	b6 18					.word xt_x28literalx29
>39c0	c6 39					.word l_227
>39c2	8d 2f					.word xt_x28branchx29
>39c4	cd 39					.word l_228
.39c6					l_227:
>39c6	06 46 6f 75 6e 64 3a			.ptext "Found:"
.39cd					l_228:
>39cd	9d 36					.word xt_count
>39cf	bd 36					.word xt_type
>39d1	cb 32					.word xt_bl
>39d3	96 17					.word xt_emit
>39d5	ab 35					.word xt_nfa
>39d7	9d 36					.word xt_count
>39d9	bd 36					.word xt_type
>39db	05 18					.word xt_cr
.39dd					l_226:
>39dd	8d 2f					.word xt_x28branchx29
>39df	53 39					.word l_217
.39e1					l_218:
>39e1	08 16					.word i_exit

;******  Processing file: mf_post_65c02.asm

.39e3					endcode:

;******  Return to file: forth.asm


;******  End of listing
